
Task8Test4.elf:     file format elf32-littlenios2
Task8Test4.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800184

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000cae0 memsz 0x0000cae0 flags r-x
    LOAD off    0x0000db00 vaddr 0x0080cb00 paddr 0x0080e55c align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x0000ffb8 vaddr 0x0080ffb8 paddr 0x0080ffb8 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c610  00800184  00800184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000036c  0080c794  0080c794  0000d794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0080cb00  0080e55c  0000db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0080ffb8  0080ffb8  0000ffb8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000f55c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e18  00000000  00000000  0000f588  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000153d  00000000  00000000  000103a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023acb  00000000  00000000  000118dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008fa9  00000000  00000000  000353a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015779  00000000  00000000  0003e351  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018c8  00000000  00000000  00053acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002dff  00000000  00000000  00055394  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000de2e  00000000  00000000  00058193  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00065fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000cc8  00000000  00000000  00065fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00069db2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00069db5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00069db8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00069db9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00069dba  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00069dbe  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00069dc2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00069dc6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00069dcf  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00069dd8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00069de1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00069df3  2**0
                  CONTENTS, READONLY
 29 .jdi          00004fae  00000000  00000000  00069e14  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003652a  00000000  00000000  0006edc2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800184 l    d  .text	00000000 .text
0080c794 l    d  .rodata	00000000 .rodata
0080cb00 l    d  .rwdata	00000000 .rwdata
0080ffb8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001bc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
008004f4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
0080cb00 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008016f4 l     F .text	00000058 __sprint_r
0080c95e l     O .rodata	00000010 blanks.3452
0080c94e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00803758 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00804f24 l     F .text	000001f0 print_e
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805c0c l     F .text	00000058 std
00805d18 l     F .text	00000008 __fp_lock
00805d20 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0080e528 l     O .rwdata	00000004 charset
0080c990 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080cad8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080aa54 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080adf0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080e54c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080d4bc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080b500 l     F .text	00000058 altera_avalon_jtag_uart_timeout
0080b5d8 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080baa8 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080c5c8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
008079c8 g     F .text	00000094 _mprec_log10
00807ab4 g     F .text	00000088 __any_on
0080924c g     F .text	00000070 _isatty_r
0080cab0 g     O .rodata	00000028 __mprec_tinytens
0080b05c g     F .text	00000060 alt_main
00808e8c g     F .text	0000008c strcpy
008015cc g     F .text	000000a0 _puts_r
00810014 g     O .bss	00000100 alt_irq
008092bc g     F .text	00000078 _lseek_r
0080e55c g       *ABS*	00000000 __flash_rwdata_start
0080a554 g     F .text	00000088 __eqdf2
008102a4 g       *ABS*	00000000 __alt_heap_start
00801554 g     F .text	00000044 printf
00808c8c g     F .text	00000068 __sseek
00805c74 g     F .text	000000a4 __sinit
00805834 g     F .text	000001a8 fcvtbuf
0080694c g     F .text	00000084 _setlocale_r
00805d74 g     F .text	00000068 __sfmoreglue
0080b0c0 g     F .text	00000004 __malloc_unlock
00807444 g     F .text	000000e0 memmove
00805d64 g     F .text	00000010 _cleanup
00807b3c g     F .text	000000bc _Balloc
0080b0c4 g     F .text	00000014 alt_putstr
0080a664 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
0080b26c g     F .text	00000080 times
00800020 g       *ABS*	00000000 __flash_exceptions_start
008091d8 g     F .text	00000074 _fstat_r
0080ffd0 g     O .bss	00000004 errno
008009f8 g     F .text	00000038 __make_dp
00800d80 g     F .text	0000002c __make_fp
0080ffd8 g     O .bss	00000004 alt_argv
0081651c g       *ABS*	00000000 _gp
0080d33c g     O .rwdata	00000180 alt_fd_list
0080c168 g     F .text	00000094 alt_find_dev
008073a4 g     F .text	000000a0 memcpy
00805d58 g     F .text	0000000c _cleanup_r
0080a884 g     F .text	000000f8 __floatsidf
0080bdc0 g     F .text	00000104 alt_io_redirect
0080a774 g     F .text	00000088 __ltdf2
0080c794 g       *ABS*	00000000 __DTOR_END__
0080166c g     F .text	00000014 puts
00807918 g     F .text	000000b0 __ratio
0080b768 g     F .text	0000016c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00801598 g     F .text	00000034 _printf_r
0080ab90 g     F .text	00000008 __udivsi3
0080ae88 g     F .text	00000084 isatty
0080c9c0 g     O .rodata	000000c8 __mprec_tens
00806928 g     F .text	00000008 __locale_charset
00801424 g     F .text	00000040 gcvtf
0080c30c g     F .text	00000038 alt_icache_flush
0080ffc4 g     O .bss	00000004 __malloc_top_pad
0080e524 g     O .rwdata	00000004 __mb_cur_max
00806930 g     F .text	0000000c _localeconv_r
00808234 g     F .text	0000003c __i2b
0080630c g     F .text	0000049c __sfvwrite_r
00808c14 g     F .text	00000070 _sbrk_r
00809334 g     F .text	00000078 _read_r
0080cf00 g     O .rwdata	0000000c __lc_ctype
0080e544 g     O .rwdata	00000004 alt_max_fd
008010c0 g     F .text	00000138 __unpack_d
008090b4 g     F .text	00000110 _fclose_r
00805bd8 g     F .text	00000034 fflush
0080ffc8 g     O .bss	00000004 __malloc_max_sbrked_mem
008004a0 g     F .text	00000054 __extendsfdf2
00800984 g     F .text	00000074 __adddf3
008077f8 g     F .text	00000120 __b2d
00809988 g     F .text	000005b0 __umoddi3
0080afc0 g     F .text	0000009c lseek
0080e520 g     O .rwdata	00000004 _global_impure_ptr
008085b0 g     F .text	000005f4 _realloc_r
008102a4 g       *ABS*	00000000 __bss_end
0080bd38 g     F .text	00000088 alt_iic_isr_register
0080c078 g     F .text	000000e8 alt_tick
008093ac g     F .text	000005dc __udivdi3
0080ca88 g     O .rodata	00000028 __mprec_bigtens
00808490 g     F .text	00000120 __s2b
00800aa4 g     F .text	00000194 __floatunsidf
00807718 g     F .text	00000060 __mcmp
00805d40 g     F .text	00000018 __fp_lock_all
0080bc9c g     F .text	00000018 alt_ic_irq_enabled
0080c044 g     F .text	00000034 alt_alarm_stop
0080ffe0 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	00000098 alt_irq_handler
0080d314 g     O .rwdata	00000028 alt_dev_null
00800cb8 g     F .text	000000c8 __unpack_f
0080bb78 g     F .text	00000004 alt_dcache_flush_all
008075e4 g     F .text	00000070 __hi0bits
0080a97c g     F .text	000000d8 __fixdfsi
0080e55c g       *ABS*	00000000 __ram_rwdata_end
0080e53c g     O .rwdata	00000008 alt_dev_list
0080b2ec g     F .text	00000118 write
0080cb00 g       *ABS*	00000000 __ram_rodata_end
0080adf8 g     F .text	00000090 fstat
0080a7fc g     F .text	00000088 __ledf2
00808370 g     F .text	00000120 __pow5mult
0080ffb8 g     O .bss	00000004 __nlocale_changed
0080ab98 g     F .text	00000008 __umodsi3
008102a4 g       *ABS*	00000000 end
008011f8 g     F .text	00000160 __pack_f
0080b558 g     F .text	00000080 altera_avalon_jtag_uart_init
0080c790 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008053f4 g     F .text	000002f8 _dcvt
0080ba58 g     F .text	00000050 alt_avalon_timer_sc_init
00800c38 g     F .text	00000080 __clzsi2
0080b8d4 g     F .text	00000184 altera_avalon_jtag_uart_write
00805c64 g     F .text	00000004 __sfp_lock_acquire
008072c0 g     F .text	000000e4 memchr
0080174c g     F .text	00001eac ___vfprintf_internal_r
00805ff8 g     F .text	00000314 _free_r
0080c5cc g     F .text	000001b0 __call_exitprocs
0080ffbc g     O .bss	00000004 __mlocale_changed
0080e530 g     O .rwdata	00000004 __malloc_sbrk_base
00800184 g     F .text	0000003c _start
0080ffe4 g     O .bss	00000004 _alt_tick_rate
00805114 g     F .text	000002e0 _gcvt
00807f00 g     F .text	0000014c __lshift
0080ffe8 g     O .bss	00000004 _alt_nticks
0080b0d8 g     F .text	0000011c read
0080b404 g     F .text	00000058 alt_sys_init
0080c494 g     F .text	00000134 __register_exitproc
0080804c g     F .text	000001e8 __multiply
0080b4b8 g     F .text	00000048 altera_avalon_jtag_uart_close
0080cb00 g       *ABS*	00000000 __ram_rwdata_start
0080c794 g       *ABS*	00000000 __ram_rodata_start
0080ffec g     O .bss	00000028 __malloc_current_mallinfo
00807bf8 g     F .text	0000017c __d2b
0080b4a8 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0080c2ac g     F .text	00000060 alt_get_fd
0080ac38 g     F .text	000000c8 __fpcmp_parts_d
00809044 g     F .text	00000070 _close_r
008001c0 g     F .text	00000080 generateVector
0080c420 g     F .text	00000074 memcmp
0080b488 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
008102a4 g       *ABS*	00000000 __alt_stack_base
0080b47c g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
0080361c g     F .text	0000013c __swsetup_r
0080a2fc g     F .text	00000258 __divdf3
00805ddc g     F .text	000000f0 __sfp
00807a5c g     F .text	00000058 __copybits
0080cf0c g     O .rwdata	00000408 __malloc_av_
00805c70 g     F .text	00000004 __sinit_lock_release
00809f38 g     F .text	000003c4 __muldf3
00808d70 g     F .text	00000060 __sread
0080c1fc g     F .text	000000b0 alt_find_file
0080bb7c g     F .text	0000007c alt_dev_llist_insert
0080b0bc g     F .text	00000004 __malloc_lock
0080b218 g     F .text	00000054 sbrk
008059dc g     F .text	000001fc _fflush_r
00808f90 g     F .text	000000b4 _calloc_r
0080ffb8 g       *ABS*	00000000 __bss_start
00807524 g     F .text	00000098 memset
008002d4 g     F .text	000001cc main
008014dc g     F .text	00000024 fcvt
0080ffdc g     O .bss	00000004 alt_envp
0080ffcc g     O .bss	00000004 __malloc_max_total_mem
0080b498 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
008056ec g     F .text	00000148 ecvtbuf
00808c84 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008091c4 g     F .text	00000014 fclose
00800a30 g     F .text	00000074 __truncdfsf2
00810114 g     O .bss	00000190 _atexit0
00803970 g     F .text	000015b4 _dtoa_r
00806b80 g     F .text	00000740 _malloc_r
0080e548 g     O .rwdata	00000004 alt_errno
00801488 g     F .text	00000054 ecvtf
00806870 g     F .text	000000b8 _fwalk
0080aad0 g     F .text	00000060 __divsi3
0080c7d4 g     O .rodata	00000014 __thenan_df
00805ecc g     F .text	0000012c _malloc_trim_r
0080c794 g       *ABS*	00000000 __CTOR_END__
00808dd0 g     F .text	000000bc strcmp
0080c794 g       *ABS*	00000000 __flash_rodata_start
0080c794 g       *ABS*	00000000 __DTOR_LIST__
0080a5dc g     F .text	00000088 __nedf2
0080b45c g     F .text	00000020 alt_irq_init
0080b1f4 g     F .text	00000024 alt_release_fd
0080c7e8 g     O .rodata	00000100 __clz_tab
0080ffc0 g     O .bss	00000004 _PathLocale
0080c344 g     F .text	00000014 atexit
00800240 g     F .text	00000094 sumVector
00808f18 g     F .text	00000078 _write_r
008069d0 g     F .text	0000001c setlocale
0080e51c g     O .rwdata	00000004 _impure_ptr
0080ffd4 g     O .bss	00000004 alt_argc
0080bc44 g     F .text	0000004c _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00807778 g     F .text	00000080 __ulp
00808ba4 g     F .text	00000040 __isinfd
00805d28 g     F .text	00000018 __fp_unlock_all
00801464 g     F .text	00000024 ecvt
0080e534 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080693c g     F .text	00000010 localeconv
0080bd34 g     F .text	00000004 alt_ic_isr_register
0080e55c g       *ABS*	00000000 _edata
008102a4 g       *ABS*	00000000 _end
00800184 g       *ABS*	00000000 __ram_exceptions_end
0080b6e0 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
0080c390 g     F .text	00000074 _fputs_r
0080bcf4 g     F .text	00000040 alt_ic_irq_disable
00808cf4 g     F .text	0000007c __swrite
0080e52c g     O .rwdata	00000004 __malloc_trim_threshold
00801500 g     F .text	00000054 fcvtf
0080c160 g     F .text	00000008 altera_nios2_qsys_irq_init
0080c358 g     F .text	00000038 exit
008067a8 g     F .text	000000c8 _fwalk_reent
00807d74 g     F .text	0000018c __mdiff
0080ab30 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00805c68 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00801358 g     F .text	000000cc gcvt
0080c77c g     F .text	00000014 _exit
00808be4 g     F .text	00000030 __isnand
0080bae4 g     F .text	00000094 alt_alarm_start
0080aba0 g     F .text	00000098 __muldi3
008069ec g     F .text	00000194 __smakebuf_r
00801680 g     F .text	00000074 strlen
0080bec4 g     F .text	00000180 open
0080a6ec g     F .text	00000088 __gedf2
0080bc90 g     F .text	0000000c alt_icache_flush_all
0080c404 g     F .text	0000001c fputs
0080e550 g     O .rwdata	00000004 alt_priority_mask
0080bcb4 g     F .text	00000040 alt_ic_irq_enable
008035f8 g     F .text	00000024 __vfprintf_internal
00800904 g     F .text	00000080 __subdf3
00807654 g     F .text	000000c4 __lo0bits
0080e554 g     O .rwdata	00000008 alt_alarm_list
0080bbf8 g     F .text	0000004c _do_ctors
0080ad00 g     F .text	000000f0 close
0080af0c g     F .text	000000b4 alt_load
00800dac g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00805c6c g     F .text	00000004 __sinit_lock_acquire
00808270 g     F .text	00000100 __multadd
008075bc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406114 	ori	at,at,388
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defffe04 	addi	sp,sp,-8
  8000f0:	dfc00115 	stw	ra,4(sp)
  8000f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	000b313a 	rdctl	r5,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  8000fc:	2880004c 	andi	r2,r5,1
  800100:	1005003a 	cmpeq	r2,r2,zero
  800104:	04002074 	movhi	r16,129
  800108:	84000504 	addi	r16,r16,20
  80010c:	10001126 	beq	r2,zero,800154 <alt_irq_handler+0x68>
  800110:	00c00044 	movi	r3,1
  800114:	0009883a 	mov	r4,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800118:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80011c:	28c4703a 	and	r2,r5,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  800120:	21000044 	addi	r4,r4,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800124:	103ffc26 	beq	r2,zero,800118 <alt_irq_handler+0x2c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800128:	200490fa 	slli	r2,r4,3
  80012c:	1405883a 	add	r2,r2,r16
  800130:	11000117 	ldw	r4,4(r2)
  800134:	10c00017 	ldw	r3,0(r2)
  800138:	183ee83a 	callr	r3
  80013c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800140:	10000c26 	beq	r2,zero,800174 <alt_irq_handler+0x88>
  800144:	100b883a 	mov	r5,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800148:	2880004c 	andi	r2,r5,1
  80014c:	1005003a 	cmpeq	r2,r2,zero
  800150:	103fef1e 	bne	r2,zero,800110 <alt_irq_handler+0x24>
  800154:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800158:	200490fa 	slli	r2,r4,3
  80015c:	1405883a 	add	r2,r2,r16
  800160:	11000117 	ldw	r4,4(r2)
  800164:	10c00017 	ldw	r3,0(r2)
  800168:	183ee83a 	callr	r3
  80016c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800170:	103ff41e 	bne	r2,zero,800144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800174:	dfc00117 	ldw	ra,4(sp)
  800178:	dc000017 	ldw	r16,0(sp)
  80017c:	dec00204 	addi	sp,sp,8
  800180:	f800283a 	ret

Disassembly of section .text:

00800184 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800184:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800188:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80018c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800190:	d6994714 	ori	gp,gp,25884
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800194:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800198:	10bfee14 	ori	r2,r2,65464

    movhi r3, %hi(__bss_end)
  80019c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001a0:	18c0a914 	ori	r3,r3,676

    beq r2, r3, 1f
  8001a4:	10c00326 	beq	r2,r3,8001b4 <_start+0x30>

0:
    stw zero, (r2)
  8001a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001b0:	10fffd36 	bltu	r2,r3,8001a8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001b4:	080af0c0 	call	80af0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001b8:	080b05c0 	call	80b05c <alt_main>

008001bc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001bc:	003fff06 	br	8001bc <alt_after_alt_main>

008001c0 <generateVector>:
//Test case 3
#define step 0.001
#define N 255001
// Generates the vector x and stores it in the memory
void generateVector(float x[N] )
{
  8001c0:	defffd04 	addi	sp,sp,-12
  8001c4:	dc400115 	stw	r17,4(sp)
  8001c8:	dc000015 	stw	r16,0(sp)
  8001cc:	dfc00215 	stw	ra,8(sp)
	int i;
	x[0] = 0;
  8001d0:	20000015 	stw	zero,0(r4)
  8001d4:	2021883a 	mov	r16,r4
  8001d8:	04400044 	movi	r17,1
	for (i=1; i<N; i++){
		x[i] = x[i-1] + step;
  8001dc:	81000017 	ldw	r4,0(r16)
// Generates the vector x and stores it in the memory
void generateVector(float x[N] )
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++){
  8001e0:	8c400044 	addi	r17,r17,1
		x[i] = x[i-1] + step;
  8001e4:	08004a00 	call	8004a0 <__extendsfdf2>
  8001e8:	0234bcb4 	movhi	r8,54002
  8001ec:	422a7f04 	addi	r8,r8,-22020
  8001f0:	024fd434 	movhi	r9,16208
  8001f4:	4a589344 	addi	r9,r9,25165
  8001f8:	180b883a 	mov	r5,r3
  8001fc:	480f883a 	mov	r7,r9
  800200:	1009883a 	mov	r4,r2
  800204:	400d883a 	mov	r6,r8
  800208:	08009840 	call	800984 <__adddf3>
  80020c:	180b883a 	mov	r5,r3
  800210:	1009883a 	mov	r4,r2
  800214:	0800a300 	call	800a30 <__truncdfsf2>
  800218:	80800115 	stw	r2,4(r16)
// Generates the vector x and stores it in the memory
void generateVector(float x[N] )
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++){
  80021c:	00800134 	movhi	r2,4
  800220:	10b90644 	addi	r2,r2,-7143
  800224:	84000104 	addi	r16,r16,4
  800228:	88bfec1e 	bne	r17,r2,8001dc <generateVector+0x1c>
		x[i] = x[i-1] + step;
		//x[i] = i*step;
	}
}
  80022c:	dfc00217 	ldw	ra,8(sp)
  800230:	dc400117 	ldw	r17,4(sp)
  800234:	dc000017 	ldw	r16,0(sp)
  800238:	dec00304 	addi	sp,sp,12
  80023c:	f800283a 	ret

00800240 <sumVector>:
float sumVector(float x[], int M)
{
	float sum = 0.00;
	int i;
	//sum = ALT_CI_FPTASK8V4_0(1,0.0,0.0);
	if(M%2 == 0){	//Even Number of elements
  800240:	2880004c 	andi	r2,r5,1
  800244:	01c00044 	movi	r7,1
  800248:	10000d1e 	bne	r2,zero,800280 <sumVector+0x40>
		sum = ALT_CI_FPTASK8V4_0(1,x[0],x[1]);
  80024c:	20c00017 	ldw	r3,0(r4)
  800250:	20800117 	ldw	r2,4(r4)
  800254:	1885c072 	custom	1,r2,r3,r2
		for(i = 2; i<M; i=i+2){
  800258:	00c00084 	movi	r3,2
  80025c:	1940070e 	bge	r3,r5,80027c <sumVector+0x3c>
  800260:	180d883a 	mov	r6,r3
			sum = ALT_CI_FPTASK8V4_0(0,x[i],x[(i+1)]);
  800264:	20c00217 	ldw	r3,8(r4)
  800268:	20800317 	ldw	r2,12(r4)
  80026c:	1885c032 	custom	0,r2,r3,r2
	float sum = 0.00;
	int i;
	//sum = ALT_CI_FPTASK8V4_0(1,0.0,0.0);
	if(M%2 == 0){	//Even Number of elements
		sum = ALT_CI_FPTASK8V4_0(1,x[0],x[1]);
		for(i = 2; i<M; i=i+2){
  800270:	31800084 	addi	r6,r6,2
  800274:	21000204 	addi	r4,r4,8
  800278:	317ffa16 	blt	r6,r5,800264 <sumVector+0x24>
			sum = ALT_CI_FPTASK8V4_0(0,x[i+6],x[(i+7)]);
		}

	}
	return sum;
}
  80027c:	f800283a 	ret
		for(i = 2; i<M; i=i+2){
			sum = ALT_CI_FPTASK8V4_0(0,x[i],x[(i+1)]);
		}
	}
	else{	//Odd Number
		sum = ALT_CI_FPTASK8V4_0(1,x[0],0.0);
  800280:	20c00017 	ldw	r3,0(r4)
  800284:	0005883a 	mov	r2,zero
  800288:	1885c072 	custom	1,r2,r3,r2
		for(i = 1; i<M; i=i+8){
  80028c:	397ffb0e 	bge	r7,r5,80027c <sumVector+0x3c>
  800290:	200d883a 	mov	r6,r4
			sum = ALT_CI_FPTASK8V4_0(0,x[i],x[(i+1)]);
  800294:	30c00117 	ldw	r3,4(r6)
  800298:	30800217 	ldw	r2,8(r6)
  80029c:	1887c032 	custom	0,r3,r3,r2
			sum = ALT_CI_FPTASK8V4_0(0,x[i+2],x[(i+3)]);
  8002a0:	31000317 	ldw	r4,12(r6)
  8002a4:	30800417 	ldw	r2,16(r6)
  8002a8:	2089c032 	custom	0,r4,r4,r2
			sum = ALT_CI_FPTASK8V4_0(0,x[i+4],x[(i+5)]);
  8002ac:	30c00517 	ldw	r3,20(r6)
  8002b0:	30800617 	ldw	r2,24(r6)
  8002b4:	1887c032 	custom	0,r3,r3,r2
			sum = ALT_CI_FPTASK8V4_0(0,x[i+6],x[(i+7)]);
  8002b8:	31000717 	ldw	r4,28(r6)
  8002bc:	30800817 	ldw	r2,32(r6)
  8002c0:	2085c032 	custom	0,r2,r4,r2
			sum = ALT_CI_FPTASK8V4_0(0,x[i],x[(i+1)]);
		}
	}
	else{	//Odd Number
		sum = ALT_CI_FPTASK8V4_0(1,x[0],0.0);
		for(i = 1; i<M; i=i+8){
  8002c4:	39c00204 	addi	r7,r7,8
  8002c8:	31800804 	addi	r6,r6,32
  8002cc:	397ff116 	blt	r7,r5,800294 <sumVector+0x54>
			sum = ALT_CI_FPTASK8V4_0(0,x[i+6],x[(i+7)]);
		}

	}
	return sum;
}
  8002d0:	f800283a 	ret

008002d4 <main>:


int main()
{
  8002d4:	defffc04 	addi	sp,sp,-16
  8002d8:	023ffc34 	movhi	r8,65520
  8002dc:	421bda04 	addi	r8,r8,28520
  8002e0:	dc800215 	stw	r18,8(sp)
  8002e4:	dc400115 	stw	r17,4(sp)
  8002e8:	dc000015 	stw	r16,0(sp)
  8002ec:	dfc00315 	stw	ra,12(sp)
	printf("Task 5!\n");
  8002f0:	01002074 	movhi	r4,129
  8002f4:	2131e504 	addi	r4,r4,-14444
	return sum;
}


int main()
{
  8002f8:	da37883a 	add	sp,sp,r8
	printf("Task 5!\n");
  8002fc:	080166c0 	call	80166c <puts>
#define N 255001
// Generates the vector x and stores it in the memory
void generateVector(float x[N] )
{
	int i;
	x[0] = 0;
  800300:	dc400d04 	addi	r17,sp,52
  800304:	00800434 	movhi	r2,16
  800308:	10a41804 	addi	r2,r2,-28576
  80030c:	d8000d15 	stw	zero,52(sp)
  800310:	88a5883a 	add	r18,r17,r2
  800314:	8821883a 	mov	r16,r17
	for (i=1; i<N; i++){
		x[i] = x[i-1] + step;
  800318:	81000017 	ldw	r4,0(r16)
  80031c:	08004a00 	call	8004a0 <__extendsfdf2>
  800320:	0234bcb4 	movhi	r8,54002
  800324:	422a7f04 	addi	r8,r8,-22020
  800328:	024fd434 	movhi	r9,16208
  80032c:	4a589344 	addi	r9,r9,25165
  800330:	180b883a 	mov	r5,r3
  800334:	480f883a 	mov	r7,r9
  800338:	1009883a 	mov	r4,r2
  80033c:	400d883a 	mov	r6,r8
  800340:	08009840 	call	800984 <__adddf3>
  800344:	180b883a 	mov	r5,r3
  800348:	1009883a 	mov	r4,r2
  80034c:	0800a300 	call	800a30 <__truncdfsf2>
  800350:	80800115 	stw	r2,4(r16)
  800354:	84000104 	addi	r16,r16,4
// Generates the vector x and stores it in the memory
void generateVector(float x[N] )
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++){
  800358:	943fef1e 	bne	r18,r16,800318 <main+0x44>
	generateVector(x);
	// The following is used for timing
	char buf[50];
	clock_t exec_t1, exec_t2;

	exec_t1 = times(NULL); // get system time before starting the process
  80035c:	0009883a 	mov	r4,zero
  800360:	080b26c0 	call	80b26c <times>
	// The code that you want to time goes here
	int i;
	for (i=0; i<10;i++){
		y = sumVector(x, N);
  800364:	01400134 	movhi	r5,4
  800368:	29790644 	addi	r5,r5,-7143
  80036c:	8809883a 	mov	r4,r17
	generateVector(x);
	// The following is used for timing
	char buf[50];
	clock_t exec_t1, exec_t2;

	exec_t1 = times(NULL); // get system time before starting the process
  800370:	1025883a 	mov	r18,r2
	// The code that you want to time goes here
	int i;
	for (i=0; i<10;i++){
		y = sumVector(x, N);
  800374:	08002400 	call	800240 <sumVector>
  800378:	8809883a 	mov	r4,r17
  80037c:	01400134 	movhi	r5,4
  800380:	29790644 	addi	r5,r5,-7143
  800384:	08002400 	call	800240 <sumVector>
  800388:	8809883a 	mov	r4,r17
  80038c:	01400134 	movhi	r5,4
  800390:	29790644 	addi	r5,r5,-7143
  800394:	08002400 	call	800240 <sumVector>
  800398:	8809883a 	mov	r4,r17
  80039c:	01400134 	movhi	r5,4
  8003a0:	29790644 	addi	r5,r5,-7143
  8003a4:	08002400 	call	800240 <sumVector>
  8003a8:	8809883a 	mov	r4,r17
  8003ac:	01400134 	movhi	r5,4
  8003b0:	29790644 	addi	r5,r5,-7143
  8003b4:	08002400 	call	800240 <sumVector>
  8003b8:	8809883a 	mov	r4,r17
  8003bc:	01400134 	movhi	r5,4
  8003c0:	29790644 	addi	r5,r5,-7143
  8003c4:	08002400 	call	800240 <sumVector>
  8003c8:	8809883a 	mov	r4,r17
  8003cc:	01400134 	movhi	r5,4
  8003d0:	29790644 	addi	r5,r5,-7143
  8003d4:	08002400 	call	800240 <sumVector>
  8003d8:	8809883a 	mov	r4,r17
  8003dc:	01400134 	movhi	r5,4
  8003e0:	29790644 	addi	r5,r5,-7143
  8003e4:	08002400 	call	800240 <sumVector>
  8003e8:	8809883a 	mov	r4,r17
  8003ec:	01400134 	movhi	r5,4
  8003f0:	29790644 	addi	r5,r5,-7143
  8003f4:	08002400 	call	800240 <sumVector>
  8003f8:	01400134 	movhi	r5,4
  8003fc:	29790644 	addi	r5,r5,-7143
  800400:	8809883a 	mov	r4,r17
  800404:	08002400 	call	800240 <sumVector>
	}
	// till here
	exec_t2 = times(NULL); // get system time after finishing the process
  800408:	0009883a 	mov	r4,zero

	exec_t1 = times(NULL); // get system time before starting the process
	// The code that you want to time goes here
	int i;
	for (i=0; i<10;i++){
		y = sumVector(x, N);
  80040c:	1021883a 	mov	r16,r2
	}
	// till here
	exec_t2 = times(NULL); // get system time after finishing the process
  800410:	080b26c0 	call	80b26c <times>
	gcvt((exec_t2 - exec_t1), 10, buf);
  800414:	1489c83a 	sub	r4,r2,r18
  800418:	0800aa40 	call	800aa4 <__floatunsidf>
  80041c:	d80f883a 	mov	r7,sp
  800420:	180b883a 	mov	r5,r3
  800424:	01800284 	movi	r6,10
  800428:	1009883a 	mov	r4,r2
  80042c:	08013580 	call	801358 <gcvt>
	alt_putstr(" proc time = ");
  800430:	01002074 	movhi	r4,129
  800434:	2131e704 	addi	r4,r4,-14436
  800438:	080b0c40 	call	80b0c4 <alt_putstr>
	alt_putstr(buf);
  80043c:	d809883a 	mov	r4,sp
  800440:	080b0c40 	call	80b0c4 <alt_putstr>
	alt_putstr(" ticks \n");
  800444:	01002074 	movhi	r4,129
  800448:	2131eb04 	addi	r4,r4,-14420
  80044c:	080b0c40 	call	80b0c4 <alt_putstr>
	// printf could be used if there was enough memory
	alt_putstr(" Result = ");
  800450:	01002074 	movhi	r4,129
  800454:	2131ee04 	addi	r4,r4,-14408
  800458:	080b0c40 	call	80b0c4 <alt_putstr>
	printf("result: %f \n",y);
  80045c:	8009883a 	mov	r4,r16
  800460:	08004a00 	call	8004a0 <__extendsfdf2>
  800464:	180d883a 	mov	r6,r3
  800468:	01002074 	movhi	r4,129
  80046c:	2131f104 	addi	r4,r4,-14396
  800470:	100b883a 	mov	r5,r2
  800474:	08015540 	call	801554 <printf>
	return 0;
}
  800478:	0005883a 	mov	r2,zero
  80047c:	02000434 	movhi	r8,16
  800480:	42242604 	addi	r8,r8,-28520
  800484:	da37883a 	add	sp,sp,r8
  800488:	dfc00317 	ldw	ra,12(sp)
  80048c:	dc800217 	ldw	r18,8(sp)
  800490:	dc400117 	ldw	r17,4(sp)
  800494:	dc000017 	ldw	r16,0(sp)
  800498:	dec00404 	addi	sp,sp,16
  80049c:	f800283a 	ret

008004a0 <__extendsfdf2>:
  8004a0:	defff904 	addi	sp,sp,-28
  8004a4:	d9000115 	stw	r4,4(sp)
  8004a8:	d9400204 	addi	r5,sp,8
  8004ac:	d9000104 	addi	r4,sp,4
  8004b0:	dfc00615 	stw	ra,24(sp)
  8004b4:	0800cb80 	call	800cb8 <__unpack_f>
  8004b8:	d9c00517 	ldw	r7,20(sp)
  8004bc:	0011883a 	mov	r8,zero
  8004c0:	400697ba 	slli	r3,r8,30
  8004c4:	3812d0ba 	srli	r9,r7,2
  8004c8:	380497ba 	slli	r2,r7,30
  8004cc:	d9000217 	ldw	r4,8(sp)
  8004d0:	d9400317 	ldw	r5,12(sp)
  8004d4:	d9800417 	ldw	r6,16(sp)
  8004d8:	48c6b03a 	or	r3,r9,r3
  8004dc:	100f883a 	mov	r7,r2
  8004e0:	d8c00015 	stw	r3,0(sp)
  8004e4:	08009f80 	call	8009f8 <__make_dp>
  8004e8:	dfc00617 	ldw	ra,24(sp)
  8004ec:	dec00704 	addi	sp,sp,28
  8004f0:	f800283a 	ret

008004f4 <_fpadd_parts>:
  8004f4:	defff804 	addi	sp,sp,-32
  8004f8:	dcc00315 	stw	r19,12(sp)
  8004fc:	2027883a 	mov	r19,r4
  800500:	21000017 	ldw	r4,0(r4)
  800504:	00c00044 	movi	r3,1
  800508:	dd400515 	stw	r21,20(sp)
  80050c:	dd000415 	stw	r20,16(sp)
  800510:	ddc00715 	stw	r23,28(sp)
  800514:	dd800615 	stw	r22,24(sp)
  800518:	dc800215 	stw	r18,8(sp)
  80051c:	dc400115 	stw	r17,4(sp)
  800520:	dc000015 	stw	r16,0(sp)
  800524:	282b883a 	mov	r21,r5
  800528:	3029883a 	mov	r20,r6
  80052c:	1900632e 	bgeu	r3,r4,8006bc <_fpadd_parts+0x1c8>
  800530:	28800017 	ldw	r2,0(r5)
  800534:	1880812e 	bgeu	r3,r2,80073c <_fpadd_parts+0x248>
  800538:	00c00104 	movi	r3,4
  80053c:	20c0dc26 	beq	r4,r3,8008b0 <_fpadd_parts+0x3bc>
  800540:	10c07e26 	beq	r2,r3,80073c <_fpadd_parts+0x248>
  800544:	00c00084 	movi	r3,2
  800548:	10c06726 	beq	r2,r3,8006e8 <_fpadd_parts+0x1f4>
  80054c:	20c07b26 	beq	r4,r3,80073c <_fpadd_parts+0x248>
  800550:	9dc00217 	ldw	r23,8(r19)
  800554:	28c00217 	ldw	r3,8(r5)
  800558:	9c400317 	ldw	r17,12(r19)
  80055c:	2bc00317 	ldw	r15,12(r5)
  800560:	b8cdc83a 	sub	r6,r23,r3
  800564:	9c800417 	ldw	r18,16(r19)
  800568:	2c000417 	ldw	r16,16(r5)
  80056c:	3009883a 	mov	r4,r6
  800570:	30009716 	blt	r6,zero,8007d0 <_fpadd_parts+0x2dc>
  800574:	00800fc4 	movi	r2,63
  800578:	11806b16 	blt	r2,r6,800728 <_fpadd_parts+0x234>
  80057c:	0100a40e 	bge	zero,r4,800810 <_fpadd_parts+0x31c>
  800580:	35bff804 	addi	r22,r6,-32
  800584:	b000bc16 	blt	r22,zero,800878 <_fpadd_parts+0x384>
  800588:	8596d83a 	srl	r11,r16,r22
  80058c:	0019883a 	mov	r12,zero
  800590:	0013883a 	mov	r9,zero
  800594:	01000044 	movi	r4,1
  800598:	0015883a 	mov	r10,zero
  80059c:	b000be16 	blt	r22,zero,800898 <_fpadd_parts+0x3a4>
  8005a0:	2590983a 	sll	r8,r4,r22
  8005a4:	000f883a 	mov	r7,zero
  8005a8:	00bfffc4 	movi	r2,-1
  8005ac:	3889883a 	add	r4,r7,r2
  8005b0:	408b883a 	add	r5,r8,r2
  8005b4:	21cd803a 	cmpltu	r6,r4,r7
  8005b8:	314b883a 	add	r5,r6,r5
  8005bc:	7904703a 	and	r2,r15,r4
  8005c0:	8146703a 	and	r3,r16,r5
  8005c4:	10c4b03a 	or	r2,r2,r3
  8005c8:	10000226 	beq	r2,zero,8005d4 <_fpadd_parts+0xe0>
  8005cc:	02400044 	movi	r9,1
  8005d0:	0015883a 	mov	r10,zero
  8005d4:	5a5eb03a 	or	r15,r11,r9
  8005d8:	62a0b03a 	or	r16,r12,r10
  8005dc:	99400117 	ldw	r5,4(r19)
  8005e0:	a8800117 	ldw	r2,4(r21)
  8005e4:	28806e26 	beq	r5,r2,8007a0 <_fpadd_parts+0x2ac>
  8005e8:	28006626 	beq	r5,zero,800784 <_fpadd_parts+0x290>
  8005ec:	7c45c83a 	sub	r2,r15,r17
  8005f0:	7889803a 	cmpltu	r4,r15,r2
  8005f4:	8487c83a 	sub	r3,r16,r18
  8005f8:	1909c83a 	sub	r4,r3,r4
  8005fc:	100d883a 	mov	r6,r2
  800600:	200f883a 	mov	r7,r4
  800604:	38007716 	blt	r7,zero,8007e4 <_fpadd_parts+0x2f0>
  800608:	a5c00215 	stw	r23,8(r20)
  80060c:	a1c00415 	stw	r7,16(r20)
  800610:	a0000115 	stw	zero,4(r20)
  800614:	a1800315 	stw	r6,12(r20)
  800618:	a2000317 	ldw	r8,12(r20)
  80061c:	a2400417 	ldw	r9,16(r20)
  800620:	00bfffc4 	movi	r2,-1
  800624:	408b883a 	add	r5,r8,r2
  800628:	2a09803a 	cmpltu	r4,r5,r8
  80062c:	488d883a 	add	r6,r9,r2
  800630:	01c40034 	movhi	r7,4096
  800634:	39ffffc4 	addi	r7,r7,-1
  800638:	218d883a 	add	r6,r4,r6
  80063c:	39801736 	bltu	r7,r6,80069c <_fpadd_parts+0x1a8>
  800640:	31c06526 	beq	r6,r7,8007d8 <_fpadd_parts+0x2e4>
  800644:	a3000217 	ldw	r12,8(r20)
  800648:	4209883a 	add	r4,r8,r8
  80064c:	00bfffc4 	movi	r2,-1
  800650:	220f803a 	cmpltu	r7,r4,r8
  800654:	4a4b883a 	add	r5,r9,r9
  800658:	394f883a 	add	r7,r7,r5
  80065c:	2095883a 	add	r10,r4,r2
  800660:	3897883a 	add	r11,r7,r2
  800664:	510d803a 	cmpltu	r6,r10,r4
  800668:	6099883a 	add	r12,r12,r2
  80066c:	32d7883a 	add	r11,r6,r11
  800670:	00840034 	movhi	r2,4096
  800674:	10bfffc4 	addi	r2,r2,-1
  800678:	2011883a 	mov	r8,r4
  80067c:	3813883a 	mov	r9,r7
  800680:	a1000315 	stw	r4,12(r20)
  800684:	a1c00415 	stw	r7,16(r20)
  800688:	a3000215 	stw	r12,8(r20)
  80068c:	12c00336 	bltu	r2,r11,80069c <_fpadd_parts+0x1a8>
  800690:	58bfed1e 	bne	r11,r2,800648 <_fpadd_parts+0x154>
  800694:	00bfff84 	movi	r2,-2
  800698:	12bfeb2e 	bgeu	r2,r10,800648 <_fpadd_parts+0x154>
  80069c:	a2800417 	ldw	r10,16(r20)
  8006a0:	008000c4 	movi	r2,3
  8006a4:	00c80034 	movhi	r3,8192
  8006a8:	18ffffc4 	addi	r3,r3,-1
  8006ac:	a2400317 	ldw	r9,12(r20)
  8006b0:	a0800015 	stw	r2,0(r20)
  8006b4:	1a802336 	bltu	r3,r10,800744 <_fpadd_parts+0x250>
  8006b8:	a027883a 	mov	r19,r20
  8006bc:	9805883a 	mov	r2,r19
  8006c0:	ddc00717 	ldw	r23,28(sp)
  8006c4:	dd800617 	ldw	r22,24(sp)
  8006c8:	dd400517 	ldw	r21,20(sp)
  8006cc:	dd000417 	ldw	r20,16(sp)
  8006d0:	dcc00317 	ldw	r19,12(sp)
  8006d4:	dc800217 	ldw	r18,8(sp)
  8006d8:	dc400117 	ldw	r17,4(sp)
  8006dc:	dc000017 	ldw	r16,0(sp)
  8006e0:	dec00804 	addi	sp,sp,32
  8006e4:	f800283a 	ret
  8006e8:	20fff41e 	bne	r4,r3,8006bc <_fpadd_parts+0x1c8>
  8006ec:	31000015 	stw	r4,0(r6)
  8006f0:	98800117 	ldw	r2,4(r19)
  8006f4:	30800115 	stw	r2,4(r6)
  8006f8:	98c00217 	ldw	r3,8(r19)
  8006fc:	30c00215 	stw	r3,8(r6)
  800700:	98800317 	ldw	r2,12(r19)
  800704:	30800315 	stw	r2,12(r6)
  800708:	98c00417 	ldw	r3,16(r19)
  80070c:	30c00415 	stw	r3,16(r6)
  800710:	98800117 	ldw	r2,4(r19)
  800714:	28c00117 	ldw	r3,4(r5)
  800718:	3027883a 	mov	r19,r6
  80071c:	10c4703a 	and	r2,r2,r3
  800720:	30800115 	stw	r2,4(r6)
  800724:	003fe506 	br	8006bc <_fpadd_parts+0x1c8>
  800728:	1dc02616 	blt	r3,r23,8007c4 <_fpadd_parts+0x2d0>
  80072c:	0023883a 	mov	r17,zero
  800730:	182f883a 	mov	r23,r3
  800734:	0025883a 	mov	r18,zero
  800738:	003fa806 	br	8005dc <_fpadd_parts+0xe8>
  80073c:	a827883a 	mov	r19,r21
  800740:	003fde06 	br	8006bc <_fpadd_parts+0x1c8>
  800744:	01800044 	movi	r6,1
  800748:	500497fa 	slli	r2,r10,31
  80074c:	4808d07a 	srli	r4,r9,1
  800750:	518ad83a 	srl	r5,r10,r6
  800754:	a2000217 	ldw	r8,8(r20)
  800758:	1108b03a 	or	r4,r2,r4
  80075c:	0007883a 	mov	r3,zero
  800760:	4984703a 	and	r2,r9,r6
  800764:	208cb03a 	or	r6,r4,r2
  800768:	28ceb03a 	or	r7,r5,r3
  80076c:	42000044 	addi	r8,r8,1
  800770:	a027883a 	mov	r19,r20
  800774:	a1c00415 	stw	r7,16(r20)
  800778:	a2000215 	stw	r8,8(r20)
  80077c:	a1800315 	stw	r6,12(r20)
  800780:	003fce06 	br	8006bc <_fpadd_parts+0x1c8>
  800784:	8bc5c83a 	sub	r2,r17,r15
  800788:	8889803a 	cmpltu	r4,r17,r2
  80078c:	9407c83a 	sub	r3,r18,r16
  800790:	1909c83a 	sub	r4,r3,r4
  800794:	100d883a 	mov	r6,r2
  800798:	200f883a 	mov	r7,r4
  80079c:	003f9906 	br	800604 <_fpadd_parts+0x110>
  8007a0:	7c45883a 	add	r2,r15,r17
  8007a4:	13c9803a 	cmpltu	r4,r2,r15
  8007a8:	8487883a 	add	r3,r16,r18
  8007ac:	20c9883a 	add	r4,r4,r3
  8007b0:	a1400115 	stw	r5,4(r20)
  8007b4:	a5c00215 	stw	r23,8(r20)
  8007b8:	a0800315 	stw	r2,12(r20)
  8007bc:	a1000415 	stw	r4,16(r20)
  8007c0:	003fb606 	br	80069c <_fpadd_parts+0x1a8>
  8007c4:	001f883a 	mov	r15,zero
  8007c8:	0021883a 	mov	r16,zero
  8007cc:	003f8306 	br	8005dc <_fpadd_parts+0xe8>
  8007d0:	018dc83a 	sub	r6,zero,r6
  8007d4:	003f6706 	br	800574 <_fpadd_parts+0x80>
  8007d8:	00bfff84 	movi	r2,-2
  8007dc:	117faf36 	bltu	r2,r5,80069c <_fpadd_parts+0x1a8>
  8007e0:	003f9806 	br	800644 <_fpadd_parts+0x150>
  8007e4:	0005883a 	mov	r2,zero
  8007e8:	1189c83a 	sub	r4,r2,r6
  8007ec:	1105803a 	cmpltu	r2,r2,r4
  8007f0:	01cbc83a 	sub	r5,zero,r7
  8007f4:	2885c83a 	sub	r2,r5,r2
  8007f8:	01800044 	movi	r6,1
  8007fc:	a1800115 	stw	r6,4(r20)
  800800:	a5c00215 	stw	r23,8(r20)
  800804:	a1000315 	stw	r4,12(r20)
  800808:	a0800415 	stw	r2,16(r20)
  80080c:	003f8206 	br	800618 <_fpadd_parts+0x124>
  800810:	203f7226 	beq	r4,zero,8005dc <_fpadd_parts+0xe8>
  800814:	35bff804 	addi	r22,r6,-32
  800818:	b9af883a 	add	r23,r23,r6
  80081c:	b0003116 	blt	r22,zero,8008e4 <_fpadd_parts+0x3f0>
  800820:	959ad83a 	srl	r13,r18,r22
  800824:	001d883a 	mov	r14,zero
  800828:	000f883a 	mov	r7,zero
  80082c:	01000044 	movi	r4,1
  800830:	0011883a 	mov	r8,zero
  800834:	b0002516 	blt	r22,zero,8008cc <_fpadd_parts+0x3d8>
  800838:	2594983a 	sll	r10,r4,r22
  80083c:	0013883a 	mov	r9,zero
  800840:	00bfffc4 	movi	r2,-1
  800844:	4889883a 	add	r4,r9,r2
  800848:	508b883a 	add	r5,r10,r2
  80084c:	224d803a 	cmpltu	r6,r4,r9
  800850:	314b883a 	add	r5,r6,r5
  800854:	8904703a 	and	r2,r17,r4
  800858:	9146703a 	and	r3,r18,r5
  80085c:	10c4b03a 	or	r2,r2,r3
  800860:	10000226 	beq	r2,zero,80086c <_fpadd_parts+0x378>
  800864:	01c00044 	movi	r7,1
  800868:	0011883a 	mov	r8,zero
  80086c:	69e2b03a 	or	r17,r13,r7
  800870:	7224b03a 	or	r18,r14,r8
  800874:	003f5906 	br	8005dc <_fpadd_parts+0xe8>
  800878:	8407883a 	add	r3,r16,r16
  80087c:	008007c4 	movi	r2,31
  800880:	1185c83a 	sub	r2,r2,r6
  800884:	1886983a 	sll	r3,r3,r2
  800888:	7996d83a 	srl	r11,r15,r6
  80088c:	8198d83a 	srl	r12,r16,r6
  800890:	1ad6b03a 	or	r11,r3,r11
  800894:	003f3e06 	br	800590 <_fpadd_parts+0x9c>
  800898:	2006d07a 	srli	r3,r4,1
  80089c:	008007c4 	movi	r2,31
  8008a0:	1185c83a 	sub	r2,r2,r6
  8008a4:	1890d83a 	srl	r8,r3,r2
  8008a8:	218e983a 	sll	r7,r4,r6
  8008ac:	003f3e06 	br	8005a8 <_fpadd_parts+0xb4>
  8008b0:	113f821e 	bne	r2,r4,8006bc <_fpadd_parts+0x1c8>
  8008b4:	28c00117 	ldw	r3,4(r5)
  8008b8:	98800117 	ldw	r2,4(r19)
  8008bc:	10ff7f26 	beq	r2,r3,8006bc <_fpadd_parts+0x1c8>
  8008c0:	04c02074 	movhi	r19,129
  8008c4:	9cf1f504 	addi	r19,r19,-14380
  8008c8:	003f7c06 	br	8006bc <_fpadd_parts+0x1c8>
  8008cc:	2006d07a 	srli	r3,r4,1
  8008d0:	008007c4 	movi	r2,31
  8008d4:	1185c83a 	sub	r2,r2,r6
  8008d8:	1894d83a 	srl	r10,r3,r2
  8008dc:	2192983a 	sll	r9,r4,r6
  8008e0:	003fd706 	br	800840 <_fpadd_parts+0x34c>
  8008e4:	9487883a 	add	r3,r18,r18
  8008e8:	008007c4 	movi	r2,31
  8008ec:	1185c83a 	sub	r2,r2,r6
  8008f0:	1886983a 	sll	r3,r3,r2
  8008f4:	899ad83a 	srl	r13,r17,r6
  8008f8:	919cd83a 	srl	r14,r18,r6
  8008fc:	1b5ab03a 	or	r13,r3,r13
  800900:	003fc906 	br	800828 <_fpadd_parts+0x334>

00800904 <__subdf3>:
  800904:	deffea04 	addi	sp,sp,-88
  800908:	dcc01415 	stw	r19,80(sp)
  80090c:	dcc00404 	addi	r19,sp,16
  800910:	2011883a 	mov	r8,r4
  800914:	2813883a 	mov	r9,r5
  800918:	dc401315 	stw	r17,76(sp)
  80091c:	d809883a 	mov	r4,sp
  800920:	980b883a 	mov	r5,r19
  800924:	dc400904 	addi	r17,sp,36
  800928:	dfc01515 	stw	ra,84(sp)
  80092c:	da400115 	stw	r9,4(sp)
  800930:	d9c00315 	stw	r7,12(sp)
  800934:	da000015 	stw	r8,0(sp)
  800938:	d9800215 	stw	r6,8(sp)
  80093c:	08010c00 	call	8010c0 <__unpack_d>
  800940:	d9000204 	addi	r4,sp,8
  800944:	880b883a 	mov	r5,r17
  800948:	08010c00 	call	8010c0 <__unpack_d>
  80094c:	d8800a17 	ldw	r2,40(sp)
  800950:	880b883a 	mov	r5,r17
  800954:	9809883a 	mov	r4,r19
  800958:	d9800e04 	addi	r6,sp,56
  80095c:	1080005c 	xori	r2,r2,1
  800960:	d8800a15 	stw	r2,40(sp)
  800964:	08004f40 	call	8004f4 <_fpadd_parts>
  800968:	1009883a 	mov	r4,r2
  80096c:	0800dac0 	call	800dac <__pack_d>
  800970:	dfc01517 	ldw	ra,84(sp)
  800974:	dcc01417 	ldw	r19,80(sp)
  800978:	dc401317 	ldw	r17,76(sp)
  80097c:	dec01604 	addi	sp,sp,88
  800980:	f800283a 	ret

00800984 <__adddf3>:
  800984:	deffea04 	addi	sp,sp,-88
  800988:	dcc01415 	stw	r19,80(sp)
  80098c:	dcc00404 	addi	r19,sp,16
  800990:	2011883a 	mov	r8,r4
  800994:	2813883a 	mov	r9,r5
  800998:	dc401315 	stw	r17,76(sp)
  80099c:	d809883a 	mov	r4,sp
  8009a0:	980b883a 	mov	r5,r19
  8009a4:	dc400904 	addi	r17,sp,36
  8009a8:	dfc01515 	stw	ra,84(sp)
  8009ac:	da400115 	stw	r9,4(sp)
  8009b0:	d9c00315 	stw	r7,12(sp)
  8009b4:	da000015 	stw	r8,0(sp)
  8009b8:	d9800215 	stw	r6,8(sp)
  8009bc:	08010c00 	call	8010c0 <__unpack_d>
  8009c0:	d9000204 	addi	r4,sp,8
  8009c4:	880b883a 	mov	r5,r17
  8009c8:	08010c00 	call	8010c0 <__unpack_d>
  8009cc:	d9800e04 	addi	r6,sp,56
  8009d0:	9809883a 	mov	r4,r19
  8009d4:	880b883a 	mov	r5,r17
  8009d8:	08004f40 	call	8004f4 <_fpadd_parts>
  8009dc:	1009883a 	mov	r4,r2
  8009e0:	0800dac0 	call	800dac <__pack_d>
  8009e4:	dfc01517 	ldw	ra,84(sp)
  8009e8:	dcc01417 	ldw	r19,80(sp)
  8009ec:	dc401317 	ldw	r17,76(sp)
  8009f0:	dec01604 	addi	sp,sp,88
  8009f4:	f800283a 	ret

008009f8 <__make_dp>:
  8009f8:	defff904 	addi	sp,sp,-28
  8009fc:	d8c00717 	ldw	r3,28(sp)
  800a00:	d9000015 	stw	r4,0(sp)
  800a04:	d809883a 	mov	r4,sp
  800a08:	dfc00515 	stw	ra,20(sp)
  800a0c:	d9c00615 	stw	r7,24(sp)
  800a10:	d9400115 	stw	r5,4(sp)
  800a14:	d9800215 	stw	r6,8(sp)
  800a18:	d8c00415 	stw	r3,16(sp)
  800a1c:	d9c00315 	stw	r7,12(sp)
  800a20:	0800dac0 	call	800dac <__pack_d>
  800a24:	dfc00517 	ldw	ra,20(sp)
  800a28:	dec00704 	addi	sp,sp,28
  800a2c:	f800283a 	ret

00800a30 <__truncdfsf2>:
  800a30:	defff804 	addi	sp,sp,-32
  800a34:	2005883a 	mov	r2,r4
  800a38:	2807883a 	mov	r3,r5
  800a3c:	d809883a 	mov	r4,sp
  800a40:	d9400204 	addi	r5,sp,8
  800a44:	d8c00115 	stw	r3,4(sp)
  800a48:	d8800015 	stw	r2,0(sp)
  800a4c:	dfc00715 	stw	ra,28(sp)
  800a50:	08010c00 	call	8010c0 <__unpack_d>
  800a54:	d9c00517 	ldw	r7,20(sp)
  800a58:	da000617 	ldw	r8,24(sp)
  800a5c:	02d00034 	movhi	r11,16384
  800a60:	5affffc4 	addi	r11,r11,-1
  800a64:	3812d7ba 	srli	r9,r7,30
  800a68:	401a90ba 	slli	r13,r8,2
  800a6c:	3ac4703a 	and	r2,r7,r11
  800a70:	0007883a 	mov	r3,zero
  800a74:	6a52b03a 	or	r9,r13,r9
  800a78:	10c4b03a 	or	r2,r2,r3
  800a7c:	d9000217 	ldw	r4,8(sp)
  800a80:	d9400317 	ldw	r5,12(sp)
  800a84:	d9800417 	ldw	r6,16(sp)
  800a88:	480f883a 	mov	r7,r9
  800a8c:	10000126 	beq	r2,zero,800a94 <__truncdfsf2+0x64>
  800a90:	49c00054 	ori	r7,r9,1
  800a94:	0800d800 	call	800d80 <__make_fp>
  800a98:	dfc00717 	ldw	ra,28(sp)
  800a9c:	dec00804 	addi	sp,sp,32
  800aa0:	f800283a 	ret

00800aa4 <__floatunsidf>:
  800aa4:	defff204 	addi	sp,sp,-56
  800aa8:	dfc00d15 	stw	ra,52(sp)
  800aac:	ddc00c15 	stw	r23,48(sp)
  800ab0:	dd800b15 	stw	r22,44(sp)
  800ab4:	dd400a15 	stw	r21,40(sp)
  800ab8:	dd000915 	stw	r20,36(sp)
  800abc:	dcc00815 	stw	r19,32(sp)
  800ac0:	dc800715 	stw	r18,28(sp)
  800ac4:	dc400615 	stw	r17,24(sp)
  800ac8:	dc000515 	stw	r16,20(sp)
  800acc:	d8000115 	stw	zero,4(sp)
  800ad0:	20000f1e 	bne	r4,zero,800b10 <__floatunsidf+0x6c>
  800ad4:	00800084 	movi	r2,2
  800ad8:	d8800015 	stw	r2,0(sp)
  800adc:	d809883a 	mov	r4,sp
  800ae0:	0800dac0 	call	800dac <__pack_d>
  800ae4:	dfc00d17 	ldw	ra,52(sp)
  800ae8:	ddc00c17 	ldw	r23,48(sp)
  800aec:	dd800b17 	ldw	r22,44(sp)
  800af0:	dd400a17 	ldw	r21,40(sp)
  800af4:	dd000917 	ldw	r20,36(sp)
  800af8:	dcc00817 	ldw	r19,32(sp)
  800afc:	dc800717 	ldw	r18,28(sp)
  800b00:	dc400617 	ldw	r17,24(sp)
  800b04:	dc000517 	ldw	r16,20(sp)
  800b08:	dec00e04 	addi	sp,sp,56
  800b0c:	f800283a 	ret
  800b10:	008000c4 	movi	r2,3
  800b14:	00c00f04 	movi	r3,60
  800b18:	002f883a 	mov	r23,zero
  800b1c:	202d883a 	mov	r22,r4
  800b20:	d8800015 	stw	r2,0(sp)
  800b24:	d8c00215 	stw	r3,8(sp)
  800b28:	d9000315 	stw	r4,12(sp)
  800b2c:	ddc00415 	stw	r23,16(sp)
  800b30:	0800c380 	call	800c38 <__clzsi2>
  800b34:	12400744 	addi	r9,r2,29
  800b38:	48000b16 	blt	r9,zero,800b68 <__floatunsidf+0xc4>
  800b3c:	483fe726 	beq	r9,zero,800adc <__floatunsidf+0x38>
  800b40:	10bfff44 	addi	r2,r2,-3
  800b44:	10002e16 	blt	r2,zero,800c00 <__floatunsidf+0x15c>
  800b48:	b0a2983a 	sll	r17,r22,r2
  800b4c:	0021883a 	mov	r16,zero
  800b50:	d8800217 	ldw	r2,8(sp)
  800b54:	dc400415 	stw	r17,16(sp)
  800b58:	dc000315 	stw	r16,12(sp)
  800b5c:	1245c83a 	sub	r2,r2,r9
  800b60:	d8800215 	stw	r2,8(sp)
  800b64:	003fdd06 	br	800adc <__floatunsidf+0x38>
  800b68:	0255c83a 	sub	r10,zero,r9
  800b6c:	51bff804 	addi	r6,r10,-32
  800b70:	30001b16 	blt	r6,zero,800be0 <__floatunsidf+0x13c>
  800b74:	b9a8d83a 	srl	r20,r23,r6
  800b78:	002b883a 	mov	r21,zero
  800b7c:	000f883a 	mov	r7,zero
  800b80:	01000044 	movi	r4,1
  800b84:	0011883a 	mov	r8,zero
  800b88:	30002516 	blt	r6,zero,800c20 <__floatunsidf+0x17c>
  800b8c:	21a6983a 	sll	r19,r4,r6
  800b90:	0025883a 	mov	r18,zero
  800b94:	00bfffc4 	movi	r2,-1
  800b98:	9089883a 	add	r4,r18,r2
  800b9c:	988b883a 	add	r5,r19,r2
  800ba0:	248d803a 	cmpltu	r6,r4,r18
  800ba4:	314b883a 	add	r5,r6,r5
  800ba8:	b104703a 	and	r2,r22,r4
  800bac:	b946703a 	and	r3,r23,r5
  800bb0:	10c4b03a 	or	r2,r2,r3
  800bb4:	10000226 	beq	r2,zero,800bc0 <__floatunsidf+0x11c>
  800bb8:	01c00044 	movi	r7,1
  800bbc:	0011883a 	mov	r8,zero
  800bc0:	d9000217 	ldw	r4,8(sp)
  800bc4:	a1c4b03a 	or	r2,r20,r7
  800bc8:	aa06b03a 	or	r3,r21,r8
  800bcc:	2249c83a 	sub	r4,r4,r9
  800bd0:	d8c00415 	stw	r3,16(sp)
  800bd4:	d9000215 	stw	r4,8(sp)
  800bd8:	d8800315 	stw	r2,12(sp)
  800bdc:	003fbf06 	br	800adc <__floatunsidf+0x38>
  800be0:	bdc7883a 	add	r3,r23,r23
  800be4:	008007c4 	movi	r2,31
  800be8:	1285c83a 	sub	r2,r2,r10
  800bec:	1886983a 	sll	r3,r3,r2
  800bf0:	b2a8d83a 	srl	r20,r22,r10
  800bf4:	baaad83a 	srl	r21,r23,r10
  800bf8:	1d28b03a 	or	r20,r3,r20
  800bfc:	003fdf06 	br	800b7c <__floatunsidf+0xd8>
  800c00:	b006d07a 	srli	r3,r22,1
  800c04:	008007c4 	movi	r2,31
  800c08:	1245c83a 	sub	r2,r2,r9
  800c0c:	1886d83a 	srl	r3,r3,r2
  800c10:	ba62983a 	sll	r17,r23,r9
  800c14:	b260983a 	sll	r16,r22,r9
  800c18:	1c62b03a 	or	r17,r3,r17
  800c1c:	003fcc06 	br	800b50 <__floatunsidf+0xac>
  800c20:	2006d07a 	srli	r3,r4,1
  800c24:	008007c4 	movi	r2,31
  800c28:	1285c83a 	sub	r2,r2,r10
  800c2c:	18a6d83a 	srl	r19,r3,r2
  800c30:	22a4983a 	sll	r18,r4,r10
  800c34:	003fd706 	br	800b94 <__floatunsidf+0xf0>

00800c38 <__clzsi2>:
  800c38:	00bfffd4 	movui	r2,65535
  800c3c:	11000e36 	bltu	r2,r4,800c78 <__clzsi2+0x40>
  800c40:	00803fc4 	movi	r2,255
  800c44:	01400204 	movi	r5,8
  800c48:	0007883a 	mov	r3,zero
  800c4c:	11001036 	bltu	r2,r4,800c90 <__clzsi2+0x58>
  800c50:	000b883a 	mov	r5,zero
  800c54:	20c6d83a 	srl	r3,r4,r3
  800c58:	00802074 	movhi	r2,129
  800c5c:	10b1fa04 	addi	r2,r2,-14360
  800c60:	1887883a 	add	r3,r3,r2
  800c64:	18800003 	ldbu	r2,0(r3)
  800c68:	00c00804 	movi	r3,32
  800c6c:	2885883a 	add	r2,r5,r2
  800c70:	1885c83a 	sub	r2,r3,r2
  800c74:	f800283a 	ret
  800c78:	01400404 	movi	r5,16
  800c7c:	00804034 	movhi	r2,256
  800c80:	10bfffc4 	addi	r2,r2,-1
  800c84:	2807883a 	mov	r3,r5
  800c88:	113ff22e 	bgeu	r2,r4,800c54 <__clzsi2+0x1c>
  800c8c:	01400604 	movi	r5,24
  800c90:	2807883a 	mov	r3,r5
  800c94:	20c6d83a 	srl	r3,r4,r3
  800c98:	00802074 	movhi	r2,129
  800c9c:	10b1fa04 	addi	r2,r2,-14360
  800ca0:	1887883a 	add	r3,r3,r2
  800ca4:	18800003 	ldbu	r2,0(r3)
  800ca8:	00c00804 	movi	r3,32
  800cac:	2885883a 	add	r2,r5,r2
  800cb0:	1885c83a 	sub	r2,r3,r2
  800cb4:	f800283a 	ret

00800cb8 <__unpack_f>:
  800cb8:	21800017 	ldw	r6,0(r4)
  800cbc:	00c02034 	movhi	r3,128
  800cc0:	18ffffc4 	addi	r3,r3,-1
  800cc4:	3004d5fa 	srli	r2,r6,23
  800cc8:	3008d7fa 	srli	r4,r6,31
  800ccc:	30ce703a 	and	r7,r6,r3
  800cd0:	10c03fcc 	andi	r3,r2,255
  800cd4:	29000115 	stw	r4,4(r5)
  800cd8:	1800131e 	bne	r3,zero,800d28 <__unpack_f+0x70>
  800cdc:	38000f26 	beq	r7,zero,800d1c <__unpack_f+0x64>
  800ce0:	380691fa 	slli	r3,r7,7
  800ce4:	01bfe084 	movi	r6,-126
  800ce8:	008000c4 	movi	r2,3
  800cec:	01100034 	movhi	r4,16384
  800cf0:	213fffc4 	addi	r4,r4,-1
  800cf4:	28800015 	stw	r2,0(r5)
  800cf8:	29800215 	stw	r6,8(r5)
  800cfc:	20c00536 	bltu	r4,r3,800d14 <__unpack_f+0x5c>
  800d00:	3005883a 	mov	r2,r6
  800d04:	18c7883a 	add	r3,r3,r3
  800d08:	10bfffc4 	addi	r2,r2,-1
  800d0c:	20fffd2e 	bgeu	r4,r3,800d04 <__unpack_f+0x4c>
  800d10:	28800215 	stw	r2,8(r5)
  800d14:	28c00315 	stw	r3,12(r5)
  800d18:	f800283a 	ret
  800d1c:	00800084 	movi	r2,2
  800d20:	28800015 	stw	r2,0(r5)
  800d24:	f800283a 	ret
  800d28:	00803fc4 	movi	r2,255
  800d2c:	18800826 	beq	r3,r2,800d50 <__unpack_f+0x98>
  800d30:	380491fa 	slli	r2,r7,7
  800d34:	18ffe044 	addi	r3,r3,-127
  800d38:	28c00215 	stw	r3,8(r5)
  800d3c:	10900034 	orhi	r2,r2,16384
  800d40:	28800315 	stw	r2,12(r5)
  800d44:	008000c4 	movi	r2,3
  800d48:	28800015 	stw	r2,0(r5)
  800d4c:	f800283a 	ret
  800d50:	3800031e 	bne	r7,zero,800d60 <__unpack_f+0xa8>
  800d54:	00800104 	movi	r2,4
  800d58:	28800015 	stw	r2,0(r5)
  800d5c:	f800283a 	ret
  800d60:	3080042c 	andhi	r2,r6,16
  800d64:	10000426 	beq	r2,zero,800d78 <__unpack_f+0xc0>
  800d68:	00800044 	movi	r2,1
  800d6c:	28800015 	stw	r2,0(r5)
  800d70:	29c00315 	stw	r7,12(r5)
  800d74:	f800283a 	ret
  800d78:	28000015 	stw	zero,0(r5)
  800d7c:	003ffc06 	br	800d70 <__unpack_f+0xb8>

00800d80 <__make_fp>:
  800d80:	defffb04 	addi	sp,sp,-20
  800d84:	d9000015 	stw	r4,0(sp)
  800d88:	d809883a 	mov	r4,sp
  800d8c:	dfc00415 	stw	ra,16(sp)
  800d90:	d9400115 	stw	r5,4(sp)
  800d94:	d9800215 	stw	r6,8(sp)
  800d98:	d9c00315 	stw	r7,12(sp)
  800d9c:	08011f80 	call	8011f8 <__pack_f>
  800da0:	dfc00417 	ldw	ra,16(sp)
  800da4:	dec00504 	addi	sp,sp,20
  800da8:	f800283a 	ret

00800dac <__pack_d>:
  800dac:	20c00017 	ldw	r3,0(r4)
  800db0:	defffd04 	addi	sp,sp,-12
  800db4:	dc000015 	stw	r16,0(sp)
  800db8:	dc800215 	stw	r18,8(sp)
  800dbc:	dc400115 	stw	r17,4(sp)
  800dc0:	00800044 	movi	r2,1
  800dc4:	22000317 	ldw	r8,12(r4)
  800dc8:	001f883a 	mov	r15,zero
  800dcc:	22400417 	ldw	r9,16(r4)
  800dd0:	24000117 	ldw	r16,4(r4)
  800dd4:	10c0552e 	bgeu	r2,r3,800f2c <__pack_d+0x180>
  800dd8:	00800104 	movi	r2,4
  800ddc:	18804f26 	beq	r3,r2,800f1c <__pack_d+0x170>
  800de0:	00800084 	movi	r2,2
  800de4:	18800226 	beq	r3,r2,800df0 <__pack_d+0x44>
  800de8:	4244b03a 	or	r2,r8,r9
  800dec:	10001a1e 	bne	r2,zero,800e58 <__pack_d+0xac>
  800df0:	000d883a 	mov	r6,zero
  800df4:	000f883a 	mov	r7,zero
  800df8:	0011883a 	mov	r8,zero
  800dfc:	00800434 	movhi	r2,16
  800e00:	10bfffc4 	addi	r2,r2,-1
  800e04:	301d883a 	mov	r14,r6
  800e08:	3884703a 	and	r2,r7,r2
  800e0c:	400a953a 	slli	r5,r8,20
  800e10:	79bffc2c 	andhi	r6,r15,65520
  800e14:	308cb03a 	or	r6,r6,r2
  800e18:	00e00434 	movhi	r3,32784
  800e1c:	18ffffc4 	addi	r3,r3,-1
  800e20:	800497fa 	slli	r2,r16,31
  800e24:	30c6703a 	and	r3,r6,r3
  800e28:	1946b03a 	or	r3,r3,r5
  800e2c:	01600034 	movhi	r5,32768
  800e30:	297fffc4 	addi	r5,r5,-1
  800e34:	194a703a 	and	r5,r3,r5
  800e38:	288ab03a 	or	r5,r5,r2
  800e3c:	2807883a 	mov	r3,r5
  800e40:	7005883a 	mov	r2,r14
  800e44:	dc800217 	ldw	r18,8(sp)
  800e48:	dc400117 	ldw	r17,4(sp)
  800e4c:	dc000017 	ldw	r16,0(sp)
  800e50:	dec00304 	addi	sp,sp,12
  800e54:	f800283a 	ret
  800e58:	21000217 	ldw	r4,8(r4)
  800e5c:	00bf0084 	movi	r2,-1022
  800e60:	20803f16 	blt	r4,r2,800f60 <__pack_d+0x1b4>
  800e64:	0080ffc4 	movi	r2,1023
  800e68:	11002c16 	blt	r2,r4,800f1c <__pack_d+0x170>
  800e6c:	00803fc4 	movi	r2,255
  800e70:	408c703a 	and	r6,r8,r2
  800e74:	00802004 	movi	r2,128
  800e78:	0007883a 	mov	r3,zero
  800e7c:	000f883a 	mov	r7,zero
  800e80:	2280ffc4 	addi	r10,r4,1023
  800e84:	30801e26 	beq	r6,r2,800f00 <__pack_d+0x154>
  800e88:	00801fc4 	movi	r2,127
  800e8c:	4089883a 	add	r4,r8,r2
  800e90:	220d803a 	cmpltu	r6,r4,r8
  800e94:	324d883a 	add	r6,r6,r9
  800e98:	2011883a 	mov	r8,r4
  800e9c:	3013883a 	mov	r9,r6
  800ea0:	00880034 	movhi	r2,8192
  800ea4:	10bfffc4 	addi	r2,r2,-1
  800ea8:	12400d36 	bltu	r2,r9,800ee0 <__pack_d+0x134>
  800eac:	4804963a 	slli	r2,r9,24
  800eb0:	400cd23a 	srli	r6,r8,8
  800eb4:	480ed23a 	srli	r7,r9,8
  800eb8:	013fffc4 	movi	r4,-1
  800ebc:	118cb03a 	or	r6,r2,r6
  800ec0:	01400434 	movhi	r5,16
  800ec4:	297fffc4 	addi	r5,r5,-1
  800ec8:	3104703a 	and	r2,r6,r4
  800ecc:	3946703a 	and	r3,r7,r5
  800ed0:	5201ffcc 	andi	r8,r10,2047
  800ed4:	100d883a 	mov	r6,r2
  800ed8:	180f883a 	mov	r7,r3
  800edc:	003fc706 	br	800dfc <__pack_d+0x50>
  800ee0:	480897fa 	slli	r4,r9,31
  800ee4:	4004d07a 	srli	r2,r8,1
  800ee8:	4806d07a 	srli	r3,r9,1
  800eec:	52800044 	addi	r10,r10,1
  800ef0:	2084b03a 	or	r2,r4,r2
  800ef4:	1011883a 	mov	r8,r2
  800ef8:	1813883a 	mov	r9,r3
  800efc:	003feb06 	br	800eac <__pack_d+0x100>
  800f00:	383fe11e 	bne	r7,zero,800e88 <__pack_d+0xdc>
  800f04:	01004004 	movi	r4,256
  800f08:	4104703a 	and	r2,r8,r4
  800f0c:	10c4b03a 	or	r2,r2,r3
  800f10:	103fe326 	beq	r2,zero,800ea0 <__pack_d+0xf4>
  800f14:	3005883a 	mov	r2,r6
  800f18:	003fdc06 	br	800e8c <__pack_d+0xe0>
  800f1c:	000d883a 	mov	r6,zero
  800f20:	000f883a 	mov	r7,zero
  800f24:	0201ffc4 	movi	r8,2047
  800f28:	003fb406 	br	800dfc <__pack_d+0x50>
  800f2c:	0005883a 	mov	r2,zero
  800f30:	00c00234 	movhi	r3,8
  800f34:	408cb03a 	or	r6,r8,r2
  800f38:	48ceb03a 	or	r7,r9,r3
  800f3c:	013fffc4 	movi	r4,-1
  800f40:	01400434 	movhi	r5,16
  800f44:	297fffc4 	addi	r5,r5,-1
  800f48:	3104703a 	and	r2,r6,r4
  800f4c:	3946703a 	and	r3,r7,r5
  800f50:	100d883a 	mov	r6,r2
  800f54:	180f883a 	mov	r7,r3
  800f58:	0201ffc4 	movi	r8,2047
  800f5c:	003fa706 	br	800dfc <__pack_d+0x50>
  800f60:	1109c83a 	sub	r4,r2,r4
  800f64:	00800e04 	movi	r2,56
  800f68:	11004316 	blt	r2,r4,801078 <__pack_d+0x2cc>
  800f6c:	21fff804 	addi	r7,r4,-32
  800f70:	38004516 	blt	r7,zero,801088 <__pack_d+0x2dc>
  800f74:	49d8d83a 	srl	r12,r9,r7
  800f78:	001b883a 	mov	r13,zero
  800f7c:	0023883a 	mov	r17,zero
  800f80:	01400044 	movi	r5,1
  800f84:	0025883a 	mov	r18,zero
  800f88:	38004716 	blt	r7,zero,8010a8 <__pack_d+0x2fc>
  800f8c:	29d6983a 	sll	r11,r5,r7
  800f90:	0015883a 	mov	r10,zero
  800f94:	00bfffc4 	movi	r2,-1
  800f98:	5089883a 	add	r4,r10,r2
  800f9c:	588b883a 	add	r5,r11,r2
  800fa0:	228d803a 	cmpltu	r6,r4,r10
  800fa4:	314b883a 	add	r5,r6,r5
  800fa8:	4104703a 	and	r2,r8,r4
  800fac:	4946703a 	and	r3,r9,r5
  800fb0:	10c4b03a 	or	r2,r2,r3
  800fb4:	10000226 	beq	r2,zero,800fc0 <__pack_d+0x214>
  800fb8:	04400044 	movi	r17,1
  800fbc:	0025883a 	mov	r18,zero
  800fc0:	00803fc4 	movi	r2,255
  800fc4:	644eb03a 	or	r7,r12,r17
  800fc8:	3892703a 	and	r9,r7,r2
  800fcc:	00802004 	movi	r2,128
  800fd0:	6c90b03a 	or	r8,r13,r18
  800fd4:	0015883a 	mov	r10,zero
  800fd8:	48801626 	beq	r9,r2,801034 <__pack_d+0x288>
  800fdc:	01001fc4 	movi	r4,127
  800fe0:	3905883a 	add	r2,r7,r4
  800fe4:	11cd803a 	cmpltu	r6,r2,r7
  800fe8:	320d883a 	add	r6,r6,r8
  800fec:	100f883a 	mov	r7,r2
  800ff0:	00840034 	movhi	r2,4096
  800ff4:	10bfffc4 	addi	r2,r2,-1
  800ff8:	3011883a 	mov	r8,r6
  800ffc:	0007883a 	mov	r3,zero
  801000:	11801b36 	bltu	r2,r6,801070 <__pack_d+0x2c4>
  801004:	4004963a 	slli	r2,r8,24
  801008:	3808d23a 	srli	r4,r7,8
  80100c:	400ad23a 	srli	r5,r8,8
  801010:	1813883a 	mov	r9,r3
  801014:	1108b03a 	or	r4,r2,r4
  801018:	00bfffc4 	movi	r2,-1
  80101c:	00c00434 	movhi	r3,16
  801020:	18ffffc4 	addi	r3,r3,-1
  801024:	208c703a 	and	r6,r4,r2
  801028:	28ce703a 	and	r7,r5,r3
  80102c:	4a01ffcc 	andi	r8,r9,2047
  801030:	003f7206 	br	800dfc <__pack_d+0x50>
  801034:	503fe91e 	bne	r10,zero,800fdc <__pack_d+0x230>
  801038:	01004004 	movi	r4,256
  80103c:	3904703a 	and	r2,r7,r4
  801040:	0007883a 	mov	r3,zero
  801044:	10c4b03a 	or	r2,r2,r3
  801048:	10000626 	beq	r2,zero,801064 <__pack_d+0x2b8>
  80104c:	3a45883a 	add	r2,r7,r9
  801050:	11cd803a 	cmpltu	r6,r2,r7
  801054:	320d883a 	add	r6,r6,r8
  801058:	100f883a 	mov	r7,r2
  80105c:	3011883a 	mov	r8,r6
  801060:	0007883a 	mov	r3,zero
  801064:	00840034 	movhi	r2,4096
  801068:	10bfffc4 	addi	r2,r2,-1
  80106c:	123fe52e 	bgeu	r2,r8,801004 <__pack_d+0x258>
  801070:	00c00044 	movi	r3,1
  801074:	003fe306 	br	801004 <__pack_d+0x258>
  801078:	0009883a 	mov	r4,zero
  80107c:	0013883a 	mov	r9,zero
  801080:	000b883a 	mov	r5,zero
  801084:	003fe406 	br	801018 <__pack_d+0x26c>
  801088:	4a47883a 	add	r3,r9,r9
  80108c:	008007c4 	movi	r2,31
  801090:	1105c83a 	sub	r2,r2,r4
  801094:	1886983a 	sll	r3,r3,r2
  801098:	4118d83a 	srl	r12,r8,r4
  80109c:	491ad83a 	srl	r13,r9,r4
  8010a0:	1b18b03a 	or	r12,r3,r12
  8010a4:	003fb506 	br	800f7c <__pack_d+0x1d0>
  8010a8:	2806d07a 	srli	r3,r5,1
  8010ac:	008007c4 	movi	r2,31
  8010b0:	1105c83a 	sub	r2,r2,r4
  8010b4:	1896d83a 	srl	r11,r3,r2
  8010b8:	2914983a 	sll	r10,r5,r4
  8010bc:	003fb506 	br	800f94 <__pack_d+0x1e8>

008010c0 <__unpack_d>:
  8010c0:	20c00117 	ldw	r3,4(r4)
  8010c4:	22400017 	ldw	r9,0(r4)
  8010c8:	00800434 	movhi	r2,16
  8010cc:	10bfffc4 	addi	r2,r2,-1
  8010d0:	1808d53a 	srli	r4,r3,20
  8010d4:	180cd7fa 	srli	r6,r3,31
  8010d8:	1894703a 	and	r10,r3,r2
  8010dc:	2201ffcc 	andi	r8,r4,2047
  8010e0:	281b883a 	mov	r13,r5
  8010e4:	4817883a 	mov	r11,r9
  8010e8:	29800115 	stw	r6,4(r5)
  8010ec:	5019883a 	mov	r12,r10
  8010f0:	40001e1e 	bne	r8,zero,80116c <__unpack_d+0xac>
  8010f4:	4a84b03a 	or	r2,r9,r10
  8010f8:	10001926 	beq	r2,zero,801160 <__unpack_d+0xa0>
  8010fc:	4804d63a 	srli	r2,r9,24
  801100:	500c923a 	slli	r6,r10,8
  801104:	013f0084 	movi	r4,-1022
  801108:	00c40034 	movhi	r3,4096
  80110c:	18ffffc4 	addi	r3,r3,-1
  801110:	118cb03a 	or	r6,r2,r6
  801114:	008000c4 	movi	r2,3
  801118:	480a923a 	slli	r5,r9,8
  80111c:	68800015 	stw	r2,0(r13)
  801120:	69000215 	stw	r4,8(r13)
  801124:	19800b36 	bltu	r3,r6,801154 <__unpack_d+0x94>
  801128:	200f883a 	mov	r7,r4
  80112c:	1811883a 	mov	r8,r3
  801130:	2945883a 	add	r2,r5,r5
  801134:	1149803a 	cmpltu	r4,r2,r5
  801138:	3187883a 	add	r3,r6,r6
  80113c:	20c9883a 	add	r4,r4,r3
  801140:	100b883a 	mov	r5,r2
  801144:	200d883a 	mov	r6,r4
  801148:	39ffffc4 	addi	r7,r7,-1
  80114c:	413ff82e 	bgeu	r8,r4,801130 <__unpack_d+0x70>
  801150:	69c00215 	stw	r7,8(r13)
  801154:	69800415 	stw	r6,16(r13)
  801158:	69400315 	stw	r5,12(r13)
  80115c:	f800283a 	ret
  801160:	00800084 	movi	r2,2
  801164:	28800015 	stw	r2,0(r5)
  801168:	f800283a 	ret
  80116c:	0081ffc4 	movi	r2,2047
  801170:	40800f26 	beq	r8,r2,8011b0 <__unpack_d+0xf0>
  801174:	480cd63a 	srli	r6,r9,24
  801178:	5006923a 	slli	r3,r10,8
  80117c:	4804923a 	slli	r2,r9,8
  801180:	0009883a 	mov	r4,zero
  801184:	30c6b03a 	or	r3,r6,r3
  801188:	01440034 	movhi	r5,4096
  80118c:	110cb03a 	or	r6,r2,r4
  801190:	423f0044 	addi	r8,r8,-1023
  801194:	194eb03a 	or	r7,r3,r5
  801198:	008000c4 	movi	r2,3
  80119c:	69c00415 	stw	r7,16(r13)
  8011a0:	6a000215 	stw	r8,8(r13)
  8011a4:	68800015 	stw	r2,0(r13)
  8011a8:	69800315 	stw	r6,12(r13)
  8011ac:	f800283a 	ret
  8011b0:	4a84b03a 	or	r2,r9,r10
  8011b4:	1000031e 	bne	r2,zero,8011c4 <__unpack_d+0x104>
  8011b8:	00800104 	movi	r2,4
  8011bc:	28800015 	stw	r2,0(r5)
  8011c0:	f800283a 	ret
  8011c4:	0009883a 	mov	r4,zero
  8011c8:	01400234 	movhi	r5,8
  8011cc:	4904703a 	and	r2,r9,r4
  8011d0:	5146703a 	and	r3,r10,r5
  8011d4:	10c4b03a 	or	r2,r2,r3
  8011d8:	10000526 	beq	r2,zero,8011f0 <__unpack_d+0x130>
  8011dc:	00800044 	movi	r2,1
  8011e0:	68800015 	stw	r2,0(r13)
  8011e4:	6b000415 	stw	r12,16(r13)
  8011e8:	6ac00315 	stw	r11,12(r13)
  8011ec:	f800283a 	ret
  8011f0:	68000015 	stw	zero,0(r13)
  8011f4:	003ffb06 	br	8011e4 <__unpack_d+0x124>

008011f8 <__pack_f>:
  8011f8:	20c00017 	ldw	r3,0(r4)
  8011fc:	01c00044 	movi	r7,1
  801200:	21800317 	ldw	r6,12(r4)
  801204:	21400117 	ldw	r5,4(r4)
  801208:	38c02d2e 	bgeu	r7,r3,8012c0 <__pack_f+0xc8>
  80120c:	00800104 	movi	r2,4
  801210:	18802826 	beq	r3,r2,8012b4 <__pack_f+0xbc>
  801214:	00800084 	movi	r2,2
  801218:	18800126 	beq	r3,r2,801220 <__pack_f+0x28>
  80121c:	3000101e 	bne	r6,zero,801260 <__pack_f+0x68>
  801220:	000d883a 	mov	r6,zero
  801224:	0007883a 	mov	r3,zero
  801228:	19003fcc 	andi	r4,r3,255
  80122c:	200895fa 	slli	r4,r4,23
  801230:	00c02034 	movhi	r3,128
  801234:	18ffffc4 	addi	r3,r3,-1
  801238:	30c6703a 	and	r3,r6,r3
  80123c:	10a0002c 	andhi	r2,r2,32768
  801240:	10c4b03a 	or	r2,r2,r3
  801244:	280a97fa 	slli	r5,r5,31
  801248:	1104b03a 	or	r2,r2,r4
  80124c:	00e00034 	movhi	r3,32768
  801250:	18ffffc4 	addi	r3,r3,-1
  801254:	10c4703a 	and	r2,r2,r3
  801258:	1144b03a 	or	r2,r2,r5
  80125c:	f800283a 	ret
  801260:	21000217 	ldw	r4,8(r4)
  801264:	00bfe084 	movi	r2,-126
  801268:	20801b16 	blt	r4,r2,8012d8 <__pack_f+0xe0>
  80126c:	00801fc4 	movi	r2,127
  801270:	11001016 	blt	r2,r4,8012b4 <__pack_f+0xbc>
  801274:	308e703a 	and	r7,r6,r2
  801278:	2087883a 	add	r3,r4,r2
  80127c:	00801004 	movi	r2,64
  801280:	38800526 	beq	r7,r2,801298 <__pack_f+0xa0>
  801284:	31800fc4 	addi	r6,r6,63
  801288:	30000716 	blt	r6,zero,8012a8 <__pack_f+0xb0>
  80128c:	300490ba 	slli	r2,r6,2
  801290:	100cd27a 	srli	r6,r2,9
  801294:	003fe406 	br	801228 <__pack_f+0x30>
  801298:	3080200c 	andi	r2,r6,128
  80129c:	103ffa26 	beq	r2,zero,801288 <__pack_f+0x90>
  8012a0:	31cd883a 	add	r6,r6,r7
  8012a4:	003ff806 	br	801288 <__pack_f+0x90>
  8012a8:	300cd07a 	srli	r6,r6,1
  8012ac:	18c00044 	addi	r3,r3,1
  8012b0:	003ff606 	br	80128c <__pack_f+0x94>
  8012b4:	000d883a 	mov	r6,zero
  8012b8:	00ffffc4 	movi	r3,-1
  8012bc:	003fda06 	br	801228 <__pack_f+0x30>
  8012c0:	31800434 	orhi	r6,r6,16
  8012c4:	00802034 	movhi	r2,128
  8012c8:	10bfffc4 	addi	r2,r2,-1
  8012cc:	308c703a 	and	r6,r6,r2
  8012d0:	00ffffc4 	movi	r3,-1
  8012d4:	003fd406 	br	801228 <__pack_f+0x30>
  8012d8:	1109c83a 	sub	r4,r2,r4
  8012dc:	00800644 	movi	r2,25
  8012e0:	11001216 	blt	r2,r4,80132c <__pack_f+0x134>
  8012e4:	3904983a 	sll	r2,r7,r4
  8012e8:	3106d83a 	srl	r3,r6,r4
  8012ec:	10bfffc4 	addi	r2,r2,-1
  8012f0:	3084703a 	and	r2,r6,r2
  8012f4:	1004c03a 	cmpne	r2,r2,zero
  8012f8:	1886b03a 	or	r3,r3,r2
  8012fc:	19001fcc 	andi	r4,r3,127
  801300:	00801004 	movi	r2,64
  801304:	20800c26 	beq	r4,r2,801338 <__pack_f+0x140>
  801308:	18c00fc4 	addi	r3,r3,63
  80130c:	00900034 	movhi	r2,16384
  801310:	10bfffc4 	addi	r2,r2,-1
  801314:	180cd1fa 	srli	r6,r3,7
  801318:	10c7803a 	cmpltu	r3,r2,r3
  80131c:	00802034 	movhi	r2,128
  801320:	10bfffc4 	addi	r2,r2,-1
  801324:	308c703a 	and	r6,r6,r2
  801328:	003fbf06 	br	801228 <__pack_f+0x30>
  80132c:	0007883a 	mov	r3,zero
  801330:	000d883a 	mov	r6,zero
  801334:	003ff906 	br	80131c <__pack_f+0x124>
  801338:	1880200c 	andi	r2,r3,128
  80133c:	10000126 	beq	r2,zero,801344 <__pack_f+0x14c>
  801340:	1907883a 	add	r3,r3,r4
  801344:	180cd1fa 	srli	r6,r3,7
  801348:	00900034 	movhi	r2,16384
  80134c:	10bfffc4 	addi	r2,r2,-1
  801350:	10c7803a 	cmpltu	r3,r2,r3
  801354:	003ff106 	br	80131c <__pack_f+0x124>

00801358 <gcvt>:
  801358:	defff804 	addi	sp,sp,-32
  80135c:	0005883a 	mov	r2,zero
  801360:	dcc00615 	stw	r19,24(sp)
  801364:	dc800515 	stw	r18,20(sp)
  801368:	3027883a 	mov	r19,r6
  80136c:	3825883a 	mov	r18,r7
  801370:	100d883a 	mov	r6,r2
  801374:	000f883a 	mov	r7,zero
  801378:	dc400415 	stw	r17,16(sp)
  80137c:	dc000315 	stw	r16,12(sp)
  801380:	dfc00715 	stw	ra,28(sp)
  801384:	2021883a 	mov	r16,r4
  801388:	2823883a 	mov	r17,r5
  80138c:	080a7740 	call	80a774 <__ltdf2>
  801390:	9007883a 	mov	r3,r18
  801394:	10001516 	blt	r2,zero,8013ec <gcvt+0x94>
  801398:	00802074 	movhi	r2,129
  80139c:	10b94704 	addi	r2,r2,-6884
  8013a0:	11000017 	ldw	r4,0(r2)
  8013a4:	980f883a 	mov	r7,r19
  8013a8:	008019c4 	movi	r2,103
  8013ac:	880d883a 	mov	r6,r17
  8013b0:	800b883a 	mov	r5,r16
  8013b4:	d8c00015 	stw	r3,0(sp)
  8013b8:	d8800115 	stw	r2,4(sp)
  8013bc:	d8000215 	stw	zero,8(sp)
  8013c0:	08051140 	call	805114 <_gcvt>
  8013c4:	900f883a 	mov	r7,r18
  8013c8:	10000d26 	beq	r2,zero,801400 <gcvt+0xa8>
  8013cc:	3805883a 	mov	r2,r7
  8013d0:	dfc00717 	ldw	ra,28(sp)
  8013d4:	dcc00617 	ldw	r19,24(sp)
  8013d8:	dc800517 	ldw	r18,20(sp)
  8013dc:	dc400417 	ldw	r17,16(sp)
  8013e0:	dc000317 	ldw	r16,12(sp)
  8013e4:	dec00804 	addi	sp,sp,32
  8013e8:	f800283a 	ret
  8013ec:	00800b44 	movi	r2,45
  8013f0:	9cffffc4 	addi	r19,r19,-1
  8013f4:	90c00044 	addi	r3,r18,1
  8013f8:	90800005 	stb	r2,0(r18)
  8013fc:	003fe606 	br	801398 <gcvt+0x40>
  801400:	000f883a 	mov	r7,zero
  801404:	3805883a 	mov	r2,r7
  801408:	dfc00717 	ldw	ra,28(sp)
  80140c:	dcc00617 	ldw	r19,24(sp)
  801410:	dc800517 	ldw	r18,20(sp)
  801414:	dc400417 	ldw	r17,16(sp)
  801418:	dc000317 	ldw	r16,12(sp)
  80141c:	dec00804 	addi	sp,sp,32
  801420:	f800283a 	ret

00801424 <gcvtf>:
  801424:	defffd04 	addi	sp,sp,-12
  801428:	dcc00115 	stw	r19,4(sp)
  80142c:	dc400015 	stw	r17,0(sp)
  801430:	3027883a 	mov	r19,r6
  801434:	2823883a 	mov	r17,r5
  801438:	dfc00215 	stw	ra,8(sp)
  80143c:	08004a00 	call	8004a0 <__extendsfdf2>
  801440:	180b883a 	mov	r5,r3
  801444:	880d883a 	mov	r6,r17
  801448:	980f883a 	mov	r7,r19
  80144c:	1009883a 	mov	r4,r2
  801450:	dfc00217 	ldw	ra,8(sp)
  801454:	dcc00117 	ldw	r19,4(sp)
  801458:	dc400017 	ldw	r17,0(sp)
  80145c:	dec00304 	addi	sp,sp,12
  801460:	08013581 	jmpi	801358 <gcvt>

00801464 <ecvt>:
  801464:	defffd04 	addi	sp,sp,-12
  801468:	da000317 	ldw	r8,12(sp)
  80146c:	dfc00215 	stw	ra,8(sp)
  801470:	d8000115 	stw	zero,4(sp)
  801474:	da000015 	stw	r8,0(sp)
  801478:	08056ec0 	call	8056ec <ecvtbuf>
  80147c:	dfc00217 	ldw	ra,8(sp)
  801480:	dec00304 	addi	sp,sp,12
  801484:	f800283a 	ret

00801488 <ecvtf>:
  801488:	defffb04 	addi	sp,sp,-20
  80148c:	dfc00415 	stw	ra,16(sp)
  801490:	dd400315 	stw	r21,12(sp)
  801494:	dcc00215 	stw	r19,8(sp)
  801498:	382b883a 	mov	r21,r7
  80149c:	3027883a 	mov	r19,r6
  8014a0:	dc400115 	stw	r17,4(sp)
  8014a4:	2823883a 	mov	r17,r5
  8014a8:	08004a00 	call	8004a0 <__extendsfdf2>
  8014ac:	180b883a 	mov	r5,r3
  8014b0:	880d883a 	mov	r6,r17
  8014b4:	980f883a 	mov	r7,r19
  8014b8:	1009883a 	mov	r4,r2
  8014bc:	dd400015 	stw	r21,0(sp)
  8014c0:	08014640 	call	801464 <ecvt>
  8014c4:	dfc00417 	ldw	ra,16(sp)
  8014c8:	dd400317 	ldw	r21,12(sp)
  8014cc:	dcc00217 	ldw	r19,8(sp)
  8014d0:	dc400117 	ldw	r17,4(sp)
  8014d4:	dec00504 	addi	sp,sp,20
  8014d8:	f800283a 	ret

008014dc <fcvt>:
  8014dc:	defffd04 	addi	sp,sp,-12
  8014e0:	da000317 	ldw	r8,12(sp)
  8014e4:	dfc00215 	stw	ra,8(sp)
  8014e8:	d8000115 	stw	zero,4(sp)
  8014ec:	da000015 	stw	r8,0(sp)
  8014f0:	08058340 	call	805834 <fcvtbuf>
  8014f4:	dfc00217 	ldw	ra,8(sp)
  8014f8:	dec00304 	addi	sp,sp,12
  8014fc:	f800283a 	ret

00801500 <fcvtf>:
  801500:	defffb04 	addi	sp,sp,-20
  801504:	dfc00415 	stw	ra,16(sp)
  801508:	dd400315 	stw	r21,12(sp)
  80150c:	dcc00215 	stw	r19,8(sp)
  801510:	382b883a 	mov	r21,r7
  801514:	3027883a 	mov	r19,r6
  801518:	dc400115 	stw	r17,4(sp)
  80151c:	2823883a 	mov	r17,r5
  801520:	08004a00 	call	8004a0 <__extendsfdf2>
  801524:	180b883a 	mov	r5,r3
  801528:	880d883a 	mov	r6,r17
  80152c:	980f883a 	mov	r7,r19
  801530:	1009883a 	mov	r4,r2
  801534:	dd400015 	stw	r21,0(sp)
  801538:	08014dc0 	call	8014dc <fcvt>
  80153c:	dfc00417 	ldw	ra,16(sp)
  801540:	dd400317 	ldw	r21,12(sp)
  801544:	dcc00217 	ldw	r19,8(sp)
  801548:	dc400117 	ldw	r17,4(sp)
  80154c:	dec00504 	addi	sp,sp,20
  801550:	f800283a 	ret

00801554 <printf>:
  801554:	defffb04 	addi	sp,sp,-20
  801558:	dfc00115 	stw	ra,4(sp)
  80155c:	d9400215 	stw	r5,8(sp)
  801560:	d9800315 	stw	r6,12(sp)
  801564:	d9c00415 	stw	r7,16(sp)
  801568:	00802074 	movhi	r2,129
  80156c:	10b94704 	addi	r2,r2,-6884
  801570:	10c00017 	ldw	r3,0(r2)
  801574:	200b883a 	mov	r5,r4
  801578:	d8800204 	addi	r2,sp,8
  80157c:	19000217 	ldw	r4,8(r3)
  801580:	100d883a 	mov	r6,r2
  801584:	d8800015 	stw	r2,0(sp)
  801588:	08035f80 	call	8035f8 <__vfprintf_internal>
  80158c:	dfc00117 	ldw	ra,4(sp)
  801590:	dec00504 	addi	sp,sp,20
  801594:	f800283a 	ret

00801598 <_printf_r>:
  801598:	defffc04 	addi	sp,sp,-16
  80159c:	dfc00115 	stw	ra,4(sp)
  8015a0:	d9800215 	stw	r6,8(sp)
  8015a4:	d9c00315 	stw	r7,12(sp)
  8015a8:	280d883a 	mov	r6,r5
  8015ac:	21400217 	ldw	r5,8(r4)
  8015b0:	d8c00204 	addi	r3,sp,8
  8015b4:	180f883a 	mov	r7,r3
  8015b8:	d8c00015 	stw	r3,0(sp)
  8015bc:	080174c0 	call	80174c <___vfprintf_internal_r>
  8015c0:	dfc00117 	ldw	ra,4(sp)
  8015c4:	dec00404 	addi	sp,sp,16
  8015c8:	f800283a 	ret

008015cc <_puts_r>:
  8015cc:	defff604 	addi	sp,sp,-40
  8015d0:	dc400715 	stw	r17,28(sp)
  8015d4:	2023883a 	mov	r17,r4
  8015d8:	2809883a 	mov	r4,r5
  8015dc:	dfc00915 	stw	ra,36(sp)
  8015e0:	dcc00815 	stw	r19,32(sp)
  8015e4:	2827883a 	mov	r19,r5
  8015e8:	08016800 	call	801680 <strlen>
  8015ec:	89400217 	ldw	r5,8(r17)
  8015f0:	00c02074 	movhi	r3,129
  8015f4:	18f23b04 	addi	r3,r3,-14100
  8015f8:	01c00044 	movi	r7,1
  8015fc:	12000044 	addi	r8,r2,1
  801600:	d8c00515 	stw	r3,20(sp)
  801604:	d9c00615 	stw	r7,24(sp)
  801608:	d8c00304 	addi	r3,sp,12
  80160c:	01c00084 	movi	r7,2
  801610:	8809883a 	mov	r4,r17
  801614:	d80d883a 	mov	r6,sp
  801618:	d8c00015 	stw	r3,0(sp)
  80161c:	dcc00315 	stw	r19,12(sp)
  801620:	da000215 	stw	r8,8(sp)
  801624:	d9c00115 	stw	r7,4(sp)
  801628:	d8800415 	stw	r2,16(sp)
  80162c:	080630c0 	call	80630c <__sfvwrite_r>
  801630:	00ffffc4 	movi	r3,-1
  801634:	10000626 	beq	r2,zero,801650 <_puts_r+0x84>
  801638:	1805883a 	mov	r2,r3
  80163c:	dfc00917 	ldw	ra,36(sp)
  801640:	dcc00817 	ldw	r19,32(sp)
  801644:	dc400717 	ldw	r17,28(sp)
  801648:	dec00a04 	addi	sp,sp,40
  80164c:	f800283a 	ret
  801650:	00c00284 	movi	r3,10
  801654:	1805883a 	mov	r2,r3
  801658:	dfc00917 	ldw	ra,36(sp)
  80165c:	dcc00817 	ldw	r19,32(sp)
  801660:	dc400717 	ldw	r17,28(sp)
  801664:	dec00a04 	addi	sp,sp,40
  801668:	f800283a 	ret

0080166c <puts>:
  80166c:	00802074 	movhi	r2,129
  801670:	10b94704 	addi	r2,r2,-6884
  801674:	200b883a 	mov	r5,r4
  801678:	11000017 	ldw	r4,0(r2)
  80167c:	08015cc1 	jmpi	8015cc <_puts_r>

00801680 <strlen>:
  801680:	208000cc 	andi	r2,r4,3
  801684:	2011883a 	mov	r8,r4
  801688:	1000161e 	bne	r2,zero,8016e4 <strlen+0x64>
  80168c:	20c00017 	ldw	r3,0(r4)
  801690:	017fbff4 	movhi	r5,65279
  801694:	297fbfc4 	addi	r5,r5,-257
  801698:	01e02074 	movhi	r7,32897
  80169c:	39e02004 	addi	r7,r7,-32640
  8016a0:	1945883a 	add	r2,r3,r5
  8016a4:	11c4703a 	and	r2,r2,r7
  8016a8:	00c6303a 	nor	r3,zero,r3
  8016ac:	1886703a 	and	r3,r3,r2
  8016b0:	18000c1e 	bne	r3,zero,8016e4 <strlen+0x64>
  8016b4:	280d883a 	mov	r6,r5
  8016b8:	380b883a 	mov	r5,r7
  8016bc:	21000104 	addi	r4,r4,4
  8016c0:	20800017 	ldw	r2,0(r4)
  8016c4:	1187883a 	add	r3,r2,r6
  8016c8:	1946703a 	and	r3,r3,r5
  8016cc:	0084303a 	nor	r2,zero,r2
  8016d0:	10c4703a 	and	r2,r2,r3
  8016d4:	103ff926 	beq	r2,zero,8016bc <strlen+0x3c>
  8016d8:	20800007 	ldb	r2,0(r4)
  8016dc:	10000326 	beq	r2,zero,8016ec <strlen+0x6c>
  8016e0:	21000044 	addi	r4,r4,1
  8016e4:	20800007 	ldb	r2,0(r4)
  8016e8:	103ffd1e 	bne	r2,zero,8016e0 <strlen+0x60>
  8016ec:	2205c83a 	sub	r2,r4,r8
  8016f0:	f800283a 	ret

008016f4 <__sprint_r>:
  8016f4:	30800217 	ldw	r2,8(r6)
  8016f8:	defffe04 	addi	sp,sp,-8
  8016fc:	dc000015 	stw	r16,0(sp)
  801700:	dfc00115 	stw	ra,4(sp)
  801704:	3021883a 	mov	r16,r6
  801708:	0007883a 	mov	r3,zero
  80170c:	1000061e 	bne	r2,zero,801728 <__sprint_r+0x34>
  801710:	1805883a 	mov	r2,r3
  801714:	30000115 	stw	zero,4(r6)
  801718:	dfc00117 	ldw	ra,4(sp)
  80171c:	dc000017 	ldw	r16,0(sp)
  801720:	dec00204 	addi	sp,sp,8
  801724:	f800283a 	ret
  801728:	080630c0 	call	80630c <__sfvwrite_r>
  80172c:	1007883a 	mov	r3,r2
  801730:	1805883a 	mov	r2,r3
  801734:	80000115 	stw	zero,4(r16)
  801738:	80000215 	stw	zero,8(r16)
  80173c:	dfc00117 	ldw	ra,4(sp)
  801740:	dc000017 	ldw	r16,0(sp)
  801744:	dec00204 	addi	sp,sp,8
  801748:	f800283a 	ret

0080174c <___vfprintf_internal_r>:
  80174c:	defea404 	addi	sp,sp,-1392
  801750:	dd815815 	stw	r22,1376(sp)
  801754:	dc015215 	stw	r16,1352(sp)
  801758:	d9c15115 	stw	r7,1348(sp)
  80175c:	dfc15b15 	stw	ra,1388(sp)
  801760:	df015a15 	stw	fp,1384(sp)
  801764:	ddc15915 	stw	r23,1380(sp)
  801768:	dd415715 	stw	r21,1372(sp)
  80176c:	dd015615 	stw	r20,1368(sp)
  801770:	dcc15515 	stw	r19,1364(sp)
  801774:	dc815415 	stw	r18,1360(sp)
  801778:	dc415315 	stw	r17,1356(sp)
  80177c:	282d883a 	mov	r22,r5
  801780:	3021883a 	mov	r16,r6
  801784:	d9014f15 	stw	r4,1340(sp)
  801788:	08069300 	call	806930 <_localeconv_r>
  80178c:	10800017 	ldw	r2,0(r2)
  801790:	d9c15117 	ldw	r7,1348(sp)
  801794:	d8814915 	stw	r2,1316(sp)
  801798:	d8814f17 	ldw	r2,1340(sp)
  80179c:	10000226 	beq	r2,zero,8017a8 <___vfprintf_internal_r+0x5c>
  8017a0:	10800e17 	ldw	r2,56(r2)
  8017a4:	10020d26 	beq	r2,zero,801fdc <___vfprintf_internal_r+0x890>
  8017a8:	b080030b 	ldhu	r2,12(r22)
  8017ac:	1080020c 	andi	r2,r2,8
  8017b0:	10020e26 	beq	r2,zero,801fec <___vfprintf_internal_r+0x8a0>
  8017b4:	b0800417 	ldw	r2,16(r22)
  8017b8:	10020c26 	beq	r2,zero,801fec <___vfprintf_internal_r+0x8a0>
  8017bc:	b200030b 	ldhu	r8,12(r22)
  8017c0:	00800284 	movi	r2,10
  8017c4:	40c0068c 	andi	r3,r8,26
  8017c8:	18802f1e 	bne	r3,r2,801888 <___vfprintf_internal_r+0x13c>
  8017cc:	b080038f 	ldh	r2,14(r22)
  8017d0:	10002d16 	blt	r2,zero,801888 <___vfprintf_internal_r+0x13c>
  8017d4:	b240038b 	ldhu	r9,14(r22)
  8017d8:	b2800717 	ldw	r10,28(r22)
  8017dc:	b2c00917 	ldw	r11,36(r22)
  8017e0:	d9014f17 	ldw	r4,1340(sp)
  8017e4:	dc402904 	addi	r17,sp,164
  8017e8:	d8804004 	addi	r2,sp,256
  8017ec:	00c10004 	movi	r3,1024
  8017f0:	423fff4c 	andi	r8,r8,65533
  8017f4:	800d883a 	mov	r6,r16
  8017f8:	880b883a 	mov	r5,r17
  8017fc:	da002c0d 	sth	r8,176(sp)
  801800:	da402c8d 	sth	r9,178(sp)
  801804:	da803015 	stw	r10,192(sp)
  801808:	dac03215 	stw	r11,200(sp)
  80180c:	d8802d15 	stw	r2,180(sp)
  801810:	d8c02e15 	stw	r3,184(sp)
  801814:	d8802915 	stw	r2,164(sp)
  801818:	d8c02b15 	stw	r3,172(sp)
  80181c:	d8002f15 	stw	zero,188(sp)
  801820:	080174c0 	call	80174c <___vfprintf_internal_r>
  801824:	d8814b15 	stw	r2,1324(sp)
  801828:	10000416 	blt	r2,zero,80183c <___vfprintf_internal_r+0xf0>
  80182c:	d9014f17 	ldw	r4,1340(sp)
  801830:	880b883a 	mov	r5,r17
  801834:	08059dc0 	call	8059dc <_fflush_r>
  801838:	1002321e 	bne	r2,zero,802104 <___vfprintf_internal_r+0x9b8>
  80183c:	d8802c0b 	ldhu	r2,176(sp)
  801840:	1080100c 	andi	r2,r2,64
  801844:	10000326 	beq	r2,zero,801854 <___vfprintf_internal_r+0x108>
  801848:	b080030b 	ldhu	r2,12(r22)
  80184c:	10801014 	ori	r2,r2,64
  801850:	b080030d 	sth	r2,12(r22)
  801854:	d8814b17 	ldw	r2,1324(sp)
  801858:	dfc15b17 	ldw	ra,1388(sp)
  80185c:	df015a17 	ldw	fp,1384(sp)
  801860:	ddc15917 	ldw	r23,1380(sp)
  801864:	dd815817 	ldw	r22,1376(sp)
  801868:	dd415717 	ldw	r21,1372(sp)
  80186c:	dd015617 	ldw	r20,1368(sp)
  801870:	dcc15517 	ldw	r19,1364(sp)
  801874:	dc815417 	ldw	r18,1360(sp)
  801878:	dc415317 	ldw	r17,1356(sp)
  80187c:	dc015217 	ldw	r16,1352(sp)
  801880:	dec15c04 	addi	sp,sp,1392
  801884:	f800283a 	ret
  801888:	0005883a 	mov	r2,zero
  80188c:	0007883a 	mov	r3,zero
  801890:	dd401904 	addi	r21,sp,100
  801894:	d8814215 	stw	r2,1288(sp)
  801898:	802f883a 	mov	r23,r16
  80189c:	d8c14315 	stw	r3,1292(sp)
  8018a0:	d8014b15 	stw	zero,1324(sp)
  8018a4:	d8014815 	stw	zero,1312(sp)
  8018a8:	d8014415 	stw	zero,1296(sp)
  8018ac:	d8014715 	stw	zero,1308(sp)
  8018b0:	dd400c15 	stw	r21,48(sp)
  8018b4:	d8000e15 	stw	zero,56(sp)
  8018b8:	d8000d15 	stw	zero,52(sp)
  8018bc:	b8800007 	ldb	r2,0(r23)
  8018c0:	10001926 	beq	r2,zero,801928 <___vfprintf_internal_r+0x1dc>
  8018c4:	00c00944 	movi	r3,37
  8018c8:	10c01726 	beq	r2,r3,801928 <___vfprintf_internal_r+0x1dc>
  8018cc:	b821883a 	mov	r16,r23
  8018d0:	00000106 	br	8018d8 <___vfprintf_internal_r+0x18c>
  8018d4:	10c00326 	beq	r2,r3,8018e4 <___vfprintf_internal_r+0x198>
  8018d8:	84000044 	addi	r16,r16,1
  8018dc:	80800007 	ldb	r2,0(r16)
  8018e0:	103ffc1e 	bne	r2,zero,8018d4 <___vfprintf_internal_r+0x188>
  8018e4:	85e7c83a 	sub	r19,r16,r23
  8018e8:	98000e26 	beq	r19,zero,801924 <___vfprintf_internal_r+0x1d8>
  8018ec:	dc800e17 	ldw	r18,56(sp)
  8018f0:	dc400d17 	ldw	r17,52(sp)
  8018f4:	008001c4 	movi	r2,7
  8018f8:	94e5883a 	add	r18,r18,r19
  8018fc:	8c400044 	addi	r17,r17,1
  801900:	adc00015 	stw	r23,0(r21)
  801904:	dc800e15 	stw	r18,56(sp)
  801908:	acc00115 	stw	r19,4(r21)
  80190c:	dc400d15 	stw	r17,52(sp)
  801910:	14428b16 	blt	r2,r17,802340 <___vfprintf_internal_r+0xbf4>
  801914:	ad400204 	addi	r21,r21,8
  801918:	d9014b17 	ldw	r4,1324(sp)
  80191c:	24c9883a 	add	r4,r4,r19
  801920:	d9014b15 	stw	r4,1324(sp)
  801924:	802f883a 	mov	r23,r16
  801928:	b8800007 	ldb	r2,0(r23)
  80192c:	10013c26 	beq	r2,zero,801e20 <___vfprintf_internal_r+0x6d4>
  801930:	bdc00044 	addi	r23,r23,1
  801934:	d8000405 	stb	zero,16(sp)
  801938:	b8c00007 	ldb	r3,0(r23)
  80193c:	04ffffc4 	movi	r19,-1
  801940:	d8014c15 	stw	zero,1328(sp)
  801944:	d8014a15 	stw	zero,1320(sp)
  801948:	d8c14d15 	stw	r3,1332(sp)
  80194c:	bdc00044 	addi	r23,r23,1
  801950:	d9414d17 	ldw	r5,1332(sp)
  801954:	00801604 	movi	r2,88
  801958:	28fff804 	addi	r3,r5,-32
  80195c:	10c06036 	bltu	r2,r3,801ae0 <___vfprintf_internal_r+0x394>
  801960:	18c5883a 	add	r2,r3,r3
  801964:	1085883a 	add	r2,r2,r2
  801968:	00c02034 	movhi	r3,128
  80196c:	18c65f04 	addi	r3,r3,6524
  801970:	10c5883a 	add	r2,r2,r3
  801974:	11000017 	ldw	r4,0(r2)
  801978:	2000683a 	jmp	r4
  80197c:	008028f0 	cmpltui	r2,zero,163
  801980:	00801ae0 	cmpeqi	r2,zero,107
  801984:	00801ae0 	cmpeqi	r2,zero,107
  801988:	008028dc 	xori	r2,zero,163
  80198c:	00801ae0 	cmpeqi	r2,zero,107
  801990:	00801ae0 	cmpeqi	r2,zero,107
  801994:	00801ae0 	cmpeqi	r2,zero,107
  801998:	00801ae0 	cmpeqi	r2,zero,107
  80199c:	00801ae0 	cmpeqi	r2,zero,107
  8019a0:	00801ae0 	cmpeqi	r2,zero,107
  8019a4:	008026bc 	xorhi	r2,zero,154
  8019a8:	008028cc 	andi	r2,zero,163
  8019ac:	00801ae0 	cmpeqi	r2,zero,107
  8019b0:	008026d4 	movui	r2,155
  8019b4:	00802968 	cmpgeui	r2,zero,165
  8019b8:	00801ae0 	cmpeqi	r2,zero,107
  8019bc:	00802954 	movui	r2,165
  8019c0:	0080291c 	xori	r2,zero,164
  8019c4:	0080291c 	xori	r2,zero,164
  8019c8:	0080291c 	xori	r2,zero,164
  8019cc:	0080291c 	xori	r2,zero,164
  8019d0:	0080291c 	xori	r2,zero,164
  8019d4:	0080291c 	xori	r2,zero,164
  8019d8:	0080291c 	xori	r2,zero,164
  8019dc:	0080291c 	xori	r2,zero,164
  8019e0:	0080291c 	xori	r2,zero,164
  8019e4:	00801ae0 	cmpeqi	r2,zero,107
  8019e8:	00801ae0 	cmpeqi	r2,zero,107
  8019ec:	00801ae0 	cmpeqi	r2,zero,107
  8019f0:	00801ae0 	cmpeqi	r2,zero,107
  8019f4:	00801ae0 	cmpeqi	r2,zero,107
  8019f8:	00801ae0 	cmpeqi	r2,zero,107
  8019fc:	00801ae0 	cmpeqi	r2,zero,107
  801a00:	00801ae0 	cmpeqi	r2,zero,107
  801a04:	00801ae0 	cmpeqi	r2,zero,107
  801a08:	00801ae0 	cmpeqi	r2,zero,107
  801a0c:	00802138 	rdprs	r2,zero,132
  801a10:	008027a4 	muli	r2,zero,158
  801a14:	00801ae0 	cmpeqi	r2,zero,107
  801a18:	008027a4 	muli	r2,zero,158
  801a1c:	00801ae0 	cmpeqi	r2,zero,107
  801a20:	00801ae0 	cmpeqi	r2,zero,107
  801a24:	00801ae0 	cmpeqi	r2,zero,107
  801a28:	00801ae0 	cmpeqi	r2,zero,107
  801a2c:	00802908 	cmpgei	r2,zero,164
  801a30:	00801ae0 	cmpeqi	r2,zero,107
  801a34:	00801ae0 	cmpeqi	r2,zero,107
  801a38:	008021ec 	andhi	r2,zero,135
  801a3c:	00801ae0 	cmpeqi	r2,zero,107
  801a40:	00801ae0 	cmpeqi	r2,zero,107
  801a44:	00801ae0 	cmpeqi	r2,zero,107
  801a48:	00801ae0 	cmpeqi	r2,zero,107
  801a4c:	00801ae0 	cmpeqi	r2,zero,107
  801a50:	00802238 	rdprs	r2,zero,136
  801a54:	00801ae0 	cmpeqi	r2,zero,107
  801a58:	00801ae0 	cmpeqi	r2,zero,107
  801a5c:	00802858 	cmpnei	r2,zero,161
  801a60:	00801ae0 	cmpeqi	r2,zero,107
  801a64:	00801ae0 	cmpeqi	r2,zero,107
  801a68:	00801ae0 	cmpeqi	r2,zero,107
  801a6c:	00801ae0 	cmpeqi	r2,zero,107
  801a70:	00801ae0 	cmpeqi	r2,zero,107
  801a74:	00801ae0 	cmpeqi	r2,zero,107
  801a78:	00801ae0 	cmpeqi	r2,zero,107
  801a7c:	00801ae0 	cmpeqi	r2,zero,107
  801a80:	00801ae0 	cmpeqi	r2,zero,107
  801a84:	00801ae0 	cmpeqi	r2,zero,107
  801a88:	0080282c 	andhi	r2,zero,160
  801a8c:	00802144 	movi	r2,133
  801a90:	008027a4 	muli	r2,zero,158
  801a94:	008027a4 	muli	r2,zero,158
  801a98:	008027a4 	muli	r2,zero,158
  801a9c:	00802790 	cmplti	r2,zero,158
  801aa0:	00802144 	movi	r2,133
  801aa4:	00801ae0 	cmpeqi	r2,zero,107
  801aa8:	00801ae0 	cmpeqi	r2,zero,107
  801aac:	00802718 	cmpnei	r2,zero,156
  801ab0:	00801ae0 	cmpeqi	r2,zero,107
  801ab4:	008026e8 	cmpgeui	r2,zero,155
  801ab8:	008021f8 	rdprs	r2,zero,135
  801abc:	00802748 	cmpgei	r2,zero,157
  801ac0:	00802734 	movhi	r2,156
  801ac4:	00801ae0 	cmpeqi	r2,zero,107
  801ac8:	008029c4 	movi	r2,167
  801acc:	00801ae0 	cmpeqi	r2,zero,107
  801ad0:	00802244 	movi	r2,137
  801ad4:	00801ae0 	cmpeqi	r2,zero,107
  801ad8:	00801ae0 	cmpeqi	r2,zero,107
  801adc:	008028bc 	xorhi	r2,zero,162
  801ae0:	d9014d17 	ldw	r4,1332(sp)
  801ae4:	2000ce26 	beq	r4,zero,801e20 <___vfprintf_internal_r+0x6d4>
  801ae8:	01400044 	movi	r5,1
  801aec:	d9800f04 	addi	r6,sp,60
  801af0:	d9c14015 	stw	r7,1280(sp)
  801af4:	d9414515 	stw	r5,1300(sp)
  801af8:	d9814115 	stw	r6,1284(sp)
  801afc:	280f883a 	mov	r7,r5
  801b00:	d9000f05 	stb	r4,60(sp)
  801b04:	d8000405 	stb	zero,16(sp)
  801b08:	d8014615 	stw	zero,1304(sp)
  801b0c:	d8c14c17 	ldw	r3,1328(sp)
  801b10:	1880008c 	andi	r2,r3,2
  801b14:	1005003a 	cmpeq	r2,r2,zero
  801b18:	d8815015 	stw	r2,1344(sp)
  801b1c:	1000031e 	bne	r2,zero,801b2c <___vfprintf_internal_r+0x3e0>
  801b20:	d9014517 	ldw	r4,1300(sp)
  801b24:	21000084 	addi	r4,r4,2
  801b28:	d9014515 	stw	r4,1300(sp)
  801b2c:	d9414c17 	ldw	r5,1328(sp)
  801b30:	2940210c 	andi	r5,r5,132
  801b34:	d9414e15 	stw	r5,1336(sp)
  801b38:	28002d1e 	bne	r5,zero,801bf0 <___vfprintf_internal_r+0x4a4>
  801b3c:	d9814a17 	ldw	r6,1320(sp)
  801b40:	d8814517 	ldw	r2,1300(sp)
  801b44:	30a1c83a 	sub	r16,r6,r2
  801b48:	0400290e 	bge	zero,r16,801bf0 <___vfprintf_internal_r+0x4a4>
  801b4c:	00800404 	movi	r2,16
  801b50:	1404580e 	bge	r2,r16,802cb4 <___vfprintf_internal_r+0x1568>
  801b54:	dc800e17 	ldw	r18,56(sp)
  801b58:	dc400d17 	ldw	r17,52(sp)
  801b5c:	1027883a 	mov	r19,r2
  801b60:	07002074 	movhi	fp,129
  801b64:	e7325784 	addi	fp,fp,-13986
  801b68:	050001c4 	movi	r20,7
  801b6c:	00000306 	br	801b7c <___vfprintf_internal_r+0x430>
  801b70:	843ffc04 	addi	r16,r16,-16
  801b74:	ad400204 	addi	r21,r21,8
  801b78:	9c00130e 	bge	r19,r16,801bc8 <___vfprintf_internal_r+0x47c>
  801b7c:	94800404 	addi	r18,r18,16
  801b80:	8c400044 	addi	r17,r17,1
  801b84:	af000015 	stw	fp,0(r21)
  801b88:	acc00115 	stw	r19,4(r21)
  801b8c:	dc800e15 	stw	r18,56(sp)
  801b90:	dc400d15 	stw	r17,52(sp)
  801b94:	a47ff60e 	bge	r20,r17,801b70 <___vfprintf_internal_r+0x424>
  801b98:	d9014f17 	ldw	r4,1340(sp)
  801b9c:	b00b883a 	mov	r5,r22
  801ba0:	d9800c04 	addi	r6,sp,48
  801ba4:	d9c15115 	stw	r7,1348(sp)
  801ba8:	08016f40 	call	8016f4 <__sprint_r>
  801bac:	d9c15117 	ldw	r7,1348(sp)
  801bb0:	10009e1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  801bb4:	843ffc04 	addi	r16,r16,-16
  801bb8:	dc800e17 	ldw	r18,56(sp)
  801bbc:	dc400d17 	ldw	r17,52(sp)
  801bc0:	dd401904 	addi	r21,sp,100
  801bc4:	9c3fed16 	blt	r19,r16,801b7c <___vfprintf_internal_r+0x430>
  801bc8:	9425883a 	add	r18,r18,r16
  801bcc:	8c400044 	addi	r17,r17,1
  801bd0:	008001c4 	movi	r2,7
  801bd4:	af000015 	stw	fp,0(r21)
  801bd8:	ac000115 	stw	r16,4(r21)
  801bdc:	dc800e15 	stw	r18,56(sp)
  801be0:	dc400d15 	stw	r17,52(sp)
  801be4:	1441f516 	blt	r2,r17,8023bc <___vfprintf_internal_r+0xc70>
  801be8:	ad400204 	addi	r21,r21,8
  801bec:	00000206 	br	801bf8 <___vfprintf_internal_r+0x4ac>
  801bf0:	dc800e17 	ldw	r18,56(sp)
  801bf4:	dc400d17 	ldw	r17,52(sp)
  801bf8:	d8800407 	ldb	r2,16(sp)
  801bfc:	10000b26 	beq	r2,zero,801c2c <___vfprintf_internal_r+0x4e0>
  801c00:	00800044 	movi	r2,1
  801c04:	94800044 	addi	r18,r18,1
  801c08:	8c400044 	addi	r17,r17,1
  801c0c:	a8800115 	stw	r2,4(r21)
  801c10:	d8c00404 	addi	r3,sp,16
  801c14:	008001c4 	movi	r2,7
  801c18:	a8c00015 	stw	r3,0(r21)
  801c1c:	dc800e15 	stw	r18,56(sp)
  801c20:	dc400d15 	stw	r17,52(sp)
  801c24:	1441da16 	blt	r2,r17,802390 <___vfprintf_internal_r+0xc44>
  801c28:	ad400204 	addi	r21,r21,8
  801c2c:	d9015017 	ldw	r4,1344(sp)
  801c30:	20000b1e 	bne	r4,zero,801c60 <___vfprintf_internal_r+0x514>
  801c34:	d8800444 	addi	r2,sp,17
  801c38:	94800084 	addi	r18,r18,2
  801c3c:	8c400044 	addi	r17,r17,1
  801c40:	a8800015 	stw	r2,0(r21)
  801c44:	00c00084 	movi	r3,2
  801c48:	008001c4 	movi	r2,7
  801c4c:	a8c00115 	stw	r3,4(r21)
  801c50:	dc800e15 	stw	r18,56(sp)
  801c54:	dc400d15 	stw	r17,52(sp)
  801c58:	1441c216 	blt	r2,r17,802364 <___vfprintf_internal_r+0xc18>
  801c5c:	ad400204 	addi	r21,r21,8
  801c60:	d9414e17 	ldw	r5,1336(sp)
  801c64:	00802004 	movi	r2,128
  801c68:	2880b126 	beq	r5,r2,801f30 <___vfprintf_internal_r+0x7e4>
  801c6c:	d8c14617 	ldw	r3,1304(sp)
  801c70:	19e1c83a 	sub	r16,r3,r7
  801c74:	0400260e 	bge	zero,r16,801d10 <___vfprintf_internal_r+0x5c4>
  801c78:	00800404 	movi	r2,16
  801c7c:	1403c90e 	bge	r2,r16,802ba4 <___vfprintf_internal_r+0x1458>
  801c80:	1027883a 	mov	r19,r2
  801c84:	07002074 	movhi	fp,129
  801c88:	e7325384 	addi	fp,fp,-14002
  801c8c:	050001c4 	movi	r20,7
  801c90:	00000306 	br	801ca0 <___vfprintf_internal_r+0x554>
  801c94:	843ffc04 	addi	r16,r16,-16
  801c98:	ad400204 	addi	r21,r21,8
  801c9c:	9c00130e 	bge	r19,r16,801cec <___vfprintf_internal_r+0x5a0>
  801ca0:	94800404 	addi	r18,r18,16
  801ca4:	8c400044 	addi	r17,r17,1
  801ca8:	af000015 	stw	fp,0(r21)
  801cac:	acc00115 	stw	r19,4(r21)
  801cb0:	dc800e15 	stw	r18,56(sp)
  801cb4:	dc400d15 	stw	r17,52(sp)
  801cb8:	a47ff60e 	bge	r20,r17,801c94 <___vfprintf_internal_r+0x548>
  801cbc:	d9014f17 	ldw	r4,1340(sp)
  801cc0:	b00b883a 	mov	r5,r22
  801cc4:	d9800c04 	addi	r6,sp,48
  801cc8:	d9c15115 	stw	r7,1348(sp)
  801ccc:	08016f40 	call	8016f4 <__sprint_r>
  801cd0:	d9c15117 	ldw	r7,1348(sp)
  801cd4:	1000551e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  801cd8:	843ffc04 	addi	r16,r16,-16
  801cdc:	dc800e17 	ldw	r18,56(sp)
  801ce0:	dc400d17 	ldw	r17,52(sp)
  801ce4:	dd401904 	addi	r21,sp,100
  801ce8:	9c3fed16 	blt	r19,r16,801ca0 <___vfprintf_internal_r+0x554>
  801cec:	9425883a 	add	r18,r18,r16
  801cf0:	8c400044 	addi	r17,r17,1
  801cf4:	008001c4 	movi	r2,7
  801cf8:	af000015 	stw	fp,0(r21)
  801cfc:	ac000115 	stw	r16,4(r21)
  801d00:	dc800e15 	stw	r18,56(sp)
  801d04:	dc400d15 	stw	r17,52(sp)
  801d08:	14418216 	blt	r2,r17,802314 <___vfprintf_internal_r+0xbc8>
  801d0c:	ad400204 	addi	r21,r21,8
  801d10:	d9014c17 	ldw	r4,1328(sp)
  801d14:	2080400c 	andi	r2,r4,256
  801d18:	10004a1e 	bne	r2,zero,801e44 <___vfprintf_internal_r+0x6f8>
  801d1c:	d9414117 	ldw	r5,1284(sp)
  801d20:	91e5883a 	add	r18,r18,r7
  801d24:	8c400044 	addi	r17,r17,1
  801d28:	008001c4 	movi	r2,7
  801d2c:	a9400015 	stw	r5,0(r21)
  801d30:	a9c00115 	stw	r7,4(r21)
  801d34:	dc800e15 	stw	r18,56(sp)
  801d38:	dc400d15 	stw	r17,52(sp)
  801d3c:	14416716 	blt	r2,r17,8022dc <___vfprintf_internal_r+0xb90>
  801d40:	a8c00204 	addi	r3,r21,8
  801d44:	d9814c17 	ldw	r6,1328(sp)
  801d48:	3080010c 	andi	r2,r6,4
  801d4c:	10002826 	beq	r2,zero,801df0 <___vfprintf_internal_r+0x6a4>
  801d50:	d8814a17 	ldw	r2,1320(sp)
  801d54:	d9014517 	ldw	r4,1300(sp)
  801d58:	1121c83a 	sub	r16,r2,r4
  801d5c:	0400240e 	bge	zero,r16,801df0 <___vfprintf_internal_r+0x6a4>
  801d60:	00800404 	movi	r2,16
  801d64:	14044f0e 	bge	r2,r16,802ea4 <___vfprintf_internal_r+0x1758>
  801d68:	dc400d17 	ldw	r17,52(sp)
  801d6c:	1027883a 	mov	r19,r2
  801d70:	07002074 	movhi	fp,129
  801d74:	e7325784 	addi	fp,fp,-13986
  801d78:	050001c4 	movi	r20,7
  801d7c:	00000306 	br	801d8c <___vfprintf_internal_r+0x640>
  801d80:	843ffc04 	addi	r16,r16,-16
  801d84:	18c00204 	addi	r3,r3,8
  801d88:	9c00110e 	bge	r19,r16,801dd0 <___vfprintf_internal_r+0x684>
  801d8c:	94800404 	addi	r18,r18,16
  801d90:	8c400044 	addi	r17,r17,1
  801d94:	1f000015 	stw	fp,0(r3)
  801d98:	1cc00115 	stw	r19,4(r3)
  801d9c:	dc800e15 	stw	r18,56(sp)
  801da0:	dc400d15 	stw	r17,52(sp)
  801da4:	a47ff60e 	bge	r20,r17,801d80 <___vfprintf_internal_r+0x634>
  801da8:	d9014f17 	ldw	r4,1340(sp)
  801dac:	b00b883a 	mov	r5,r22
  801db0:	d9800c04 	addi	r6,sp,48
  801db4:	08016f40 	call	8016f4 <__sprint_r>
  801db8:	10001c1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  801dbc:	843ffc04 	addi	r16,r16,-16
  801dc0:	dc800e17 	ldw	r18,56(sp)
  801dc4:	dc400d17 	ldw	r17,52(sp)
  801dc8:	d8c01904 	addi	r3,sp,100
  801dcc:	9c3fef16 	blt	r19,r16,801d8c <___vfprintf_internal_r+0x640>
  801dd0:	9425883a 	add	r18,r18,r16
  801dd4:	8c400044 	addi	r17,r17,1
  801dd8:	008001c4 	movi	r2,7
  801ddc:	1f000015 	stw	fp,0(r3)
  801de0:	1c000115 	stw	r16,4(r3)
  801de4:	dc800e15 	stw	r18,56(sp)
  801de8:	dc400d15 	stw	r17,52(sp)
  801dec:	1440cb16 	blt	r2,r17,80211c <___vfprintf_internal_r+0x9d0>
  801df0:	d8814a17 	ldw	r2,1320(sp)
  801df4:	d9414517 	ldw	r5,1300(sp)
  801df8:	1140010e 	bge	r2,r5,801e00 <___vfprintf_internal_r+0x6b4>
  801dfc:	2805883a 	mov	r2,r5
  801e00:	d9814b17 	ldw	r6,1324(sp)
  801e04:	308d883a 	add	r6,r6,r2
  801e08:	d9814b15 	stw	r6,1324(sp)
  801e0c:	90013b1e 	bne	r18,zero,8022fc <___vfprintf_internal_r+0xbb0>
  801e10:	d9c14017 	ldw	r7,1280(sp)
  801e14:	dd401904 	addi	r21,sp,100
  801e18:	d8000d15 	stw	zero,52(sp)
  801e1c:	003ea706 	br	8018bc <___vfprintf_internal_r+0x170>
  801e20:	d8800e17 	ldw	r2,56(sp)
  801e24:	10053f1e 	bne	r2,zero,803324 <___vfprintf_internal_r+0x1bd8>
  801e28:	d8000d15 	stw	zero,52(sp)
  801e2c:	b080030b 	ldhu	r2,12(r22)
  801e30:	1080100c 	andi	r2,r2,64
  801e34:	103e8726 	beq	r2,zero,801854 <___vfprintf_internal_r+0x108>
  801e38:	00bfffc4 	movi	r2,-1
  801e3c:	d8814b15 	stw	r2,1324(sp)
  801e40:	003e8406 	br	801854 <___vfprintf_internal_r+0x108>
  801e44:	d9814d17 	ldw	r6,1332(sp)
  801e48:	00801944 	movi	r2,101
  801e4c:	11806e16 	blt	r2,r6,802008 <___vfprintf_internal_r+0x8bc>
  801e50:	d9414717 	ldw	r5,1308(sp)
  801e54:	00c00044 	movi	r3,1
  801e58:	1943430e 	bge	r3,r5,802b68 <___vfprintf_internal_r+0x141c>
  801e5c:	d8814117 	ldw	r2,1284(sp)
  801e60:	94800044 	addi	r18,r18,1
  801e64:	8c400044 	addi	r17,r17,1
  801e68:	a8800015 	stw	r2,0(r21)
  801e6c:	008001c4 	movi	r2,7
  801e70:	a8c00115 	stw	r3,4(r21)
  801e74:	dc800e15 	stw	r18,56(sp)
  801e78:	dc400d15 	stw	r17,52(sp)
  801e7c:	1441ca16 	blt	r2,r17,8025a8 <___vfprintf_internal_r+0xe5c>
  801e80:	a8c00204 	addi	r3,r21,8
  801e84:	d9014917 	ldw	r4,1316(sp)
  801e88:	00800044 	movi	r2,1
  801e8c:	94800044 	addi	r18,r18,1
  801e90:	8c400044 	addi	r17,r17,1
  801e94:	18800115 	stw	r2,4(r3)
  801e98:	008001c4 	movi	r2,7
  801e9c:	19000015 	stw	r4,0(r3)
  801ea0:	dc800e15 	stw	r18,56(sp)
  801ea4:	dc400d15 	stw	r17,52(sp)
  801ea8:	1441b616 	blt	r2,r17,802584 <___vfprintf_internal_r+0xe38>
  801eac:	1cc00204 	addi	r19,r3,8
  801eb0:	d9014217 	ldw	r4,1288(sp)
  801eb4:	d9414317 	ldw	r5,1292(sp)
  801eb8:	000d883a 	mov	r6,zero
  801ebc:	000f883a 	mov	r7,zero
  801ec0:	080a5dc0 	call	80a5dc <__nedf2>
  801ec4:	10017426 	beq	r2,zero,802498 <___vfprintf_internal_r+0xd4c>
  801ec8:	d9414717 	ldw	r5,1308(sp)
  801ecc:	d9814117 	ldw	r6,1284(sp)
  801ed0:	8c400044 	addi	r17,r17,1
  801ed4:	2c85883a 	add	r2,r5,r18
  801ed8:	14bfffc4 	addi	r18,r2,-1
  801edc:	28bfffc4 	addi	r2,r5,-1
  801ee0:	30c00044 	addi	r3,r6,1
  801ee4:	98800115 	stw	r2,4(r19)
  801ee8:	008001c4 	movi	r2,7
  801eec:	98c00015 	stw	r3,0(r19)
  801ef0:	dc800e15 	stw	r18,56(sp)
  801ef4:	dc400d15 	stw	r17,52(sp)
  801ef8:	14418e16 	blt	r2,r17,802534 <___vfprintf_internal_r+0xde8>
  801efc:	9cc00204 	addi	r19,r19,8
  801f00:	d9414817 	ldw	r5,1312(sp)
  801f04:	d8800804 	addi	r2,sp,32
  801f08:	8c400044 	addi	r17,r17,1
  801f0c:	9165883a 	add	r18,r18,r5
  801f10:	98800015 	stw	r2,0(r19)
  801f14:	008001c4 	movi	r2,7
  801f18:	99400115 	stw	r5,4(r19)
  801f1c:	dc800e15 	stw	r18,56(sp)
  801f20:	dc400d15 	stw	r17,52(sp)
  801f24:	1440ed16 	blt	r2,r17,8022dc <___vfprintf_internal_r+0xb90>
  801f28:	98c00204 	addi	r3,r19,8
  801f2c:	003f8506 	br	801d44 <___vfprintf_internal_r+0x5f8>
  801f30:	d9814a17 	ldw	r6,1320(sp)
  801f34:	d8814517 	ldw	r2,1300(sp)
  801f38:	30a1c83a 	sub	r16,r6,r2
  801f3c:	043f4b0e 	bge	zero,r16,801c6c <___vfprintf_internal_r+0x520>
  801f40:	00800404 	movi	r2,16
  801f44:	1404340e 	bge	r2,r16,803018 <___vfprintf_internal_r+0x18cc>
  801f48:	1027883a 	mov	r19,r2
  801f4c:	07002074 	movhi	fp,129
  801f50:	e7325384 	addi	fp,fp,-14002
  801f54:	050001c4 	movi	r20,7
  801f58:	00000306 	br	801f68 <___vfprintf_internal_r+0x81c>
  801f5c:	843ffc04 	addi	r16,r16,-16
  801f60:	ad400204 	addi	r21,r21,8
  801f64:	9c00130e 	bge	r19,r16,801fb4 <___vfprintf_internal_r+0x868>
  801f68:	94800404 	addi	r18,r18,16
  801f6c:	8c400044 	addi	r17,r17,1
  801f70:	af000015 	stw	fp,0(r21)
  801f74:	acc00115 	stw	r19,4(r21)
  801f78:	dc800e15 	stw	r18,56(sp)
  801f7c:	dc400d15 	stw	r17,52(sp)
  801f80:	a47ff60e 	bge	r20,r17,801f5c <___vfprintf_internal_r+0x810>
  801f84:	d9014f17 	ldw	r4,1340(sp)
  801f88:	b00b883a 	mov	r5,r22
  801f8c:	d9800c04 	addi	r6,sp,48
  801f90:	d9c15115 	stw	r7,1348(sp)
  801f94:	08016f40 	call	8016f4 <__sprint_r>
  801f98:	d9c15117 	ldw	r7,1348(sp)
  801f9c:	103fa31e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  801fa0:	843ffc04 	addi	r16,r16,-16
  801fa4:	dc800e17 	ldw	r18,56(sp)
  801fa8:	dc400d17 	ldw	r17,52(sp)
  801fac:	dd401904 	addi	r21,sp,100
  801fb0:	9c3fed16 	blt	r19,r16,801f68 <___vfprintf_internal_r+0x81c>
  801fb4:	9425883a 	add	r18,r18,r16
  801fb8:	8c400044 	addi	r17,r17,1
  801fbc:	008001c4 	movi	r2,7
  801fc0:	af000015 	stw	fp,0(r21)
  801fc4:	ac000115 	stw	r16,4(r21)
  801fc8:	dc800e15 	stw	r18,56(sp)
  801fcc:	dc400d15 	stw	r17,52(sp)
  801fd0:	14416116 	blt	r2,r17,802558 <___vfprintf_internal_r+0xe0c>
  801fd4:	ad400204 	addi	r21,r21,8
  801fd8:	003f2406 	br	801c6c <___vfprintf_internal_r+0x520>
  801fdc:	d9014f17 	ldw	r4,1340(sp)
  801fe0:	0805c740 	call	805c74 <__sinit>
  801fe4:	d9c15117 	ldw	r7,1348(sp)
  801fe8:	003def06 	br	8017a8 <___vfprintf_internal_r+0x5c>
  801fec:	d9014f17 	ldw	r4,1340(sp)
  801ff0:	b00b883a 	mov	r5,r22
  801ff4:	d9c15115 	stw	r7,1348(sp)
  801ff8:	080361c0 	call	80361c <__swsetup_r>
  801ffc:	d9c15117 	ldw	r7,1348(sp)
  802000:	103dee26 	beq	r2,zero,8017bc <___vfprintf_internal_r+0x70>
  802004:	003f8c06 	br	801e38 <___vfprintf_internal_r+0x6ec>
  802008:	d9014217 	ldw	r4,1288(sp)
  80200c:	d9414317 	ldw	r5,1292(sp)
  802010:	000d883a 	mov	r6,zero
  802014:	000f883a 	mov	r7,zero
  802018:	080a5540 	call	80a554 <__eqdf2>
  80201c:	1000f21e 	bne	r2,zero,8023e8 <___vfprintf_internal_r+0xc9c>
  802020:	00802074 	movhi	r2,129
  802024:	10b25304 	addi	r2,r2,-14004
  802028:	94800044 	addi	r18,r18,1
  80202c:	8c400044 	addi	r17,r17,1
  802030:	a8800015 	stw	r2,0(r21)
  802034:	00c00044 	movi	r3,1
  802038:	008001c4 	movi	r2,7
  80203c:	a8c00115 	stw	r3,4(r21)
  802040:	dc800e15 	stw	r18,56(sp)
  802044:	dc400d15 	stw	r17,52(sp)
  802048:	1442fa16 	blt	r2,r17,802c34 <___vfprintf_internal_r+0x14e8>
  80204c:	a8c00204 	addi	r3,r21,8
  802050:	d8800517 	ldw	r2,20(sp)
  802054:	d9014717 	ldw	r4,1308(sp)
  802058:	11015c0e 	bge	r2,r4,8025cc <___vfprintf_internal_r+0xe80>
  80205c:	dc400d17 	ldw	r17,52(sp)
  802060:	d9814917 	ldw	r6,1316(sp)
  802064:	00800044 	movi	r2,1
  802068:	94800044 	addi	r18,r18,1
  80206c:	8c400044 	addi	r17,r17,1
  802070:	18800115 	stw	r2,4(r3)
  802074:	008001c4 	movi	r2,7
  802078:	19800015 	stw	r6,0(r3)
  80207c:	dc800e15 	stw	r18,56(sp)
  802080:	dc400d15 	stw	r17,52(sp)
  802084:	14431016 	blt	r2,r17,802cc8 <___vfprintf_internal_r+0x157c>
  802088:	18c00204 	addi	r3,r3,8
  80208c:	d8814717 	ldw	r2,1308(sp)
  802090:	143fffc4 	addi	r16,r2,-1
  802094:	043f2b0e 	bge	zero,r16,801d44 <___vfprintf_internal_r+0x5f8>
  802098:	00800404 	movi	r2,16
  80209c:	1402a20e 	bge	r2,r16,802b28 <___vfprintf_internal_r+0x13dc>
  8020a0:	dc400d17 	ldw	r17,52(sp)
  8020a4:	1027883a 	mov	r19,r2
  8020a8:	07002074 	movhi	fp,129
  8020ac:	e7325384 	addi	fp,fp,-14002
  8020b0:	050001c4 	movi	r20,7
  8020b4:	00000306 	br	8020c4 <___vfprintf_internal_r+0x978>
  8020b8:	18c00204 	addi	r3,r3,8
  8020bc:	843ffc04 	addi	r16,r16,-16
  8020c0:	9c029c0e 	bge	r19,r16,802b34 <___vfprintf_internal_r+0x13e8>
  8020c4:	94800404 	addi	r18,r18,16
  8020c8:	8c400044 	addi	r17,r17,1
  8020cc:	1f000015 	stw	fp,0(r3)
  8020d0:	1cc00115 	stw	r19,4(r3)
  8020d4:	dc800e15 	stw	r18,56(sp)
  8020d8:	dc400d15 	stw	r17,52(sp)
  8020dc:	a47ff60e 	bge	r20,r17,8020b8 <___vfprintf_internal_r+0x96c>
  8020e0:	d9014f17 	ldw	r4,1340(sp)
  8020e4:	b00b883a 	mov	r5,r22
  8020e8:	d9800c04 	addi	r6,sp,48
  8020ec:	08016f40 	call	8016f4 <__sprint_r>
  8020f0:	103f4e1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  8020f4:	dc800e17 	ldw	r18,56(sp)
  8020f8:	dc400d17 	ldw	r17,52(sp)
  8020fc:	d8c01904 	addi	r3,sp,100
  802100:	003fee06 	br	8020bc <___vfprintf_internal_r+0x970>
  802104:	d8802c0b 	ldhu	r2,176(sp)
  802108:	00ffffc4 	movi	r3,-1
  80210c:	d8c14b15 	stw	r3,1324(sp)
  802110:	1080100c 	andi	r2,r2,64
  802114:	103dcc1e 	bne	r2,zero,801848 <___vfprintf_internal_r+0xfc>
  802118:	003dce06 	br	801854 <___vfprintf_internal_r+0x108>
  80211c:	d9014f17 	ldw	r4,1340(sp)
  802120:	b00b883a 	mov	r5,r22
  802124:	d9800c04 	addi	r6,sp,48
  802128:	08016f40 	call	8016f4 <__sprint_r>
  80212c:	103f3f1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802130:	dc800e17 	ldw	r18,56(sp)
  802134:	003f2e06 	br	801df0 <___vfprintf_internal_r+0x6a4>
  802138:	d9414c17 	ldw	r5,1328(sp)
  80213c:	29400414 	ori	r5,r5,16
  802140:	d9414c15 	stw	r5,1328(sp)
  802144:	d9814c17 	ldw	r6,1328(sp)
  802148:	3080080c 	andi	r2,r6,32
  80214c:	10014f1e 	bne	r2,zero,80268c <___vfprintf_internal_r+0xf40>
  802150:	d8c14c17 	ldw	r3,1328(sp)
  802154:	1880040c 	andi	r2,r3,16
  802158:	1002ea1e 	bne	r2,zero,802d04 <___vfprintf_internal_r+0x15b8>
  80215c:	d9014c17 	ldw	r4,1328(sp)
  802160:	2080100c 	andi	r2,r4,64
  802164:	1002e726 	beq	r2,zero,802d04 <___vfprintf_internal_r+0x15b8>
  802168:	3880000f 	ldh	r2,0(r7)
  80216c:	39c00104 	addi	r7,r7,4
  802170:	d9c14015 	stw	r7,1280(sp)
  802174:	1023d7fa 	srai	r17,r2,31
  802178:	1021883a 	mov	r16,r2
  80217c:	88037216 	blt	r17,zero,802f48 <___vfprintf_internal_r+0x17fc>
  802180:	01000044 	movi	r4,1
  802184:	98000416 	blt	r19,zero,802198 <___vfprintf_internal_r+0xa4c>
  802188:	d8c14c17 	ldw	r3,1328(sp)
  80218c:	00bfdfc4 	movi	r2,-129
  802190:	1886703a 	and	r3,r3,r2
  802194:	d8c14c15 	stw	r3,1328(sp)
  802198:	8444b03a 	or	r2,r16,r17
  80219c:	1002261e 	bne	r2,zero,802a38 <___vfprintf_internal_r+0x12ec>
  8021a0:	9802251e 	bne	r19,zero,802a38 <___vfprintf_internal_r+0x12ec>
  8021a4:	20803fcc 	andi	r2,r4,255
  8021a8:	10029b26 	beq	r2,zero,802c18 <___vfprintf_internal_r+0x14cc>
  8021ac:	d8c01904 	addi	r3,sp,100
  8021b0:	dd000f04 	addi	r20,sp,60
  8021b4:	d8c14115 	stw	r3,1284(sp)
  8021b8:	d8c14117 	ldw	r3,1284(sp)
  8021bc:	dcc14515 	stw	r19,1300(sp)
  8021c0:	a0c5c83a 	sub	r2,r20,r3
  8021c4:	11c00a04 	addi	r7,r2,40
  8021c8:	99c0010e 	bge	r19,r7,8021d0 <___vfprintf_internal_r+0xa84>
  8021cc:	d9c14515 	stw	r7,1300(sp)
  8021d0:	dcc14615 	stw	r19,1304(sp)
  8021d4:	d8800407 	ldb	r2,16(sp)
  8021d8:	103e4c26 	beq	r2,zero,801b0c <___vfprintf_internal_r+0x3c0>
  8021dc:	d8814517 	ldw	r2,1300(sp)
  8021e0:	10800044 	addi	r2,r2,1
  8021e4:	d8814515 	stw	r2,1300(sp)
  8021e8:	003e4806 	br	801b0c <___vfprintf_internal_r+0x3c0>
  8021ec:	d9814c17 	ldw	r6,1328(sp)
  8021f0:	31800414 	ori	r6,r6,16
  8021f4:	d9814c15 	stw	r6,1328(sp)
  8021f8:	d8c14c17 	ldw	r3,1328(sp)
  8021fc:	1880080c 	andi	r2,r3,32
  802200:	1001271e 	bne	r2,zero,8026a0 <___vfprintf_internal_r+0xf54>
  802204:	d9414c17 	ldw	r5,1328(sp)
  802208:	2880040c 	andi	r2,r5,16
  80220c:	1002b61e 	bne	r2,zero,802ce8 <___vfprintf_internal_r+0x159c>
  802210:	d9814c17 	ldw	r6,1328(sp)
  802214:	3080100c 	andi	r2,r6,64
  802218:	1002b326 	beq	r2,zero,802ce8 <___vfprintf_internal_r+0x159c>
  80221c:	3c00000b 	ldhu	r16,0(r7)
  802220:	0009883a 	mov	r4,zero
  802224:	39c00104 	addi	r7,r7,4
  802228:	0023883a 	mov	r17,zero
  80222c:	d9c14015 	stw	r7,1280(sp)
  802230:	d8000405 	stb	zero,16(sp)
  802234:	003fd306 	br	802184 <___vfprintf_internal_r+0xa38>
  802238:	d9014c17 	ldw	r4,1328(sp)
  80223c:	21000414 	ori	r4,r4,16
  802240:	d9014c15 	stw	r4,1328(sp)
  802244:	d9414c17 	ldw	r5,1328(sp)
  802248:	2880080c 	andi	r2,r5,32
  80224c:	1001081e 	bne	r2,zero,802670 <___vfprintf_internal_r+0xf24>
  802250:	d8c14c17 	ldw	r3,1328(sp)
  802254:	1880040c 	andi	r2,r3,16
  802258:	1002b01e 	bne	r2,zero,802d1c <___vfprintf_internal_r+0x15d0>
  80225c:	d9014c17 	ldw	r4,1328(sp)
  802260:	2080100c 	andi	r2,r4,64
  802264:	1002ad26 	beq	r2,zero,802d1c <___vfprintf_internal_r+0x15d0>
  802268:	3c00000b 	ldhu	r16,0(r7)
  80226c:	01000044 	movi	r4,1
  802270:	39c00104 	addi	r7,r7,4
  802274:	0023883a 	mov	r17,zero
  802278:	d9c14015 	stw	r7,1280(sp)
  80227c:	d8000405 	stb	zero,16(sp)
  802280:	003fc006 	br	802184 <___vfprintf_internal_r+0xa38>
  802284:	d9014f17 	ldw	r4,1340(sp)
  802288:	b00b883a 	mov	r5,r22
  80228c:	d9800c04 	addi	r6,sp,48
  802290:	08016f40 	call	8016f4 <__sprint_r>
  802294:	103ee51e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802298:	dc800e17 	ldw	r18,56(sp)
  80229c:	d8c01904 	addi	r3,sp,100
  8022a0:	d9814c17 	ldw	r6,1328(sp)
  8022a4:	3080004c 	andi	r2,r6,1
  8022a8:	1005003a 	cmpeq	r2,r2,zero
  8022ac:	103ea51e 	bne	r2,zero,801d44 <___vfprintf_internal_r+0x5f8>
  8022b0:	00800044 	movi	r2,1
  8022b4:	dc400d17 	ldw	r17,52(sp)
  8022b8:	18800115 	stw	r2,4(r3)
  8022bc:	d8814917 	ldw	r2,1316(sp)
  8022c0:	94800044 	addi	r18,r18,1
  8022c4:	8c400044 	addi	r17,r17,1
  8022c8:	18800015 	stw	r2,0(r3)
  8022cc:	008001c4 	movi	r2,7
  8022d0:	dc800e15 	stw	r18,56(sp)
  8022d4:	dc400d15 	stw	r17,52(sp)
  8022d8:	14421e0e 	bge	r2,r17,802b54 <___vfprintf_internal_r+0x1408>
  8022dc:	d9014f17 	ldw	r4,1340(sp)
  8022e0:	b00b883a 	mov	r5,r22
  8022e4:	d9800c04 	addi	r6,sp,48
  8022e8:	08016f40 	call	8016f4 <__sprint_r>
  8022ec:	103ecf1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  8022f0:	dc800e17 	ldw	r18,56(sp)
  8022f4:	d8c01904 	addi	r3,sp,100
  8022f8:	003e9206 	br	801d44 <___vfprintf_internal_r+0x5f8>
  8022fc:	d9014f17 	ldw	r4,1340(sp)
  802300:	b00b883a 	mov	r5,r22
  802304:	d9800c04 	addi	r6,sp,48
  802308:	08016f40 	call	8016f4 <__sprint_r>
  80230c:	103ec026 	beq	r2,zero,801e10 <___vfprintf_internal_r+0x6c4>
  802310:	003ec606 	br	801e2c <___vfprintf_internal_r+0x6e0>
  802314:	d9014f17 	ldw	r4,1340(sp)
  802318:	b00b883a 	mov	r5,r22
  80231c:	d9800c04 	addi	r6,sp,48
  802320:	d9c15115 	stw	r7,1348(sp)
  802324:	08016f40 	call	8016f4 <__sprint_r>
  802328:	d9c15117 	ldw	r7,1348(sp)
  80232c:	103ebf1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802330:	dc800e17 	ldw	r18,56(sp)
  802334:	dc400d17 	ldw	r17,52(sp)
  802338:	dd401904 	addi	r21,sp,100
  80233c:	003e7406 	br	801d10 <___vfprintf_internal_r+0x5c4>
  802340:	d9014f17 	ldw	r4,1340(sp)
  802344:	b00b883a 	mov	r5,r22
  802348:	d9800c04 	addi	r6,sp,48
  80234c:	d9c15115 	stw	r7,1348(sp)
  802350:	08016f40 	call	8016f4 <__sprint_r>
  802354:	d9c15117 	ldw	r7,1348(sp)
  802358:	103eb41e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  80235c:	dd401904 	addi	r21,sp,100
  802360:	003d6d06 	br	801918 <___vfprintf_internal_r+0x1cc>
  802364:	d9014f17 	ldw	r4,1340(sp)
  802368:	b00b883a 	mov	r5,r22
  80236c:	d9800c04 	addi	r6,sp,48
  802370:	d9c15115 	stw	r7,1348(sp)
  802374:	08016f40 	call	8016f4 <__sprint_r>
  802378:	d9c15117 	ldw	r7,1348(sp)
  80237c:	103eab1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802380:	dc800e17 	ldw	r18,56(sp)
  802384:	dc400d17 	ldw	r17,52(sp)
  802388:	dd401904 	addi	r21,sp,100
  80238c:	003e3406 	br	801c60 <___vfprintf_internal_r+0x514>
  802390:	d9014f17 	ldw	r4,1340(sp)
  802394:	b00b883a 	mov	r5,r22
  802398:	d9800c04 	addi	r6,sp,48
  80239c:	d9c15115 	stw	r7,1348(sp)
  8023a0:	08016f40 	call	8016f4 <__sprint_r>
  8023a4:	d9c15117 	ldw	r7,1348(sp)
  8023a8:	103ea01e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  8023ac:	dc800e17 	ldw	r18,56(sp)
  8023b0:	dc400d17 	ldw	r17,52(sp)
  8023b4:	dd401904 	addi	r21,sp,100
  8023b8:	003e1c06 	br	801c2c <___vfprintf_internal_r+0x4e0>
  8023bc:	d9014f17 	ldw	r4,1340(sp)
  8023c0:	b00b883a 	mov	r5,r22
  8023c4:	d9800c04 	addi	r6,sp,48
  8023c8:	d9c15115 	stw	r7,1348(sp)
  8023cc:	08016f40 	call	8016f4 <__sprint_r>
  8023d0:	d9c15117 	ldw	r7,1348(sp)
  8023d4:	103e951e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  8023d8:	dc800e17 	ldw	r18,56(sp)
  8023dc:	dc400d17 	ldw	r17,52(sp)
  8023e0:	dd401904 	addi	r21,sp,100
  8023e4:	003e0406 	br	801bf8 <___vfprintf_internal_r+0x4ac>
  8023e8:	d9000517 	ldw	r4,20(sp)
  8023ec:	0102520e 	bge	zero,r4,802d38 <___vfprintf_internal_r+0x15ec>
  8023f0:	d9814717 	ldw	r6,1308(sp)
  8023f4:	21807a16 	blt	r4,r6,8025e0 <___vfprintf_internal_r+0xe94>
  8023f8:	d8814117 	ldw	r2,1284(sp)
  8023fc:	91a5883a 	add	r18,r18,r6
  802400:	8c400044 	addi	r17,r17,1
  802404:	a8800015 	stw	r2,0(r21)
  802408:	008001c4 	movi	r2,7
  80240c:	a9800115 	stw	r6,4(r21)
  802410:	dc800e15 	stw	r18,56(sp)
  802414:	dc400d15 	stw	r17,52(sp)
  802418:	1442f616 	blt	r2,r17,802ff4 <___vfprintf_internal_r+0x18a8>
  80241c:	a8c00204 	addi	r3,r21,8
  802420:	d9414717 	ldw	r5,1308(sp)
  802424:	2161c83a 	sub	r16,r4,r5
  802428:	043f9d0e 	bge	zero,r16,8022a0 <___vfprintf_internal_r+0xb54>
  80242c:	00800404 	movi	r2,16
  802430:	1402130e 	bge	r2,r16,802c80 <___vfprintf_internal_r+0x1534>
  802434:	dc400d17 	ldw	r17,52(sp)
  802438:	1027883a 	mov	r19,r2
  80243c:	07002074 	movhi	fp,129
  802440:	e7325384 	addi	fp,fp,-14002
  802444:	050001c4 	movi	r20,7
  802448:	00000306 	br	802458 <___vfprintf_internal_r+0xd0c>
  80244c:	18c00204 	addi	r3,r3,8
  802450:	843ffc04 	addi	r16,r16,-16
  802454:	9c020d0e 	bge	r19,r16,802c8c <___vfprintf_internal_r+0x1540>
  802458:	94800404 	addi	r18,r18,16
  80245c:	8c400044 	addi	r17,r17,1
  802460:	1f000015 	stw	fp,0(r3)
  802464:	1cc00115 	stw	r19,4(r3)
  802468:	dc800e15 	stw	r18,56(sp)
  80246c:	dc400d15 	stw	r17,52(sp)
  802470:	a47ff60e 	bge	r20,r17,80244c <___vfprintf_internal_r+0xd00>
  802474:	d9014f17 	ldw	r4,1340(sp)
  802478:	b00b883a 	mov	r5,r22
  80247c:	d9800c04 	addi	r6,sp,48
  802480:	08016f40 	call	8016f4 <__sprint_r>
  802484:	103e691e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802488:	dc800e17 	ldw	r18,56(sp)
  80248c:	dc400d17 	ldw	r17,52(sp)
  802490:	d8c01904 	addi	r3,sp,100
  802494:	003fee06 	br	802450 <___vfprintf_internal_r+0xd04>
  802498:	d8814717 	ldw	r2,1308(sp)
  80249c:	143fffc4 	addi	r16,r2,-1
  8024a0:	043e970e 	bge	zero,r16,801f00 <___vfprintf_internal_r+0x7b4>
  8024a4:	00800404 	movi	r2,16
  8024a8:	1400180e 	bge	r2,r16,80250c <___vfprintf_internal_r+0xdc0>
  8024ac:	1029883a 	mov	r20,r2
  8024b0:	07002074 	movhi	fp,129
  8024b4:	e7325384 	addi	fp,fp,-14002
  8024b8:	054001c4 	movi	r21,7
  8024bc:	00000306 	br	8024cc <___vfprintf_internal_r+0xd80>
  8024c0:	9cc00204 	addi	r19,r19,8
  8024c4:	843ffc04 	addi	r16,r16,-16
  8024c8:	a400120e 	bge	r20,r16,802514 <___vfprintf_internal_r+0xdc8>
  8024cc:	94800404 	addi	r18,r18,16
  8024d0:	8c400044 	addi	r17,r17,1
  8024d4:	9f000015 	stw	fp,0(r19)
  8024d8:	9d000115 	stw	r20,4(r19)
  8024dc:	dc800e15 	stw	r18,56(sp)
  8024e0:	dc400d15 	stw	r17,52(sp)
  8024e4:	ac7ff60e 	bge	r21,r17,8024c0 <___vfprintf_internal_r+0xd74>
  8024e8:	d9014f17 	ldw	r4,1340(sp)
  8024ec:	b00b883a 	mov	r5,r22
  8024f0:	d9800c04 	addi	r6,sp,48
  8024f4:	08016f40 	call	8016f4 <__sprint_r>
  8024f8:	103e4c1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  8024fc:	dc800e17 	ldw	r18,56(sp)
  802500:	dc400d17 	ldw	r17,52(sp)
  802504:	dcc01904 	addi	r19,sp,100
  802508:	003fee06 	br	8024c4 <___vfprintf_internal_r+0xd78>
  80250c:	07002074 	movhi	fp,129
  802510:	e7325384 	addi	fp,fp,-14002
  802514:	9425883a 	add	r18,r18,r16
  802518:	8c400044 	addi	r17,r17,1
  80251c:	008001c4 	movi	r2,7
  802520:	9f000015 	stw	fp,0(r19)
  802524:	9c000115 	stw	r16,4(r19)
  802528:	dc800e15 	stw	r18,56(sp)
  80252c:	dc400d15 	stw	r17,52(sp)
  802530:	147e720e 	bge	r2,r17,801efc <___vfprintf_internal_r+0x7b0>
  802534:	d9014f17 	ldw	r4,1340(sp)
  802538:	b00b883a 	mov	r5,r22
  80253c:	d9800c04 	addi	r6,sp,48
  802540:	08016f40 	call	8016f4 <__sprint_r>
  802544:	103e391e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802548:	dc800e17 	ldw	r18,56(sp)
  80254c:	dc400d17 	ldw	r17,52(sp)
  802550:	dcc01904 	addi	r19,sp,100
  802554:	003e6a06 	br	801f00 <___vfprintf_internal_r+0x7b4>
  802558:	d9014f17 	ldw	r4,1340(sp)
  80255c:	b00b883a 	mov	r5,r22
  802560:	d9800c04 	addi	r6,sp,48
  802564:	d9c15115 	stw	r7,1348(sp)
  802568:	08016f40 	call	8016f4 <__sprint_r>
  80256c:	d9c15117 	ldw	r7,1348(sp)
  802570:	103e2e1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802574:	dc800e17 	ldw	r18,56(sp)
  802578:	dc400d17 	ldw	r17,52(sp)
  80257c:	dd401904 	addi	r21,sp,100
  802580:	003dba06 	br	801c6c <___vfprintf_internal_r+0x520>
  802584:	d9014f17 	ldw	r4,1340(sp)
  802588:	b00b883a 	mov	r5,r22
  80258c:	d9800c04 	addi	r6,sp,48
  802590:	08016f40 	call	8016f4 <__sprint_r>
  802594:	103e251e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802598:	dc800e17 	ldw	r18,56(sp)
  80259c:	dc400d17 	ldw	r17,52(sp)
  8025a0:	dcc01904 	addi	r19,sp,100
  8025a4:	003e4206 	br	801eb0 <___vfprintf_internal_r+0x764>
  8025a8:	d9014f17 	ldw	r4,1340(sp)
  8025ac:	b00b883a 	mov	r5,r22
  8025b0:	d9800c04 	addi	r6,sp,48
  8025b4:	08016f40 	call	8016f4 <__sprint_r>
  8025b8:	103e1c1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  8025bc:	dc800e17 	ldw	r18,56(sp)
  8025c0:	dc400d17 	ldw	r17,52(sp)
  8025c4:	d8c01904 	addi	r3,sp,100
  8025c8:	003e2e06 	br	801e84 <___vfprintf_internal_r+0x738>
  8025cc:	d9414c17 	ldw	r5,1328(sp)
  8025d0:	2880004c 	andi	r2,r5,1
  8025d4:	1005003a 	cmpeq	r2,r2,zero
  8025d8:	103dda1e 	bne	r2,zero,801d44 <___vfprintf_internal_r+0x5f8>
  8025dc:	003e9f06 	br	80205c <___vfprintf_internal_r+0x910>
  8025e0:	d8c14117 	ldw	r3,1284(sp)
  8025e4:	9125883a 	add	r18,r18,r4
  8025e8:	8c400044 	addi	r17,r17,1
  8025ec:	008001c4 	movi	r2,7
  8025f0:	a8c00015 	stw	r3,0(r21)
  8025f4:	a9000115 	stw	r4,4(r21)
  8025f8:	dc800e15 	stw	r18,56(sp)
  8025fc:	dc400d15 	stw	r17,52(sp)
  802600:	14426616 	blt	r2,r17,802f9c <___vfprintf_internal_r+0x1850>
  802604:	a8c00204 	addi	r3,r21,8
  802608:	d9414917 	ldw	r5,1316(sp)
  80260c:	00800044 	movi	r2,1
  802610:	94800044 	addi	r18,r18,1
  802614:	8c400044 	addi	r17,r17,1
  802618:	18800115 	stw	r2,4(r3)
  80261c:	008001c4 	movi	r2,7
  802620:	19400015 	stw	r5,0(r3)
  802624:	dc800e15 	stw	r18,56(sp)
  802628:	dc400d15 	stw	r17,52(sp)
  80262c:	2021883a 	mov	r16,r4
  802630:	14425016 	blt	r2,r17,802f74 <___vfprintf_internal_r+0x1828>
  802634:	19400204 	addi	r5,r3,8
  802638:	d9814717 	ldw	r6,1308(sp)
  80263c:	8c400044 	addi	r17,r17,1
  802640:	dc400d15 	stw	r17,52(sp)
  802644:	3107c83a 	sub	r3,r6,r4
  802648:	d9014117 	ldw	r4,1284(sp)
  80264c:	90e5883a 	add	r18,r18,r3
  802650:	28c00115 	stw	r3,4(r5)
  802654:	8105883a 	add	r2,r16,r4
  802658:	28800015 	stw	r2,0(r5)
  80265c:	008001c4 	movi	r2,7
  802660:	dc800e15 	stw	r18,56(sp)
  802664:	147f1d16 	blt	r2,r17,8022dc <___vfprintf_internal_r+0xb90>
  802668:	28c00204 	addi	r3,r5,8
  80266c:	003db506 	br	801d44 <___vfprintf_internal_r+0x5f8>
  802670:	3c000017 	ldw	r16,0(r7)
  802674:	3c400117 	ldw	r17,4(r7)
  802678:	39800204 	addi	r6,r7,8
  80267c:	01000044 	movi	r4,1
  802680:	d9814015 	stw	r6,1280(sp)
  802684:	d8000405 	stb	zero,16(sp)
  802688:	003ebe06 	br	802184 <___vfprintf_internal_r+0xa38>
  80268c:	3c000017 	ldw	r16,0(r7)
  802690:	3c400117 	ldw	r17,4(r7)
  802694:	38800204 	addi	r2,r7,8
  802698:	d8814015 	stw	r2,1280(sp)
  80269c:	003eb706 	br	80217c <___vfprintf_internal_r+0xa30>
  8026a0:	3c000017 	ldw	r16,0(r7)
  8026a4:	3c400117 	ldw	r17,4(r7)
  8026a8:	39000204 	addi	r4,r7,8
  8026ac:	d9014015 	stw	r4,1280(sp)
  8026b0:	0009883a 	mov	r4,zero
  8026b4:	d8000405 	stb	zero,16(sp)
  8026b8:	003eb206 	br	802184 <___vfprintf_internal_r+0xa38>
  8026bc:	38c00017 	ldw	r3,0(r7)
  8026c0:	39c00104 	addi	r7,r7,4
  8026c4:	d8c14a15 	stw	r3,1320(sp)
  8026c8:	1800d10e 	bge	r3,zero,802a10 <___vfprintf_internal_r+0x12c4>
  8026cc:	00c7c83a 	sub	r3,zero,r3
  8026d0:	d8c14a15 	stw	r3,1320(sp)
  8026d4:	d9014c17 	ldw	r4,1328(sp)
  8026d8:	b8c00007 	ldb	r3,0(r23)
  8026dc:	21000114 	ori	r4,r4,4
  8026e0:	d9014c15 	stw	r4,1328(sp)
  8026e4:	003c9806 	br	801948 <___vfprintf_internal_r+0x1fc>
  8026e8:	d9814c17 	ldw	r6,1328(sp)
  8026ec:	3080080c 	andi	r2,r6,32
  8026f0:	1001f026 	beq	r2,zero,802eb4 <___vfprintf_internal_r+0x1768>
  8026f4:	d9014b17 	ldw	r4,1324(sp)
  8026f8:	38800017 	ldw	r2,0(r7)
  8026fc:	39c00104 	addi	r7,r7,4
  802700:	d9c14015 	stw	r7,1280(sp)
  802704:	2007d7fa 	srai	r3,r4,31
  802708:	d9c14017 	ldw	r7,1280(sp)
  80270c:	11000015 	stw	r4,0(r2)
  802710:	10c00115 	stw	r3,4(r2)
  802714:	003c6906 	br	8018bc <___vfprintf_internal_r+0x170>
  802718:	b8c00007 	ldb	r3,0(r23)
  80271c:	00801b04 	movi	r2,108
  802720:	18824f26 	beq	r3,r2,803060 <___vfprintf_internal_r+0x1914>
  802724:	d9414c17 	ldw	r5,1328(sp)
  802728:	29400414 	ori	r5,r5,16
  80272c:	d9414c15 	stw	r5,1328(sp)
  802730:	003c8506 	br	801948 <___vfprintf_internal_r+0x1fc>
  802734:	d9814c17 	ldw	r6,1328(sp)
  802738:	b8c00007 	ldb	r3,0(r23)
  80273c:	31800814 	ori	r6,r6,32
  802740:	d9814c15 	stw	r6,1328(sp)
  802744:	003c8006 	br	801948 <___vfprintf_internal_r+0x1fc>
  802748:	d8814c17 	ldw	r2,1328(sp)
  80274c:	3c000017 	ldw	r16,0(r7)
  802750:	00c01e04 	movi	r3,120
  802754:	10800094 	ori	r2,r2,2
  802758:	d8814c15 	stw	r2,1328(sp)
  80275c:	39c00104 	addi	r7,r7,4
  802760:	01402074 	movhi	r5,129
  802764:	29723c04 	addi	r5,r5,-14096
  802768:	00800c04 	movi	r2,48
  80276c:	0023883a 	mov	r17,zero
  802770:	01000084 	movi	r4,2
  802774:	d9c14015 	stw	r7,1280(sp)
  802778:	d8c14d15 	stw	r3,1332(sp)
  80277c:	d9414415 	stw	r5,1296(sp)
  802780:	d8800445 	stb	r2,17(sp)
  802784:	d8c00485 	stb	r3,18(sp)
  802788:	d8000405 	stb	zero,16(sp)
  80278c:	003e7d06 	br	802184 <___vfprintf_internal_r+0xa38>
  802790:	d8814c17 	ldw	r2,1328(sp)
  802794:	b8c00007 	ldb	r3,0(r23)
  802798:	10801014 	ori	r2,r2,64
  80279c:	d8814c15 	stw	r2,1328(sp)
  8027a0:	003c6906 	br	801948 <___vfprintf_internal_r+0x1fc>
  8027a4:	d9414c17 	ldw	r5,1328(sp)
  8027a8:	2880020c 	andi	r2,r5,8
  8027ac:	1001df26 	beq	r2,zero,802f2c <___vfprintf_internal_r+0x17e0>
  8027b0:	39800017 	ldw	r6,0(r7)
  8027b4:	38800204 	addi	r2,r7,8
  8027b8:	d8814015 	stw	r2,1280(sp)
  8027bc:	d9814215 	stw	r6,1288(sp)
  8027c0:	39c00117 	ldw	r7,4(r7)
  8027c4:	d9c14315 	stw	r7,1292(sp)
  8027c8:	d9014217 	ldw	r4,1288(sp)
  8027cc:	d9414317 	ldw	r5,1292(sp)
  8027d0:	0808ba40 	call	808ba4 <__isinfd>
  8027d4:	10021726 	beq	r2,zero,803034 <___vfprintf_internal_r+0x18e8>
  8027d8:	d9014217 	ldw	r4,1288(sp)
  8027dc:	d9414317 	ldw	r5,1292(sp)
  8027e0:	000d883a 	mov	r6,zero
  8027e4:	000f883a 	mov	r7,zero
  8027e8:	080a7740 	call	80a774 <__ltdf2>
  8027ec:	1002ca16 	blt	r2,zero,803318 <___vfprintf_internal_r+0x1bcc>
  8027f0:	d9414d17 	ldw	r5,1332(sp)
  8027f4:	008011c4 	movi	r2,71
  8027f8:	11420a16 	blt	r2,r5,803024 <___vfprintf_internal_r+0x18d8>
  8027fc:	01802074 	movhi	r6,129
  802800:	31b24104 	addi	r6,r6,-14076
  802804:	d9814115 	stw	r6,1284(sp)
  802808:	d9014c17 	ldw	r4,1328(sp)
  80280c:	00c000c4 	movi	r3,3
  802810:	00bfdfc4 	movi	r2,-129
  802814:	2088703a 	and	r4,r4,r2
  802818:	180f883a 	mov	r7,r3
  80281c:	d8c14515 	stw	r3,1300(sp)
  802820:	d9014c15 	stw	r4,1328(sp)
  802824:	d8014615 	stw	zero,1304(sp)
  802828:	003e6a06 	br	8021d4 <___vfprintf_internal_r+0xa88>
  80282c:	38800017 	ldw	r2,0(r7)
  802830:	00c00044 	movi	r3,1
  802834:	39c00104 	addi	r7,r7,4
  802838:	d9c14015 	stw	r7,1280(sp)
  80283c:	d9000f04 	addi	r4,sp,60
  802840:	180f883a 	mov	r7,r3
  802844:	d8c14515 	stw	r3,1300(sp)
  802848:	d9014115 	stw	r4,1284(sp)
  80284c:	d8800f05 	stb	r2,60(sp)
  802850:	d8000405 	stb	zero,16(sp)
  802854:	003cac06 	br	801b08 <___vfprintf_internal_r+0x3bc>
  802858:	01402074 	movhi	r5,129
  80285c:	29724704 	addi	r5,r5,-14052
  802860:	d9414415 	stw	r5,1296(sp)
  802864:	d9814c17 	ldw	r6,1328(sp)
  802868:	3080080c 	andi	r2,r6,32
  80286c:	1000f926 	beq	r2,zero,802c54 <___vfprintf_internal_r+0x1508>
  802870:	3c000017 	ldw	r16,0(r7)
  802874:	3c400117 	ldw	r17,4(r7)
  802878:	38800204 	addi	r2,r7,8
  80287c:	d8814015 	stw	r2,1280(sp)
  802880:	d9414c17 	ldw	r5,1328(sp)
  802884:	2880004c 	andi	r2,r5,1
  802888:	1005003a 	cmpeq	r2,r2,zero
  80288c:	1000b31e 	bne	r2,zero,802b5c <___vfprintf_internal_r+0x1410>
  802890:	8444b03a 	or	r2,r16,r17
  802894:	1000b126 	beq	r2,zero,802b5c <___vfprintf_internal_r+0x1410>
  802898:	d9814d17 	ldw	r6,1332(sp)
  80289c:	29400094 	ori	r5,r5,2
  8028a0:	00800c04 	movi	r2,48
  8028a4:	01000084 	movi	r4,2
  8028a8:	d9414c15 	stw	r5,1328(sp)
  8028ac:	d8800445 	stb	r2,17(sp)
  8028b0:	d9800485 	stb	r6,18(sp)
  8028b4:	d8000405 	stb	zero,16(sp)
  8028b8:	003e3206 	br	802184 <___vfprintf_internal_r+0xa38>
  8028bc:	01802074 	movhi	r6,129
  8028c0:	31b23c04 	addi	r6,r6,-14096
  8028c4:	d9814415 	stw	r6,1296(sp)
  8028c8:	003fe606 	br	802864 <___vfprintf_internal_r+0x1118>
  8028cc:	00800ac4 	movi	r2,43
  8028d0:	d8800405 	stb	r2,16(sp)
  8028d4:	b8c00007 	ldb	r3,0(r23)
  8028d8:	003c1b06 	br	801948 <___vfprintf_internal_r+0x1fc>
  8028dc:	d8814c17 	ldw	r2,1328(sp)
  8028e0:	b8c00007 	ldb	r3,0(r23)
  8028e4:	10800054 	ori	r2,r2,1
  8028e8:	d8814c15 	stw	r2,1328(sp)
  8028ec:	003c1606 	br	801948 <___vfprintf_internal_r+0x1fc>
  8028f0:	d8800407 	ldb	r2,16(sp)
  8028f4:	1000461e 	bne	r2,zero,802a10 <___vfprintf_internal_r+0x12c4>
  8028f8:	00800804 	movi	r2,32
  8028fc:	d8800405 	stb	r2,16(sp)
  802900:	b8c00007 	ldb	r3,0(r23)
  802904:	003c1006 	br	801948 <___vfprintf_internal_r+0x1fc>
  802908:	d9814c17 	ldw	r6,1328(sp)
  80290c:	b8c00007 	ldb	r3,0(r23)
  802910:	31800214 	ori	r6,r6,8
  802914:	d9814c15 	stw	r6,1328(sp)
  802918:	003c0b06 	br	801948 <___vfprintf_internal_r+0x1fc>
  80291c:	0007883a 	mov	r3,zero
  802920:	01000244 	movi	r4,9
  802924:	188002a4 	muli	r2,r3,10
  802928:	b8c00007 	ldb	r3,0(r23)
  80292c:	d9814d17 	ldw	r6,1332(sp)
  802930:	bdc00044 	addi	r23,r23,1
  802934:	d8c14d15 	stw	r3,1332(sp)
  802938:	d9414d17 	ldw	r5,1332(sp)
  80293c:	3085883a 	add	r2,r6,r2
  802940:	10fff404 	addi	r3,r2,-48
  802944:	28bff404 	addi	r2,r5,-48
  802948:	20bff62e 	bgeu	r4,r2,802924 <___vfprintf_internal_r+0x11d8>
  80294c:	d8c14a15 	stw	r3,1320(sp)
  802950:	003bff06 	br	801950 <___vfprintf_internal_r+0x204>
  802954:	d9414c17 	ldw	r5,1328(sp)
  802958:	b8c00007 	ldb	r3,0(r23)
  80295c:	29402014 	ori	r5,r5,128
  802960:	d9414c15 	stw	r5,1328(sp)
  802964:	003bf806 	br	801948 <___vfprintf_internal_r+0x1fc>
  802968:	b8c00007 	ldb	r3,0(r23)
  80296c:	00800a84 	movi	r2,42
  802970:	bdc00044 	addi	r23,r23,1
  802974:	18831526 	beq	r3,r2,8035cc <___vfprintf_internal_r+0x1e80>
  802978:	d8c14d15 	stw	r3,1332(sp)
  80297c:	18bff404 	addi	r2,r3,-48
  802980:	00c00244 	movi	r3,9
  802984:	18827836 	bltu	r3,r2,803368 <___vfprintf_internal_r+0x1c1c>
  802988:	000d883a 	mov	r6,zero
  80298c:	308002a4 	muli	r2,r6,10
  802990:	b9800007 	ldb	r6,0(r23)
  802994:	d9414d17 	ldw	r5,1332(sp)
  802998:	bdc00044 	addi	r23,r23,1
  80299c:	d9814d15 	stw	r6,1332(sp)
  8029a0:	d9014d17 	ldw	r4,1332(sp)
  8029a4:	1145883a 	add	r2,r2,r5
  8029a8:	11bff404 	addi	r6,r2,-48
  8029ac:	20bff404 	addi	r2,r4,-48
  8029b0:	18bff62e 	bgeu	r3,r2,80298c <___vfprintf_internal_r+0x1240>
  8029b4:	3027883a 	mov	r19,r6
  8029b8:	303be50e 	bge	r6,zero,801950 <___vfprintf_internal_r+0x204>
  8029bc:	04ffffc4 	movi	r19,-1
  8029c0:	003be306 	br	801950 <___vfprintf_internal_r+0x204>
  8029c4:	d8000405 	stb	zero,16(sp)
  8029c8:	39800017 	ldw	r6,0(r7)
  8029cc:	39c00104 	addi	r7,r7,4
  8029d0:	d9c14015 	stw	r7,1280(sp)
  8029d4:	d9814115 	stw	r6,1284(sp)
  8029d8:	3001c926 	beq	r6,zero,803100 <___vfprintf_internal_r+0x19b4>
  8029dc:	98000e16 	blt	r19,zero,802a18 <___vfprintf_internal_r+0x12cc>
  8029e0:	d9014117 	ldw	r4,1284(sp)
  8029e4:	000b883a 	mov	r5,zero
  8029e8:	980d883a 	mov	r6,r19
  8029ec:	08072c00 	call	8072c0 <memchr>
  8029f0:	10025926 	beq	r2,zero,803358 <___vfprintf_internal_r+0x1c0c>
  8029f4:	d8c14117 	ldw	r3,1284(sp)
  8029f8:	10cfc83a 	sub	r7,r2,r3
  8029fc:	99c19e16 	blt	r19,r7,803078 <___vfprintf_internal_r+0x192c>
  802a00:	d9c14515 	stw	r7,1300(sp)
  802a04:	38000916 	blt	r7,zero,802a2c <___vfprintf_internal_r+0x12e0>
  802a08:	d8014615 	stw	zero,1304(sp)
  802a0c:	003df106 	br	8021d4 <___vfprintf_internal_r+0xa88>
  802a10:	b8c00007 	ldb	r3,0(r23)
  802a14:	003bcc06 	br	801948 <___vfprintf_internal_r+0x1fc>
  802a18:	d9014117 	ldw	r4,1284(sp)
  802a1c:	08016800 	call	801680 <strlen>
  802a20:	d8814515 	stw	r2,1300(sp)
  802a24:	100f883a 	mov	r7,r2
  802a28:	103ff70e 	bge	r2,zero,802a08 <___vfprintf_internal_r+0x12bc>
  802a2c:	d8014515 	stw	zero,1300(sp)
  802a30:	d8014615 	stw	zero,1304(sp)
  802a34:	003de706 	br	8021d4 <___vfprintf_internal_r+0xa88>
  802a38:	20c03fcc 	andi	r3,r4,255
  802a3c:	00800044 	movi	r2,1
  802a40:	18802d26 	beq	r3,r2,802af8 <___vfprintf_internal_r+0x13ac>
  802a44:	18800e36 	bltu	r3,r2,802a80 <___vfprintf_internal_r+0x1334>
  802a48:	00800084 	movi	r2,2
  802a4c:	1880fa26 	beq	r3,r2,802e38 <___vfprintf_internal_r+0x16ec>
  802a50:	01002074 	movhi	r4,129
  802a54:	21324c04 	addi	r4,r4,-14032
  802a58:	08016800 	call	801680 <strlen>
  802a5c:	100f883a 	mov	r7,r2
  802a60:	dcc14515 	stw	r19,1300(sp)
  802a64:	9880010e 	bge	r19,r2,802a6c <___vfprintf_internal_r+0x1320>
  802a68:	d8814515 	stw	r2,1300(sp)
  802a6c:	00802074 	movhi	r2,129
  802a70:	10b24c04 	addi	r2,r2,-14032
  802a74:	dcc14615 	stw	r19,1304(sp)
  802a78:	d8814115 	stw	r2,1284(sp)
  802a7c:	003dd506 	br	8021d4 <___vfprintf_internal_r+0xa88>
  802a80:	d9401904 	addi	r5,sp,100
  802a84:	dd000f04 	addi	r20,sp,60
  802a88:	d9414115 	stw	r5,1284(sp)
  802a8c:	880a977a 	slli	r5,r17,29
  802a90:	d9814117 	ldw	r6,1284(sp)
  802a94:	8004d0fa 	srli	r2,r16,3
  802a98:	8806d0fa 	srli	r3,r17,3
  802a9c:	810001cc 	andi	r4,r16,7
  802aa0:	2884b03a 	or	r2,r5,r2
  802aa4:	31bfffc4 	addi	r6,r6,-1
  802aa8:	21000c04 	addi	r4,r4,48
  802aac:	d9814115 	stw	r6,1284(sp)
  802ab0:	10cab03a 	or	r5,r2,r3
  802ab4:	31000005 	stb	r4,0(r6)
  802ab8:	1021883a 	mov	r16,r2
  802abc:	1823883a 	mov	r17,r3
  802ac0:	283ff21e 	bne	r5,zero,802a8c <___vfprintf_internal_r+0x1340>
  802ac4:	d8c14c17 	ldw	r3,1328(sp)
  802ac8:	1880004c 	andi	r2,r3,1
  802acc:	1005003a 	cmpeq	r2,r2,zero
  802ad0:	103db91e 	bne	r2,zero,8021b8 <___vfprintf_internal_r+0xa6c>
  802ad4:	20803fcc 	andi	r2,r4,255
  802ad8:	1080201c 	xori	r2,r2,128
  802adc:	10bfe004 	addi	r2,r2,-128
  802ae0:	00c00c04 	movi	r3,48
  802ae4:	10fdb426 	beq	r2,r3,8021b8 <___vfprintf_internal_r+0xa6c>
  802ae8:	31bfffc4 	addi	r6,r6,-1
  802aec:	d9814115 	stw	r6,1284(sp)
  802af0:	30c00005 	stb	r3,0(r6)
  802af4:	003db006 	br	8021b8 <___vfprintf_internal_r+0xa6c>
  802af8:	88800068 	cmpgeui	r2,r17,1
  802afc:	10002c1e 	bne	r2,zero,802bb0 <___vfprintf_internal_r+0x1464>
  802b00:	8800021e 	bne	r17,zero,802b0c <___vfprintf_internal_r+0x13c0>
  802b04:	00800244 	movi	r2,9
  802b08:	14002936 	bltu	r2,r16,802bb0 <___vfprintf_internal_r+0x1464>
  802b0c:	d90018c4 	addi	r4,sp,99
  802b10:	dd000f04 	addi	r20,sp,60
  802b14:	d9014115 	stw	r4,1284(sp)
  802b18:	d9014117 	ldw	r4,1284(sp)
  802b1c:	80800c04 	addi	r2,r16,48
  802b20:	20800005 	stb	r2,0(r4)
  802b24:	003da406 	br	8021b8 <___vfprintf_internal_r+0xa6c>
  802b28:	dc400d17 	ldw	r17,52(sp)
  802b2c:	07002074 	movhi	fp,129
  802b30:	e7325384 	addi	fp,fp,-14002
  802b34:	9425883a 	add	r18,r18,r16
  802b38:	8c400044 	addi	r17,r17,1
  802b3c:	008001c4 	movi	r2,7
  802b40:	1f000015 	stw	fp,0(r3)
  802b44:	1c000115 	stw	r16,4(r3)
  802b48:	dc800e15 	stw	r18,56(sp)
  802b4c:	dc400d15 	stw	r17,52(sp)
  802b50:	147de216 	blt	r2,r17,8022dc <___vfprintf_internal_r+0xb90>
  802b54:	18c00204 	addi	r3,r3,8
  802b58:	003c7a06 	br	801d44 <___vfprintf_internal_r+0x5f8>
  802b5c:	01000084 	movi	r4,2
  802b60:	d8000405 	stb	zero,16(sp)
  802b64:	003d8706 	br	802184 <___vfprintf_internal_r+0xa38>
  802b68:	d9814c17 	ldw	r6,1328(sp)
  802b6c:	30c4703a 	and	r2,r6,r3
  802b70:	1005003a 	cmpeq	r2,r2,zero
  802b74:	103cb926 	beq	r2,zero,801e5c <___vfprintf_internal_r+0x710>
  802b78:	d9014117 	ldw	r4,1284(sp)
  802b7c:	94800044 	addi	r18,r18,1
  802b80:	8c400044 	addi	r17,r17,1
  802b84:	008001c4 	movi	r2,7
  802b88:	a9000015 	stw	r4,0(r21)
  802b8c:	a8c00115 	stw	r3,4(r21)
  802b90:	dc800e15 	stw	r18,56(sp)
  802b94:	dc400d15 	stw	r17,52(sp)
  802b98:	147e6616 	blt	r2,r17,802534 <___vfprintf_internal_r+0xde8>
  802b9c:	acc00204 	addi	r19,r21,8
  802ba0:	003cd706 	br	801f00 <___vfprintf_internal_r+0x7b4>
  802ba4:	07002074 	movhi	fp,129
  802ba8:	e7325384 	addi	fp,fp,-14002
  802bac:	003c4f06 	br	801cec <___vfprintf_internal_r+0x5a0>
  802bb0:	dd000f04 	addi	r20,sp,60
  802bb4:	dc801904 	addi	r18,sp,100
  802bb8:	8009883a 	mov	r4,r16
  802bbc:	880b883a 	mov	r5,r17
  802bc0:	01800284 	movi	r6,10
  802bc4:	000f883a 	mov	r7,zero
  802bc8:	08099880 	call	809988 <__umoddi3>
  802bcc:	12000c04 	addi	r8,r2,48
  802bd0:	94bfffc4 	addi	r18,r18,-1
  802bd4:	8009883a 	mov	r4,r16
  802bd8:	880b883a 	mov	r5,r17
  802bdc:	01800284 	movi	r6,10
  802be0:	000f883a 	mov	r7,zero
  802be4:	92000005 	stb	r8,0(r18)
  802be8:	08093ac0 	call	8093ac <__udivdi3>
  802bec:	1009883a 	mov	r4,r2
  802bf0:	1021883a 	mov	r16,r2
  802bf4:	18800068 	cmpgeui	r2,r3,1
  802bf8:	1823883a 	mov	r17,r3
  802bfc:	103fee1e 	bne	r2,zero,802bb8 <___vfprintf_internal_r+0x146c>
  802c00:	1800021e 	bne	r3,zero,802c0c <___vfprintf_internal_r+0x14c0>
  802c04:	00800244 	movi	r2,9
  802c08:	113feb36 	bltu	r2,r4,802bb8 <___vfprintf_internal_r+0x146c>
  802c0c:	94bfffc4 	addi	r18,r18,-1
  802c10:	dc814115 	stw	r18,1284(sp)
  802c14:	003fc006 	br	802b18 <___vfprintf_internal_r+0x13cc>
  802c18:	d9014c17 	ldw	r4,1328(sp)
  802c1c:	2080004c 	andi	r2,r4,1
  802c20:	10009a1e 	bne	r2,zero,802e8c <___vfprintf_internal_r+0x1740>
  802c24:	d9401904 	addi	r5,sp,100
  802c28:	dd000f04 	addi	r20,sp,60
  802c2c:	d9414115 	stw	r5,1284(sp)
  802c30:	003d6106 	br	8021b8 <___vfprintf_internal_r+0xa6c>
  802c34:	d9014f17 	ldw	r4,1340(sp)
  802c38:	b00b883a 	mov	r5,r22
  802c3c:	d9800c04 	addi	r6,sp,48
  802c40:	08016f40 	call	8016f4 <__sprint_r>
  802c44:	103c791e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802c48:	dc800e17 	ldw	r18,56(sp)
  802c4c:	d8c01904 	addi	r3,sp,100
  802c50:	003cff06 	br	802050 <___vfprintf_internal_r+0x904>
  802c54:	d8c14c17 	ldw	r3,1328(sp)
  802c58:	1880040c 	andi	r2,r3,16
  802c5c:	1000711e 	bne	r2,zero,802e24 <___vfprintf_internal_r+0x16d8>
  802c60:	d9014c17 	ldw	r4,1328(sp)
  802c64:	2080100c 	andi	r2,r4,64
  802c68:	10006e26 	beq	r2,zero,802e24 <___vfprintf_internal_r+0x16d8>
  802c6c:	3c00000b 	ldhu	r16,0(r7)
  802c70:	0023883a 	mov	r17,zero
  802c74:	39c00104 	addi	r7,r7,4
  802c78:	d9c14015 	stw	r7,1280(sp)
  802c7c:	003f0006 	br	802880 <___vfprintf_internal_r+0x1134>
  802c80:	dc400d17 	ldw	r17,52(sp)
  802c84:	07002074 	movhi	fp,129
  802c88:	e7325384 	addi	fp,fp,-14002
  802c8c:	9425883a 	add	r18,r18,r16
  802c90:	8c400044 	addi	r17,r17,1
  802c94:	008001c4 	movi	r2,7
  802c98:	1f000015 	stw	fp,0(r3)
  802c9c:	1c000115 	stw	r16,4(r3)
  802ca0:	dc800e15 	stw	r18,56(sp)
  802ca4:	dc400d15 	stw	r17,52(sp)
  802ca8:	147d7616 	blt	r2,r17,802284 <___vfprintf_internal_r+0xb38>
  802cac:	18c00204 	addi	r3,r3,8
  802cb0:	003d7b06 	br	8022a0 <___vfprintf_internal_r+0xb54>
  802cb4:	dc800e17 	ldw	r18,56(sp)
  802cb8:	dc400d17 	ldw	r17,52(sp)
  802cbc:	07002074 	movhi	fp,129
  802cc0:	e7325784 	addi	fp,fp,-13986
  802cc4:	003bc006 	br	801bc8 <___vfprintf_internal_r+0x47c>
  802cc8:	d9014f17 	ldw	r4,1340(sp)
  802ccc:	b00b883a 	mov	r5,r22
  802cd0:	d9800c04 	addi	r6,sp,48
  802cd4:	08016f40 	call	8016f4 <__sprint_r>
  802cd8:	103c541e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802cdc:	dc800e17 	ldw	r18,56(sp)
  802ce0:	d8c01904 	addi	r3,sp,100
  802ce4:	003ce906 	br	80208c <___vfprintf_internal_r+0x940>
  802ce8:	3c000017 	ldw	r16,0(r7)
  802cec:	0009883a 	mov	r4,zero
  802cf0:	39c00104 	addi	r7,r7,4
  802cf4:	0023883a 	mov	r17,zero
  802cf8:	d9c14015 	stw	r7,1280(sp)
  802cfc:	d8000405 	stb	zero,16(sp)
  802d00:	003d2006 	br	802184 <___vfprintf_internal_r+0xa38>
  802d04:	38800017 	ldw	r2,0(r7)
  802d08:	39c00104 	addi	r7,r7,4
  802d0c:	d9c14015 	stw	r7,1280(sp)
  802d10:	1023d7fa 	srai	r17,r2,31
  802d14:	1021883a 	mov	r16,r2
  802d18:	003d1806 	br	80217c <___vfprintf_internal_r+0xa30>
  802d1c:	3c000017 	ldw	r16,0(r7)
  802d20:	01000044 	movi	r4,1
  802d24:	39c00104 	addi	r7,r7,4
  802d28:	0023883a 	mov	r17,zero
  802d2c:	d9c14015 	stw	r7,1280(sp)
  802d30:	d8000405 	stb	zero,16(sp)
  802d34:	003d1306 	br	802184 <___vfprintf_internal_r+0xa38>
  802d38:	00802074 	movhi	r2,129
  802d3c:	10b25304 	addi	r2,r2,-14004
  802d40:	94800044 	addi	r18,r18,1
  802d44:	8c400044 	addi	r17,r17,1
  802d48:	a8800015 	stw	r2,0(r21)
  802d4c:	00c00044 	movi	r3,1
  802d50:	008001c4 	movi	r2,7
  802d54:	a8c00115 	stw	r3,4(r21)
  802d58:	dc800e15 	stw	r18,56(sp)
  802d5c:	dc400d15 	stw	r17,52(sp)
  802d60:	1440ca16 	blt	r2,r17,80308c <___vfprintf_internal_r+0x1940>
  802d64:	a8c00204 	addi	r3,r21,8
  802d68:	2000061e 	bne	r4,zero,802d84 <___vfprintf_internal_r+0x1638>
  802d6c:	d9414717 	ldw	r5,1308(sp)
  802d70:	2800041e 	bne	r5,zero,802d84 <___vfprintf_internal_r+0x1638>
  802d74:	d9814c17 	ldw	r6,1328(sp)
  802d78:	3080004c 	andi	r2,r6,1
  802d7c:	1005003a 	cmpeq	r2,r2,zero
  802d80:	103bf01e 	bne	r2,zero,801d44 <___vfprintf_internal_r+0x5f8>
  802d84:	00800044 	movi	r2,1
  802d88:	dc400d17 	ldw	r17,52(sp)
  802d8c:	18800115 	stw	r2,4(r3)
  802d90:	d8814917 	ldw	r2,1316(sp)
  802d94:	94800044 	addi	r18,r18,1
  802d98:	8c400044 	addi	r17,r17,1
  802d9c:	18800015 	stw	r2,0(r3)
  802da0:	008001c4 	movi	r2,7
  802da4:	dc800e15 	stw	r18,56(sp)
  802da8:	dc400d15 	stw	r17,52(sp)
  802dac:	1440ca16 	blt	r2,r17,8030d8 <___vfprintf_internal_r+0x198c>
  802db0:	18c00204 	addi	r3,r3,8
  802db4:	0121c83a 	sub	r16,zero,r4
  802db8:	0400500e 	bge	zero,r16,802efc <___vfprintf_internal_r+0x17b0>
  802dbc:	00800404 	movi	r2,16
  802dc0:	1400800e 	bge	r2,r16,802fc4 <___vfprintf_internal_r+0x1878>
  802dc4:	1027883a 	mov	r19,r2
  802dc8:	07002074 	movhi	fp,129
  802dcc:	e7325384 	addi	fp,fp,-14002
  802dd0:	050001c4 	movi	r20,7
  802dd4:	00000306 	br	802de4 <___vfprintf_internal_r+0x1698>
  802dd8:	18c00204 	addi	r3,r3,8
  802ddc:	843ffc04 	addi	r16,r16,-16
  802de0:	9c007a0e 	bge	r19,r16,802fcc <___vfprintf_internal_r+0x1880>
  802de4:	94800404 	addi	r18,r18,16
  802de8:	8c400044 	addi	r17,r17,1
  802dec:	1f000015 	stw	fp,0(r3)
  802df0:	1cc00115 	stw	r19,4(r3)
  802df4:	dc800e15 	stw	r18,56(sp)
  802df8:	dc400d15 	stw	r17,52(sp)
  802dfc:	a47ff60e 	bge	r20,r17,802dd8 <___vfprintf_internal_r+0x168c>
  802e00:	d9014f17 	ldw	r4,1340(sp)
  802e04:	b00b883a 	mov	r5,r22
  802e08:	d9800c04 	addi	r6,sp,48
  802e0c:	08016f40 	call	8016f4 <__sprint_r>
  802e10:	103c061e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802e14:	dc800e17 	ldw	r18,56(sp)
  802e18:	dc400d17 	ldw	r17,52(sp)
  802e1c:	d8c01904 	addi	r3,sp,100
  802e20:	003fee06 	br	802ddc <___vfprintf_internal_r+0x1690>
  802e24:	3c000017 	ldw	r16,0(r7)
  802e28:	0023883a 	mov	r17,zero
  802e2c:	39c00104 	addi	r7,r7,4
  802e30:	d9c14015 	stw	r7,1280(sp)
  802e34:	003e9206 	br	802880 <___vfprintf_internal_r+0x1134>
  802e38:	d9401904 	addi	r5,sp,100
  802e3c:	dd000f04 	addi	r20,sp,60
  802e40:	d9414115 	stw	r5,1284(sp)
  802e44:	d9814417 	ldw	r6,1296(sp)
  802e48:	880a973a 	slli	r5,r17,28
  802e4c:	8004d13a 	srli	r2,r16,4
  802e50:	810003cc 	andi	r4,r16,15
  802e54:	3109883a 	add	r4,r6,r4
  802e58:	2884b03a 	or	r2,r5,r2
  802e5c:	21400003 	ldbu	r5,0(r4)
  802e60:	d9014117 	ldw	r4,1284(sp)
  802e64:	8806d13a 	srli	r3,r17,4
  802e68:	1021883a 	mov	r16,r2
  802e6c:	213fffc4 	addi	r4,r4,-1
  802e70:	d9014115 	stw	r4,1284(sp)
  802e74:	d9814117 	ldw	r6,1284(sp)
  802e78:	10c8b03a 	or	r4,r2,r3
  802e7c:	1823883a 	mov	r17,r3
  802e80:	31400005 	stb	r5,0(r6)
  802e84:	203fef1e 	bne	r4,zero,802e44 <___vfprintf_internal_r+0x16f8>
  802e88:	003ccb06 	br	8021b8 <___vfprintf_internal_r+0xa6c>
  802e8c:	00800c04 	movi	r2,48
  802e90:	d98018c4 	addi	r6,sp,99
  802e94:	dd000f04 	addi	r20,sp,60
  802e98:	d88018c5 	stb	r2,99(sp)
  802e9c:	d9814115 	stw	r6,1284(sp)
  802ea0:	003cc506 	br	8021b8 <___vfprintf_internal_r+0xa6c>
  802ea4:	dc400d17 	ldw	r17,52(sp)
  802ea8:	07002074 	movhi	fp,129
  802eac:	e7325784 	addi	fp,fp,-13986
  802eb0:	003bc706 	br	801dd0 <___vfprintf_internal_r+0x684>
  802eb4:	d9414c17 	ldw	r5,1328(sp)
  802eb8:	2880040c 	andi	r2,r5,16
  802ebc:	10007c26 	beq	r2,zero,8030b0 <___vfprintf_internal_r+0x1964>
  802ec0:	38800017 	ldw	r2,0(r7)
  802ec4:	39c00104 	addi	r7,r7,4
  802ec8:	d9c14015 	stw	r7,1280(sp)
  802ecc:	d9814b17 	ldw	r6,1324(sp)
  802ed0:	d9c14017 	ldw	r7,1280(sp)
  802ed4:	11800015 	stw	r6,0(r2)
  802ed8:	003a7806 	br	8018bc <___vfprintf_internal_r+0x170>
  802edc:	d9014f17 	ldw	r4,1340(sp)
  802ee0:	b00b883a 	mov	r5,r22
  802ee4:	d9800c04 	addi	r6,sp,48
  802ee8:	08016f40 	call	8016f4 <__sprint_r>
  802eec:	103bcf1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802ef0:	dc800e17 	ldw	r18,56(sp)
  802ef4:	dc400d17 	ldw	r17,52(sp)
  802ef8:	d8c01904 	addi	r3,sp,100
  802efc:	d9014717 	ldw	r4,1308(sp)
  802f00:	d9414117 	ldw	r5,1284(sp)
  802f04:	8c400044 	addi	r17,r17,1
  802f08:	9125883a 	add	r18,r18,r4
  802f0c:	008001c4 	movi	r2,7
  802f10:	19400015 	stw	r5,0(r3)
  802f14:	19000115 	stw	r4,4(r3)
  802f18:	dc800e15 	stw	r18,56(sp)
  802f1c:	dc400d15 	stw	r17,52(sp)
  802f20:	147cee16 	blt	r2,r17,8022dc <___vfprintf_internal_r+0xb90>
  802f24:	18c00204 	addi	r3,r3,8
  802f28:	003b8606 	br	801d44 <___vfprintf_internal_r+0x5f8>
  802f2c:	38c00017 	ldw	r3,0(r7)
  802f30:	39000204 	addi	r4,r7,8
  802f34:	d9014015 	stw	r4,1280(sp)
  802f38:	d8c14215 	stw	r3,1288(sp)
  802f3c:	39c00117 	ldw	r7,4(r7)
  802f40:	d9c14315 	stw	r7,1292(sp)
  802f44:	003e2006 	br	8027c8 <___vfprintf_internal_r+0x107c>
  802f48:	0005883a 	mov	r2,zero
  802f4c:	1409c83a 	sub	r4,r2,r16
  802f50:	1105803a 	cmpltu	r2,r2,r4
  802f54:	044bc83a 	sub	r5,zero,r17
  802f58:	2885c83a 	sub	r2,r5,r2
  802f5c:	2021883a 	mov	r16,r4
  802f60:	1023883a 	mov	r17,r2
  802f64:	01000044 	movi	r4,1
  802f68:	00800b44 	movi	r2,45
  802f6c:	d8800405 	stb	r2,16(sp)
  802f70:	003c8406 	br	802184 <___vfprintf_internal_r+0xa38>
  802f74:	d9014f17 	ldw	r4,1340(sp)
  802f78:	b00b883a 	mov	r5,r22
  802f7c:	d9800c04 	addi	r6,sp,48
  802f80:	08016f40 	call	8016f4 <__sprint_r>
  802f84:	103ba91e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802f88:	dc800e17 	ldw	r18,56(sp)
  802f8c:	dc400d17 	ldw	r17,52(sp)
  802f90:	d9000517 	ldw	r4,20(sp)
  802f94:	d9401904 	addi	r5,sp,100
  802f98:	003da706 	br	802638 <___vfprintf_internal_r+0xeec>
  802f9c:	d9014f17 	ldw	r4,1340(sp)
  802fa0:	b00b883a 	mov	r5,r22
  802fa4:	d9800c04 	addi	r6,sp,48
  802fa8:	08016f40 	call	8016f4 <__sprint_r>
  802fac:	103b9f1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  802fb0:	dc800e17 	ldw	r18,56(sp)
  802fb4:	dc400d17 	ldw	r17,52(sp)
  802fb8:	d9000517 	ldw	r4,20(sp)
  802fbc:	d8c01904 	addi	r3,sp,100
  802fc0:	003d9106 	br	802608 <___vfprintf_internal_r+0xebc>
  802fc4:	07002074 	movhi	fp,129
  802fc8:	e7325384 	addi	fp,fp,-14002
  802fcc:	9425883a 	add	r18,r18,r16
  802fd0:	8c400044 	addi	r17,r17,1
  802fd4:	008001c4 	movi	r2,7
  802fd8:	1f000015 	stw	fp,0(r3)
  802fdc:	1c000115 	stw	r16,4(r3)
  802fe0:	dc800e15 	stw	r18,56(sp)
  802fe4:	dc400d15 	stw	r17,52(sp)
  802fe8:	147fbc16 	blt	r2,r17,802edc <___vfprintf_internal_r+0x1790>
  802fec:	18c00204 	addi	r3,r3,8
  802ff0:	003fc206 	br	802efc <___vfprintf_internal_r+0x17b0>
  802ff4:	d9014f17 	ldw	r4,1340(sp)
  802ff8:	b00b883a 	mov	r5,r22
  802ffc:	d9800c04 	addi	r6,sp,48
  803000:	08016f40 	call	8016f4 <__sprint_r>
  803004:	103b891e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  803008:	dc800e17 	ldw	r18,56(sp)
  80300c:	d9000517 	ldw	r4,20(sp)
  803010:	d8c01904 	addi	r3,sp,100
  803014:	003d0206 	br	802420 <___vfprintf_internal_r+0xcd4>
  803018:	07002074 	movhi	fp,129
  80301c:	e7325384 	addi	fp,fp,-14002
  803020:	003be406 	br	801fb4 <___vfprintf_internal_r+0x868>
  803024:	00802074 	movhi	r2,129
  803028:	10b24204 	addi	r2,r2,-14072
  80302c:	d8814115 	stw	r2,1284(sp)
  803030:	003df506 	br	802808 <___vfprintf_internal_r+0x10bc>
  803034:	d9014217 	ldw	r4,1288(sp)
  803038:	d9414317 	ldw	r5,1292(sp)
  80303c:	0808be40 	call	808be4 <__isnand>
  803040:	10003926 	beq	r2,zero,803128 <___vfprintf_internal_r+0x19dc>
  803044:	d9414d17 	ldw	r5,1332(sp)
  803048:	008011c4 	movi	r2,71
  80304c:	1140ce16 	blt	r2,r5,803388 <___vfprintf_internal_r+0x1c3c>
  803050:	01802074 	movhi	r6,129
  803054:	31b24304 	addi	r6,r6,-14068
  803058:	d9814115 	stw	r6,1284(sp)
  80305c:	003dea06 	br	802808 <___vfprintf_internal_r+0x10bc>
  803060:	d9014c17 	ldw	r4,1328(sp)
  803064:	bdc00044 	addi	r23,r23,1
  803068:	b8c00007 	ldb	r3,0(r23)
  80306c:	21000814 	ori	r4,r4,32
  803070:	d9014c15 	stw	r4,1328(sp)
  803074:	003a3406 	br	801948 <___vfprintf_internal_r+0x1fc>
  803078:	dcc14515 	stw	r19,1300(sp)
  80307c:	98011016 	blt	r19,zero,8034c0 <___vfprintf_internal_r+0x1d74>
  803080:	980f883a 	mov	r7,r19
  803084:	d8014615 	stw	zero,1304(sp)
  803088:	003c5206 	br	8021d4 <___vfprintf_internal_r+0xa88>
  80308c:	d9014f17 	ldw	r4,1340(sp)
  803090:	b00b883a 	mov	r5,r22
  803094:	d9800c04 	addi	r6,sp,48
  803098:	08016f40 	call	8016f4 <__sprint_r>
  80309c:	103b631e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  8030a0:	dc800e17 	ldw	r18,56(sp)
  8030a4:	d9000517 	ldw	r4,20(sp)
  8030a8:	d8c01904 	addi	r3,sp,100
  8030ac:	003f2e06 	br	802d68 <___vfprintf_internal_r+0x161c>
  8030b0:	d8c14c17 	ldw	r3,1328(sp)
  8030b4:	1880100c 	andi	r2,r3,64
  8030b8:	1000a026 	beq	r2,zero,80333c <___vfprintf_internal_r+0x1bf0>
  8030bc:	38800017 	ldw	r2,0(r7)
  8030c0:	39c00104 	addi	r7,r7,4
  8030c4:	d9c14015 	stw	r7,1280(sp)
  8030c8:	d9014b17 	ldw	r4,1324(sp)
  8030cc:	d9c14017 	ldw	r7,1280(sp)
  8030d0:	1100000d 	sth	r4,0(r2)
  8030d4:	0039f906 	br	8018bc <___vfprintf_internal_r+0x170>
  8030d8:	d9014f17 	ldw	r4,1340(sp)
  8030dc:	b00b883a 	mov	r5,r22
  8030e0:	d9800c04 	addi	r6,sp,48
  8030e4:	08016f40 	call	8016f4 <__sprint_r>
  8030e8:	103b501e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  8030ec:	dc800e17 	ldw	r18,56(sp)
  8030f0:	dc400d17 	ldw	r17,52(sp)
  8030f4:	d9000517 	ldw	r4,20(sp)
  8030f8:	d8c01904 	addi	r3,sp,100
  8030fc:	003f2d06 	br	802db4 <___vfprintf_internal_r+0x1668>
  803100:	00800184 	movi	r2,6
  803104:	14c09a36 	bltu	r2,r19,803370 <___vfprintf_internal_r+0x1c24>
  803108:	dcc14515 	stw	r19,1300(sp)
  80310c:	9800010e 	bge	r19,zero,803114 <___vfprintf_internal_r+0x19c8>
  803110:	d8014515 	stw	zero,1300(sp)
  803114:	00802074 	movhi	r2,129
  803118:	10b24504 	addi	r2,r2,-14060
  80311c:	980f883a 	mov	r7,r19
  803120:	d8814115 	stw	r2,1284(sp)
  803124:	003a7806 	br	801b08 <___vfprintf_internal_r+0x3bc>
  803128:	00bfffc4 	movi	r2,-1
  80312c:	9880e226 	beq	r19,r2,8034b8 <___vfprintf_internal_r+0x1d6c>
  803130:	d9414d17 	ldw	r5,1332(sp)
  803134:	008019c4 	movi	r2,103
  803138:	2880dc26 	beq	r5,r2,8034ac <___vfprintf_internal_r+0x1d60>
  80313c:	008011c4 	movi	r2,71
  803140:	2880da26 	beq	r5,r2,8034ac <___vfprintf_internal_r+0x1d60>
  803144:	d9414c17 	ldw	r5,1328(sp)
  803148:	d9014317 	ldw	r4,1292(sp)
  80314c:	d9814217 	ldw	r6,1288(sp)
  803150:	29404014 	ori	r5,r5,256
  803154:	d9414c15 	stw	r5,1328(sp)
  803158:	2000cc16 	blt	r4,zero,80348c <___vfprintf_internal_r+0x1d40>
  80315c:	3021883a 	mov	r16,r6
  803160:	2023883a 	mov	r17,r4
  803164:	0039883a 	mov	fp,zero
  803168:	d9414d17 	ldw	r5,1332(sp)
  80316c:	00801984 	movi	r2,102
  803170:	2880b726 	beq	r5,r2,803450 <___vfprintf_internal_r+0x1d04>
  803174:	00801184 	movi	r2,70
  803178:	2880b526 	beq	r5,r2,803450 <___vfprintf_internal_r+0x1d04>
  80317c:	00801944 	movi	r2,101
  803180:	2880c826 	beq	r5,r2,8034a4 <___vfprintf_internal_r+0x1d58>
  803184:	00801144 	movi	r2,69
  803188:	2880c626 	beq	r5,r2,8034a4 <___vfprintf_internal_r+0x1d58>
  80318c:	9829883a 	mov	r20,r19
  803190:	d9014f17 	ldw	r4,1340(sp)
  803194:	d8800504 	addi	r2,sp,20
  803198:	880d883a 	mov	r6,r17
  80319c:	d8800115 	stw	r2,4(sp)
  8031a0:	d8c00604 	addi	r3,sp,24
  8031a4:	d8800704 	addi	r2,sp,28
  8031a8:	800b883a 	mov	r5,r16
  8031ac:	01c00084 	movi	r7,2
  8031b0:	d8c00215 	stw	r3,8(sp)
  8031b4:	d8800315 	stw	r2,12(sp)
  8031b8:	dd000015 	stw	r20,0(sp)
  8031bc:	08039700 	call	803970 <_dtoa_r>
  8031c0:	d9814d17 	ldw	r6,1332(sp)
  8031c4:	d8814115 	stw	r2,1284(sp)
  8031c8:	008019c4 	movi	r2,103
  8031cc:	30809526 	beq	r6,r2,803424 <___vfprintf_internal_r+0x1cd8>
  8031d0:	d8c14d17 	ldw	r3,1332(sp)
  8031d4:	008011c4 	movi	r2,71
  8031d8:	18809226 	beq	r3,r2,803424 <___vfprintf_internal_r+0x1cd8>
  8031dc:	d9414117 	ldw	r5,1284(sp)
  8031e0:	d9814d17 	ldw	r6,1332(sp)
  8031e4:	00801984 	movi	r2,102
  8031e8:	2d25883a 	add	r18,r5,r20
  8031ec:	30808626 	beq	r6,r2,803408 <___vfprintf_internal_r+0x1cbc>
  8031f0:	00801184 	movi	r2,70
  8031f4:	30808426 	beq	r6,r2,803408 <___vfprintf_internal_r+0x1cbc>
  8031f8:	000d883a 	mov	r6,zero
  8031fc:	000f883a 	mov	r7,zero
  803200:	880b883a 	mov	r5,r17
  803204:	8009883a 	mov	r4,r16
  803208:	080a5540 	call	80a554 <__eqdf2>
  80320c:	1000751e 	bne	r2,zero,8033e4 <___vfprintf_internal_r+0x1c98>
  803210:	9005883a 	mov	r2,r18
  803214:	dc800715 	stw	r18,28(sp)
  803218:	d9014117 	ldw	r4,1284(sp)
  80321c:	d9414d17 	ldw	r5,1332(sp)
  803220:	00c019c4 	movi	r3,103
  803224:	1125c83a 	sub	r18,r2,r4
  803228:	28c06826 	beq	r5,r3,8033cc <___vfprintf_internal_r+0x1c80>
  80322c:	008011c4 	movi	r2,71
  803230:	28806626 	beq	r5,r2,8033cc <___vfprintf_internal_r+0x1c80>
  803234:	d9000517 	ldw	r4,20(sp)
  803238:	d8c14d17 	ldw	r3,1332(sp)
  80323c:	00801944 	movi	r2,101
  803240:	10c05516 	blt	r2,r3,803398 <___vfprintf_internal_r+0x1c4c>
  803244:	213fffc4 	addi	r4,r4,-1
  803248:	d9000515 	stw	r4,20(sp)
  80324c:	d8c00805 	stb	r3,32(sp)
  803250:	2021883a 	mov	r16,r4
  803254:	2000c116 	blt	r4,zero,80355c <___vfprintf_internal_r+0x1e10>
  803258:	00800ac4 	movi	r2,43
  80325c:	d8800845 	stb	r2,33(sp)
  803260:	00800244 	movi	r2,9
  803264:	1400af0e 	bge	r2,r16,803524 <___vfprintf_internal_r+0x1dd8>
  803268:	1027883a 	mov	r19,r2
  80326c:	dc400b84 	addi	r17,sp,46
  803270:	8009883a 	mov	r4,r16
  803274:	01400284 	movi	r5,10
  803278:	080ab300 	call	80ab30 <__modsi3>
  80327c:	10800c04 	addi	r2,r2,48
  803280:	8c7fffc4 	addi	r17,r17,-1
  803284:	8009883a 	mov	r4,r16
  803288:	01400284 	movi	r5,10
  80328c:	88800005 	stb	r2,0(r17)
  803290:	080aad00 	call	80aad0 <__divsi3>
  803294:	1021883a 	mov	r16,r2
  803298:	98bff516 	blt	r19,r2,803270 <___vfprintf_internal_r+0x1b24>
  80329c:	10c00c04 	addi	r3,r2,48
  8032a0:	d88009c4 	addi	r2,sp,39
  8032a4:	108001c4 	addi	r2,r2,7
  8032a8:	897fffc4 	addi	r5,r17,-1
  8032ac:	88ffffc5 	stb	r3,-1(r17)
  8032b0:	2880a72e 	bgeu	r5,r2,803550 <___vfprintf_internal_r+0x1e04>
  8032b4:	1009883a 	mov	r4,r2
  8032b8:	d9800804 	addi	r6,sp,32
  8032bc:	d8c00884 	addi	r3,sp,34
  8032c0:	28800003 	ldbu	r2,0(r5)
  8032c4:	29400044 	addi	r5,r5,1
  8032c8:	18800005 	stb	r2,0(r3)
  8032cc:	18c00044 	addi	r3,r3,1
  8032d0:	293ffb36 	bltu	r5,r4,8032c0 <___vfprintf_internal_r+0x1b74>
  8032d4:	1987c83a 	sub	r3,r3,r6
  8032d8:	00800044 	movi	r2,1
  8032dc:	d8c14815 	stw	r3,1312(sp)
  8032e0:	90cf883a 	add	r7,r18,r3
  8032e4:	1480960e 	bge	r2,r18,803540 <___vfprintf_internal_r+0x1df4>
  8032e8:	39c00044 	addi	r7,r7,1
  8032ec:	d9c14515 	stw	r7,1300(sp)
  8032f0:	38003416 	blt	r7,zero,8033c4 <___vfprintf_internal_r+0x1c78>
  8032f4:	e0803fcc 	andi	r2,fp,255
  8032f8:	1080201c 	xori	r2,r2,128
  8032fc:	10bfe004 	addi	r2,r2,-128
  803300:	10004e26 	beq	r2,zero,80343c <___vfprintf_internal_r+0x1cf0>
  803304:	00800b44 	movi	r2,45
  803308:	dc814715 	stw	r18,1308(sp)
  80330c:	d8014615 	stw	zero,1304(sp)
  803310:	d8800405 	stb	r2,16(sp)
  803314:	003bb106 	br	8021dc <___vfprintf_internal_r+0xa90>
  803318:	00800b44 	movi	r2,45
  80331c:	d8800405 	stb	r2,16(sp)
  803320:	003d3306 	br	8027f0 <___vfprintf_internal_r+0x10a4>
  803324:	d9014f17 	ldw	r4,1340(sp)
  803328:	b00b883a 	mov	r5,r22
  80332c:	d9800c04 	addi	r6,sp,48
  803330:	08016f40 	call	8016f4 <__sprint_r>
  803334:	103abd1e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x6e0>
  803338:	003abb06 	br	801e28 <___vfprintf_internal_r+0x6dc>
  80333c:	38800017 	ldw	r2,0(r7)
  803340:	39c00104 	addi	r7,r7,4
  803344:	d9c14015 	stw	r7,1280(sp)
  803348:	d9414b17 	ldw	r5,1324(sp)
  80334c:	d9c14017 	ldw	r7,1280(sp)
  803350:	11400015 	stw	r5,0(r2)
  803354:	00395906 	br	8018bc <___vfprintf_internal_r+0x170>
  803358:	980f883a 	mov	r7,r19
  80335c:	dcc14515 	stw	r19,1300(sp)
  803360:	d8014615 	stw	zero,1304(sp)
  803364:	003b9b06 	br	8021d4 <___vfprintf_internal_r+0xa88>
  803368:	0027883a 	mov	r19,zero
  80336c:	00397806 	br	801950 <___vfprintf_internal_r+0x204>
  803370:	00c02074 	movhi	r3,129
  803374:	18f24504 	addi	r3,r3,-14060
  803378:	100f883a 	mov	r7,r2
  80337c:	d8814515 	stw	r2,1300(sp)
  803380:	d8c14115 	stw	r3,1284(sp)
  803384:	0039e006 	br	801b08 <___vfprintf_internal_r+0x3bc>
  803388:	00802074 	movhi	r2,129
  80338c:	10b24404 	addi	r2,r2,-14064
  803390:	d8814115 	stw	r2,1284(sp)
  803394:	003d1c06 	br	802808 <___vfprintf_internal_r+0x10bc>
  803398:	d9414d17 	ldw	r5,1332(sp)
  80339c:	00801984 	movi	r2,102
  8033a0:	28804926 	beq	r5,r2,8034c8 <___vfprintf_internal_r+0x1d7c>
  8033a4:	200f883a 	mov	r7,r4
  8033a8:	24805716 	blt	r4,r18,803508 <___vfprintf_internal_r+0x1dbc>
  8033ac:	d9414c17 	ldw	r5,1328(sp)
  8033b0:	2880004c 	andi	r2,r5,1
  8033b4:	10000126 	beq	r2,zero,8033bc <___vfprintf_internal_r+0x1c70>
  8033b8:	21c00044 	addi	r7,r4,1
  8033bc:	d9c14515 	stw	r7,1300(sp)
  8033c0:	383fcc0e 	bge	r7,zero,8032f4 <___vfprintf_internal_r+0x1ba8>
  8033c4:	d8014515 	stw	zero,1300(sp)
  8033c8:	003fca06 	br	8032f4 <___vfprintf_internal_r+0x1ba8>
  8033cc:	d9000517 	ldw	r4,20(sp)
  8033d0:	00bfff04 	movi	r2,-4
  8033d4:	1100480e 	bge	r2,r4,8034f8 <___vfprintf_internal_r+0x1dac>
  8033d8:	99004716 	blt	r19,r4,8034f8 <___vfprintf_internal_r+0x1dac>
  8033dc:	d8c14d15 	stw	r3,1332(sp)
  8033e0:	003ff006 	br	8033a4 <___vfprintf_internal_r+0x1c58>
  8033e4:	d8800717 	ldw	r2,28(sp)
  8033e8:	14bf8b2e 	bgeu	r2,r18,803218 <___vfprintf_internal_r+0x1acc>
  8033ec:	9007883a 	mov	r3,r18
  8033f0:	01000c04 	movi	r4,48
  8033f4:	11000005 	stb	r4,0(r2)
  8033f8:	10800044 	addi	r2,r2,1
  8033fc:	d8800715 	stw	r2,28(sp)
  803400:	18bffc1e 	bne	r3,r2,8033f4 <___vfprintf_internal_r+0x1ca8>
  803404:	003f8406 	br	803218 <___vfprintf_internal_r+0x1acc>
  803408:	d8814117 	ldw	r2,1284(sp)
  80340c:	10c00007 	ldb	r3,0(r2)
  803410:	00800c04 	movi	r2,48
  803414:	18805b26 	beq	r3,r2,803584 <___vfprintf_internal_r+0x1e38>
  803418:	d9000517 	ldw	r4,20(sp)
  80341c:	9125883a 	add	r18,r18,r4
  803420:	003f7506 	br	8031f8 <___vfprintf_internal_r+0x1aac>
  803424:	d9014c17 	ldw	r4,1328(sp)
  803428:	2080004c 	andi	r2,r4,1
  80342c:	1005003a 	cmpeq	r2,r2,zero
  803430:	103f6a26 	beq	r2,zero,8031dc <___vfprintf_internal_r+0x1a90>
  803434:	d8800717 	ldw	r2,28(sp)
  803438:	003f7706 	br	803218 <___vfprintf_internal_r+0x1acc>
  80343c:	d9c14515 	stw	r7,1300(sp)
  803440:	38004d16 	blt	r7,zero,803578 <___vfprintf_internal_r+0x1e2c>
  803444:	dc814715 	stw	r18,1308(sp)
  803448:	d8014615 	stw	zero,1304(sp)
  80344c:	003b6106 	br	8021d4 <___vfprintf_internal_r+0xa88>
  803450:	d9014f17 	ldw	r4,1340(sp)
  803454:	d8800504 	addi	r2,sp,20
  803458:	d8800115 	stw	r2,4(sp)
  80345c:	d8c00604 	addi	r3,sp,24
  803460:	d8800704 	addi	r2,sp,28
  803464:	800b883a 	mov	r5,r16
  803468:	880d883a 	mov	r6,r17
  80346c:	01c000c4 	movi	r7,3
  803470:	d8c00215 	stw	r3,8(sp)
  803474:	d8800315 	stw	r2,12(sp)
  803478:	dcc00015 	stw	r19,0(sp)
  80347c:	9829883a 	mov	r20,r19
  803480:	08039700 	call	803970 <_dtoa_r>
  803484:	d8814115 	stw	r2,1284(sp)
  803488:	003f5106 	br	8031d0 <___vfprintf_internal_r+0x1a84>
  80348c:	d8c14217 	ldw	r3,1288(sp)
  803490:	d9014317 	ldw	r4,1292(sp)
  803494:	07000b44 	movi	fp,45
  803498:	1821883a 	mov	r16,r3
  80349c:	2460003c 	xorhi	r17,r4,32768
  8034a0:	003f3106 	br	803168 <___vfprintf_internal_r+0x1a1c>
  8034a4:	9d000044 	addi	r20,r19,1
  8034a8:	003f3906 	br	803190 <___vfprintf_internal_r+0x1a44>
  8034ac:	983f251e 	bne	r19,zero,803144 <___vfprintf_internal_r+0x19f8>
  8034b0:	04c00044 	movi	r19,1
  8034b4:	003f2306 	br	803144 <___vfprintf_internal_r+0x19f8>
  8034b8:	04c00184 	movi	r19,6
  8034bc:	003f2106 	br	803144 <___vfprintf_internal_r+0x19f8>
  8034c0:	d8014515 	stw	zero,1300(sp)
  8034c4:	003eee06 	br	803080 <___vfprintf_internal_r+0x1934>
  8034c8:	200f883a 	mov	r7,r4
  8034cc:	0100370e 	bge	zero,r4,8035ac <___vfprintf_internal_r+0x1e60>
  8034d0:	9800031e 	bne	r19,zero,8034e0 <___vfprintf_internal_r+0x1d94>
  8034d4:	d9814c17 	ldw	r6,1328(sp)
  8034d8:	3080004c 	andi	r2,r6,1
  8034dc:	103fb726 	beq	r2,zero,8033bc <___vfprintf_internal_r+0x1c70>
  8034e0:	20800044 	addi	r2,r4,1
  8034e4:	98a7883a 	add	r19,r19,r2
  8034e8:	dcc14515 	stw	r19,1300(sp)
  8034ec:	980f883a 	mov	r7,r19
  8034f0:	983f800e 	bge	r19,zero,8032f4 <___vfprintf_internal_r+0x1ba8>
  8034f4:	003fb306 	br	8033c4 <___vfprintf_internal_r+0x1c78>
  8034f8:	d9814d17 	ldw	r6,1332(sp)
  8034fc:	31bfff84 	addi	r6,r6,-2
  803500:	d9814d15 	stw	r6,1332(sp)
  803504:	003f4c06 	br	803238 <___vfprintf_internal_r+0x1aec>
  803508:	0100180e 	bge	zero,r4,80356c <___vfprintf_internal_r+0x1e20>
  80350c:	00800044 	movi	r2,1
  803510:	1485883a 	add	r2,r2,r18
  803514:	d8814515 	stw	r2,1300(sp)
  803518:	100f883a 	mov	r7,r2
  80351c:	103f750e 	bge	r2,zero,8032f4 <___vfprintf_internal_r+0x1ba8>
  803520:	003fa806 	br	8033c4 <___vfprintf_internal_r+0x1c78>
  803524:	80c00c04 	addi	r3,r16,48
  803528:	00800c04 	movi	r2,48
  80352c:	d8c008c5 	stb	r3,35(sp)
  803530:	d9800804 	addi	r6,sp,32
  803534:	d8c00904 	addi	r3,sp,36
  803538:	d8800885 	stb	r2,34(sp)
  80353c:	003f6506 	br	8032d4 <___vfprintf_internal_r+0x1b88>
  803540:	d9014c17 	ldw	r4,1328(sp)
  803544:	2084703a 	and	r2,r4,r2
  803548:	103f9c26 	beq	r2,zero,8033bc <___vfprintf_internal_r+0x1c70>
  80354c:	003f6606 	br	8032e8 <___vfprintf_internal_r+0x1b9c>
  803550:	d9800804 	addi	r6,sp,32
  803554:	d8c00884 	addi	r3,sp,34
  803558:	003f5e06 	br	8032d4 <___vfprintf_internal_r+0x1b88>
  80355c:	00800b44 	movi	r2,45
  803560:	0121c83a 	sub	r16,zero,r4
  803564:	d8800845 	stb	r2,33(sp)
  803568:	003f3d06 	br	803260 <___vfprintf_internal_r+0x1b14>
  80356c:	00800084 	movi	r2,2
  803570:	1105c83a 	sub	r2,r2,r4
  803574:	003fe606 	br	803510 <___vfprintf_internal_r+0x1dc4>
  803578:	d8014515 	stw	zero,1300(sp)
  80357c:	dc814715 	stw	r18,1308(sp)
  803580:	003fb106 	br	803448 <___vfprintf_internal_r+0x1cfc>
  803584:	000d883a 	mov	r6,zero
  803588:	000f883a 	mov	r7,zero
  80358c:	8009883a 	mov	r4,r16
  803590:	880b883a 	mov	r5,r17
  803594:	080a5dc0 	call	80a5dc <__nedf2>
  803598:	103f9f26 	beq	r2,zero,803418 <___vfprintf_internal_r+0x1ccc>
  80359c:	00800044 	movi	r2,1
  8035a0:	1509c83a 	sub	r4,r2,r20
  8035a4:	d9000515 	stw	r4,20(sp)
  8035a8:	003f9b06 	br	803418 <___vfprintf_internal_r+0x1ccc>
  8035ac:	98000d1e 	bne	r19,zero,8035e4 <___vfprintf_internal_r+0x1e98>
  8035b0:	d8c14c17 	ldw	r3,1328(sp)
  8035b4:	1880004c 	andi	r2,r3,1
  8035b8:	10000a1e 	bne	r2,zero,8035e4 <___vfprintf_internal_r+0x1e98>
  8035bc:	01000044 	movi	r4,1
  8035c0:	200f883a 	mov	r7,r4
  8035c4:	d9014515 	stw	r4,1300(sp)
  8035c8:	003f4a06 	br	8032f4 <___vfprintf_internal_r+0x1ba8>
  8035cc:	3cc00017 	ldw	r19,0(r7)
  8035d0:	39c00104 	addi	r7,r7,4
  8035d4:	983d0e0e 	bge	r19,zero,802a10 <___vfprintf_internal_r+0x12c4>
  8035d8:	b8c00007 	ldb	r3,0(r23)
  8035dc:	04ffffc4 	movi	r19,-1
  8035e0:	0038d906 	br	801948 <___vfprintf_internal_r+0x1fc>
  8035e4:	9cc00084 	addi	r19,r19,2
  8035e8:	dcc14515 	stw	r19,1300(sp)
  8035ec:	980f883a 	mov	r7,r19
  8035f0:	983f400e 	bge	r19,zero,8032f4 <___vfprintf_internal_r+0x1ba8>
  8035f4:	003f7306 	br	8033c4 <___vfprintf_internal_r+0x1c78>

008035f8 <__vfprintf_internal>:
  8035f8:	00802074 	movhi	r2,129
  8035fc:	10b94704 	addi	r2,r2,-6884
  803600:	2013883a 	mov	r9,r4
  803604:	11000017 	ldw	r4,0(r2)
  803608:	2805883a 	mov	r2,r5
  80360c:	300f883a 	mov	r7,r6
  803610:	480b883a 	mov	r5,r9
  803614:	100d883a 	mov	r6,r2
  803618:	080174c1 	jmpi	80174c <___vfprintf_internal_r>

0080361c <__swsetup_r>:
  80361c:	00802074 	movhi	r2,129
  803620:	10b94704 	addi	r2,r2,-6884
  803624:	10c00017 	ldw	r3,0(r2)
  803628:	defffd04 	addi	sp,sp,-12
  80362c:	dc400115 	stw	r17,4(sp)
  803630:	dc000015 	stw	r16,0(sp)
  803634:	dfc00215 	stw	ra,8(sp)
  803638:	2023883a 	mov	r17,r4
  80363c:	2821883a 	mov	r16,r5
  803640:	18000226 	beq	r3,zero,80364c <__swsetup_r+0x30>
  803644:	18800e17 	ldw	r2,56(r3)
  803648:	10001f26 	beq	r2,zero,8036c8 <__swsetup_r+0xac>
  80364c:	8100030b 	ldhu	r4,12(r16)
  803650:	2080020c 	andi	r2,r4,8
  803654:	10002826 	beq	r2,zero,8036f8 <__swsetup_r+0xdc>
  803658:	81400417 	ldw	r5,16(r16)
  80365c:	28001d26 	beq	r5,zero,8036d4 <__swsetup_r+0xb8>
  803660:	2080004c 	andi	r2,r4,1
  803664:	1005003a 	cmpeq	r2,r2,zero
  803668:	10000b26 	beq	r2,zero,803698 <__swsetup_r+0x7c>
  80366c:	2080008c 	andi	r2,r4,2
  803670:	10001226 	beq	r2,zero,8036bc <__swsetup_r+0xa0>
  803674:	0005883a 	mov	r2,zero
  803678:	80800215 	stw	r2,8(r16)
  80367c:	28000b26 	beq	r5,zero,8036ac <__swsetup_r+0x90>
  803680:	0005883a 	mov	r2,zero
  803684:	dfc00217 	ldw	ra,8(sp)
  803688:	dc400117 	ldw	r17,4(sp)
  80368c:	dc000017 	ldw	r16,0(sp)
  803690:	dec00304 	addi	sp,sp,12
  803694:	f800283a 	ret
  803698:	80800517 	ldw	r2,20(r16)
  80369c:	80000215 	stw	zero,8(r16)
  8036a0:	0085c83a 	sub	r2,zero,r2
  8036a4:	80800615 	stw	r2,24(r16)
  8036a8:	283ff51e 	bne	r5,zero,803680 <__swsetup_r+0x64>
  8036ac:	2080200c 	andi	r2,r4,128
  8036b0:	103ff326 	beq	r2,zero,803680 <__swsetup_r+0x64>
  8036b4:	00bfffc4 	movi	r2,-1
  8036b8:	003ff206 	br	803684 <__swsetup_r+0x68>
  8036bc:	80800517 	ldw	r2,20(r16)
  8036c0:	80800215 	stw	r2,8(r16)
  8036c4:	003fed06 	br	80367c <__swsetup_r+0x60>
  8036c8:	1809883a 	mov	r4,r3
  8036cc:	0805c740 	call	805c74 <__sinit>
  8036d0:	003fde06 	br	80364c <__swsetup_r+0x30>
  8036d4:	20c0a00c 	andi	r3,r4,640
  8036d8:	00808004 	movi	r2,512
  8036dc:	18bfe026 	beq	r3,r2,803660 <__swsetup_r+0x44>
  8036e0:	8809883a 	mov	r4,r17
  8036e4:	800b883a 	mov	r5,r16
  8036e8:	08069ec0 	call	8069ec <__smakebuf_r>
  8036ec:	8100030b 	ldhu	r4,12(r16)
  8036f0:	81400417 	ldw	r5,16(r16)
  8036f4:	003fda06 	br	803660 <__swsetup_r+0x44>
  8036f8:	2080040c 	andi	r2,r4,16
  8036fc:	103fed26 	beq	r2,zero,8036b4 <__swsetup_r+0x98>
  803700:	2080010c 	andi	r2,r4,4
  803704:	10001226 	beq	r2,zero,803750 <__swsetup_r+0x134>
  803708:	81400c17 	ldw	r5,48(r16)
  80370c:	28000526 	beq	r5,zero,803724 <__swsetup_r+0x108>
  803710:	80801004 	addi	r2,r16,64
  803714:	28800226 	beq	r5,r2,803720 <__swsetup_r+0x104>
  803718:	8809883a 	mov	r4,r17
  80371c:	0805ff80 	call	805ff8 <_free_r>
  803720:	80000c15 	stw	zero,48(r16)
  803724:	8080030b 	ldhu	r2,12(r16)
  803728:	81400417 	ldw	r5,16(r16)
  80372c:	80000115 	stw	zero,4(r16)
  803730:	10bff6cc 	andi	r2,r2,65499
  803734:	8080030d 	sth	r2,12(r16)
  803738:	81400015 	stw	r5,0(r16)
  80373c:	8080030b 	ldhu	r2,12(r16)
  803740:	10800214 	ori	r2,r2,8
  803744:	113fffcc 	andi	r4,r2,65535
  803748:	8080030d 	sth	r2,12(r16)
  80374c:	003fc306 	br	80365c <__swsetup_r+0x40>
  803750:	81400417 	ldw	r5,16(r16)
  803754:	003ff906 	br	80373c <__swsetup_r+0x120>

00803758 <quorem>:
  803758:	28c00417 	ldw	r3,16(r5)
  80375c:	20800417 	ldw	r2,16(r4)
  803760:	defff604 	addi	sp,sp,-40
  803764:	ddc00715 	stw	r23,28(sp)
  803768:	dd400515 	stw	r21,20(sp)
  80376c:	dfc00915 	stw	ra,36(sp)
  803770:	df000815 	stw	fp,32(sp)
  803774:	dd800615 	stw	r22,24(sp)
  803778:	dd000415 	stw	r20,16(sp)
  80377c:	dcc00315 	stw	r19,12(sp)
  803780:	dc800215 	stw	r18,8(sp)
  803784:	dc400115 	stw	r17,4(sp)
  803788:	dc000015 	stw	r16,0(sp)
  80378c:	202f883a 	mov	r23,r4
  803790:	282b883a 	mov	r21,r5
  803794:	10c07416 	blt	r2,r3,803968 <quorem+0x210>
  803798:	1c7fffc4 	addi	r17,r3,-1
  80379c:	8c45883a 	add	r2,r17,r17
  8037a0:	1085883a 	add	r2,r2,r2
  8037a4:	2c000504 	addi	r16,r5,20
  8037a8:	24c00504 	addi	r19,r4,20
  8037ac:	14ed883a 	add	r22,r2,r19
  8037b0:	80a5883a 	add	r18,r16,r2
  8037b4:	b7000017 	ldw	fp,0(r22)
  8037b8:	91400017 	ldw	r5,0(r18)
  8037bc:	e009883a 	mov	r4,fp
  8037c0:	29400044 	addi	r5,r5,1
  8037c4:	080ab900 	call	80ab90 <__udivsi3>
  8037c8:	1029883a 	mov	r20,r2
  8037cc:	10003c1e 	bne	r2,zero,8038c0 <quorem+0x168>
  8037d0:	a80b883a 	mov	r5,r21
  8037d4:	b809883a 	mov	r4,r23
  8037d8:	08077180 	call	807718 <__mcmp>
  8037dc:	10002b16 	blt	r2,zero,80388c <quorem+0x134>
  8037e0:	a5000044 	addi	r20,r20,1
  8037e4:	980f883a 	mov	r7,r19
  8037e8:	0011883a 	mov	r8,zero
  8037ec:	0009883a 	mov	r4,zero
  8037f0:	81400017 	ldw	r5,0(r16)
  8037f4:	38c00017 	ldw	r3,0(r7)
  8037f8:	84000104 	addi	r16,r16,4
  8037fc:	28bfffcc 	andi	r2,r5,65535
  803800:	2085883a 	add	r2,r4,r2
  803804:	11bfffcc 	andi	r6,r2,65535
  803808:	193fffcc 	andi	r4,r3,65535
  80380c:	1004d43a 	srli	r2,r2,16
  803810:	280ad43a 	srli	r5,r5,16
  803814:	2189c83a 	sub	r4,r4,r6
  803818:	2209883a 	add	r4,r4,r8
  80381c:	1806d43a 	srli	r3,r3,16
  803820:	288b883a 	add	r5,r5,r2
  803824:	200dd43a 	srai	r6,r4,16
  803828:	28bfffcc 	andi	r2,r5,65535
  80382c:	1887c83a 	sub	r3,r3,r2
  803830:	1987883a 	add	r3,r3,r6
  803834:	3900000d 	sth	r4,0(r7)
  803838:	38c0008d 	sth	r3,2(r7)
  80383c:	2808d43a 	srli	r4,r5,16
  803840:	39c00104 	addi	r7,r7,4
  803844:	1811d43a 	srai	r8,r3,16
  803848:	943fe92e 	bgeu	r18,r16,8037f0 <quorem+0x98>
  80384c:	8c45883a 	add	r2,r17,r17
  803850:	1085883a 	add	r2,r2,r2
  803854:	9885883a 	add	r2,r19,r2
  803858:	10c00017 	ldw	r3,0(r2)
  80385c:	18000b1e 	bne	r3,zero,80388c <quorem+0x134>
  803860:	113fff04 	addi	r4,r2,-4
  803864:	9900082e 	bgeu	r19,r4,803888 <quorem+0x130>
  803868:	10bfff17 	ldw	r2,-4(r2)
  80386c:	10000326 	beq	r2,zero,80387c <quorem+0x124>
  803870:	00000506 	br	803888 <quorem+0x130>
  803874:	20800017 	ldw	r2,0(r4)
  803878:	1000031e 	bne	r2,zero,803888 <quorem+0x130>
  80387c:	213fff04 	addi	r4,r4,-4
  803880:	8c7fffc4 	addi	r17,r17,-1
  803884:	993ffb36 	bltu	r19,r4,803874 <quorem+0x11c>
  803888:	bc400415 	stw	r17,16(r23)
  80388c:	a005883a 	mov	r2,r20
  803890:	dfc00917 	ldw	ra,36(sp)
  803894:	df000817 	ldw	fp,32(sp)
  803898:	ddc00717 	ldw	r23,28(sp)
  80389c:	dd800617 	ldw	r22,24(sp)
  8038a0:	dd400517 	ldw	r21,20(sp)
  8038a4:	dd000417 	ldw	r20,16(sp)
  8038a8:	dcc00317 	ldw	r19,12(sp)
  8038ac:	dc800217 	ldw	r18,8(sp)
  8038b0:	dc400117 	ldw	r17,4(sp)
  8038b4:	dc000017 	ldw	r16,0(sp)
  8038b8:	dec00a04 	addi	sp,sp,40
  8038bc:	f800283a 	ret
  8038c0:	980f883a 	mov	r7,r19
  8038c4:	8011883a 	mov	r8,r16
  8038c8:	0013883a 	mov	r9,zero
  8038cc:	000d883a 	mov	r6,zero
  8038d0:	40c00017 	ldw	r3,0(r8)
  8038d4:	39000017 	ldw	r4,0(r7)
  8038d8:	42000104 	addi	r8,r8,4
  8038dc:	18bfffcc 	andi	r2,r3,65535
  8038e0:	a085383a 	mul	r2,r20,r2
  8038e4:	1806d43a 	srli	r3,r3,16
  8038e8:	217fffcc 	andi	r5,r4,65535
  8038ec:	3085883a 	add	r2,r6,r2
  8038f0:	11bfffcc 	andi	r6,r2,65535
  8038f4:	a0c7383a 	mul	r3,r20,r3
  8038f8:	1004d43a 	srli	r2,r2,16
  8038fc:	298bc83a 	sub	r5,r5,r6
  803900:	2a4b883a 	add	r5,r5,r9
  803904:	2008d43a 	srli	r4,r4,16
  803908:	1887883a 	add	r3,r3,r2
  80390c:	280dd43a 	srai	r6,r5,16
  803910:	18bfffcc 	andi	r2,r3,65535
  803914:	2089c83a 	sub	r4,r4,r2
  803918:	2189883a 	add	r4,r4,r6
  80391c:	3900008d 	sth	r4,2(r7)
  803920:	3940000d 	sth	r5,0(r7)
  803924:	180cd43a 	srli	r6,r3,16
  803928:	39c00104 	addi	r7,r7,4
  80392c:	2013d43a 	srai	r9,r4,16
  803930:	923fe72e 	bgeu	r18,r8,8038d0 <quorem+0x178>
  803934:	e03fa61e 	bne	fp,zero,8037d0 <quorem+0x78>
  803938:	b0ffff04 	addi	r3,r22,-4
  80393c:	98c0082e 	bgeu	r19,r3,803960 <quorem+0x208>
  803940:	b0bfff17 	ldw	r2,-4(r22)
  803944:	10000326 	beq	r2,zero,803954 <quorem+0x1fc>
  803948:	00000506 	br	803960 <quorem+0x208>
  80394c:	18800017 	ldw	r2,0(r3)
  803950:	1000031e 	bne	r2,zero,803960 <quorem+0x208>
  803954:	18ffff04 	addi	r3,r3,-4
  803958:	8c7fffc4 	addi	r17,r17,-1
  80395c:	98fffb36 	bltu	r19,r3,80394c <quorem+0x1f4>
  803960:	bc400415 	stw	r17,16(r23)
  803964:	003f9a06 	br	8037d0 <quorem+0x78>
  803968:	0005883a 	mov	r2,zero
  80396c:	003fc806 	br	803890 <quorem+0x138>

00803970 <_dtoa_r>:
  803970:	22001017 	ldw	r8,64(r4)
  803974:	deffda04 	addi	sp,sp,-152
  803978:	dd402115 	stw	r21,132(sp)
  80397c:	dd002015 	stw	r20,128(sp)
  803980:	dc801e15 	stw	r18,120(sp)
  803984:	dc401d15 	stw	r17,116(sp)
  803988:	dfc02515 	stw	ra,148(sp)
  80398c:	df002415 	stw	fp,144(sp)
  803990:	ddc02315 	stw	r23,140(sp)
  803994:	dd802215 	stw	r22,136(sp)
  803998:	dcc01f15 	stw	r19,124(sp)
  80399c:	dc001c15 	stw	r16,112(sp)
  8039a0:	d9001615 	stw	r4,88(sp)
  8039a4:	3023883a 	mov	r17,r6
  8039a8:	2829883a 	mov	r20,r5
  8039ac:	d9c01715 	stw	r7,92(sp)
  8039b0:	dc802817 	ldw	r18,160(sp)
  8039b4:	302b883a 	mov	r21,r6
  8039b8:	40000a26 	beq	r8,zero,8039e4 <_dtoa_r+0x74>
  8039bc:	20801117 	ldw	r2,68(r4)
  8039c0:	400b883a 	mov	r5,r8
  8039c4:	40800115 	stw	r2,4(r8)
  8039c8:	20c01117 	ldw	r3,68(r4)
  8039cc:	00800044 	movi	r2,1
  8039d0:	10c4983a 	sll	r2,r2,r3
  8039d4:	40800215 	stw	r2,8(r8)
  8039d8:	08075bc0 	call	8075bc <_Bfree>
  8039dc:	d8c01617 	ldw	r3,88(sp)
  8039e0:	18001015 	stw	zero,64(r3)
  8039e4:	8800a316 	blt	r17,zero,803c74 <_dtoa_r+0x304>
  8039e8:	90000015 	stw	zero,0(r18)
  8039ec:	a8dffc2c 	andhi	r3,r21,32752
  8039f0:	009ffc34 	movhi	r2,32752
  8039f4:	18809126 	beq	r3,r2,803c3c <_dtoa_r+0x2cc>
  8039f8:	000d883a 	mov	r6,zero
  8039fc:	000f883a 	mov	r7,zero
  803a00:	a009883a 	mov	r4,r20
  803a04:	a80b883a 	mov	r5,r21
  803a08:	dd001215 	stw	r20,72(sp)
  803a0c:	dd401315 	stw	r21,76(sp)
  803a10:	080a5dc0 	call	80a5dc <__nedf2>
  803a14:	1000171e 	bne	r2,zero,803a74 <_dtoa_r+0x104>
  803a18:	d9802717 	ldw	r6,156(sp)
  803a1c:	00800044 	movi	r2,1
  803a20:	30800015 	stw	r2,0(r6)
  803a24:	d8802917 	ldw	r2,164(sp)
  803a28:	10029b26 	beq	r2,zero,804498 <_dtoa_r+0xb28>
  803a2c:	d9002917 	ldw	r4,164(sp)
  803a30:	00802074 	movhi	r2,129
  803a34:	10b25344 	addi	r2,r2,-14003
  803a38:	10ffffc4 	addi	r3,r2,-1
  803a3c:	20800015 	stw	r2,0(r4)
  803a40:	1805883a 	mov	r2,r3
  803a44:	dfc02517 	ldw	ra,148(sp)
  803a48:	df002417 	ldw	fp,144(sp)
  803a4c:	ddc02317 	ldw	r23,140(sp)
  803a50:	dd802217 	ldw	r22,136(sp)
  803a54:	dd402117 	ldw	r21,132(sp)
  803a58:	dd002017 	ldw	r20,128(sp)
  803a5c:	dcc01f17 	ldw	r19,124(sp)
  803a60:	dc801e17 	ldw	r18,120(sp)
  803a64:	dc401d17 	ldw	r17,116(sp)
  803a68:	dc001c17 	ldw	r16,112(sp)
  803a6c:	dec02604 	addi	sp,sp,152
  803a70:	f800283a 	ret
  803a74:	d9001617 	ldw	r4,88(sp)
  803a78:	d9401217 	ldw	r5,72(sp)
  803a7c:	d8800104 	addi	r2,sp,4
  803a80:	a80d883a 	mov	r6,r21
  803a84:	d9c00204 	addi	r7,sp,8
  803a88:	d8800015 	stw	r2,0(sp)
  803a8c:	0807bf80 	call	807bf8 <__d2b>
  803a90:	d8800715 	stw	r2,28(sp)
  803a94:	a804d53a 	srli	r2,r21,20
  803a98:	1101ffcc 	andi	r4,r2,2047
  803a9c:	20008626 	beq	r4,zero,803cb8 <_dtoa_r+0x348>
  803aa0:	d8c01217 	ldw	r3,72(sp)
  803aa4:	00800434 	movhi	r2,16
  803aa8:	10bfffc4 	addi	r2,r2,-1
  803aac:	ddc00117 	ldw	r23,4(sp)
  803ab0:	a884703a 	and	r2,r21,r2
  803ab4:	1811883a 	mov	r8,r3
  803ab8:	124ffc34 	orhi	r9,r2,16368
  803abc:	25bf0044 	addi	r22,r4,-1023
  803ac0:	d8000815 	stw	zero,32(sp)
  803ac4:	0005883a 	mov	r2,zero
  803ac8:	00cffe34 	movhi	r3,16376
  803acc:	480b883a 	mov	r5,r9
  803ad0:	4009883a 	mov	r4,r8
  803ad4:	180f883a 	mov	r7,r3
  803ad8:	100d883a 	mov	r6,r2
  803adc:	08009040 	call	800904 <__subdf3>
  803ae0:	0218dbf4 	movhi	r8,25455
  803ae4:	4210d844 	addi	r8,r8,17249
  803ae8:	024ff4f4 	movhi	r9,16339
  803aec:	4a61e9c4 	addi	r9,r9,-30809
  803af0:	480f883a 	mov	r7,r9
  803af4:	400d883a 	mov	r6,r8
  803af8:	180b883a 	mov	r5,r3
  803afc:	1009883a 	mov	r4,r2
  803b00:	0809f380 	call	809f38 <__muldf3>
  803b04:	0222d874 	movhi	r8,35681
  803b08:	42322cc4 	addi	r8,r8,-14157
  803b0c:	024ff1f4 	movhi	r9,16327
  803b10:	4a628a04 	addi	r9,r9,-30168
  803b14:	480f883a 	mov	r7,r9
  803b18:	400d883a 	mov	r6,r8
  803b1c:	180b883a 	mov	r5,r3
  803b20:	1009883a 	mov	r4,r2
  803b24:	08009840 	call	800984 <__adddf3>
  803b28:	b009883a 	mov	r4,r22
  803b2c:	1021883a 	mov	r16,r2
  803b30:	1823883a 	mov	r17,r3
  803b34:	080a8840 	call	80a884 <__floatsidf>
  803b38:	021427f4 	movhi	r8,20639
  803b3c:	421e7ec4 	addi	r8,r8,31227
  803b40:	024ff4f4 	movhi	r9,16339
  803b44:	4a5104c4 	addi	r9,r9,17427
  803b48:	480f883a 	mov	r7,r9
  803b4c:	400d883a 	mov	r6,r8
  803b50:	180b883a 	mov	r5,r3
  803b54:	1009883a 	mov	r4,r2
  803b58:	0809f380 	call	809f38 <__muldf3>
  803b5c:	180f883a 	mov	r7,r3
  803b60:	880b883a 	mov	r5,r17
  803b64:	100d883a 	mov	r6,r2
  803b68:	8009883a 	mov	r4,r16
  803b6c:	08009840 	call	800984 <__adddf3>
  803b70:	1009883a 	mov	r4,r2
  803b74:	180b883a 	mov	r5,r3
  803b78:	1021883a 	mov	r16,r2
  803b7c:	1823883a 	mov	r17,r3
  803b80:	080a97c0 	call	80a97c <__fixdfsi>
  803b84:	000d883a 	mov	r6,zero
  803b88:	000f883a 	mov	r7,zero
  803b8c:	8009883a 	mov	r4,r16
  803b90:	880b883a 	mov	r5,r17
  803b94:	d8800d15 	stw	r2,52(sp)
  803b98:	080a7740 	call	80a774 <__ltdf2>
  803b9c:	10031716 	blt	r2,zero,8047fc <_dtoa_r+0xe8c>
  803ba0:	d8c00d17 	ldw	r3,52(sp)
  803ba4:	00800584 	movi	r2,22
  803ba8:	10c1482e 	bgeu	r2,r3,8040cc <_dtoa_r+0x75c>
  803bac:	01000044 	movi	r4,1
  803bb0:	d9000c15 	stw	r4,48(sp)
  803bb4:	bd85c83a 	sub	r2,r23,r22
  803bb8:	11bfffc4 	addi	r6,r2,-1
  803bbc:	30030b16 	blt	r6,zero,8047ec <_dtoa_r+0xe7c>
  803bc0:	d9800a15 	stw	r6,40(sp)
  803bc4:	d8001115 	stw	zero,68(sp)
  803bc8:	d8c00d17 	ldw	r3,52(sp)
  803bcc:	1802ff16 	blt	r3,zero,8047cc <_dtoa_r+0xe5c>
  803bd0:	d9000a17 	ldw	r4,40(sp)
  803bd4:	d8c00915 	stw	r3,36(sp)
  803bd8:	d8001015 	stw	zero,64(sp)
  803bdc:	20c9883a 	add	r4,r4,r3
  803be0:	d9000a15 	stw	r4,40(sp)
  803be4:	d9001717 	ldw	r4,92(sp)
  803be8:	00800244 	movi	r2,9
  803bec:	11004636 	bltu	r2,r4,803d08 <_dtoa_r+0x398>
  803bf0:	00800144 	movi	r2,5
  803bf4:	11020416 	blt	r2,r4,804408 <_dtoa_r+0xa98>
  803bf8:	04400044 	movi	r17,1
  803bfc:	d8c01717 	ldw	r3,92(sp)
  803c00:	00800144 	movi	r2,5
  803c04:	10c1ed36 	bltu	r2,r3,8043bc <_dtoa_r+0xa4c>
  803c08:	18c5883a 	add	r2,r3,r3
  803c0c:	1085883a 	add	r2,r2,r2
  803c10:	00c02034 	movhi	r3,128
  803c14:	18cf0904 	addi	r3,r3,15396
  803c18:	10c5883a 	add	r2,r2,r3
  803c1c:	11000017 	ldw	r4,0(r2)
  803c20:	2000683a 	jmp	r4
  803c24:	00803d10 	cmplti	r2,zero,244
  803c28:	00803d10 	cmplti	r2,zero,244
  803c2c:	00804710 	cmplti	r2,zero,284
  803c30:	008046e8 	cmpgeui	r2,zero,283
  803c34:	0080472c 	andhi	r2,zero,284
  803c38:	00804738 	rdprs	r2,zero,284
  803c3c:	d9002717 	ldw	r4,156(sp)
  803c40:	0089c3c4 	movi	r2,9999
  803c44:	20800015 	stw	r2,0(r4)
  803c48:	a0001026 	beq	r20,zero,803c8c <_dtoa_r+0x31c>
  803c4c:	00c02074 	movhi	r3,129
  803c50:	18f25f04 	addi	r3,r3,-13956
  803c54:	d9802917 	ldw	r6,164(sp)
  803c58:	303f7926 	beq	r6,zero,803a40 <_dtoa_r+0xd0>
  803c5c:	188000c7 	ldb	r2,3(r3)
  803c60:	190000c4 	addi	r4,r3,3
  803c64:	1000101e 	bne	r2,zero,803ca8 <_dtoa_r+0x338>
  803c68:	d8802917 	ldw	r2,164(sp)
  803c6c:	11000015 	stw	r4,0(r2)
  803c70:	003f7306 	br	803a40 <_dtoa_r+0xd0>
  803c74:	00a00034 	movhi	r2,32768
  803c78:	10bfffc4 	addi	r2,r2,-1
  803c7c:	00c00044 	movi	r3,1
  803c80:	88aa703a 	and	r21,r17,r2
  803c84:	90c00015 	stw	r3,0(r18)
  803c88:	003f5806 	br	8039ec <_dtoa_r+0x7c>
  803c8c:	00800434 	movhi	r2,16
  803c90:	10bfffc4 	addi	r2,r2,-1
  803c94:	a884703a 	and	r2,r21,r2
  803c98:	103fec1e 	bne	r2,zero,803c4c <_dtoa_r+0x2dc>
  803c9c:	00c02074 	movhi	r3,129
  803ca0:	18f25c04 	addi	r3,r3,-13968
  803ca4:	003feb06 	br	803c54 <_dtoa_r+0x2e4>
  803ca8:	d8802917 	ldw	r2,164(sp)
  803cac:	19000204 	addi	r4,r3,8
  803cb0:	11000015 	stw	r4,0(r2)
  803cb4:	003f6206 	br	803a40 <_dtoa_r+0xd0>
  803cb8:	ddc00117 	ldw	r23,4(sp)
  803cbc:	d8800217 	ldw	r2,8(sp)
  803cc0:	01000804 	movi	r4,32
  803cc4:	b8c10c84 	addi	r3,r23,1074
  803cc8:	18a3883a 	add	r17,r3,r2
  803ccc:	2441b80e 	bge	r4,r17,8043b0 <_dtoa_r+0xa40>
  803cd0:	00c01004 	movi	r3,64
  803cd4:	1c47c83a 	sub	r3,r3,r17
  803cd8:	88bff804 	addi	r2,r17,-32
  803cdc:	a8c6983a 	sll	r3,r21,r3
  803ce0:	a084d83a 	srl	r2,r20,r2
  803ce4:	1888b03a 	or	r4,r3,r2
  803ce8:	0800aa40 	call	800aa4 <__floatunsidf>
  803cec:	1011883a 	mov	r8,r2
  803cf0:	00bf8434 	movhi	r2,65040
  803cf4:	01000044 	movi	r4,1
  803cf8:	10d3883a 	add	r9,r2,r3
  803cfc:	8dbef344 	addi	r22,r17,-1075
  803d00:	d9000815 	stw	r4,32(sp)
  803d04:	003f6f06 	br	803ac4 <_dtoa_r+0x154>
  803d08:	d8001715 	stw	zero,92(sp)
  803d0c:	04400044 	movi	r17,1
  803d10:	00bfffc4 	movi	r2,-1
  803d14:	00c00044 	movi	r3,1
  803d18:	d8800e15 	stw	r2,56(sp)
  803d1c:	d8002615 	stw	zero,152(sp)
  803d20:	d8800f15 	stw	r2,60(sp)
  803d24:	d8c00b15 	stw	r3,44(sp)
  803d28:	1021883a 	mov	r16,r2
  803d2c:	d8801617 	ldw	r2,88(sp)
  803d30:	10001115 	stw	zero,68(r2)
  803d34:	d8801617 	ldw	r2,88(sp)
  803d38:	11401117 	ldw	r5,68(r2)
  803d3c:	1009883a 	mov	r4,r2
  803d40:	0807b3c0 	call	807b3c <_Balloc>
  803d44:	d8c01617 	ldw	r3,88(sp)
  803d48:	d8800515 	stw	r2,20(sp)
  803d4c:	18801015 	stw	r2,64(r3)
  803d50:	00800384 	movi	r2,14
  803d54:	14006836 	bltu	r2,r16,803ef8 <_dtoa_r+0x588>
  803d58:	8805003a 	cmpeq	r2,r17,zero
  803d5c:	1000661e 	bne	r2,zero,803ef8 <_dtoa_r+0x588>
  803d60:	d9000d17 	ldw	r4,52(sp)
  803d64:	0102300e 	bge	zero,r4,804628 <_dtoa_r+0xcb8>
  803d68:	208003cc 	andi	r2,r4,15
  803d6c:	100490fa 	slli	r2,r2,3
  803d70:	2025d13a 	srai	r18,r4,4
  803d74:	00c02074 	movhi	r3,129
  803d78:	18f27004 	addi	r3,r3,-13888
  803d7c:	10c5883a 	add	r2,r2,r3
  803d80:	90c0040c 	andi	r3,r18,16
  803d84:	14000017 	ldw	r16,0(r2)
  803d88:	14400117 	ldw	r17,4(r2)
  803d8c:	18036a1e 	bne	r3,zero,804b38 <_dtoa_r+0x11c8>
  803d90:	05800084 	movi	r22,2
  803d94:	90001026 	beq	r18,zero,803dd8 <_dtoa_r+0x468>
  803d98:	04c02074 	movhi	r19,129
  803d9c:	9cf2a204 	addi	r19,r19,-13688
  803da0:	9080004c 	andi	r2,r18,1
  803da4:	1005003a 	cmpeq	r2,r2,zero
  803da8:	1000081e 	bne	r2,zero,803dcc <_dtoa_r+0x45c>
  803dac:	99800017 	ldw	r6,0(r19)
  803db0:	99c00117 	ldw	r7,4(r19)
  803db4:	880b883a 	mov	r5,r17
  803db8:	8009883a 	mov	r4,r16
  803dbc:	0809f380 	call	809f38 <__muldf3>
  803dc0:	1021883a 	mov	r16,r2
  803dc4:	b5800044 	addi	r22,r22,1
  803dc8:	1823883a 	mov	r17,r3
  803dcc:	9025d07a 	srai	r18,r18,1
  803dd0:	9cc00204 	addi	r19,r19,8
  803dd4:	903ff21e 	bne	r18,zero,803da0 <_dtoa_r+0x430>
  803dd8:	a80b883a 	mov	r5,r21
  803ddc:	a009883a 	mov	r4,r20
  803de0:	880f883a 	mov	r7,r17
  803de4:	800d883a 	mov	r6,r16
  803de8:	080a2fc0 	call	80a2fc <__divdf3>
  803dec:	1029883a 	mov	r20,r2
  803df0:	182b883a 	mov	r21,r3
  803df4:	d8c00c17 	ldw	r3,48(sp)
  803df8:	1805003a 	cmpeq	r2,r3,zero
  803dfc:	1000081e 	bne	r2,zero,803e20 <_dtoa_r+0x4b0>
  803e00:	0005883a 	mov	r2,zero
  803e04:	00cffc34 	movhi	r3,16368
  803e08:	180f883a 	mov	r7,r3
  803e0c:	a009883a 	mov	r4,r20
  803e10:	a80b883a 	mov	r5,r21
  803e14:	100d883a 	mov	r6,r2
  803e18:	080a7740 	call	80a774 <__ltdf2>
  803e1c:	1003fe16 	blt	r2,zero,804e18 <_dtoa_r+0x14a8>
  803e20:	b009883a 	mov	r4,r22
  803e24:	080a8840 	call	80a884 <__floatsidf>
  803e28:	180b883a 	mov	r5,r3
  803e2c:	1009883a 	mov	r4,r2
  803e30:	a00d883a 	mov	r6,r20
  803e34:	a80f883a 	mov	r7,r21
  803e38:	0809f380 	call	809f38 <__muldf3>
  803e3c:	0011883a 	mov	r8,zero
  803e40:	02500734 	movhi	r9,16412
  803e44:	1009883a 	mov	r4,r2
  803e48:	180b883a 	mov	r5,r3
  803e4c:	480f883a 	mov	r7,r9
  803e50:	400d883a 	mov	r6,r8
  803e54:	08009840 	call	800984 <__adddf3>
  803e58:	d9000f17 	ldw	r4,60(sp)
  803e5c:	102d883a 	mov	r22,r2
  803e60:	00bf3034 	movhi	r2,64704
  803e64:	18b9883a 	add	fp,r3,r2
  803e68:	e02f883a 	mov	r23,fp
  803e6c:	20028f1e 	bne	r4,zero,8048ac <_dtoa_r+0xf3c>
  803e70:	0005883a 	mov	r2,zero
  803e74:	00d00534 	movhi	r3,16404
  803e78:	a009883a 	mov	r4,r20
  803e7c:	a80b883a 	mov	r5,r21
  803e80:	180f883a 	mov	r7,r3
  803e84:	100d883a 	mov	r6,r2
  803e88:	08009040 	call	800904 <__subdf3>
  803e8c:	1009883a 	mov	r4,r2
  803e90:	e00f883a 	mov	r7,fp
  803e94:	180b883a 	mov	r5,r3
  803e98:	b00d883a 	mov	r6,r22
  803e9c:	1025883a 	mov	r18,r2
  803ea0:	1827883a 	mov	r19,r3
  803ea4:	080a6640 	call	80a664 <__gtdf2>
  803ea8:	00834f16 	blt	zero,r2,804be8 <_dtoa_r+0x1278>
  803eac:	e0e0003c 	xorhi	r3,fp,32768
  803eb0:	9009883a 	mov	r4,r18
  803eb4:	980b883a 	mov	r5,r19
  803eb8:	180f883a 	mov	r7,r3
  803ebc:	b00d883a 	mov	r6,r22
  803ec0:	080a7740 	call	80a774 <__ltdf2>
  803ec4:	1000080e 	bge	r2,zero,803ee8 <_dtoa_r+0x578>
  803ec8:	0027883a 	mov	r19,zero
  803ecc:	0025883a 	mov	r18,zero
  803ed0:	d8802617 	ldw	r2,152(sp)
  803ed4:	df000517 	ldw	fp,20(sp)
  803ed8:	d8000615 	stw	zero,24(sp)
  803edc:	0084303a 	nor	r2,zero,r2
  803ee0:	d8800d15 	stw	r2,52(sp)
  803ee4:	00019b06 	br	804554 <_dtoa_r+0xbe4>
  803ee8:	d9801217 	ldw	r6,72(sp)
  803eec:	d8801317 	ldw	r2,76(sp)
  803ef0:	3029883a 	mov	r20,r6
  803ef4:	102b883a 	mov	r21,r2
  803ef8:	d8c00217 	ldw	r3,8(sp)
  803efc:	18008516 	blt	r3,zero,804114 <_dtoa_r+0x7a4>
  803f00:	d9000d17 	ldw	r4,52(sp)
  803f04:	00800384 	movi	r2,14
  803f08:	11008216 	blt	r2,r4,804114 <_dtoa_r+0x7a4>
  803f0c:	200490fa 	slli	r2,r4,3
  803f10:	d9802617 	ldw	r6,152(sp)
  803f14:	00c02074 	movhi	r3,129
  803f18:	18f27004 	addi	r3,r3,-13888
  803f1c:	10c5883a 	add	r2,r2,r3
  803f20:	14800017 	ldw	r18,0(r2)
  803f24:	14c00117 	ldw	r19,4(r2)
  803f28:	30031e16 	blt	r6,zero,804ba4 <_dtoa_r+0x1234>
  803f2c:	d9000517 	ldw	r4,20(sp)
  803f30:	d8c00f17 	ldw	r3,60(sp)
  803f34:	a823883a 	mov	r17,r21
  803f38:	a021883a 	mov	r16,r20
  803f3c:	192b883a 	add	r21,r3,r4
  803f40:	2039883a 	mov	fp,r4
  803f44:	00000f06 	br	803f84 <_dtoa_r+0x614>
  803f48:	0005883a 	mov	r2,zero
  803f4c:	00d00934 	movhi	r3,16420
  803f50:	5009883a 	mov	r4,r10
  803f54:	580b883a 	mov	r5,r11
  803f58:	180f883a 	mov	r7,r3
  803f5c:	100d883a 	mov	r6,r2
  803f60:	0809f380 	call	809f38 <__muldf3>
  803f64:	180b883a 	mov	r5,r3
  803f68:	000d883a 	mov	r6,zero
  803f6c:	000f883a 	mov	r7,zero
  803f70:	1009883a 	mov	r4,r2
  803f74:	1021883a 	mov	r16,r2
  803f78:	1823883a 	mov	r17,r3
  803f7c:	080a5dc0 	call	80a5dc <__nedf2>
  803f80:	10004526 	beq	r2,zero,804098 <_dtoa_r+0x728>
  803f84:	900d883a 	mov	r6,r18
  803f88:	980f883a 	mov	r7,r19
  803f8c:	8009883a 	mov	r4,r16
  803f90:	880b883a 	mov	r5,r17
  803f94:	080a2fc0 	call	80a2fc <__divdf3>
  803f98:	180b883a 	mov	r5,r3
  803f9c:	1009883a 	mov	r4,r2
  803fa0:	080a97c0 	call	80a97c <__fixdfsi>
  803fa4:	1009883a 	mov	r4,r2
  803fa8:	1029883a 	mov	r20,r2
  803fac:	080a8840 	call	80a884 <__floatsidf>
  803fb0:	180f883a 	mov	r7,r3
  803fb4:	9009883a 	mov	r4,r18
  803fb8:	980b883a 	mov	r5,r19
  803fbc:	100d883a 	mov	r6,r2
  803fc0:	0809f380 	call	809f38 <__muldf3>
  803fc4:	180f883a 	mov	r7,r3
  803fc8:	880b883a 	mov	r5,r17
  803fcc:	8009883a 	mov	r4,r16
  803fd0:	100d883a 	mov	r6,r2
  803fd4:	08009040 	call	800904 <__subdf3>
  803fd8:	1015883a 	mov	r10,r2
  803fdc:	a0800c04 	addi	r2,r20,48
  803fe0:	e0800005 	stb	r2,0(fp)
  803fe4:	e7000044 	addi	fp,fp,1
  803fe8:	1817883a 	mov	r11,r3
  803fec:	e57fd61e 	bne	fp,r21,803f48 <_dtoa_r+0x5d8>
  803ff0:	500d883a 	mov	r6,r10
  803ff4:	180f883a 	mov	r7,r3
  803ff8:	5009883a 	mov	r4,r10
  803ffc:	180b883a 	mov	r5,r3
  804000:	08009840 	call	800984 <__adddf3>
  804004:	100d883a 	mov	r6,r2
  804008:	9009883a 	mov	r4,r18
  80400c:	980b883a 	mov	r5,r19
  804010:	180f883a 	mov	r7,r3
  804014:	1021883a 	mov	r16,r2
  804018:	1823883a 	mov	r17,r3
  80401c:	080a7740 	call	80a774 <__ltdf2>
  804020:	10000816 	blt	r2,zero,804044 <_dtoa_r+0x6d4>
  804024:	980b883a 	mov	r5,r19
  804028:	800d883a 	mov	r6,r16
  80402c:	880f883a 	mov	r7,r17
  804030:	9009883a 	mov	r4,r18
  804034:	080a5540 	call	80a554 <__eqdf2>
  804038:	1000171e 	bne	r2,zero,804098 <_dtoa_r+0x728>
  80403c:	a080004c 	andi	r2,r20,1
  804040:	10001526 	beq	r2,zero,804098 <_dtoa_r+0x728>
  804044:	d8800d17 	ldw	r2,52(sp)
  804048:	d8800415 	stw	r2,16(sp)
  80404c:	e009883a 	mov	r4,fp
  804050:	213fffc4 	addi	r4,r4,-1
  804054:	20c00007 	ldb	r3,0(r4)
  804058:	00800e44 	movi	r2,57
  80405c:	1880081e 	bne	r3,r2,804080 <_dtoa_r+0x710>
  804060:	d8800517 	ldw	r2,20(sp)
  804064:	113ffa1e 	bne	r2,r4,804050 <_dtoa_r+0x6e0>
  804068:	d8c00417 	ldw	r3,16(sp)
  80406c:	d9800517 	ldw	r6,20(sp)
  804070:	00800c04 	movi	r2,48
  804074:	18c00044 	addi	r3,r3,1
  804078:	d8c00415 	stw	r3,16(sp)
  80407c:	30800005 	stb	r2,0(r6)
  804080:	20800003 	ldbu	r2,0(r4)
  804084:	d8c00417 	ldw	r3,16(sp)
  804088:	27000044 	addi	fp,r4,1
  80408c:	10800044 	addi	r2,r2,1
  804090:	d8c00d15 	stw	r3,52(sp)
  804094:	20800005 	stb	r2,0(r4)
  804098:	d9001617 	ldw	r4,88(sp)
  80409c:	d9400717 	ldw	r5,28(sp)
  8040a0:	08075bc0 	call	8075bc <_Bfree>
  8040a4:	e0000005 	stb	zero,0(fp)
  8040a8:	d9800d17 	ldw	r6,52(sp)
  8040ac:	d8c02717 	ldw	r3,156(sp)
  8040b0:	d9002917 	ldw	r4,164(sp)
  8040b4:	30800044 	addi	r2,r6,1
  8040b8:	18800015 	stw	r2,0(r3)
  8040bc:	20029c26 	beq	r4,zero,804b30 <_dtoa_r+0x11c0>
  8040c0:	d8c00517 	ldw	r3,20(sp)
  8040c4:	27000015 	stw	fp,0(r4)
  8040c8:	003e5d06 	br	803a40 <_dtoa_r+0xd0>
  8040cc:	d9800d17 	ldw	r6,52(sp)
  8040d0:	00c02074 	movhi	r3,129
  8040d4:	18f27004 	addi	r3,r3,-13888
  8040d8:	d9001217 	ldw	r4,72(sp)
  8040dc:	300490fa 	slli	r2,r6,3
  8040e0:	d9401317 	ldw	r5,76(sp)
  8040e4:	10c5883a 	add	r2,r2,r3
  8040e8:	12000017 	ldw	r8,0(r2)
  8040ec:	12400117 	ldw	r9,4(r2)
  8040f0:	400d883a 	mov	r6,r8
  8040f4:	480f883a 	mov	r7,r9
  8040f8:	080a7740 	call	80a774 <__ltdf2>
  8040fc:	1000030e 	bge	r2,zero,80410c <_dtoa_r+0x79c>
  804100:	d8800d17 	ldw	r2,52(sp)
  804104:	10bfffc4 	addi	r2,r2,-1
  804108:	d8800d15 	stw	r2,52(sp)
  80410c:	d8000c15 	stw	zero,48(sp)
  804110:	003ea806 	br	803bb4 <_dtoa_r+0x244>
  804114:	d9000b17 	ldw	r4,44(sp)
  804118:	202cc03a 	cmpne	r22,r4,zero
  80411c:	b000c71e 	bne	r22,zero,80443c <_dtoa_r+0xacc>
  804120:	dc001117 	ldw	r16,68(sp)
  804124:	dc801017 	ldw	r18,64(sp)
  804128:	0027883a 	mov	r19,zero
  80412c:	04000b0e 	bge	zero,r16,80415c <_dtoa_r+0x7ec>
  804130:	d8c00a17 	ldw	r3,40(sp)
  804134:	00c0090e 	bge	zero,r3,80415c <_dtoa_r+0x7ec>
  804138:	8005883a 	mov	r2,r16
  80413c:	1c011316 	blt	r3,r16,80458c <_dtoa_r+0xc1c>
  804140:	d9000a17 	ldw	r4,40(sp)
  804144:	d9801117 	ldw	r6,68(sp)
  804148:	80a1c83a 	sub	r16,r16,r2
  80414c:	2089c83a 	sub	r4,r4,r2
  804150:	308dc83a 	sub	r6,r6,r2
  804154:	d9000a15 	stw	r4,40(sp)
  804158:	d9801115 	stw	r6,68(sp)
  80415c:	d8801017 	ldw	r2,64(sp)
  804160:	0080150e 	bge	zero,r2,8041b8 <_dtoa_r+0x848>
  804164:	d8c00b17 	ldw	r3,44(sp)
  804168:	1805003a 	cmpeq	r2,r3,zero
  80416c:	1001c91e 	bne	r2,zero,804894 <_dtoa_r+0xf24>
  804170:	04800e0e 	bge	zero,r18,8041ac <_dtoa_r+0x83c>
  804174:	d9001617 	ldw	r4,88(sp)
  804178:	980b883a 	mov	r5,r19
  80417c:	900d883a 	mov	r6,r18
  804180:	08083700 	call	808370 <__pow5mult>
  804184:	d9001617 	ldw	r4,88(sp)
  804188:	d9800717 	ldw	r6,28(sp)
  80418c:	100b883a 	mov	r5,r2
  804190:	1027883a 	mov	r19,r2
  804194:	080804c0 	call	80804c <__multiply>
  804198:	d9001617 	ldw	r4,88(sp)
  80419c:	d9400717 	ldw	r5,28(sp)
  8041a0:	1023883a 	mov	r17,r2
  8041a4:	08075bc0 	call	8075bc <_Bfree>
  8041a8:	dc400715 	stw	r17,28(sp)
  8041ac:	d9001017 	ldw	r4,64(sp)
  8041b0:	248dc83a 	sub	r6,r4,r18
  8041b4:	30010e1e 	bne	r6,zero,8045f0 <_dtoa_r+0xc80>
  8041b8:	d9001617 	ldw	r4,88(sp)
  8041bc:	04400044 	movi	r17,1
  8041c0:	880b883a 	mov	r5,r17
  8041c4:	08082340 	call	808234 <__i2b>
  8041c8:	d9800917 	ldw	r6,36(sp)
  8041cc:	1025883a 	mov	r18,r2
  8041d0:	0180040e 	bge	zero,r6,8041e4 <_dtoa_r+0x874>
  8041d4:	d9001617 	ldw	r4,88(sp)
  8041d8:	100b883a 	mov	r5,r2
  8041dc:	08083700 	call	808370 <__pow5mult>
  8041e0:	1025883a 	mov	r18,r2
  8041e4:	d8801717 	ldw	r2,92(sp)
  8041e8:	8880f30e 	bge	r17,r2,8045b8 <_dtoa_r+0xc48>
  8041ec:	0023883a 	mov	r17,zero
  8041f0:	d9800917 	ldw	r6,36(sp)
  8041f4:	30019e1e 	bne	r6,zero,804870 <_dtoa_r+0xf00>
  8041f8:	00c00044 	movi	r3,1
  8041fc:	d9000a17 	ldw	r4,40(sp)
  804200:	20c5883a 	add	r2,r4,r3
  804204:	10c007cc 	andi	r3,r2,31
  804208:	1800841e 	bne	r3,zero,80441c <_dtoa_r+0xaac>
  80420c:	00800704 	movi	r2,28
  804210:	d9000a17 	ldw	r4,40(sp)
  804214:	d9801117 	ldw	r6,68(sp)
  804218:	80a1883a 	add	r16,r16,r2
  80421c:	2089883a 	add	r4,r4,r2
  804220:	308d883a 	add	r6,r6,r2
  804224:	d9000a15 	stw	r4,40(sp)
  804228:	d9801115 	stw	r6,68(sp)
  80422c:	d8801117 	ldw	r2,68(sp)
  804230:	0080050e 	bge	zero,r2,804248 <_dtoa_r+0x8d8>
  804234:	d9400717 	ldw	r5,28(sp)
  804238:	d9001617 	ldw	r4,88(sp)
  80423c:	100d883a 	mov	r6,r2
  804240:	0807f000 	call	807f00 <__lshift>
  804244:	d8800715 	stw	r2,28(sp)
  804248:	d8c00a17 	ldw	r3,40(sp)
  80424c:	00c0050e 	bge	zero,r3,804264 <_dtoa_r+0x8f4>
  804250:	d9001617 	ldw	r4,88(sp)
  804254:	900b883a 	mov	r5,r18
  804258:	180d883a 	mov	r6,r3
  80425c:	0807f000 	call	807f00 <__lshift>
  804260:	1025883a 	mov	r18,r2
  804264:	d9000c17 	ldw	r4,48(sp)
  804268:	2005003a 	cmpeq	r2,r4,zero
  80426c:	10016f26 	beq	r2,zero,80482c <_dtoa_r+0xebc>
  804270:	d9000f17 	ldw	r4,60(sp)
  804274:	0102170e 	bge	zero,r4,804ad4 <_dtoa_r+0x1164>
  804278:	d9800b17 	ldw	r6,44(sp)
  80427c:	3005003a 	cmpeq	r2,r6,zero
  804280:	1000881e 	bne	r2,zero,8044a4 <_dtoa_r+0xb34>
  804284:	0400050e 	bge	zero,r16,80429c <_dtoa_r+0x92c>
  804288:	d9001617 	ldw	r4,88(sp)
  80428c:	980b883a 	mov	r5,r19
  804290:	800d883a 	mov	r6,r16
  804294:	0807f000 	call	807f00 <__lshift>
  804298:	1027883a 	mov	r19,r2
  80429c:	8804c03a 	cmpne	r2,r17,zero
  8042a0:	1002541e 	bne	r2,zero,804bf4 <_dtoa_r+0x1284>
  8042a4:	980b883a 	mov	r5,r19
  8042a8:	dd800517 	ldw	r22,20(sp)
  8042ac:	dcc00615 	stw	r19,24(sp)
  8042b0:	a700004c 	andi	fp,r20,1
  8042b4:	2827883a 	mov	r19,r5
  8042b8:	d9000717 	ldw	r4,28(sp)
  8042bc:	900b883a 	mov	r5,r18
  8042c0:	08037580 	call	803758 <quorem>
  8042c4:	d9000717 	ldw	r4,28(sp)
  8042c8:	d9400617 	ldw	r5,24(sp)
  8042cc:	1023883a 	mov	r17,r2
  8042d0:	8dc00c04 	addi	r23,r17,48
  8042d4:	08077180 	call	807718 <__mcmp>
  8042d8:	d9001617 	ldw	r4,88(sp)
  8042dc:	900b883a 	mov	r5,r18
  8042e0:	980d883a 	mov	r6,r19
  8042e4:	1029883a 	mov	r20,r2
  8042e8:	0807d740 	call	807d74 <__mdiff>
  8042ec:	102b883a 	mov	r21,r2
  8042f0:	10800317 	ldw	r2,12(r2)
  8042f4:	1001281e 	bne	r2,zero,804798 <_dtoa_r+0xe28>
  8042f8:	d9000717 	ldw	r4,28(sp)
  8042fc:	a80b883a 	mov	r5,r21
  804300:	08077180 	call	807718 <__mcmp>
  804304:	d9001617 	ldw	r4,88(sp)
  804308:	1021883a 	mov	r16,r2
  80430c:	a80b883a 	mov	r5,r21
  804310:	08075bc0 	call	8075bc <_Bfree>
  804314:	8000041e 	bne	r16,zero,804328 <_dtoa_r+0x9b8>
  804318:	d8801717 	ldw	r2,92(sp)
  80431c:	1000021e 	bne	r2,zero,804328 <_dtoa_r+0x9b8>
  804320:	e004c03a 	cmpne	r2,fp,zero
  804324:	10011726 	beq	r2,zero,804784 <_dtoa_r+0xe14>
  804328:	a0010616 	blt	r20,zero,804744 <_dtoa_r+0xdd4>
  80432c:	a000041e 	bne	r20,zero,804340 <_dtoa_r+0x9d0>
  804330:	d8c01717 	ldw	r3,92(sp)
  804334:	1800021e 	bne	r3,zero,804340 <_dtoa_r+0x9d0>
  804338:	e004c03a 	cmpne	r2,fp,zero
  80433c:	10010126 	beq	r2,zero,804744 <_dtoa_r+0xdd4>
  804340:	04023d16 	blt	zero,r16,804c38 <_dtoa_r+0x12c8>
  804344:	b5c00005 	stb	r23,0(r22)
  804348:	d9800517 	ldw	r6,20(sp)
  80434c:	d9000f17 	ldw	r4,60(sp)
  804350:	b5800044 	addi	r22,r22,1
  804354:	3105883a 	add	r2,r6,r4
  804358:	b0806526 	beq	r22,r2,8044f0 <_dtoa_r+0xb80>
  80435c:	d9400717 	ldw	r5,28(sp)
  804360:	d9001617 	ldw	r4,88(sp)
  804364:	01800284 	movi	r6,10
  804368:	000f883a 	mov	r7,zero
  80436c:	08082700 	call	808270 <__multadd>
  804370:	d8800715 	stw	r2,28(sp)
  804374:	d8800617 	ldw	r2,24(sp)
  804378:	14c10c26 	beq	r2,r19,8047ac <_dtoa_r+0xe3c>
  80437c:	d9400617 	ldw	r5,24(sp)
  804380:	d9001617 	ldw	r4,88(sp)
  804384:	01800284 	movi	r6,10
  804388:	000f883a 	mov	r7,zero
  80438c:	08082700 	call	808270 <__multadd>
  804390:	d9001617 	ldw	r4,88(sp)
  804394:	980b883a 	mov	r5,r19
  804398:	01800284 	movi	r6,10
  80439c:	000f883a 	mov	r7,zero
  8043a0:	d8800615 	stw	r2,24(sp)
  8043a4:	08082700 	call	808270 <__multadd>
  8043a8:	1027883a 	mov	r19,r2
  8043ac:	003fc206 	br	8042b8 <_dtoa_r+0x948>
  8043b0:	2445c83a 	sub	r2,r4,r17
  8043b4:	a088983a 	sll	r4,r20,r2
  8043b8:	003e4b06 	br	803ce8 <_dtoa_r+0x378>
  8043bc:	01bfffc4 	movi	r6,-1
  8043c0:	00800044 	movi	r2,1
  8043c4:	d9800e15 	stw	r6,56(sp)
  8043c8:	d9800f15 	stw	r6,60(sp)
  8043cc:	d8800b15 	stw	r2,44(sp)
  8043d0:	d8c01617 	ldw	r3,88(sp)
  8043d4:	008005c4 	movi	r2,23
  8043d8:	18001115 	stw	zero,68(r3)
  8043dc:	1580082e 	bgeu	r2,r22,804400 <_dtoa_r+0xa90>
  8043e0:	00c00104 	movi	r3,4
  8043e4:	0009883a 	mov	r4,zero
  8043e8:	18c7883a 	add	r3,r3,r3
  8043ec:	18800504 	addi	r2,r3,20
  8043f0:	21000044 	addi	r4,r4,1
  8043f4:	b0bffc2e 	bgeu	r22,r2,8043e8 <_dtoa_r+0xa78>
  8043f8:	d9801617 	ldw	r6,88(sp)
  8043fc:	31001115 	stw	r4,68(r6)
  804400:	dc000f17 	ldw	r16,60(sp)
  804404:	003e4b06 	br	803d34 <_dtoa_r+0x3c4>
  804408:	d9801717 	ldw	r6,92(sp)
  80440c:	0023883a 	mov	r17,zero
  804410:	31bfff04 	addi	r6,r6,-4
  804414:	d9801715 	stw	r6,92(sp)
  804418:	003df806 	br	803bfc <_dtoa_r+0x28c>
  80441c:	00800804 	movi	r2,32
  804420:	10c9c83a 	sub	r4,r2,r3
  804424:	00c00104 	movi	r3,4
  804428:	19005a16 	blt	r3,r4,804594 <_dtoa_r+0xc24>
  80442c:	008000c4 	movi	r2,3
  804430:	113f7e16 	blt	r2,r4,80422c <_dtoa_r+0x8bc>
  804434:	20800704 	addi	r2,r4,28
  804438:	003f7506 	br	804210 <_dtoa_r+0x8a0>
  80443c:	d9801717 	ldw	r6,92(sp)
  804440:	00800044 	movi	r2,1
  804444:	1180a10e 	bge	r2,r6,8046cc <_dtoa_r+0xd5c>
  804448:	d9800f17 	ldw	r6,60(sp)
  80444c:	d8c01017 	ldw	r3,64(sp)
  804450:	30bfffc4 	addi	r2,r6,-1
  804454:	1881c616 	blt	r3,r2,804b70 <_dtoa_r+0x1200>
  804458:	18a5c83a 	sub	r18,r3,r2
  80445c:	d8800f17 	ldw	r2,60(sp)
  804460:	10026216 	blt	r2,zero,804dec <_dtoa_r+0x147c>
  804464:	dc001117 	ldw	r16,68(sp)
  804468:	1007883a 	mov	r3,r2
  80446c:	d9800a17 	ldw	r6,40(sp)
  804470:	d8801117 	ldw	r2,68(sp)
  804474:	d9001617 	ldw	r4,88(sp)
  804478:	30cd883a 	add	r6,r6,r3
  80447c:	10c5883a 	add	r2,r2,r3
  804480:	01400044 	movi	r5,1
  804484:	d9800a15 	stw	r6,40(sp)
  804488:	d8801115 	stw	r2,68(sp)
  80448c:	08082340 	call	808234 <__i2b>
  804490:	1027883a 	mov	r19,r2
  804494:	003f2506 	br	80412c <_dtoa_r+0x7bc>
  804498:	00c02074 	movhi	r3,129
  80449c:	18f25304 	addi	r3,r3,-14004
  8044a0:	003d6706 	br	803a40 <_dtoa_r+0xd0>
  8044a4:	dd800517 	ldw	r22,20(sp)
  8044a8:	04000044 	movi	r16,1
  8044ac:	00000706 	br	8044cc <_dtoa_r+0xb5c>
  8044b0:	d9400717 	ldw	r5,28(sp)
  8044b4:	d9001617 	ldw	r4,88(sp)
  8044b8:	01800284 	movi	r6,10
  8044bc:	000f883a 	mov	r7,zero
  8044c0:	08082700 	call	808270 <__multadd>
  8044c4:	d8800715 	stw	r2,28(sp)
  8044c8:	84000044 	addi	r16,r16,1
  8044cc:	d9000717 	ldw	r4,28(sp)
  8044d0:	900b883a 	mov	r5,r18
  8044d4:	08037580 	call	803758 <quorem>
  8044d8:	15c00c04 	addi	r23,r2,48
  8044dc:	b5c00005 	stb	r23,0(r22)
  8044e0:	d8c00f17 	ldw	r3,60(sp)
  8044e4:	b5800044 	addi	r22,r22,1
  8044e8:	80fff116 	blt	r16,r3,8044b0 <_dtoa_r+0xb40>
  8044ec:	d8000615 	stw	zero,24(sp)
  8044f0:	d9400717 	ldw	r5,28(sp)
  8044f4:	d9001617 	ldw	r4,88(sp)
  8044f8:	01800044 	movi	r6,1
  8044fc:	0807f000 	call	807f00 <__lshift>
  804500:	1009883a 	mov	r4,r2
  804504:	900b883a 	mov	r5,r18
  804508:	d8800715 	stw	r2,28(sp)
  80450c:	08077180 	call	807718 <__mcmp>
  804510:	00803c0e 	bge	zero,r2,804604 <_dtoa_r+0xc94>
  804514:	b009883a 	mov	r4,r22
  804518:	213fffc4 	addi	r4,r4,-1
  80451c:	21400003 	ldbu	r5,0(r4)
  804520:	00800e44 	movi	r2,57
  804524:	28c03fcc 	andi	r3,r5,255
  804528:	18c0201c 	xori	r3,r3,128
  80452c:	18ffe004 	addi	r3,r3,-128
  804530:	1881981e 	bne	r3,r2,804b94 <_dtoa_r+0x1224>
  804534:	d9800517 	ldw	r6,20(sp)
  804538:	21bff71e 	bne	r4,r6,804518 <_dtoa_r+0xba8>
  80453c:	d8800d17 	ldw	r2,52(sp)
  804540:	37000044 	addi	fp,r6,1
  804544:	10800044 	addi	r2,r2,1
  804548:	d8800d15 	stw	r2,52(sp)
  80454c:	00800c44 	movi	r2,49
  804550:	30800005 	stb	r2,0(r6)
  804554:	d9001617 	ldw	r4,88(sp)
  804558:	900b883a 	mov	r5,r18
  80455c:	08075bc0 	call	8075bc <_Bfree>
  804560:	983ecd26 	beq	r19,zero,804098 <_dtoa_r+0x728>
  804564:	d8c00617 	ldw	r3,24(sp)
  804568:	18000426 	beq	r3,zero,80457c <_dtoa_r+0xc0c>
  80456c:	1cc00326 	beq	r3,r19,80457c <_dtoa_r+0xc0c>
  804570:	d9001617 	ldw	r4,88(sp)
  804574:	180b883a 	mov	r5,r3
  804578:	08075bc0 	call	8075bc <_Bfree>
  80457c:	d9001617 	ldw	r4,88(sp)
  804580:	980b883a 	mov	r5,r19
  804584:	08075bc0 	call	8075bc <_Bfree>
  804588:	003ec306 	br	804098 <_dtoa_r+0x728>
  80458c:	1805883a 	mov	r2,r3
  804590:	003eeb06 	br	804140 <_dtoa_r+0x7d0>
  804594:	d9800a17 	ldw	r6,40(sp)
  804598:	d8c01117 	ldw	r3,68(sp)
  80459c:	20bfff04 	addi	r2,r4,-4
  8045a0:	308d883a 	add	r6,r6,r2
  8045a4:	1887883a 	add	r3,r3,r2
  8045a8:	80a1883a 	add	r16,r16,r2
  8045ac:	d9800a15 	stw	r6,40(sp)
  8045b0:	d8c01115 	stw	r3,68(sp)
  8045b4:	003f1d06 	br	80422c <_dtoa_r+0x8bc>
  8045b8:	a03f0c1e 	bne	r20,zero,8041ec <_dtoa_r+0x87c>
  8045bc:	00800434 	movhi	r2,16
  8045c0:	10bfffc4 	addi	r2,r2,-1
  8045c4:	a884703a 	and	r2,r21,r2
  8045c8:	103f081e 	bne	r2,zero,8041ec <_dtoa_r+0x87c>
  8045cc:	a89ffc2c 	andhi	r2,r21,32752
  8045d0:	103f0626 	beq	r2,zero,8041ec <_dtoa_r+0x87c>
  8045d4:	d8c01117 	ldw	r3,68(sp)
  8045d8:	d9000a17 	ldw	r4,40(sp)
  8045dc:	18c00044 	addi	r3,r3,1
  8045e0:	21000044 	addi	r4,r4,1
  8045e4:	d8c01115 	stw	r3,68(sp)
  8045e8:	d9000a15 	stw	r4,40(sp)
  8045ec:	003f0006 	br	8041f0 <_dtoa_r+0x880>
  8045f0:	d9400717 	ldw	r5,28(sp)
  8045f4:	d9001617 	ldw	r4,88(sp)
  8045f8:	08083700 	call	808370 <__pow5mult>
  8045fc:	d8800715 	stw	r2,28(sp)
  804600:	003eed06 	br	8041b8 <_dtoa_r+0x848>
  804604:	1000021e 	bne	r2,zero,804610 <_dtoa_r+0xca0>
  804608:	b880004c 	andi	r2,r23,1
  80460c:	103fc11e 	bne	r2,zero,804514 <_dtoa_r+0xba4>
  804610:	b5bfffc4 	addi	r22,r22,-1
  804614:	b0c00007 	ldb	r3,0(r22)
  804618:	00800c04 	movi	r2,48
  80461c:	18bffc26 	beq	r3,r2,804610 <_dtoa_r+0xca0>
  804620:	b7000044 	addi	fp,r22,1
  804624:	003fcb06 	br	804554 <_dtoa_r+0xbe4>
  804628:	d9800d17 	ldw	r6,52(sp)
  80462c:	018fc83a 	sub	r7,zero,r6
  804630:	3801f726 	beq	r7,zero,804e10 <_dtoa_r+0x14a0>
  804634:	398003cc 	andi	r6,r7,15
  804638:	300c90fa 	slli	r6,r6,3
  80463c:	01402074 	movhi	r5,129
  804640:	29727004 	addi	r5,r5,-13888
  804644:	d9001217 	ldw	r4,72(sp)
  804648:	314d883a 	add	r6,r6,r5
  80464c:	30c00117 	ldw	r3,4(r6)
  804650:	30800017 	ldw	r2,0(r6)
  804654:	d9401317 	ldw	r5,76(sp)
  804658:	3821d13a 	srai	r16,r7,4
  80465c:	100d883a 	mov	r6,r2
  804660:	180f883a 	mov	r7,r3
  804664:	0809f380 	call	809f38 <__muldf3>
  804668:	1011883a 	mov	r8,r2
  80466c:	1813883a 	mov	r9,r3
  804670:	1029883a 	mov	r20,r2
  804674:	182b883a 	mov	r21,r3
  804678:	8001e526 	beq	r16,zero,804e10 <_dtoa_r+0x14a0>
  80467c:	05800084 	movi	r22,2
  804680:	04402074 	movhi	r17,129
  804684:	8c72a204 	addi	r17,r17,-13688
  804688:	8080004c 	andi	r2,r16,1
  80468c:	1005003a 	cmpeq	r2,r2,zero
  804690:	1000081e 	bne	r2,zero,8046b4 <_dtoa_r+0xd44>
  804694:	89800017 	ldw	r6,0(r17)
  804698:	89c00117 	ldw	r7,4(r17)
  80469c:	480b883a 	mov	r5,r9
  8046a0:	4009883a 	mov	r4,r8
  8046a4:	0809f380 	call	809f38 <__muldf3>
  8046a8:	1011883a 	mov	r8,r2
  8046ac:	b5800044 	addi	r22,r22,1
  8046b0:	1813883a 	mov	r9,r3
  8046b4:	8021d07a 	srai	r16,r16,1
  8046b8:	8c400204 	addi	r17,r17,8
  8046bc:	803ff21e 	bne	r16,zero,804688 <_dtoa_r+0xd18>
  8046c0:	4029883a 	mov	r20,r8
  8046c4:	482b883a 	mov	r21,r9
  8046c8:	003dca06 	br	803df4 <_dtoa_r+0x484>
  8046cc:	d9000817 	ldw	r4,32(sp)
  8046d0:	2005003a 	cmpeq	r2,r4,zero
  8046d4:	1001f61e 	bne	r2,zero,804eb0 <_dtoa_r+0x1540>
  8046d8:	dc001117 	ldw	r16,68(sp)
  8046dc:	dc801017 	ldw	r18,64(sp)
  8046e0:	18c10cc4 	addi	r3,r3,1075
  8046e4:	003f6106 	br	80446c <_dtoa_r+0xafc>
  8046e8:	d8000b15 	stw	zero,44(sp)
  8046ec:	d9802617 	ldw	r6,152(sp)
  8046f0:	d8c00d17 	ldw	r3,52(sp)
  8046f4:	30800044 	addi	r2,r6,1
  8046f8:	18ad883a 	add	r22,r3,r2
  8046fc:	b13fffc4 	addi	r4,r22,-1
  804700:	d9000e15 	stw	r4,56(sp)
  804704:	0581f60e 	bge	zero,r22,804ee0 <_dtoa_r+0x1570>
  804708:	dd800f15 	stw	r22,60(sp)
  80470c:	003f3006 	br	8043d0 <_dtoa_r+0xa60>
  804710:	d8000b15 	stw	zero,44(sp)
  804714:	d9002617 	ldw	r4,152(sp)
  804718:	0101eb0e 	bge	zero,r4,804ec8 <_dtoa_r+0x1558>
  80471c:	202d883a 	mov	r22,r4
  804720:	d9000e15 	stw	r4,56(sp)
  804724:	d9000f15 	stw	r4,60(sp)
  804728:	003f2906 	br	8043d0 <_dtoa_r+0xa60>
  80472c:	01800044 	movi	r6,1
  804730:	d9800b15 	stw	r6,44(sp)
  804734:	003ff706 	br	804714 <_dtoa_r+0xda4>
  804738:	01000044 	movi	r4,1
  80473c:	d9000b15 	stw	r4,44(sp)
  804740:	003fea06 	br	8046ec <_dtoa_r+0xd7c>
  804744:	04000c0e 	bge	zero,r16,804778 <_dtoa_r+0xe08>
  804748:	d9400717 	ldw	r5,28(sp)
  80474c:	d9001617 	ldw	r4,88(sp)
  804750:	01800044 	movi	r6,1
  804754:	0807f000 	call	807f00 <__lshift>
  804758:	1009883a 	mov	r4,r2
  80475c:	900b883a 	mov	r5,r18
  804760:	d8800715 	stw	r2,28(sp)
  804764:	08077180 	call	807718 <__mcmp>
  804768:	0081e00e 	bge	zero,r2,804eec <_dtoa_r+0x157c>
  80476c:	bdc00044 	addi	r23,r23,1
  804770:	00800e84 	movi	r2,58
  804774:	b881a226 	beq	r23,r2,804e00 <_dtoa_r+0x1490>
  804778:	b7000044 	addi	fp,r22,1
  80477c:	b5c00005 	stb	r23,0(r22)
  804780:	003f7406 	br	804554 <_dtoa_r+0xbe4>
  804784:	00800e44 	movi	r2,57
  804788:	b8819d26 	beq	r23,r2,804e00 <_dtoa_r+0x1490>
  80478c:	053ffa0e 	bge	zero,r20,804778 <_dtoa_r+0xe08>
  804790:	8dc00c44 	addi	r23,r17,49
  804794:	003ff806 	br	804778 <_dtoa_r+0xe08>
  804798:	d9001617 	ldw	r4,88(sp)
  80479c:	a80b883a 	mov	r5,r21
  8047a0:	04000044 	movi	r16,1
  8047a4:	08075bc0 	call	8075bc <_Bfree>
  8047a8:	003edf06 	br	804328 <_dtoa_r+0x9b8>
  8047ac:	d9001617 	ldw	r4,88(sp)
  8047b0:	980b883a 	mov	r5,r19
  8047b4:	01800284 	movi	r6,10
  8047b8:	000f883a 	mov	r7,zero
  8047bc:	08082700 	call	808270 <__multadd>
  8047c0:	1027883a 	mov	r19,r2
  8047c4:	d8800615 	stw	r2,24(sp)
  8047c8:	003ebb06 	br	8042b8 <_dtoa_r+0x948>
  8047cc:	d9801117 	ldw	r6,68(sp)
  8047d0:	d8800d17 	ldw	r2,52(sp)
  8047d4:	d8000915 	stw	zero,36(sp)
  8047d8:	308dc83a 	sub	r6,r6,r2
  8047dc:	0087c83a 	sub	r3,zero,r2
  8047e0:	d9801115 	stw	r6,68(sp)
  8047e4:	d8c01015 	stw	r3,64(sp)
  8047e8:	003cfe06 	br	803be4 <_dtoa_r+0x274>
  8047ec:	018dc83a 	sub	r6,zero,r6
  8047f0:	d9801115 	stw	r6,68(sp)
  8047f4:	d8000a15 	stw	zero,40(sp)
  8047f8:	003cf306 	br	803bc8 <_dtoa_r+0x258>
  8047fc:	d9000d17 	ldw	r4,52(sp)
  804800:	080a8840 	call	80a884 <__floatsidf>
  804804:	880b883a 	mov	r5,r17
  804808:	8009883a 	mov	r4,r16
  80480c:	180f883a 	mov	r7,r3
  804810:	100d883a 	mov	r6,r2
  804814:	080a5dc0 	call	80a5dc <__nedf2>
  804818:	103ce126 	beq	r2,zero,803ba0 <_dtoa_r+0x230>
  80481c:	d9800d17 	ldw	r6,52(sp)
  804820:	31bfffc4 	addi	r6,r6,-1
  804824:	d9800d15 	stw	r6,52(sp)
  804828:	003cdd06 	br	803ba0 <_dtoa_r+0x230>
  80482c:	d9000717 	ldw	r4,28(sp)
  804830:	900b883a 	mov	r5,r18
  804834:	08077180 	call	807718 <__mcmp>
  804838:	103e8d0e 	bge	r2,zero,804270 <_dtoa_r+0x900>
  80483c:	d9400717 	ldw	r5,28(sp)
  804840:	d9001617 	ldw	r4,88(sp)
  804844:	01800284 	movi	r6,10
  804848:	000f883a 	mov	r7,zero
  80484c:	08082700 	call	808270 <__multadd>
  804850:	d9800d17 	ldw	r6,52(sp)
  804854:	d8800715 	stw	r2,28(sp)
  804858:	31bfffc4 	addi	r6,r6,-1
  80485c:	d9800d15 	stw	r6,52(sp)
  804860:	b001a71e 	bne	r22,zero,804f00 <_dtoa_r+0x1590>
  804864:	d8800e17 	ldw	r2,56(sp)
  804868:	d8800f15 	stw	r2,60(sp)
  80486c:	003e8006 	br	804270 <_dtoa_r+0x900>
  804870:	90800417 	ldw	r2,16(r18)
  804874:	1085883a 	add	r2,r2,r2
  804878:	1085883a 	add	r2,r2,r2
  80487c:	1485883a 	add	r2,r2,r18
  804880:	11000417 	ldw	r4,16(r2)
  804884:	08075e40 	call	8075e4 <__hi0bits>
  804888:	00c00804 	movi	r3,32
  80488c:	1887c83a 	sub	r3,r3,r2
  804890:	003e5a06 	br	8041fc <_dtoa_r+0x88c>
  804894:	d9400717 	ldw	r5,28(sp)
  804898:	d9801017 	ldw	r6,64(sp)
  80489c:	d9001617 	ldw	r4,88(sp)
  8048a0:	08083700 	call	808370 <__pow5mult>
  8048a4:	d8800715 	stw	r2,28(sp)
  8048a8:	003e4306 	br	8041b8 <_dtoa_r+0x848>
  8048ac:	d9800f17 	ldw	r6,60(sp)
  8048b0:	d8800d17 	ldw	r2,52(sp)
  8048b4:	d9800315 	stw	r6,12(sp)
  8048b8:	d8800415 	stw	r2,16(sp)
  8048bc:	d8c00b17 	ldw	r3,44(sp)
  8048c0:	1805003a 	cmpeq	r2,r3,zero
  8048c4:	1000e21e 	bne	r2,zero,804c50 <_dtoa_r+0x12e0>
  8048c8:	d9000317 	ldw	r4,12(sp)
  8048cc:	0005883a 	mov	r2,zero
  8048d0:	00cff834 	movhi	r3,16352
  8048d4:	200c90fa 	slli	r6,r4,3
  8048d8:	01002074 	movhi	r4,129
  8048dc:	21327004 	addi	r4,r4,-13888
  8048e0:	180b883a 	mov	r5,r3
  8048e4:	310d883a 	add	r6,r6,r4
  8048e8:	327fff17 	ldw	r9,-4(r6)
  8048ec:	323ffe17 	ldw	r8,-8(r6)
  8048f0:	1009883a 	mov	r4,r2
  8048f4:	480f883a 	mov	r7,r9
  8048f8:	400d883a 	mov	r6,r8
  8048fc:	080a2fc0 	call	80a2fc <__divdf3>
  804900:	180b883a 	mov	r5,r3
  804904:	b00d883a 	mov	r6,r22
  804908:	b80f883a 	mov	r7,r23
  80490c:	1009883a 	mov	r4,r2
  804910:	08009040 	call	800904 <__subdf3>
  804914:	a80b883a 	mov	r5,r21
  804918:	a009883a 	mov	r4,r20
  80491c:	d8c01915 	stw	r3,100(sp)
  804920:	d8801815 	stw	r2,96(sp)
  804924:	080a97c0 	call	80a97c <__fixdfsi>
  804928:	1009883a 	mov	r4,r2
  80492c:	1027883a 	mov	r19,r2
  804930:	080a8840 	call	80a884 <__floatsidf>
  804934:	a80b883a 	mov	r5,r21
  804938:	a009883a 	mov	r4,r20
  80493c:	180f883a 	mov	r7,r3
  804940:	100d883a 	mov	r6,r2
  804944:	08009040 	call	800904 <__subdf3>
  804948:	d9801817 	ldw	r6,96(sp)
  80494c:	1823883a 	mov	r17,r3
  804950:	d8801415 	stw	r2,80(sp)
  804954:	302d883a 	mov	r22,r6
  804958:	d9800517 	ldw	r6,20(sp)
  80495c:	9cc00c04 	addi	r19,r19,48
  804960:	dc401515 	stw	r17,84(sp)
  804964:	d8c01917 	ldw	r3,100(sp)
  804968:	34c00005 	stb	r19,0(r6)
  80496c:	d8800517 	ldw	r2,20(sp)
  804970:	d9401917 	ldw	r5,100(sp)
  804974:	d9801417 	ldw	r6,80(sp)
  804978:	b009883a 	mov	r4,r22
  80497c:	880f883a 	mov	r7,r17
  804980:	182f883a 	mov	r23,r3
  804984:	17000044 	addi	fp,r2,1
  804988:	080a6640 	call	80a664 <__gtdf2>
  80498c:	00804e16 	blt	zero,r2,804ac8 <_dtoa_r+0x1158>
  804990:	d9801417 	ldw	r6,80(sp)
  804994:	0005883a 	mov	r2,zero
  804998:	00cffc34 	movhi	r3,16368
  80499c:	180b883a 	mov	r5,r3
  8049a0:	880f883a 	mov	r7,r17
  8049a4:	1009883a 	mov	r4,r2
  8049a8:	08009040 	call	800904 <__subdf3>
  8049ac:	d9401917 	ldw	r5,100(sp)
  8049b0:	180f883a 	mov	r7,r3
  8049b4:	b009883a 	mov	r4,r22
  8049b8:	100d883a 	mov	r6,r2
  8049bc:	080a6640 	call	80a664 <__gtdf2>
  8049c0:	00bda216 	blt	zero,r2,80404c <_dtoa_r+0x6dc>
  8049c4:	d8c00317 	ldw	r3,12(sp)
  8049c8:	00800044 	movi	r2,1
  8049cc:	10c01216 	blt	r2,r3,804a18 <_dtoa_r+0x10a8>
  8049d0:	003d4506 	br	803ee8 <_dtoa_r+0x578>
  8049d4:	d9801417 	ldw	r6,80(sp)
  8049d8:	0005883a 	mov	r2,zero
  8049dc:	00cffc34 	movhi	r3,16368
  8049e0:	180b883a 	mov	r5,r3
  8049e4:	880f883a 	mov	r7,r17
  8049e8:	1009883a 	mov	r4,r2
  8049ec:	08009040 	call	800904 <__subdf3>
  8049f0:	d9c01b17 	ldw	r7,108(sp)
  8049f4:	180b883a 	mov	r5,r3
  8049f8:	1009883a 	mov	r4,r2
  8049fc:	b00d883a 	mov	r6,r22
  804a00:	080a7740 	call	80a774 <__ltdf2>
  804a04:	103d9116 	blt	r2,zero,80404c <_dtoa_r+0x6dc>
  804a08:	d9800517 	ldw	r6,20(sp)
  804a0c:	d9000317 	ldw	r4,12(sp)
  804a10:	3105883a 	add	r2,r6,r4
  804a14:	e0bd3426 	beq	fp,r2,803ee8 <_dtoa_r+0x578>
  804a18:	04500934 	movhi	r17,16420
  804a1c:	0021883a 	mov	r16,zero
  804a20:	b80b883a 	mov	r5,r23
  804a24:	b009883a 	mov	r4,r22
  804a28:	800d883a 	mov	r6,r16
  804a2c:	880f883a 	mov	r7,r17
  804a30:	0809f380 	call	809f38 <__muldf3>
  804a34:	d9401517 	ldw	r5,84(sp)
  804a38:	d9001417 	ldw	r4,80(sp)
  804a3c:	880f883a 	mov	r7,r17
  804a40:	000d883a 	mov	r6,zero
  804a44:	d8801a15 	stw	r2,104(sp)
  804a48:	d8c01b15 	stw	r3,108(sp)
  804a4c:	0809f380 	call	809f38 <__muldf3>
  804a50:	180b883a 	mov	r5,r3
  804a54:	1009883a 	mov	r4,r2
  804a58:	1823883a 	mov	r17,r3
  804a5c:	1021883a 	mov	r16,r2
  804a60:	080a97c0 	call	80a97c <__fixdfsi>
  804a64:	1009883a 	mov	r4,r2
  804a68:	102b883a 	mov	r21,r2
  804a6c:	080a8840 	call	80a884 <__floatsidf>
  804a70:	880b883a 	mov	r5,r17
  804a74:	8009883a 	mov	r4,r16
  804a78:	180f883a 	mov	r7,r3
  804a7c:	100d883a 	mov	r6,r2
  804a80:	08009040 	call	800904 <__subdf3>
  804a84:	1021883a 	mov	r16,r2
  804a88:	d9001b17 	ldw	r4,108(sp)
  804a8c:	1823883a 	mov	r17,r3
  804a90:	dc001415 	stw	r16,80(sp)
  804a94:	ad400c04 	addi	r21,r21,48
  804a98:	dc401515 	stw	r17,84(sp)
  804a9c:	d8801a17 	ldw	r2,104(sp)
  804aa0:	e5400005 	stb	r21,0(fp)
  804aa4:	202f883a 	mov	r23,r4
  804aa8:	d9c01b17 	ldw	r7,108(sp)
  804aac:	d9001417 	ldw	r4,80(sp)
  804ab0:	880b883a 	mov	r5,r17
  804ab4:	100d883a 	mov	r6,r2
  804ab8:	102d883a 	mov	r22,r2
  804abc:	e7000044 	addi	fp,fp,1
  804ac0:	080a7740 	call	80a774 <__ltdf2>
  804ac4:	103fc30e 	bge	r2,zero,8049d4 <_dtoa_r+0x1064>
  804ac8:	d9000417 	ldw	r4,16(sp)
  804acc:	d9000d15 	stw	r4,52(sp)
  804ad0:	003d7106 	br	804098 <_dtoa_r+0x728>
  804ad4:	d9801717 	ldw	r6,92(sp)
  804ad8:	00800084 	movi	r2,2
  804adc:	11bde60e 	bge	r2,r6,804278 <_dtoa_r+0x908>
  804ae0:	203cfb1e 	bne	r4,zero,803ed0 <_dtoa_r+0x560>
  804ae4:	d9001617 	ldw	r4,88(sp)
  804ae8:	900b883a 	mov	r5,r18
  804aec:	01800144 	movi	r6,5
  804af0:	000f883a 	mov	r7,zero
  804af4:	08082700 	call	808270 <__multadd>
  804af8:	d9000717 	ldw	r4,28(sp)
  804afc:	100b883a 	mov	r5,r2
  804b00:	1025883a 	mov	r18,r2
  804b04:	08077180 	call	807718 <__mcmp>
  804b08:	00bcf10e 	bge	zero,r2,803ed0 <_dtoa_r+0x560>
  804b0c:	d8c00d17 	ldw	r3,52(sp)
  804b10:	d9000517 	ldw	r4,20(sp)
  804b14:	d8000615 	stw	zero,24(sp)
  804b18:	18c00044 	addi	r3,r3,1
  804b1c:	d8c00d15 	stw	r3,52(sp)
  804b20:	00800c44 	movi	r2,49
  804b24:	27000044 	addi	fp,r4,1
  804b28:	20800005 	stb	r2,0(r4)
  804b2c:	003e8906 	br	804554 <_dtoa_r+0xbe4>
  804b30:	d8c00517 	ldw	r3,20(sp)
  804b34:	003bc206 	br	803a40 <_dtoa_r+0xd0>
  804b38:	01802074 	movhi	r6,129
  804b3c:	31b2a204 	addi	r6,r6,-13688
  804b40:	30c00917 	ldw	r3,36(r6)
  804b44:	30800817 	ldw	r2,32(r6)
  804b48:	d9001217 	ldw	r4,72(sp)
  804b4c:	d9401317 	ldw	r5,76(sp)
  804b50:	180f883a 	mov	r7,r3
  804b54:	100d883a 	mov	r6,r2
  804b58:	080a2fc0 	call	80a2fc <__divdf3>
  804b5c:	948003cc 	andi	r18,r18,15
  804b60:	058000c4 	movi	r22,3
  804b64:	1029883a 	mov	r20,r2
  804b68:	182b883a 	mov	r21,r3
  804b6c:	003c8906 	br	803d94 <_dtoa_r+0x424>
  804b70:	d9001017 	ldw	r4,64(sp)
  804b74:	d9800917 	ldw	r6,36(sp)
  804b78:	0025883a 	mov	r18,zero
  804b7c:	1105c83a 	sub	r2,r2,r4
  804b80:	2089883a 	add	r4,r4,r2
  804b84:	308d883a 	add	r6,r6,r2
  804b88:	d9001015 	stw	r4,64(sp)
  804b8c:	d9800915 	stw	r6,36(sp)
  804b90:	003e3206 	br	80445c <_dtoa_r+0xaec>
  804b94:	28800044 	addi	r2,r5,1
  804b98:	27000044 	addi	fp,r4,1
  804b9c:	20800005 	stb	r2,0(r4)
  804ba0:	003e6c06 	br	804554 <_dtoa_r+0xbe4>
  804ba4:	d8800f17 	ldw	r2,60(sp)
  804ba8:	00bce016 	blt	zero,r2,803f2c <_dtoa_r+0x5bc>
  804bac:	d9800f17 	ldw	r6,60(sp)
  804bb0:	303cc51e 	bne	r6,zero,803ec8 <_dtoa_r+0x558>
  804bb4:	0005883a 	mov	r2,zero
  804bb8:	00d00534 	movhi	r3,16404
  804bbc:	980b883a 	mov	r5,r19
  804bc0:	180f883a 	mov	r7,r3
  804bc4:	9009883a 	mov	r4,r18
  804bc8:	100d883a 	mov	r6,r2
  804bcc:	0809f380 	call	809f38 <__muldf3>
  804bd0:	180b883a 	mov	r5,r3
  804bd4:	a80f883a 	mov	r7,r21
  804bd8:	1009883a 	mov	r4,r2
  804bdc:	a00d883a 	mov	r6,r20
  804be0:	080a6ec0 	call	80a6ec <__gedf2>
  804be4:	103cb80e 	bge	r2,zero,803ec8 <_dtoa_r+0x558>
  804be8:	0027883a 	mov	r19,zero
  804bec:	0025883a 	mov	r18,zero
  804bf0:	003fc606 	br	804b0c <_dtoa_r+0x119c>
  804bf4:	99400117 	ldw	r5,4(r19)
  804bf8:	d9001617 	ldw	r4,88(sp)
  804bfc:	0807b3c0 	call	807b3c <_Balloc>
  804c00:	99800417 	ldw	r6,16(r19)
  804c04:	11000304 	addi	r4,r2,12
  804c08:	99400304 	addi	r5,r19,12
  804c0c:	318d883a 	add	r6,r6,r6
  804c10:	318d883a 	add	r6,r6,r6
  804c14:	31800204 	addi	r6,r6,8
  804c18:	1023883a 	mov	r17,r2
  804c1c:	08073a40 	call	8073a4 <memcpy>
  804c20:	d9001617 	ldw	r4,88(sp)
  804c24:	880b883a 	mov	r5,r17
  804c28:	01800044 	movi	r6,1
  804c2c:	0807f000 	call	807f00 <__lshift>
  804c30:	100b883a 	mov	r5,r2
  804c34:	003d9c06 	br	8042a8 <_dtoa_r+0x938>
  804c38:	00800e44 	movi	r2,57
  804c3c:	b8807026 	beq	r23,r2,804e00 <_dtoa_r+0x1490>
  804c40:	b8800044 	addi	r2,r23,1
  804c44:	b7000044 	addi	fp,r22,1
  804c48:	b0800005 	stb	r2,0(r22)
  804c4c:	003e4106 	br	804554 <_dtoa_r+0xbe4>
  804c50:	d8800317 	ldw	r2,12(sp)
  804c54:	01802074 	movhi	r6,129
  804c58:	31b27004 	addi	r6,r6,-13888
  804c5c:	b009883a 	mov	r4,r22
  804c60:	100e90fa 	slli	r7,r2,3
  804c64:	b80b883a 	mov	r5,r23
  804c68:	398f883a 	add	r7,r7,r6
  804c6c:	38bffe17 	ldw	r2,-8(r7)
  804c70:	d9800517 	ldw	r6,20(sp)
  804c74:	38ffff17 	ldw	r3,-4(r7)
  804c78:	37000044 	addi	fp,r6,1
  804c7c:	180f883a 	mov	r7,r3
  804c80:	100d883a 	mov	r6,r2
  804c84:	0809f380 	call	809f38 <__muldf3>
  804c88:	a80b883a 	mov	r5,r21
  804c8c:	a009883a 	mov	r4,r20
  804c90:	182f883a 	mov	r23,r3
  804c94:	102d883a 	mov	r22,r2
  804c98:	080a97c0 	call	80a97c <__fixdfsi>
  804c9c:	1009883a 	mov	r4,r2
  804ca0:	1027883a 	mov	r19,r2
  804ca4:	080a8840 	call	80a884 <__floatsidf>
  804ca8:	a80b883a 	mov	r5,r21
  804cac:	a009883a 	mov	r4,r20
  804cb0:	180f883a 	mov	r7,r3
  804cb4:	100d883a 	mov	r6,r2
  804cb8:	08009040 	call	800904 <__subdf3>
  804cbc:	180b883a 	mov	r5,r3
  804cc0:	d8c00517 	ldw	r3,20(sp)
  804cc4:	9cc00c04 	addi	r19,r19,48
  804cc8:	1009883a 	mov	r4,r2
  804ccc:	1cc00005 	stb	r19,0(r3)
  804cd0:	2021883a 	mov	r16,r4
  804cd4:	d9000317 	ldw	r4,12(sp)
  804cd8:	00800044 	movi	r2,1
  804cdc:	2823883a 	mov	r17,r5
  804ce0:	20802226 	beq	r4,r2,804d6c <_dtoa_r+0x13fc>
  804ce4:	1029883a 	mov	r20,r2
  804ce8:	0005883a 	mov	r2,zero
  804cec:	00d00934 	movhi	r3,16420
  804cf0:	180f883a 	mov	r7,r3
  804cf4:	100d883a 	mov	r6,r2
  804cf8:	880b883a 	mov	r5,r17
  804cfc:	8009883a 	mov	r4,r16
  804d00:	0809f380 	call	809f38 <__muldf3>
  804d04:	180b883a 	mov	r5,r3
  804d08:	1009883a 	mov	r4,r2
  804d0c:	1823883a 	mov	r17,r3
  804d10:	1021883a 	mov	r16,r2
  804d14:	080a97c0 	call	80a97c <__fixdfsi>
  804d18:	1009883a 	mov	r4,r2
  804d1c:	102b883a 	mov	r21,r2
  804d20:	080a8840 	call	80a884 <__floatsidf>
  804d24:	880b883a 	mov	r5,r17
  804d28:	8009883a 	mov	r4,r16
  804d2c:	180f883a 	mov	r7,r3
  804d30:	100d883a 	mov	r6,r2
  804d34:	08009040 	call	800904 <__subdf3>
  804d38:	180b883a 	mov	r5,r3
  804d3c:	d8c00517 	ldw	r3,20(sp)
  804d40:	1009883a 	mov	r4,r2
  804d44:	ad400c04 	addi	r21,r21,48
  804d48:	1d05883a 	add	r2,r3,r20
  804d4c:	15400005 	stb	r21,0(r2)
  804d50:	2021883a 	mov	r16,r4
  804d54:	d9000317 	ldw	r4,12(sp)
  804d58:	a5000044 	addi	r20,r20,1
  804d5c:	2823883a 	mov	r17,r5
  804d60:	a13fe11e 	bne	r20,r4,804ce8 <_dtoa_r+0x1378>
  804d64:	e505883a 	add	r2,fp,r20
  804d68:	173fffc4 	addi	fp,r2,-1
  804d6c:	0025883a 	mov	r18,zero
  804d70:	04cff834 	movhi	r19,16352
  804d74:	b009883a 	mov	r4,r22
  804d78:	b80b883a 	mov	r5,r23
  804d7c:	900d883a 	mov	r6,r18
  804d80:	980f883a 	mov	r7,r19
  804d84:	08009840 	call	800984 <__adddf3>
  804d88:	180b883a 	mov	r5,r3
  804d8c:	1009883a 	mov	r4,r2
  804d90:	800d883a 	mov	r6,r16
  804d94:	880f883a 	mov	r7,r17
  804d98:	080a7740 	call	80a774 <__ltdf2>
  804d9c:	103cab16 	blt	r2,zero,80404c <_dtoa_r+0x6dc>
  804da0:	0009883a 	mov	r4,zero
  804da4:	980b883a 	mov	r5,r19
  804da8:	b80f883a 	mov	r7,r23
  804dac:	b00d883a 	mov	r6,r22
  804db0:	08009040 	call	800904 <__subdf3>
  804db4:	180b883a 	mov	r5,r3
  804db8:	880f883a 	mov	r7,r17
  804dbc:	1009883a 	mov	r4,r2
  804dc0:	800d883a 	mov	r6,r16
  804dc4:	080a6640 	call	80a664 <__gtdf2>
  804dc8:	00bc470e 	bge	zero,r2,803ee8 <_dtoa_r+0x578>
  804dcc:	00c00c04 	movi	r3,48
  804dd0:	e73fffc4 	addi	fp,fp,-1
  804dd4:	e0800007 	ldb	r2,0(fp)
  804dd8:	10fffd26 	beq	r2,r3,804dd0 <_dtoa_r+0x1460>
  804ddc:	d9800417 	ldw	r6,16(sp)
  804de0:	e7000044 	addi	fp,fp,1
  804de4:	d9800d15 	stw	r6,52(sp)
  804de8:	003cab06 	br	804098 <_dtoa_r+0x728>
  804dec:	d8c00f17 	ldw	r3,60(sp)
  804df0:	d9001117 	ldw	r4,68(sp)
  804df4:	20e1c83a 	sub	r16,r4,r3
  804df8:	0007883a 	mov	r3,zero
  804dfc:	003d9b06 	br	80446c <_dtoa_r+0xafc>
  804e00:	00800e44 	movi	r2,57
  804e04:	b0800005 	stb	r2,0(r22)
  804e08:	b5800044 	addi	r22,r22,1
  804e0c:	003dc106 	br	804514 <_dtoa_r+0xba4>
  804e10:	05800084 	movi	r22,2
  804e14:	003bf706 	br	803df4 <_dtoa_r+0x484>
  804e18:	d9000f17 	ldw	r4,60(sp)
  804e1c:	013c000e 	bge	zero,r4,803e20 <_dtoa_r+0x4b0>
  804e20:	d9800e17 	ldw	r6,56(sp)
  804e24:	01bc300e 	bge	zero,r6,803ee8 <_dtoa_r+0x578>
  804e28:	0005883a 	mov	r2,zero
  804e2c:	00d00934 	movhi	r3,16420
  804e30:	a80b883a 	mov	r5,r21
  804e34:	180f883a 	mov	r7,r3
  804e38:	a009883a 	mov	r4,r20
  804e3c:	100d883a 	mov	r6,r2
  804e40:	0809f380 	call	809f38 <__muldf3>
  804e44:	b1000044 	addi	r4,r22,1
  804e48:	1021883a 	mov	r16,r2
  804e4c:	1823883a 	mov	r17,r3
  804e50:	080a8840 	call	80a884 <__floatsidf>
  804e54:	880b883a 	mov	r5,r17
  804e58:	8009883a 	mov	r4,r16
  804e5c:	180f883a 	mov	r7,r3
  804e60:	100d883a 	mov	r6,r2
  804e64:	0809f380 	call	809f38 <__muldf3>
  804e68:	0011883a 	mov	r8,zero
  804e6c:	02500734 	movhi	r9,16412
  804e70:	180b883a 	mov	r5,r3
  804e74:	480f883a 	mov	r7,r9
  804e78:	1009883a 	mov	r4,r2
  804e7c:	400d883a 	mov	r6,r8
  804e80:	08009840 	call	800984 <__adddf3>
  804e84:	102d883a 	mov	r22,r2
  804e88:	00bf3034 	movhi	r2,64704
  804e8c:	10ef883a 	add	r23,r2,r3
  804e90:	d8800d17 	ldw	r2,52(sp)
  804e94:	d8c00e17 	ldw	r3,56(sp)
  804e98:	8029883a 	mov	r20,r16
  804e9c:	10bfffc4 	addi	r2,r2,-1
  804ea0:	882b883a 	mov	r21,r17
  804ea4:	d8800415 	stw	r2,16(sp)
  804ea8:	d8c00315 	stw	r3,12(sp)
  804eac:	003e8306 	br	8048bc <_dtoa_r+0xf4c>
  804eb0:	d8800117 	ldw	r2,4(sp)
  804eb4:	dc001117 	ldw	r16,68(sp)
  804eb8:	dc801017 	ldw	r18,64(sp)
  804ebc:	00c00d84 	movi	r3,54
  804ec0:	1887c83a 	sub	r3,r3,r2
  804ec4:	003d6906 	br	80446c <_dtoa_r+0xafc>
  804ec8:	01800044 	movi	r6,1
  804ecc:	3021883a 	mov	r16,r6
  804ed0:	d9800f15 	stw	r6,60(sp)
  804ed4:	d9802615 	stw	r6,152(sp)
  804ed8:	d9800e15 	stw	r6,56(sp)
  804edc:	003b9306 	br	803d2c <_dtoa_r+0x3bc>
  804ee0:	b021883a 	mov	r16,r22
  804ee4:	dd800f15 	stw	r22,60(sp)
  804ee8:	003b9006 	br	803d2c <_dtoa_r+0x3bc>
  804eec:	103e221e 	bne	r2,zero,804778 <_dtoa_r+0xe08>
  804ef0:	b880004c 	andi	r2,r23,1
  804ef4:	1005003a 	cmpeq	r2,r2,zero
  804ef8:	103e1f1e 	bne	r2,zero,804778 <_dtoa_r+0xe08>
  804efc:	003e1b06 	br	80476c <_dtoa_r+0xdfc>
  804f00:	d9001617 	ldw	r4,88(sp)
  804f04:	980b883a 	mov	r5,r19
  804f08:	01800284 	movi	r6,10
  804f0c:	000f883a 	mov	r7,zero
  804f10:	08082700 	call	808270 <__multadd>
  804f14:	d8c00e17 	ldw	r3,56(sp)
  804f18:	1027883a 	mov	r19,r2
  804f1c:	d8c00f15 	stw	r3,60(sp)
  804f20:	003cd306 	br	804270 <_dtoa_r+0x900>

00804f24 <print_e>:
  804f24:	defff404 	addi	sp,sp,-48
  804f28:	dcc00a15 	stw	r19,40(sp)
  804f2c:	dcc00c17 	ldw	r19,48(sp)
  804f30:	3005883a 	mov	r2,r6
  804f34:	dc400815 	stw	r17,32(sp)
  804f38:	2823883a 	mov	r17,r5
  804f3c:	100b883a 	mov	r5,r2
  804f40:	d8800604 	addi	r2,sp,24
  804f44:	380d883a 	mov	r6,r7
  804f48:	9a000044 	addi	r8,r19,1
  804f4c:	d8800115 	stw	r2,4(sp)
  804f50:	d8c00504 	addi	r3,sp,20
  804f54:	d8800404 	addi	r2,sp,16
  804f58:	01c00084 	movi	r7,2
  804f5c:	dc800915 	stw	r18,36(sp)
  804f60:	dc000715 	stw	r16,28(sp)
  804f64:	dfc00b15 	stw	ra,44(sp)
  804f68:	da000015 	stw	r8,0(sp)
  804f6c:	d8c00315 	stw	r3,12(sp)
  804f70:	d8800215 	stw	r2,8(sp)
  804f74:	dc800d03 	ldbu	r18,52(sp)
  804f78:	08039700 	call	803970 <_dtoa_r>
  804f7c:	dc000617 	ldw	r16,24(sp)
  804f80:	100b883a 	mov	r5,r2
  804f84:	0089c3c4 	movi	r2,9999
  804f88:	80805926 	beq	r16,r2,8050f0 <print_e+0x1cc>
  804f8c:	28c00003 	ldbu	r3,0(r5)
  804f90:	89000044 	addi	r4,r17,1
  804f94:	29400044 	addi	r5,r5,1
  804f98:	88c00005 	stb	r3,0(r17)
  804f9c:	d8800e17 	ldw	r2,56(sp)
  804fa0:	10004326 	beq	r2,zero,8050b0 <print_e+0x18c>
  804fa4:	00800b84 	movi	r2,46
  804fa8:	20800005 	stb	r2,0(r4)
  804fac:	9811883a 	mov	r8,r19
  804fb0:	21000044 	addi	r4,r4,1
  804fb4:	28800003 	ldbu	r2,0(r5)
  804fb8:	10000926 	beq	r2,zero,804fe0 <print_e+0xbc>
  804fbc:	02000216 	blt	zero,r8,804fc8 <print_e+0xa4>
  804fc0:	00000706 	br	804fe0 <print_e+0xbc>
  804fc4:	40000626 	beq	r8,zero,804fe0 <print_e+0xbc>
  804fc8:	20800005 	stb	r2,0(r4)
  804fcc:	29400044 	addi	r5,r5,1
  804fd0:	28800003 	ldbu	r2,0(r5)
  804fd4:	423fffc4 	addi	r8,r8,-1
  804fd8:	21000044 	addi	r4,r4,1
  804fdc:	103ff91e 	bne	r2,zero,804fc4 <print_e+0xa0>
  804fe0:	90c03fcc 	andi	r3,r18,255
  804fe4:	18c0201c 	xori	r3,r3,128
  804fe8:	18ffe004 	addi	r3,r3,-128
  804fec:	008019c4 	movi	r2,103
  804ff0:	18803226 	beq	r3,r2,8050bc <print_e+0x198>
  804ff4:	008011c4 	movi	r2,71
  804ff8:	18803b26 	beq	r3,r2,8050e8 <print_e+0x1c4>
  804ffc:	0200080e 	bge	zero,r8,805020 <print_e+0xfc>
  805000:	2007883a 	mov	r3,r4
  805004:	4005883a 	mov	r2,r8
  805008:	01400c04 	movi	r5,48
  80500c:	10bfffc4 	addi	r2,r2,-1
  805010:	19400005 	stb	r5,0(r3)
  805014:	18c00044 	addi	r3,r3,1
  805018:	103ffc1e 	bne	r2,zero,80500c <print_e+0xe8>
  80501c:	2209883a 	add	r4,r4,r8
  805020:	843fffc4 	addi	r16,r16,-1
  805024:	24800005 	stb	r18,0(r4)
  805028:	dc000615 	stw	r16,24(sp)
  80502c:	80002816 	blt	r16,zero,8050d0 <print_e+0x1ac>
  805030:	00800ac4 	movi	r2,43
  805034:	20800045 	stb	r2,1(r4)
  805038:	24400084 	addi	r17,r4,2
  80503c:	008018c4 	movi	r2,99
  805040:	1400090e 	bge	r2,r16,805068 <print_e+0x144>
  805044:	8009883a 	mov	r4,r16
  805048:	01401904 	movi	r5,100
  80504c:	080aad00 	call	80aad0 <__divsi3>
  805050:	10c01924 	muli	r3,r2,100
  805054:	10800c04 	addi	r2,r2,48
  805058:	88800005 	stb	r2,0(r17)
  80505c:	80e1c83a 	sub	r16,r16,r3
  805060:	8c400044 	addi	r17,r17,1
  805064:	dc000615 	stw	r16,24(sp)
  805068:	8009883a 	mov	r4,r16
  80506c:	01400284 	movi	r5,10
  805070:	080aad00 	call	80aad0 <__divsi3>
  805074:	10c002a4 	muli	r3,r2,10
  805078:	10800c04 	addi	r2,r2,48
  80507c:	88800005 	stb	r2,0(r17)
  805080:	80c7c83a 	sub	r3,r16,r3
  805084:	18800c04 	addi	r2,r3,48
  805088:	88800045 	stb	r2,1(r17)
  80508c:	88000085 	stb	zero,2(r17)
  805090:	d8c00615 	stw	r3,24(sp)
  805094:	dfc00b17 	ldw	ra,44(sp)
  805098:	dcc00a17 	ldw	r19,40(sp)
  80509c:	dc800917 	ldw	r18,36(sp)
  8050a0:	dc400817 	ldw	r17,32(sp)
  8050a4:	dc000717 	ldw	r16,28(sp)
  8050a8:	dec00c04 	addi	sp,sp,48
  8050ac:	f800283a 	ret
  8050b0:	983fbc1e 	bne	r19,zero,804fa4 <print_e+0x80>
  8050b4:	0011883a 	mov	r8,zero
  8050b8:	003fbe06 	br	804fb4 <print_e+0x90>
  8050bc:	04801944 	movi	r18,101
  8050c0:	843fffc4 	addi	r16,r16,-1
  8050c4:	24800005 	stb	r18,0(r4)
  8050c8:	dc000615 	stw	r16,24(sp)
  8050cc:	803fd80e 	bge	r16,zero,805030 <print_e+0x10c>
  8050d0:	00800b44 	movi	r2,45
  8050d4:	0421c83a 	sub	r16,zero,r16
  8050d8:	20800045 	stb	r2,1(r4)
  8050dc:	24400084 	addi	r17,r4,2
  8050e0:	dc000615 	stw	r16,24(sp)
  8050e4:	003fd506 	br	80503c <print_e+0x118>
  8050e8:	04801144 	movi	r18,69
  8050ec:	003fcc06 	br	805020 <print_e+0xfc>
  8050f0:	8809883a 	mov	r4,r17
  8050f4:	0808e8c0 	call	808e8c <strcpy>
  8050f8:	dfc00b17 	ldw	ra,44(sp)
  8050fc:	dcc00a17 	ldw	r19,40(sp)
  805100:	dc800917 	ldw	r18,36(sp)
  805104:	dc400817 	ldw	r17,32(sp)
  805108:	dc000717 	ldw	r16,28(sp)
  80510c:	dec00c04 	addi	sp,sp,48
  805110:	f800283a 	ret

00805114 <_gcvt>:
  805114:	defff104 	addi	sp,sp,-60
  805118:	dc400815 	stw	r17,32(sp)
  80511c:	0005883a 	mov	r2,zero
  805120:	3023883a 	mov	r17,r6
  805124:	dcc00a15 	stw	r19,40(sp)
  805128:	dc800915 	stw	r18,36(sp)
  80512c:	dc000715 	stw	r16,28(sp)
  805130:	2027883a 	mov	r19,r4
  805134:	2821883a 	mov	r16,r5
  805138:	3825883a 	mov	r18,r7
  80513c:	2809883a 	mov	r4,r5
  805140:	100d883a 	mov	r6,r2
  805144:	880b883a 	mov	r5,r17
  805148:	000f883a 	mov	r7,zero
  80514c:	dd800d15 	stw	r22,52(sp)
  805150:	dd400c15 	stw	r21,48(sp)
  805154:	dd000b15 	stw	r20,44(sp)
  805158:	dfc00e15 	stw	ra,56(sp)
  80515c:	dd400f17 	ldw	r21,60(sp)
  805160:	dd801117 	ldw	r22,68(sp)
  805164:	dd001003 	ldbu	r20,64(sp)
  805168:	080a7740 	call	80a774 <__ltdf2>
  80516c:	10008e16 	blt	r2,zero,8053a8 <_gcvt+0x294>
  805170:	000d883a 	mov	r6,zero
  805174:	000f883a 	mov	r7,zero
  805178:	8009883a 	mov	r4,r16
  80517c:	880b883a 	mov	r5,r17
  805180:	080a5540 	call	80a554 <__eqdf2>
  805184:	10000e1e 	bne	r2,zero,8051c0 <_gcvt+0xac>
  805188:	00800c04 	movi	r2,48
  80518c:	a8800005 	stb	r2,0(r21)
  805190:	a8000045 	stb	zero,1(r21)
  805194:	a805883a 	mov	r2,r21
  805198:	dfc00e17 	ldw	ra,56(sp)
  80519c:	dd800d17 	ldw	r22,52(sp)
  8051a0:	dd400c17 	ldw	r21,48(sp)
  8051a4:	dd000b17 	ldw	r20,44(sp)
  8051a8:	dcc00a17 	ldw	r19,40(sp)
  8051ac:	dc800917 	ldw	r18,36(sp)
  8051b0:	dc400817 	ldw	r17,32(sp)
  8051b4:	dc000717 	ldw	r16,28(sp)
  8051b8:	dec00f04 	addi	sp,sp,60
  8051bc:	f800283a 	ret
  8051c0:	00bac734 	movhi	r2,60188
  8051c4:	1090cb44 	addi	r2,r2,17197
  8051c8:	00cfc6b4 	movhi	r3,16154
  8051cc:	18cdb884 	addi	r3,r3,14050
  8051d0:	180f883a 	mov	r7,r3
  8051d4:	8009883a 	mov	r4,r16
  8051d8:	880b883a 	mov	r5,r17
  8051dc:	100d883a 	mov	r6,r2
  8051e0:	080a7fc0 	call	80a7fc <__ledf2>
  8051e4:	00800d16 	blt	zero,r2,80521c <_gcvt+0x108>
  8051e8:	a0c03fcc 	andi	r3,r20,255
  8051ec:	18c0201c 	xori	r3,r3,128
  8051f0:	90bfffc4 	addi	r2,r18,-1
  8051f4:	18ffe004 	addi	r3,r3,-128
  8051f8:	9809883a 	mov	r4,r19
  8051fc:	880f883a 	mov	r7,r17
  805200:	a80b883a 	mov	r5,r21
  805204:	800d883a 	mov	r6,r16
  805208:	d8800015 	stw	r2,0(sp)
  80520c:	d8c00115 	stw	r3,4(sp)
  805210:	dd800215 	stw	r22,8(sp)
  805214:	0804f240 	call	804f24 <print_e>
  805218:	003fde06 	br	805194 <_gcvt+0x80>
  80521c:	9009883a 	mov	r4,r18
  805220:	08079c80 	call	8079c8 <_mprec_log10>
  805224:	180f883a 	mov	r7,r3
  805228:	8009883a 	mov	r4,r16
  80522c:	880b883a 	mov	r5,r17
  805230:	100d883a 	mov	r6,r2
  805234:	080a6ec0 	call	80a6ec <__gedf2>
  805238:	103feb0e 	bge	r2,zero,8051e8 <_gcvt+0xd4>
  80523c:	0005883a 	mov	r2,zero
  805240:	00cffc34 	movhi	r3,16368
  805244:	180f883a 	mov	r7,r3
  805248:	8009883a 	mov	r4,r16
  80524c:	880b883a 	mov	r5,r17
  805250:	100d883a 	mov	r6,r2
  805254:	080a7740 	call	80a774 <__ltdf2>
  805258:	10005616 	blt	r2,zero,8053b4 <_gcvt+0x2a0>
  80525c:	9809883a 	mov	r4,r19
  805260:	880d883a 	mov	r6,r17
  805264:	800b883a 	mov	r5,r16
  805268:	01c00084 	movi	r7,2
  80526c:	d8800504 	addi	r2,sp,20
  805270:	d8800215 	stw	r2,8(sp)
  805274:	d8c00604 	addi	r3,sp,24
  805278:	d8800404 	addi	r2,sp,16
  80527c:	d8c00315 	stw	r3,12(sp)
  805280:	dc800015 	stw	r18,0(sp)
  805284:	d8800115 	stw	r2,4(sp)
  805288:	08039700 	call	803970 <_dtoa_r>
  80528c:	d9000417 	ldw	r4,16(sp)
  805290:	100b883a 	mov	r5,r2
  805294:	0089c3c4 	movi	r2,9999
  805298:	20804b26 	beq	r4,r2,8053c8 <_gcvt+0x2b4>
  80529c:	28800003 	ldbu	r2,0(r5)
  8052a0:	10005026 	beq	r2,zero,8053e4 <_gcvt+0x2d0>
  8052a4:	0100510e 	bge	zero,r4,8053ec <_gcvt+0x2d8>
  8052a8:	a807883a 	mov	r3,r21
  8052ac:	00000106 	br	8052b4 <_gcvt+0x1a0>
  8052b0:	0100130e 	bge	zero,r4,805300 <_gcvt+0x1ec>
  8052b4:	18800005 	stb	r2,0(r3)
  8052b8:	213fffc4 	addi	r4,r4,-1
  8052bc:	d9000415 	stw	r4,16(sp)
  8052c0:	29400044 	addi	r5,r5,1
  8052c4:	28800003 	ldbu	r2,0(r5)
  8052c8:	18c00044 	addi	r3,r3,1
  8052cc:	94bfffc4 	addi	r18,r18,-1
  8052d0:	103ff71e 	bne	r2,zero,8052b0 <_gcvt+0x19c>
  8052d4:	01000a0e 	bge	zero,r4,805300 <_gcvt+0x1ec>
  8052d8:	0480090e 	bge	zero,r18,805300 <_gcvt+0x1ec>
  8052dc:	00800c04 	movi	r2,48
  8052e0:	00000106 	br	8052e8 <_gcvt+0x1d4>
  8052e4:	90000526 	beq	r18,zero,8052fc <_gcvt+0x1e8>
  8052e8:	213fffc4 	addi	r4,r4,-1
  8052ec:	18800005 	stb	r2,0(r3)
  8052f0:	94bfffc4 	addi	r18,r18,-1
  8052f4:	18c00044 	addi	r3,r3,1
  8052f8:	013ffa16 	blt	zero,r4,8052e4 <_gcvt+0x1d0>
  8052fc:	d9000415 	stw	r4,16(sp)
  805300:	b000021e 	bne	r22,zero,80530c <_gcvt+0x1f8>
  805304:	28800007 	ldb	r2,0(r5)
  805308:	10002526 	beq	r2,zero,8053a0 <_gcvt+0x28c>
  80530c:	a8c03126 	beq	r21,r3,8053d4 <_gcvt+0x2c0>
  805310:	00800b84 	movi	r2,46
  805314:	18800005 	stb	r2,0(r3)
  805318:	18c00044 	addi	r3,r3,1
  80531c:	20000b0e 	bge	r4,zero,80534c <_gcvt+0x238>
  805320:	04800a0e 	bge	zero,r18,80534c <_gcvt+0x238>
  805324:	01800c04 	movi	r6,48
  805328:	00000106 	br	805330 <_gcvt+0x21c>
  80532c:	90000626 	beq	r18,zero,805348 <_gcvt+0x234>
  805330:	20800044 	addi	r2,r4,1
  805334:	19800005 	stb	r6,0(r3)
  805338:	94bfffc4 	addi	r18,r18,-1
  80533c:	18c00044 	addi	r3,r3,1
  805340:	1009883a 	mov	r4,r2
  805344:	103ff916 	blt	r2,zero,80532c <_gcvt+0x218>
  805348:	d8800415 	stw	r2,16(sp)
  80534c:	28800003 	ldbu	r2,0(r5)
  805350:	10000926 	beq	r2,zero,805378 <_gcvt+0x264>
  805354:	04800216 	blt	zero,r18,805360 <_gcvt+0x24c>
  805358:	00000706 	br	805378 <_gcvt+0x264>
  80535c:	90000626 	beq	r18,zero,805378 <_gcvt+0x264>
  805360:	18800005 	stb	r2,0(r3)
  805364:	29400044 	addi	r5,r5,1
  805368:	28800003 	ldbu	r2,0(r5)
  80536c:	94bfffc4 	addi	r18,r18,-1
  805370:	18c00044 	addi	r3,r3,1
  805374:	103ff91e 	bne	r2,zero,80535c <_gcvt+0x248>
  805378:	b0000926 	beq	r22,zero,8053a0 <_gcvt+0x28c>
  80537c:	0480080e 	bge	zero,r18,8053a0 <_gcvt+0x28c>
  805380:	9009883a 	mov	r4,r18
  805384:	1805883a 	mov	r2,r3
  805388:	01400c04 	movi	r5,48
  80538c:	213fffc4 	addi	r4,r4,-1
  805390:	11400005 	stb	r5,0(r2)
  805394:	10800044 	addi	r2,r2,1
  805398:	203ffc1e 	bne	r4,zero,80538c <_gcvt+0x278>
  80539c:	1c87883a 	add	r3,r3,r18
  8053a0:	18000005 	stb	zero,0(r3)
  8053a4:	003f7b06 	br	805194 <_gcvt+0x80>
  8053a8:	88e0003c 	xorhi	r3,r17,32768
  8053ac:	1823883a 	mov	r17,r3
  8053b0:	003f6f06 	br	805170 <_gcvt+0x5c>
  8053b4:	9809883a 	mov	r4,r19
  8053b8:	880d883a 	mov	r6,r17
  8053bc:	800b883a 	mov	r5,r16
  8053c0:	01c000c4 	movi	r7,3
  8053c4:	003fa906 	br	80526c <_gcvt+0x158>
  8053c8:	a809883a 	mov	r4,r21
  8053cc:	0808e8c0 	call	808e8c <strcpy>
  8053d0:	003f7006 	br	805194 <_gcvt+0x80>
  8053d4:	00800c04 	movi	r2,48
  8053d8:	a8c00044 	addi	r3,r21,1
  8053dc:	a8800005 	stb	r2,0(r21)
  8053e0:	003fcb06 	br	805310 <_gcvt+0x1fc>
  8053e4:	a807883a 	mov	r3,r21
  8053e8:	003fba06 	br	8052d4 <_gcvt+0x1c0>
  8053ec:	a807883a 	mov	r3,r21
  8053f0:	003fc306 	br	805300 <_gcvt+0x1ec>

008053f4 <_dcvt>:
  8053f4:	defff504 	addi	sp,sp,-44
  8053f8:	d8800d17 	ldw	r2,52(sp)
  8053fc:	3011883a 	mov	r8,r6
  805400:	dc800915 	stw	r18,36(sp)
  805404:	10ffeec4 	addi	r3,r2,-69
  805408:	12c03fcc 	andi	r11,r2,255
  80540c:	19803fcc 	andi	r6,r3,255
  805410:	5ac0201c 	xori	r11,r11,128
  805414:	00c00884 	movi	r3,34
  805418:	dc400815 	stw	r17,32(sp)
  80541c:	dc000715 	stw	r16,28(sp)
  805420:	dfc00a15 	stw	ra,40(sp)
  805424:	2015883a 	mov	r10,r4
  805428:	2823883a 	mov	r17,r5
  80542c:	3813883a 	mov	r9,r7
  805430:	dc000b17 	ldw	r16,44(sp)
  805434:	dc800e17 	ldw	r18,56(sp)
  805438:	5affe004 	addi	r11,r11,-128
  80543c:	19803436 	bltu	r3,r6,805510 <_dcvt+0x11c>
  805440:	3185883a 	add	r2,r6,r6
  805444:	1085883a 	add	r2,r2,r2
  805448:	00c02034 	movhi	r3,128
  80544c:	18d51704 	addi	r3,r3,21596
  805450:	10c5883a 	add	r2,r2,r3
  805454:	11000017 	ldw	r4,0(r2)
  805458:	2000683a 	jmp	r4
  80545c:	0080552c 	andhi	r2,zero,340
  805460:	00805560 	cmpeqi	r2,zero,341
  805464:	008054e8 	cmpgeui	r2,zero,339
  805468:	00805510 	cmplti	r2,zero,340
  80546c:	00805510 	cmplti	r2,zero,340
  805470:	00805510 	cmplti	r2,zero,340
  805474:	00805510 	cmplti	r2,zero,340
  805478:	00805510 	cmplti	r2,zero,340
  80547c:	00805510 	cmplti	r2,zero,340
  805480:	00805510 	cmplti	r2,zero,340
  805484:	00805510 	cmplti	r2,zero,340
  805488:	00805510 	cmplti	r2,zero,340
  80548c:	00805510 	cmplti	r2,zero,340
  805490:	00805510 	cmplti	r2,zero,340
  805494:	00805510 	cmplti	r2,zero,340
  805498:	00805510 	cmplti	r2,zero,340
  80549c:	00805510 	cmplti	r2,zero,340
  8054a0:	00805510 	cmplti	r2,zero,340
  8054a4:	00805510 	cmplti	r2,zero,340
  8054a8:	00805510 	cmplti	r2,zero,340
  8054ac:	00805510 	cmplti	r2,zero,340
  8054b0:	00805510 	cmplti	r2,zero,340
  8054b4:	00805510 	cmplti	r2,zero,340
  8054b8:	00805510 	cmplti	r2,zero,340
  8054bc:	00805510 	cmplti	r2,zero,340
  8054c0:	00805510 	cmplti	r2,zero,340
  8054c4:	00805510 	cmplti	r2,zero,340
  8054c8:	00805510 	cmplti	r2,zero,340
  8054cc:	00805510 	cmplti	r2,zero,340
  8054d0:	00805510 	cmplti	r2,zero,340
  8054d4:	00805510 	cmplti	r2,zero,340
  8054d8:	00805510 	cmplti	r2,zero,340
  8054dc:	0080552c 	andhi	r2,zero,340
  8054e0:	00805560 	cmpeqi	r2,zero,341
  8054e4:	008054e8 	cmpgeui	r2,zero,339
  8054e8:	8000011e 	bne	r16,zero,8054f0 <_dcvt+0xfc>
  8054ec:	04000044 	movi	r16,1
  8054f0:	5009883a 	mov	r4,r10
  8054f4:	480d883a 	mov	r6,r9
  8054f8:	800f883a 	mov	r7,r16
  8054fc:	400b883a 	mov	r5,r8
  805500:	dac00115 	stw	r11,4(sp)
  805504:	dc800215 	stw	r18,8(sp)
  805508:	dc400015 	stw	r17,0(sp)
  80550c:	08051140 	call	805114 <_gcvt>
  805510:	8805883a 	mov	r2,r17
  805514:	dfc00a17 	ldw	ra,40(sp)
  805518:	dc800917 	ldw	r18,36(sp)
  80551c:	dc400817 	ldw	r17,32(sp)
  805520:	dc000717 	ldw	r16,28(sp)
  805524:	dec00b04 	addi	sp,sp,44
  805528:	f800283a 	ret
  80552c:	5009883a 	mov	r4,r10
  805530:	400d883a 	mov	r6,r8
  805534:	dc000015 	stw	r16,0(sp)
  805538:	dac00115 	stw	r11,4(sp)
  80553c:	dc800215 	stw	r18,8(sp)
  805540:	0804f240 	call	804f24 <print_e>
  805544:	8805883a 	mov	r2,r17
  805548:	dfc00a17 	ldw	ra,40(sp)
  80554c:	dc800917 	ldw	r18,36(sp)
  805550:	dc400817 	ldw	r17,32(sp)
  805554:	dc000717 	ldw	r16,28(sp)
  805558:	dec00b04 	addi	sp,sp,44
  80555c:	f800283a 	ret
  805560:	80000126 	beq	r16,zero,805568 <_dcvt+0x174>
  805564:	04800044 	movi	r18,1
  805568:	d8800504 	addi	r2,sp,20
  80556c:	d8c00604 	addi	r3,sp,24
  805570:	400b883a 	mov	r5,r8
  805574:	d8800215 	stw	r2,8(sp)
  805578:	5009883a 	mov	r4,r10
  80557c:	d8800404 	addi	r2,sp,16
  805580:	480d883a 	mov	r6,r9
  805584:	01c000c4 	movi	r7,3
  805588:	d8c00315 	stw	r3,12(sp)
  80558c:	dc000015 	stw	r16,0(sp)
  805590:	d8800115 	stw	r2,4(sp)
  805594:	08039700 	call	803970 <_dtoa_r>
  805598:	d9400417 	ldw	r5,16(sp)
  80559c:	1007883a 	mov	r3,r2
  8055a0:	0089c3c4 	movi	r2,9999
  8055a4:	28804626 	beq	r5,r2,8056c0 <_dcvt+0x2cc>
  8055a8:	18800003 	ldbu	r2,0(r3)
  8055ac:	10004c26 	beq	r2,zero,8056e0 <_dcvt+0x2ec>
  8055b0:	0140120e 	bge	zero,r5,8055fc <_dcvt+0x208>
  8055b4:	8809883a 	mov	r4,r17
  8055b8:	180d883a 	mov	r6,r3
  8055bc:	00000106 	br	8055c4 <_dcvt+0x1d0>
  8055c0:	0140100e 	bge	zero,r5,805604 <_dcvt+0x210>
  8055c4:	20800005 	stb	r2,0(r4)
  8055c8:	297fffc4 	addi	r5,r5,-1
  8055cc:	31800044 	addi	r6,r6,1
  8055d0:	d9400415 	stw	r5,16(sp)
  8055d4:	30800003 	ldbu	r2,0(r6)
  8055d8:	21000044 	addi	r4,r4,1
  8055dc:	103ff81e 	bne	r2,zero,8055c0 <_dcvt+0x1cc>
  8055e0:	0140080e 	bge	zero,r5,805604 <_dcvt+0x210>
  8055e4:	00800c04 	movi	r2,48
  8055e8:	20800005 	stb	r2,0(r4)
  8055ec:	297fffc4 	addi	r5,r5,-1
  8055f0:	21000044 	addi	r4,r4,1
  8055f4:	d9400415 	stw	r5,16(sp)
  8055f8:	003ff906 	br	8055e0 <_dcvt+0x1ec>
  8055fc:	8809883a 	mov	r4,r17
  805600:	180d883a 	mov	r6,r3
  805604:	9000021e 	bne	r18,zero,805610 <_dcvt+0x21c>
  805608:	30800007 	ldb	r2,0(r6)
  80560c:	10002426 	beq	r2,zero,8056a0 <_dcvt+0x2ac>
  805610:	19802f26 	beq	r3,r6,8056d0 <_dcvt+0x2dc>
  805614:	00800b84 	movi	r2,46
  805618:	20800005 	stb	r2,0(r4)
  80561c:	21000044 	addi	r4,r4,1
  805620:	28000b0e 	bge	r5,zero,805650 <_dcvt+0x25c>
  805624:	04000216 	blt	zero,r16,805630 <_dcvt+0x23c>
  805628:	00000906 	br	805650 <_dcvt+0x25c>
  80562c:	80000826 	beq	r16,zero,805650 <_dcvt+0x25c>
  805630:	00800c04 	movi	r2,48
  805634:	28c00044 	addi	r3,r5,1
  805638:	20800005 	stb	r2,0(r4)
  80563c:	d8c00415 	stw	r3,16(sp)
  805640:	21000044 	addi	r4,r4,1
  805644:	843fffc4 	addi	r16,r16,-1
  805648:	180b883a 	mov	r5,r3
  80564c:	183ff716 	blt	r3,zero,80562c <_dcvt+0x238>
  805650:	30800003 	ldbu	r2,0(r6)
  805654:	10000926 	beq	r2,zero,80567c <_dcvt+0x288>
  805658:	04000216 	blt	zero,r16,805664 <_dcvt+0x270>
  80565c:	00001006 	br	8056a0 <_dcvt+0x2ac>
  805660:	80000f26 	beq	r16,zero,8056a0 <_dcvt+0x2ac>
  805664:	20800005 	stb	r2,0(r4)
  805668:	31800044 	addi	r6,r6,1
  80566c:	30800003 	ldbu	r2,0(r6)
  805670:	21000044 	addi	r4,r4,1
  805674:	843fffc4 	addi	r16,r16,-1
  805678:	103ff91e 	bne	r2,zero,805660 <_dcvt+0x26c>
  80567c:	0400080e 	bge	zero,r16,8056a0 <_dcvt+0x2ac>
  805680:	2007883a 	mov	r3,r4
  805684:	8005883a 	mov	r2,r16
  805688:	01400c04 	movi	r5,48
  80568c:	10bfffc4 	addi	r2,r2,-1
  805690:	19400005 	stb	r5,0(r3)
  805694:	18c00044 	addi	r3,r3,1
  805698:	103ffc1e 	bne	r2,zero,80568c <_dcvt+0x298>
  80569c:	2409883a 	add	r4,r4,r16
  8056a0:	8805883a 	mov	r2,r17
  8056a4:	20000005 	stb	zero,0(r4)
  8056a8:	dfc00a17 	ldw	ra,40(sp)
  8056ac:	dc800917 	ldw	r18,36(sp)
  8056b0:	dc400817 	ldw	r17,32(sp)
  8056b4:	dc000717 	ldw	r16,28(sp)
  8056b8:	dec00b04 	addi	sp,sp,44
  8056bc:	f800283a 	ret
  8056c0:	180b883a 	mov	r5,r3
  8056c4:	8809883a 	mov	r4,r17
  8056c8:	0808e8c0 	call	808e8c <strcpy>
  8056cc:	003f9006 	br	805510 <_dcvt+0x11c>
  8056d0:	00800c04 	movi	r2,48
  8056d4:	20800005 	stb	r2,0(r4)
  8056d8:	21000044 	addi	r4,r4,1
  8056dc:	003fcd06 	br	805614 <_dcvt+0x220>
  8056e0:	8809883a 	mov	r4,r17
  8056e4:	180d883a 	mov	r6,r3
  8056e8:	003fbd06 	br	8055e0 <_dcvt+0x1ec>

008056ec <ecvtbuf>:
  8056ec:	defff404 	addi	sp,sp,-48
  8056f0:	dc800715 	stw	r18,28(sp)
  8056f4:	dc800d17 	ldw	r18,52(sp)
  8056f8:	dd000915 	stw	r20,36(sp)
  8056fc:	dcc00815 	stw	r19,32(sp)
  805700:	dc400615 	stw	r17,24(sp)
  805704:	dc000515 	stw	r16,20(sp)
  805708:	dfc00b15 	stw	ra,44(sp)
  80570c:	dd400a15 	stw	r21,40(sp)
  805710:	2021883a 	mov	r16,r4
  805714:	2823883a 	mov	r17,r5
  805718:	3027883a 	mov	r19,r6
  80571c:	3829883a 	mov	r20,r7
  805720:	90002d26 	beq	r18,zero,8057d8 <ecvtbuf+0xec>
  805724:	05402074 	movhi	r21,129
  805728:	ad794704 	addi	r21,r21,-6884
  80572c:	d8800c17 	ldw	r2,48(sp)
  805730:	a9000017 	ldw	r4,0(r21)
  805734:	880d883a 	mov	r6,r17
  805738:	d8800215 	stw	r2,8(sp)
  80573c:	800b883a 	mov	r5,r16
  805740:	d8800404 	addi	r2,sp,16
  805744:	01c00084 	movi	r7,2
  805748:	dd000115 	stw	r20,4(sp)
  80574c:	dcc00015 	stw	r19,0(sp)
  805750:	d8800315 	stw	r2,12(sp)
  805754:	08039700 	call	803970 <_dtoa_r>
  805758:	1007883a 	mov	r3,r2
  80575c:	d8800417 	ldw	r2,16(sp)
  805760:	1880252e 	bgeu	r3,r2,8057f8 <ecvtbuf+0x10c>
  805764:	900d883a 	mov	r6,r18
  805768:	0009883a 	mov	r4,zero
  80576c:	18800003 	ldbu	r2,0(r3)
  805770:	18c00044 	addi	r3,r3,1
  805774:	21000044 	addi	r4,r4,1
  805778:	30800005 	stb	r2,0(r6)
  80577c:	d8800417 	ldw	r2,16(sp)
  805780:	31800044 	addi	r6,r6,1
  805784:	18bff936 	bltu	r3,r2,80576c <ecvtbuf+0x80>
  805788:	24c0080e 	bge	r4,r19,8057ac <ecvtbuf+0xc0>
  80578c:	9905c83a 	sub	r2,r19,r4
  805790:	3007883a 	mov	r3,r6
  805794:	1185883a 	add	r2,r2,r6
  805798:	01000c04 	movi	r4,48
  80579c:	19000005 	stb	r4,0(r3)
  8057a0:	18c00044 	addi	r3,r3,1
  8057a4:	10fffd1e 	bne	r2,r3,80579c <ecvtbuf+0xb0>
  8057a8:	100d883a 	mov	r6,r2
  8057ac:	30000005 	stb	zero,0(r6)
  8057b0:	9005883a 	mov	r2,r18
  8057b4:	dfc00b17 	ldw	ra,44(sp)
  8057b8:	dd400a17 	ldw	r21,40(sp)
  8057bc:	dd000917 	ldw	r20,36(sp)
  8057c0:	dcc00817 	ldw	r19,32(sp)
  8057c4:	dc800717 	ldw	r18,28(sp)
  8057c8:	dc400617 	ldw	r17,24(sp)
  8057cc:	dc000517 	ldw	r16,20(sp)
  8057d0:	dec00c04 	addi	sp,sp,48
  8057d4:	f800283a 	ret
  8057d8:	05402074 	movhi	r21,129
  8057dc:	ad794704 	addi	r21,r21,-6884
  8057e0:	a9000017 	ldw	r4,0(r21)
  8057e4:	20801417 	ldw	r2,80(r4)
  8057e8:	3080060e 	bge	r6,r2,805804 <ecvtbuf+0x118>
  8057ec:	a8800017 	ldw	r2,0(r21)
  8057f0:	14801517 	ldw	r18,84(r2)
  8057f4:	003fcd06 	br	80572c <ecvtbuf+0x40>
  8057f8:	900d883a 	mov	r6,r18
  8057fc:	0009883a 	mov	r4,zero
  805800:	003fe106 	br	805788 <ecvtbuf+0x9c>
  805804:	21401517 	ldw	r5,84(r4)
  805808:	34800044 	addi	r18,r6,1
  80580c:	900d883a 	mov	r6,r18
  805810:	08085b00 	call	8085b0 <_realloc_r>
  805814:	1007883a 	mov	r3,r2
  805818:	10000426 	beq	r2,zero,80582c <ecvtbuf+0x140>
  80581c:	a8800017 	ldw	r2,0(r21)
  805820:	10c01515 	stw	r3,84(r2)
  805824:	14801415 	stw	r18,80(r2)
  805828:	003ff006 	br	8057ec <ecvtbuf+0x100>
  80582c:	0005883a 	mov	r2,zero
  805830:	003fe006 	br	8057b4 <ecvtbuf+0xc8>

00805834 <fcvtbuf>:
  805834:	defff304 	addi	sp,sp,-52
  805838:	dc800715 	stw	r18,28(sp)
  80583c:	dc800e17 	ldw	r18,56(sp)
  805840:	dd800b15 	stw	r22,44(sp)
  805844:	dd000915 	stw	r20,36(sp)
  805848:	dcc00815 	stw	r19,32(sp)
  80584c:	dc400615 	stw	r17,24(sp)
  805850:	dc000515 	stw	r16,20(sp)
  805854:	dfc00c15 	stw	ra,48(sp)
  805858:	dd400a15 	stw	r21,40(sp)
  80585c:	2021883a 	mov	r16,r4
  805860:	2823883a 	mov	r17,r5
  805864:	3027883a 	mov	r19,r6
  805868:	3829883a 	mov	r20,r7
  80586c:	dd800d17 	ldw	r22,52(sp)
  805870:	90004326 	beq	r18,zero,805980 <fcvtbuf+0x14c>
  805874:	05402074 	movhi	r21,129
  805878:	ad794704 	addi	r21,r21,-6884
  80587c:	0005883a 	mov	r2,zero
  805880:	00cffc34 	movhi	r3,16368
  805884:	180f883a 	mov	r7,r3
  805888:	8009883a 	mov	r4,r16
  80588c:	880b883a 	mov	r5,r17
  805890:	100d883a 	mov	r6,r2
  805894:	080a7740 	call	80a774 <__ltdf2>
  805898:	1000080e 	bge	r2,zero,8058bc <fcvtbuf+0x88>
  80589c:	0005883a 	mov	r2,zero
  8058a0:	00effc34 	movhi	r3,49136
  8058a4:	180f883a 	mov	r7,r3
  8058a8:	8009883a 	mov	r4,r16
  8058ac:	880b883a 	mov	r5,r17
  8058b0:	100d883a 	mov	r6,r2
  8058b4:	080a6640 	call	80a664 <__gtdf2>
  8058b8:	00802c16 	blt	zero,r2,80596c <fcvtbuf+0x138>
  8058bc:	a9000017 	ldw	r4,0(r21)
  8058c0:	880d883a 	mov	r6,r17
  8058c4:	800b883a 	mov	r5,r16
  8058c8:	01c000c4 	movi	r7,3
  8058cc:	d8800404 	addi	r2,sp,16
  8058d0:	dd800215 	stw	r22,8(sp)
  8058d4:	dcc00015 	stw	r19,0(sp)
  8058d8:	dd000115 	stw	r20,4(sp)
  8058dc:	d8800315 	stw	r2,12(sp)
  8058e0:	08039700 	call	803970 <_dtoa_r>
  8058e4:	1009883a 	mov	r4,r2
  8058e8:	d8c00417 	ldw	r3,16(sp)
  8058ec:	a0800017 	ldw	r2,0(r20)
  8058f0:	008dc83a 	sub	r6,zero,r2
  8058f4:	20c02b2e 	bgeu	r4,r3,8059a4 <fcvtbuf+0x170>
  8058f8:	9007883a 	mov	r3,r18
  8058fc:	20800003 	ldbu	r2,0(r4)
  805900:	21000044 	addi	r4,r4,1
  805904:	31800044 	addi	r6,r6,1
  805908:	18800005 	stb	r2,0(r3)
  80590c:	d8800417 	ldw	r2,16(sp)
  805910:	18c00044 	addi	r3,r3,1
  805914:	20bff936 	bltu	r4,r2,8058fc <fcvtbuf+0xc8>
  805918:	34c0080e 	bge	r6,r19,80593c <fcvtbuf+0x108>
  80591c:	9985c83a 	sub	r2,r19,r6
  805920:	1809883a 	mov	r4,r3
  805924:	10c5883a 	add	r2,r2,r3
  805928:	00c00c04 	movi	r3,48
  80592c:	20c00005 	stb	r3,0(r4)
  805930:	21000044 	addi	r4,r4,1
  805934:	113ffd1e 	bne	r2,r4,80592c <fcvtbuf+0xf8>
  805938:	1007883a 	mov	r3,r2
  80593c:	18000005 	stb	zero,0(r3)
  805940:	9005883a 	mov	r2,r18
  805944:	dfc00c17 	ldw	ra,48(sp)
  805948:	dd800b17 	ldw	r22,44(sp)
  80594c:	dd400a17 	ldw	r21,40(sp)
  805950:	dd000917 	ldw	r20,36(sp)
  805954:	dcc00817 	ldw	r19,32(sp)
  805958:	dc800717 	ldw	r18,28(sp)
  80595c:	dc400617 	ldw	r17,24(sp)
  805960:	dc000517 	ldw	r16,20(sp)
  805964:	dec00d04 	addi	sp,sp,52
  805968:	f800283a 	ret
  80596c:	a9000017 	ldw	r4,0(r21)
  805970:	880d883a 	mov	r6,r17
  805974:	800b883a 	mov	r5,r16
  805978:	01c00084 	movi	r7,2
  80597c:	003fd306 	br	8058cc <fcvtbuf+0x98>
  805980:	05402074 	movhi	r21,129
  805984:	ad794704 	addi	r21,r21,-6884
  805988:	a9000017 	ldw	r4,0(r21)
  80598c:	30c008c4 	addi	r3,r6,35
  805990:	20801417 	ldw	r2,80(r4)
  805994:	1880050e 	bge	r3,r2,8059ac <fcvtbuf+0x178>
  805998:	a8800017 	ldw	r2,0(r21)
  80599c:	14801517 	ldw	r18,84(r2)
  8059a0:	003fb606 	br	80587c <fcvtbuf+0x48>
  8059a4:	9007883a 	mov	r3,r18
  8059a8:	003fdb06 	br	805918 <fcvtbuf+0xe4>
  8059ac:	21401517 	ldw	r5,84(r4)
  8059b0:	34800904 	addi	r18,r6,36
  8059b4:	900d883a 	mov	r6,r18
  8059b8:	08085b00 	call	8085b0 <_realloc_r>
  8059bc:	1007883a 	mov	r3,r2
  8059c0:	10000426 	beq	r2,zero,8059d4 <fcvtbuf+0x1a0>
  8059c4:	a8800017 	ldw	r2,0(r21)
  8059c8:	10c01515 	stw	r3,84(r2)
  8059cc:	14801415 	stw	r18,80(r2)
  8059d0:	003ff106 	br	805998 <fcvtbuf+0x164>
  8059d4:	0005883a 	mov	r2,zero
  8059d8:	003fda06 	br	805944 <fcvtbuf+0x110>

008059dc <_fflush_r>:
  8059dc:	defffb04 	addi	sp,sp,-20
  8059e0:	dcc00315 	stw	r19,12(sp)
  8059e4:	dc800215 	stw	r18,8(sp)
  8059e8:	dfc00415 	stw	ra,16(sp)
  8059ec:	dc400115 	stw	r17,4(sp)
  8059f0:	dc000015 	stw	r16,0(sp)
  8059f4:	2027883a 	mov	r19,r4
  8059f8:	2825883a 	mov	r18,r5
  8059fc:	20000226 	beq	r4,zero,805a08 <_fflush_r+0x2c>
  805a00:	20800e17 	ldw	r2,56(r4)
  805a04:	10005626 	beq	r2,zero,805b60 <_fflush_r+0x184>
  805a08:	9100030b 	ldhu	r4,12(r18)
  805a0c:	20ffffcc 	andi	r3,r4,65535
  805a10:	18e0001c 	xori	r3,r3,32768
  805a14:	18e00004 	addi	r3,r3,-32768
  805a18:	1880020c 	andi	r2,r3,8
  805a1c:	1000261e 	bne	r2,zero,805ab8 <_fflush_r+0xdc>
  805a20:	90c00117 	ldw	r3,4(r18)
  805a24:	20820014 	ori	r2,r4,2048
  805a28:	9080030d 	sth	r2,12(r18)
  805a2c:	1009883a 	mov	r4,r2
  805a30:	00c0400e 	bge	zero,r3,805b34 <_fflush_r+0x158>
  805a34:	92000a17 	ldw	r8,40(r18)
  805a38:	40004026 	beq	r8,zero,805b3c <_fflush_r+0x160>
  805a3c:	2084000c 	andi	r2,r4,4096
  805a40:	10005326 	beq	r2,zero,805b90 <_fflush_r+0x1b4>
  805a44:	94001417 	ldw	r16,80(r18)
  805a48:	9080030b 	ldhu	r2,12(r18)
  805a4c:	1080010c 	andi	r2,r2,4
  805a50:	1000481e 	bne	r2,zero,805b74 <_fflush_r+0x198>
  805a54:	91400717 	ldw	r5,28(r18)
  805a58:	9809883a 	mov	r4,r19
  805a5c:	800d883a 	mov	r6,r16
  805a60:	000f883a 	mov	r7,zero
  805a64:	403ee83a 	callr	r8
  805a68:	8080261e 	bne	r16,r2,805b04 <_fflush_r+0x128>
  805a6c:	9080030b 	ldhu	r2,12(r18)
  805a70:	91000417 	ldw	r4,16(r18)
  805a74:	90000115 	stw	zero,4(r18)
  805a78:	10bdffcc 	andi	r2,r2,63487
  805a7c:	10ffffcc 	andi	r3,r2,65535
  805a80:	18c4000c 	andi	r3,r3,4096
  805a84:	9080030d 	sth	r2,12(r18)
  805a88:	91000015 	stw	r4,0(r18)
  805a8c:	18002b26 	beq	r3,zero,805b3c <_fflush_r+0x160>
  805a90:	0007883a 	mov	r3,zero
  805a94:	1805883a 	mov	r2,r3
  805a98:	94001415 	stw	r16,80(r18)
  805a9c:	dfc00417 	ldw	ra,16(sp)
  805aa0:	dcc00317 	ldw	r19,12(sp)
  805aa4:	dc800217 	ldw	r18,8(sp)
  805aa8:	dc400117 	ldw	r17,4(sp)
  805aac:	dc000017 	ldw	r16,0(sp)
  805ab0:	dec00504 	addi	sp,sp,20
  805ab4:	f800283a 	ret
  805ab8:	94400417 	ldw	r17,16(r18)
  805abc:	88001f26 	beq	r17,zero,805b3c <_fflush_r+0x160>
  805ac0:	90800017 	ldw	r2,0(r18)
  805ac4:	18c000cc 	andi	r3,r3,3
  805ac8:	94400015 	stw	r17,0(r18)
  805acc:	1461c83a 	sub	r16,r2,r17
  805ad0:	18002526 	beq	r3,zero,805b68 <_fflush_r+0x18c>
  805ad4:	0005883a 	mov	r2,zero
  805ad8:	90800215 	stw	r2,8(r18)
  805adc:	0400170e 	bge	zero,r16,805b3c <_fflush_r+0x160>
  805ae0:	90c00917 	ldw	r3,36(r18)
  805ae4:	91400717 	ldw	r5,28(r18)
  805ae8:	880d883a 	mov	r6,r17
  805aec:	800f883a 	mov	r7,r16
  805af0:	9809883a 	mov	r4,r19
  805af4:	183ee83a 	callr	r3
  805af8:	88a3883a 	add	r17,r17,r2
  805afc:	80a1c83a 	sub	r16,r16,r2
  805b00:	00bff616 	blt	zero,r2,805adc <_fflush_r+0x100>
  805b04:	9080030b 	ldhu	r2,12(r18)
  805b08:	00ffffc4 	movi	r3,-1
  805b0c:	10801014 	ori	r2,r2,64
  805b10:	9080030d 	sth	r2,12(r18)
  805b14:	1805883a 	mov	r2,r3
  805b18:	dfc00417 	ldw	ra,16(sp)
  805b1c:	dcc00317 	ldw	r19,12(sp)
  805b20:	dc800217 	ldw	r18,8(sp)
  805b24:	dc400117 	ldw	r17,4(sp)
  805b28:	dc000017 	ldw	r16,0(sp)
  805b2c:	dec00504 	addi	sp,sp,20
  805b30:	f800283a 	ret
  805b34:	90800f17 	ldw	r2,60(r18)
  805b38:	00bfbe16 	blt	zero,r2,805a34 <_fflush_r+0x58>
  805b3c:	0007883a 	mov	r3,zero
  805b40:	1805883a 	mov	r2,r3
  805b44:	dfc00417 	ldw	ra,16(sp)
  805b48:	dcc00317 	ldw	r19,12(sp)
  805b4c:	dc800217 	ldw	r18,8(sp)
  805b50:	dc400117 	ldw	r17,4(sp)
  805b54:	dc000017 	ldw	r16,0(sp)
  805b58:	dec00504 	addi	sp,sp,20
  805b5c:	f800283a 	ret
  805b60:	0805c740 	call	805c74 <__sinit>
  805b64:	003fa806 	br	805a08 <_fflush_r+0x2c>
  805b68:	90800517 	ldw	r2,20(r18)
  805b6c:	90800215 	stw	r2,8(r18)
  805b70:	003fda06 	br	805adc <_fflush_r+0x100>
  805b74:	90800117 	ldw	r2,4(r18)
  805b78:	90c00c17 	ldw	r3,48(r18)
  805b7c:	80a1c83a 	sub	r16,r16,r2
  805b80:	183fb426 	beq	r3,zero,805a54 <_fflush_r+0x78>
  805b84:	90800f17 	ldw	r2,60(r18)
  805b88:	80a1c83a 	sub	r16,r16,r2
  805b8c:	003fb106 	br	805a54 <_fflush_r+0x78>
  805b90:	91400717 	ldw	r5,28(r18)
  805b94:	9809883a 	mov	r4,r19
  805b98:	000d883a 	mov	r6,zero
  805b9c:	01c00044 	movi	r7,1
  805ba0:	403ee83a 	callr	r8
  805ba4:	1021883a 	mov	r16,r2
  805ba8:	00bfffc4 	movi	r2,-1
  805bac:	80800226 	beq	r16,r2,805bb8 <_fflush_r+0x1dc>
  805bb0:	92000a17 	ldw	r8,40(r18)
  805bb4:	003fa406 	br	805a48 <_fflush_r+0x6c>
  805bb8:	98c00017 	ldw	r3,0(r19)
  805bbc:	00800744 	movi	r2,29
  805bc0:	18bfde26 	beq	r3,r2,805b3c <_fflush_r+0x160>
  805bc4:	9080030b 	ldhu	r2,12(r18)
  805bc8:	8007883a 	mov	r3,r16
  805bcc:	10801014 	ori	r2,r2,64
  805bd0:	9080030d 	sth	r2,12(r18)
  805bd4:	003fcf06 	br	805b14 <_fflush_r+0x138>

00805bd8 <fflush>:
  805bd8:	01402034 	movhi	r5,128
  805bdc:	29567704 	addi	r5,r5,23004
  805be0:	2007883a 	mov	r3,r4
  805be4:	20000526 	beq	r4,zero,805bfc <fflush+0x24>
  805be8:	00802074 	movhi	r2,129
  805bec:	10b94704 	addi	r2,r2,-6884
  805bf0:	11000017 	ldw	r4,0(r2)
  805bf4:	180b883a 	mov	r5,r3
  805bf8:	08059dc1 	jmpi	8059dc <_fflush_r>
  805bfc:	00802074 	movhi	r2,129
  805c00:	10b94804 	addi	r2,r2,-6880
  805c04:	11000017 	ldw	r4,0(r2)
  805c08:	08067a81 	jmpi	8067a8 <_fwalk_reent>

00805c0c <std>:
  805c0c:	00802074 	movhi	r2,129
  805c10:	10a32104 	addi	r2,r2,-29564
  805c14:	20800b15 	stw	r2,44(r4)
  805c18:	00802074 	movhi	r2,129
  805c1c:	10a35c04 	addi	r2,r2,-29328
  805c20:	20800815 	stw	r2,32(r4)
  805c24:	00c02074 	movhi	r3,129
  805c28:	18e33d04 	addi	r3,r3,-29452
  805c2c:	00802074 	movhi	r2,129
  805c30:	10a32304 	addi	r2,r2,-29556
  805c34:	2140030d 	sth	r5,12(r4)
  805c38:	2180038d 	sth	r6,14(r4)
  805c3c:	20c00915 	stw	r3,36(r4)
  805c40:	20800a15 	stw	r2,40(r4)
  805c44:	20000015 	stw	zero,0(r4)
  805c48:	20000115 	stw	zero,4(r4)
  805c4c:	20000215 	stw	zero,8(r4)
  805c50:	20000415 	stw	zero,16(r4)
  805c54:	20000515 	stw	zero,20(r4)
  805c58:	20000615 	stw	zero,24(r4)
  805c5c:	21000715 	stw	r4,28(r4)
  805c60:	f800283a 	ret

00805c64 <__sfp_lock_acquire>:
  805c64:	f800283a 	ret

00805c68 <__sfp_lock_release>:
  805c68:	f800283a 	ret

00805c6c <__sinit_lock_acquire>:
  805c6c:	f800283a 	ret

00805c70 <__sinit_lock_release>:
  805c70:	f800283a 	ret

00805c74 <__sinit>:
  805c74:	20800e17 	ldw	r2,56(r4)
  805c78:	defffd04 	addi	sp,sp,-12
  805c7c:	dc400115 	stw	r17,4(sp)
  805c80:	dc000015 	stw	r16,0(sp)
  805c84:	dfc00215 	stw	ra,8(sp)
  805c88:	04400044 	movi	r17,1
  805c8c:	01400104 	movi	r5,4
  805c90:	000d883a 	mov	r6,zero
  805c94:	2021883a 	mov	r16,r4
  805c98:	2200bb04 	addi	r8,r4,748
  805c9c:	200f883a 	mov	r7,r4
  805ca0:	10000526 	beq	r2,zero,805cb8 <__sinit+0x44>
  805ca4:	dfc00217 	ldw	ra,8(sp)
  805ca8:	dc400117 	ldw	r17,4(sp)
  805cac:	dc000017 	ldw	r16,0(sp)
  805cb0:	dec00304 	addi	sp,sp,12
  805cb4:	f800283a 	ret
  805cb8:	21000117 	ldw	r4,4(r4)
  805cbc:	00802034 	movhi	r2,128
  805cc0:	10975604 	addi	r2,r2,23896
  805cc4:	00c000c4 	movi	r3,3
  805cc8:	80800f15 	stw	r2,60(r16)
  805ccc:	80c0b915 	stw	r3,740(r16)
  805cd0:	8200ba15 	stw	r8,744(r16)
  805cd4:	84400e15 	stw	r17,56(r16)
  805cd8:	8000b815 	stw	zero,736(r16)
  805cdc:	0805c0c0 	call	805c0c <std>
  805ce0:	81000217 	ldw	r4,8(r16)
  805ce4:	880d883a 	mov	r6,r17
  805ce8:	800f883a 	mov	r7,r16
  805cec:	01400284 	movi	r5,10
  805cf0:	0805c0c0 	call	805c0c <std>
  805cf4:	81000317 	ldw	r4,12(r16)
  805cf8:	800f883a 	mov	r7,r16
  805cfc:	01400484 	movi	r5,18
  805d00:	01800084 	movi	r6,2
  805d04:	dfc00217 	ldw	ra,8(sp)
  805d08:	dc400117 	ldw	r17,4(sp)
  805d0c:	dc000017 	ldw	r16,0(sp)
  805d10:	dec00304 	addi	sp,sp,12
  805d14:	0805c0c1 	jmpi	805c0c <std>

00805d18 <__fp_lock>:
  805d18:	0005883a 	mov	r2,zero
  805d1c:	f800283a 	ret

00805d20 <__fp_unlock>:
  805d20:	0005883a 	mov	r2,zero
  805d24:	f800283a 	ret

00805d28 <__fp_unlock_all>:
  805d28:	00802074 	movhi	r2,129
  805d2c:	10b94704 	addi	r2,r2,-6884
  805d30:	11000017 	ldw	r4,0(r2)
  805d34:	01402034 	movhi	r5,128
  805d38:	29574804 	addi	r5,r5,23840
  805d3c:	08068701 	jmpi	806870 <_fwalk>

00805d40 <__fp_lock_all>:
  805d40:	00802074 	movhi	r2,129
  805d44:	10b94704 	addi	r2,r2,-6884
  805d48:	11000017 	ldw	r4,0(r2)
  805d4c:	01402034 	movhi	r5,128
  805d50:	29574604 	addi	r5,r5,23832
  805d54:	08068701 	jmpi	806870 <_fwalk>

00805d58 <_cleanup_r>:
  805d58:	01402074 	movhi	r5,129
  805d5c:	29647104 	addi	r5,r5,-28220
  805d60:	08068701 	jmpi	806870 <_fwalk>

00805d64 <_cleanup>:
  805d64:	00802074 	movhi	r2,129
  805d68:	10b94804 	addi	r2,r2,-6880
  805d6c:	11000017 	ldw	r4,0(r2)
  805d70:	0805d581 	jmpi	805d58 <_cleanup_r>

00805d74 <__sfmoreglue>:
  805d74:	defffc04 	addi	sp,sp,-16
  805d78:	dc400115 	stw	r17,4(sp)
  805d7c:	2c401724 	muli	r17,r5,92
  805d80:	dc800215 	stw	r18,8(sp)
  805d84:	2825883a 	mov	r18,r5
  805d88:	89400304 	addi	r5,r17,12
  805d8c:	dc000015 	stw	r16,0(sp)
  805d90:	dfc00315 	stw	ra,12(sp)
  805d94:	0806b800 	call	806b80 <_malloc_r>
  805d98:	0021883a 	mov	r16,zero
  805d9c:	880d883a 	mov	r6,r17
  805da0:	000b883a 	mov	r5,zero
  805da4:	10000626 	beq	r2,zero,805dc0 <__sfmoreglue+0x4c>
  805da8:	11000304 	addi	r4,r2,12
  805dac:	14800115 	stw	r18,4(r2)
  805db0:	10000015 	stw	zero,0(r2)
  805db4:	11000215 	stw	r4,8(r2)
  805db8:	1021883a 	mov	r16,r2
  805dbc:	08075240 	call	807524 <memset>
  805dc0:	8005883a 	mov	r2,r16
  805dc4:	dfc00317 	ldw	ra,12(sp)
  805dc8:	dc800217 	ldw	r18,8(sp)
  805dcc:	dc400117 	ldw	r17,4(sp)
  805dd0:	dc000017 	ldw	r16,0(sp)
  805dd4:	dec00404 	addi	sp,sp,16
  805dd8:	f800283a 	ret

00805ddc <__sfp>:
  805ddc:	defffd04 	addi	sp,sp,-12
  805de0:	00802074 	movhi	r2,129
  805de4:	10b94804 	addi	r2,r2,-6880
  805de8:	dc000015 	stw	r16,0(sp)
  805dec:	14000017 	ldw	r16,0(r2)
  805df0:	dc400115 	stw	r17,4(sp)
  805df4:	dfc00215 	stw	ra,8(sp)
  805df8:	80800e17 	ldw	r2,56(r16)
  805dfc:	2023883a 	mov	r17,r4
  805e00:	10002626 	beq	r2,zero,805e9c <__sfp+0xc0>
  805e04:	8400b804 	addi	r16,r16,736
  805e08:	80800117 	ldw	r2,4(r16)
  805e0c:	81000217 	ldw	r4,8(r16)
  805e10:	10ffffc4 	addi	r3,r2,-1
  805e14:	18000916 	blt	r3,zero,805e3c <__sfp+0x60>
  805e18:	2080030f 	ldh	r2,12(r4)
  805e1c:	10000b26 	beq	r2,zero,805e4c <__sfp+0x70>
  805e20:	017fffc4 	movi	r5,-1
  805e24:	00000206 	br	805e30 <__sfp+0x54>
  805e28:	2080030f 	ldh	r2,12(r4)
  805e2c:	10000726 	beq	r2,zero,805e4c <__sfp+0x70>
  805e30:	18ffffc4 	addi	r3,r3,-1
  805e34:	21001704 	addi	r4,r4,92
  805e38:	197ffb1e 	bne	r3,r5,805e28 <__sfp+0x4c>
  805e3c:	80800017 	ldw	r2,0(r16)
  805e40:	10001926 	beq	r2,zero,805ea8 <__sfp+0xcc>
  805e44:	1021883a 	mov	r16,r2
  805e48:	003fef06 	br	805e08 <__sfp+0x2c>
  805e4c:	00bfffc4 	movi	r2,-1
  805e50:	00c00044 	movi	r3,1
  805e54:	2080038d 	sth	r2,14(r4)
  805e58:	20c0030d 	sth	r3,12(r4)
  805e5c:	20000015 	stw	zero,0(r4)
  805e60:	20000215 	stw	zero,8(r4)
  805e64:	20000115 	stw	zero,4(r4)
  805e68:	20000415 	stw	zero,16(r4)
  805e6c:	20000515 	stw	zero,20(r4)
  805e70:	20000615 	stw	zero,24(r4)
  805e74:	20000c15 	stw	zero,48(r4)
  805e78:	20000d15 	stw	zero,52(r4)
  805e7c:	20001115 	stw	zero,68(r4)
  805e80:	20001215 	stw	zero,72(r4)
  805e84:	2005883a 	mov	r2,r4
  805e88:	dfc00217 	ldw	ra,8(sp)
  805e8c:	dc400117 	ldw	r17,4(sp)
  805e90:	dc000017 	ldw	r16,0(sp)
  805e94:	dec00304 	addi	sp,sp,12
  805e98:	f800283a 	ret
  805e9c:	8009883a 	mov	r4,r16
  805ea0:	0805c740 	call	805c74 <__sinit>
  805ea4:	003fd706 	br	805e04 <__sfp+0x28>
  805ea8:	8809883a 	mov	r4,r17
  805eac:	01400104 	movi	r5,4
  805eb0:	0805d740 	call	805d74 <__sfmoreglue>
  805eb4:	80800015 	stw	r2,0(r16)
  805eb8:	103fe21e 	bne	r2,zero,805e44 <__sfp+0x68>
  805ebc:	00800304 	movi	r2,12
  805ec0:	0009883a 	mov	r4,zero
  805ec4:	88800015 	stw	r2,0(r17)
  805ec8:	003fee06 	br	805e84 <__sfp+0xa8>

00805ecc <_malloc_trim_r>:
  805ecc:	defffb04 	addi	sp,sp,-20
  805ed0:	dcc00315 	stw	r19,12(sp)
  805ed4:	04c02074 	movhi	r19,129
  805ed8:	9cf3c304 	addi	r19,r19,-12532
  805edc:	dc800215 	stw	r18,8(sp)
  805ee0:	dc400115 	stw	r17,4(sp)
  805ee4:	dc000015 	stw	r16,0(sp)
  805ee8:	2823883a 	mov	r17,r5
  805eec:	2025883a 	mov	r18,r4
  805ef0:	dfc00415 	stw	ra,16(sp)
  805ef4:	080b0bc0 	call	80b0bc <__malloc_lock>
  805ef8:	98800217 	ldw	r2,8(r19)
  805efc:	9009883a 	mov	r4,r18
  805f00:	000b883a 	mov	r5,zero
  805f04:	10c00117 	ldw	r3,4(r2)
  805f08:	00bfff04 	movi	r2,-4
  805f0c:	18a0703a 	and	r16,r3,r2
  805f10:	8463c83a 	sub	r17,r16,r17
  805f14:	8c43fbc4 	addi	r17,r17,4079
  805f18:	8822d33a 	srli	r17,r17,12
  805f1c:	0083ffc4 	movi	r2,4095
  805f20:	8c7fffc4 	addi	r17,r17,-1
  805f24:	8822933a 	slli	r17,r17,12
  805f28:	1440060e 	bge	r2,r17,805f44 <_malloc_trim_r+0x78>
  805f2c:	0808c140 	call	808c14 <_sbrk_r>
  805f30:	98c00217 	ldw	r3,8(r19)
  805f34:	9009883a 	mov	r4,r18
  805f38:	044bc83a 	sub	r5,zero,r17
  805f3c:	80c7883a 	add	r3,r16,r3
  805f40:	10c00926 	beq	r2,r3,805f68 <_malloc_trim_r+0x9c>
  805f44:	080b0c00 	call	80b0c0 <__malloc_unlock>
  805f48:	0005883a 	mov	r2,zero
  805f4c:	dfc00417 	ldw	ra,16(sp)
  805f50:	dcc00317 	ldw	r19,12(sp)
  805f54:	dc800217 	ldw	r18,8(sp)
  805f58:	dc400117 	ldw	r17,4(sp)
  805f5c:	dc000017 	ldw	r16,0(sp)
  805f60:	dec00504 	addi	sp,sp,20
  805f64:	f800283a 	ret
  805f68:	9009883a 	mov	r4,r18
  805f6c:	0808c140 	call	808c14 <_sbrk_r>
  805f70:	844dc83a 	sub	r6,r16,r17
  805f74:	00ffffc4 	movi	r3,-1
  805f78:	9009883a 	mov	r4,r18
  805f7c:	000b883a 	mov	r5,zero
  805f80:	01c02074 	movhi	r7,129
  805f84:	39fffb04 	addi	r7,r7,-20
  805f88:	31800054 	ori	r6,r6,1
  805f8c:	10c00926 	beq	r2,r3,805fb4 <_malloc_trim_r+0xe8>
  805f90:	38800017 	ldw	r2,0(r7)
  805f94:	98c00217 	ldw	r3,8(r19)
  805f98:	9009883a 	mov	r4,r18
  805f9c:	1445c83a 	sub	r2,r2,r17
  805fa0:	38800015 	stw	r2,0(r7)
  805fa4:	19800115 	stw	r6,4(r3)
  805fa8:	080b0c00 	call	80b0c0 <__malloc_unlock>
  805fac:	00800044 	movi	r2,1
  805fb0:	003fe606 	br	805f4c <_malloc_trim_r+0x80>
  805fb4:	0808c140 	call	808c14 <_sbrk_r>
  805fb8:	99800217 	ldw	r6,8(r19)
  805fbc:	100f883a 	mov	r7,r2
  805fc0:	9009883a 	mov	r4,r18
  805fc4:	1187c83a 	sub	r3,r2,r6
  805fc8:	008003c4 	movi	r2,15
  805fcc:	19400054 	ori	r5,r3,1
  805fd0:	10ffdc0e 	bge	r2,r3,805f44 <_malloc_trim_r+0x78>
  805fd4:	00802074 	movhi	r2,129
  805fd8:	10b94c04 	addi	r2,r2,-6864
  805fdc:	10c00017 	ldw	r3,0(r2)
  805fe0:	00802074 	movhi	r2,129
  805fe4:	10bffb04 	addi	r2,r2,-20
  805fe8:	31400115 	stw	r5,4(r6)
  805fec:	38c7c83a 	sub	r3,r7,r3
  805ff0:	10c00015 	stw	r3,0(r2)
  805ff4:	003fd306 	br	805f44 <_malloc_trim_r+0x78>

00805ff8 <_free_r>:
  805ff8:	defffd04 	addi	sp,sp,-12
  805ffc:	dc400115 	stw	r17,4(sp)
  806000:	dc000015 	stw	r16,0(sp)
  806004:	dfc00215 	stw	ra,8(sp)
  806008:	2821883a 	mov	r16,r5
  80600c:	2023883a 	mov	r17,r4
  806010:	28005a26 	beq	r5,zero,80617c <_free_r+0x184>
  806014:	080b0bc0 	call	80b0bc <__malloc_lock>
  806018:	823ffe04 	addi	r8,r16,-8
  80601c:	41400117 	ldw	r5,4(r8)
  806020:	00bfff84 	movi	r2,-2
  806024:	02802074 	movhi	r10,129
  806028:	52b3c304 	addi	r10,r10,-12532
  80602c:	288e703a 	and	r7,r5,r2
  806030:	41cd883a 	add	r6,r8,r7
  806034:	30c00117 	ldw	r3,4(r6)
  806038:	51000217 	ldw	r4,8(r10)
  80603c:	00bfff04 	movi	r2,-4
  806040:	1892703a 	and	r9,r3,r2
  806044:	5017883a 	mov	r11,r10
  806048:	31006726 	beq	r6,r4,8061e8 <_free_r+0x1f0>
  80604c:	2880004c 	andi	r2,r5,1
  806050:	1005003a 	cmpeq	r2,r2,zero
  806054:	32400115 	stw	r9,4(r6)
  806058:	10001a1e 	bne	r2,zero,8060c4 <_free_r+0xcc>
  80605c:	000b883a 	mov	r5,zero
  806060:	3247883a 	add	r3,r6,r9
  806064:	18800117 	ldw	r2,4(r3)
  806068:	1080004c 	andi	r2,r2,1
  80606c:	1000231e 	bne	r2,zero,8060fc <_free_r+0x104>
  806070:	280ac03a 	cmpne	r5,r5,zero
  806074:	3a4f883a 	add	r7,r7,r9
  806078:	2800451e 	bne	r5,zero,806190 <_free_r+0x198>
  80607c:	31000217 	ldw	r4,8(r6)
  806080:	00802074 	movhi	r2,129
  806084:	10b3c504 	addi	r2,r2,-12524
  806088:	20807b26 	beq	r4,r2,806278 <_free_r+0x280>
  80608c:	30800317 	ldw	r2,12(r6)
  806090:	3a07883a 	add	r3,r7,r8
  806094:	19c00015 	stw	r7,0(r3)
  806098:	11000215 	stw	r4,8(r2)
  80609c:	20800315 	stw	r2,12(r4)
  8060a0:	38800054 	ori	r2,r7,1
  8060a4:	40800115 	stw	r2,4(r8)
  8060a8:	28001a26 	beq	r5,zero,806114 <_free_r+0x11c>
  8060ac:	8809883a 	mov	r4,r17
  8060b0:	dfc00217 	ldw	ra,8(sp)
  8060b4:	dc400117 	ldw	r17,4(sp)
  8060b8:	dc000017 	ldw	r16,0(sp)
  8060bc:	dec00304 	addi	sp,sp,12
  8060c0:	080b0c01 	jmpi	80b0c0 <__malloc_unlock>
  8060c4:	80bffe17 	ldw	r2,-8(r16)
  8060c8:	50c00204 	addi	r3,r10,8
  8060cc:	4091c83a 	sub	r8,r8,r2
  8060d0:	41000217 	ldw	r4,8(r8)
  8060d4:	388f883a 	add	r7,r7,r2
  8060d8:	20c06126 	beq	r4,r3,806260 <_free_r+0x268>
  8060dc:	40800317 	ldw	r2,12(r8)
  8060e0:	3247883a 	add	r3,r6,r9
  8060e4:	000b883a 	mov	r5,zero
  8060e8:	11000215 	stw	r4,8(r2)
  8060ec:	20800315 	stw	r2,12(r4)
  8060f0:	18800117 	ldw	r2,4(r3)
  8060f4:	1080004c 	andi	r2,r2,1
  8060f8:	103fdd26 	beq	r2,zero,806070 <_free_r+0x78>
  8060fc:	38800054 	ori	r2,r7,1
  806100:	3a07883a 	add	r3,r7,r8
  806104:	280ac03a 	cmpne	r5,r5,zero
  806108:	40800115 	stw	r2,4(r8)
  80610c:	19c00015 	stw	r7,0(r3)
  806110:	283fe61e 	bne	r5,zero,8060ac <_free_r+0xb4>
  806114:	00807fc4 	movi	r2,511
  806118:	11c01f2e 	bgeu	r2,r7,806198 <_free_r+0x1a0>
  80611c:	3806d27a 	srli	r3,r7,9
  806120:	1800481e 	bne	r3,zero,806244 <_free_r+0x24c>
  806124:	3804d0fa 	srli	r2,r7,3
  806128:	100690fa 	slli	r3,r2,3
  80612c:	1acd883a 	add	r6,r3,r11
  806130:	31400217 	ldw	r5,8(r6)
  806134:	31405926 	beq	r6,r5,80629c <_free_r+0x2a4>
  806138:	28800117 	ldw	r2,4(r5)
  80613c:	00ffff04 	movi	r3,-4
  806140:	10c4703a 	and	r2,r2,r3
  806144:	3880022e 	bgeu	r7,r2,806150 <_free_r+0x158>
  806148:	29400217 	ldw	r5,8(r5)
  80614c:	317ffa1e 	bne	r6,r5,806138 <_free_r+0x140>
  806150:	29800317 	ldw	r6,12(r5)
  806154:	41800315 	stw	r6,12(r8)
  806158:	41400215 	stw	r5,8(r8)
  80615c:	8809883a 	mov	r4,r17
  806160:	2a000315 	stw	r8,12(r5)
  806164:	32000215 	stw	r8,8(r6)
  806168:	dfc00217 	ldw	ra,8(sp)
  80616c:	dc400117 	ldw	r17,4(sp)
  806170:	dc000017 	ldw	r16,0(sp)
  806174:	dec00304 	addi	sp,sp,12
  806178:	080b0c01 	jmpi	80b0c0 <__malloc_unlock>
  80617c:	dfc00217 	ldw	ra,8(sp)
  806180:	dc400117 	ldw	r17,4(sp)
  806184:	dc000017 	ldw	r16,0(sp)
  806188:	dec00304 	addi	sp,sp,12
  80618c:	f800283a 	ret
  806190:	31000217 	ldw	r4,8(r6)
  806194:	003fbd06 	br	80608c <_free_r+0x94>
  806198:	3806d0fa 	srli	r3,r7,3
  80619c:	00800044 	movi	r2,1
  8061a0:	51400117 	ldw	r5,4(r10)
  8061a4:	180890fa 	slli	r4,r3,3
  8061a8:	1807d0ba 	srai	r3,r3,2
  8061ac:	22c9883a 	add	r4,r4,r11
  8061b0:	21800217 	ldw	r6,8(r4)
  8061b4:	10c4983a 	sll	r2,r2,r3
  8061b8:	41000315 	stw	r4,12(r8)
  8061bc:	41800215 	stw	r6,8(r8)
  8061c0:	288ab03a 	or	r5,r5,r2
  8061c4:	22000215 	stw	r8,8(r4)
  8061c8:	8809883a 	mov	r4,r17
  8061cc:	51400115 	stw	r5,4(r10)
  8061d0:	32000315 	stw	r8,12(r6)
  8061d4:	dfc00217 	ldw	ra,8(sp)
  8061d8:	dc400117 	ldw	r17,4(sp)
  8061dc:	dc000017 	ldw	r16,0(sp)
  8061e0:	dec00304 	addi	sp,sp,12
  8061e4:	080b0c01 	jmpi	80b0c0 <__malloc_unlock>
  8061e8:	2880004c 	andi	r2,r5,1
  8061ec:	3a4d883a 	add	r6,r7,r9
  8061f0:	1000071e 	bne	r2,zero,806210 <_free_r+0x218>
  8061f4:	80bffe17 	ldw	r2,-8(r16)
  8061f8:	4091c83a 	sub	r8,r8,r2
  8061fc:	41000317 	ldw	r4,12(r8)
  806200:	40c00217 	ldw	r3,8(r8)
  806204:	308d883a 	add	r6,r6,r2
  806208:	20c00215 	stw	r3,8(r4)
  80620c:	19000315 	stw	r4,12(r3)
  806210:	00802074 	movhi	r2,129
  806214:	10b94b04 	addi	r2,r2,-6868
  806218:	11000017 	ldw	r4,0(r2)
  80621c:	30c00054 	ori	r3,r6,1
  806220:	52000215 	stw	r8,8(r10)
  806224:	40c00115 	stw	r3,4(r8)
  806228:	313fa036 	bltu	r6,r4,8060ac <_free_r+0xb4>
  80622c:	00802074 	movhi	r2,129
  806230:	10bff104 	addi	r2,r2,-60
  806234:	11400017 	ldw	r5,0(r2)
  806238:	8809883a 	mov	r4,r17
  80623c:	0805ecc0 	call	805ecc <_malloc_trim_r>
  806240:	003f9a06 	br	8060ac <_free_r+0xb4>
  806244:	00800104 	movi	r2,4
  806248:	10c0072e 	bgeu	r2,r3,806268 <_free_r+0x270>
  80624c:	00800504 	movi	r2,20
  806250:	10c01936 	bltu	r2,r3,8062b8 <_free_r+0x2c0>
  806254:	188016c4 	addi	r2,r3,91
  806258:	100690fa 	slli	r3,r2,3
  80625c:	003fb306 	br	80612c <_free_r+0x134>
  806260:	01400044 	movi	r5,1
  806264:	003f7e06 	br	806060 <_free_r+0x68>
  806268:	3804d1ba 	srli	r2,r7,6
  80626c:	10800e04 	addi	r2,r2,56
  806270:	100690fa 	slli	r3,r2,3
  806274:	003fad06 	br	80612c <_free_r+0x134>
  806278:	22000315 	stw	r8,12(r4)
  80627c:	22000215 	stw	r8,8(r4)
  806280:	3a05883a 	add	r2,r7,r8
  806284:	38c00054 	ori	r3,r7,1
  806288:	11c00015 	stw	r7,0(r2)
  80628c:	41000215 	stw	r4,8(r8)
  806290:	40c00115 	stw	r3,4(r8)
  806294:	41000315 	stw	r4,12(r8)
  806298:	003f8406 	br	8060ac <_free_r+0xb4>
  80629c:	1005d0ba 	srai	r2,r2,2
  8062a0:	00c00044 	movi	r3,1
  8062a4:	51000117 	ldw	r4,4(r10)
  8062a8:	1886983a 	sll	r3,r3,r2
  8062ac:	20c8b03a 	or	r4,r4,r3
  8062b0:	51000115 	stw	r4,4(r10)
  8062b4:	003fa706 	br	806154 <_free_r+0x15c>
  8062b8:	00801504 	movi	r2,84
  8062bc:	10c00436 	bltu	r2,r3,8062d0 <_free_r+0x2d8>
  8062c0:	3804d33a 	srli	r2,r7,12
  8062c4:	10801b84 	addi	r2,r2,110
  8062c8:	100690fa 	slli	r3,r2,3
  8062cc:	003f9706 	br	80612c <_free_r+0x134>
  8062d0:	00805504 	movi	r2,340
  8062d4:	10c00436 	bltu	r2,r3,8062e8 <_free_r+0x2f0>
  8062d8:	3804d3fa 	srli	r2,r7,15
  8062dc:	10801dc4 	addi	r2,r2,119
  8062e0:	100690fa 	slli	r3,r2,3
  8062e4:	003f9106 	br	80612c <_free_r+0x134>
  8062e8:	00815504 	movi	r2,1364
  8062ec:	10c0032e 	bgeu	r2,r3,8062fc <_free_r+0x304>
  8062f0:	00801f84 	movi	r2,126
  8062f4:	00c0fc04 	movi	r3,1008
  8062f8:	003f8c06 	br	80612c <_free_r+0x134>
  8062fc:	3804d4ba 	srli	r2,r7,18
  806300:	10801f04 	addi	r2,r2,124
  806304:	100690fa 	slli	r3,r2,3
  806308:	003f8806 	br	80612c <_free_r+0x134>

0080630c <__sfvwrite_r>:
  80630c:	30800217 	ldw	r2,8(r6)
  806310:	defff504 	addi	sp,sp,-44
  806314:	df000915 	stw	fp,36(sp)
  806318:	dd800715 	stw	r22,28(sp)
  80631c:	dc800315 	stw	r18,12(sp)
  806320:	dfc00a15 	stw	ra,40(sp)
  806324:	ddc00815 	stw	r23,32(sp)
  806328:	dd400615 	stw	r21,24(sp)
  80632c:	dd000515 	stw	r20,20(sp)
  806330:	dcc00415 	stw	r19,16(sp)
  806334:	dc400215 	stw	r17,8(sp)
  806338:	dc000115 	stw	r16,4(sp)
  80633c:	302d883a 	mov	r22,r6
  806340:	2039883a 	mov	fp,r4
  806344:	2825883a 	mov	r18,r5
  806348:	10001c26 	beq	r2,zero,8063bc <__sfvwrite_r+0xb0>
  80634c:	29c0030b 	ldhu	r7,12(r5)
  806350:	3880020c 	andi	r2,r7,8
  806354:	10002726 	beq	r2,zero,8063f4 <__sfvwrite_r+0xe8>
  806358:	28800417 	ldw	r2,16(r5)
  80635c:	10002526 	beq	r2,zero,8063f4 <__sfvwrite_r+0xe8>
  806360:	3880008c 	andi	r2,r7,2
  806364:	b5400017 	ldw	r21,0(r22)
  806368:	10002826 	beq	r2,zero,80640c <__sfvwrite_r+0x100>
  80636c:	0021883a 	mov	r16,zero
  806370:	0023883a 	mov	r17,zero
  806374:	880d883a 	mov	r6,r17
  806378:	e009883a 	mov	r4,fp
  80637c:	00810004 	movi	r2,1024
  806380:	80006e26 	beq	r16,zero,80653c <__sfvwrite_r+0x230>
  806384:	800f883a 	mov	r7,r16
  806388:	91400717 	ldw	r5,28(r18)
  80638c:	1400012e 	bgeu	r2,r16,806394 <__sfvwrite_r+0x88>
  806390:	100f883a 	mov	r7,r2
  806394:	90c00917 	ldw	r3,36(r18)
  806398:	183ee83a 	callr	r3
  80639c:	1007883a 	mov	r3,r2
  8063a0:	80a1c83a 	sub	r16,r16,r2
  8063a4:	88a3883a 	add	r17,r17,r2
  8063a8:	00806d0e 	bge	zero,r2,806560 <__sfvwrite_r+0x254>
  8063ac:	b0800217 	ldw	r2,8(r22)
  8063b0:	10c5c83a 	sub	r2,r2,r3
  8063b4:	b0800215 	stw	r2,8(r22)
  8063b8:	103fee1e 	bne	r2,zero,806374 <__sfvwrite_r+0x68>
  8063bc:	0009883a 	mov	r4,zero
  8063c0:	2005883a 	mov	r2,r4
  8063c4:	dfc00a17 	ldw	ra,40(sp)
  8063c8:	df000917 	ldw	fp,36(sp)
  8063cc:	ddc00817 	ldw	r23,32(sp)
  8063d0:	dd800717 	ldw	r22,28(sp)
  8063d4:	dd400617 	ldw	r21,24(sp)
  8063d8:	dd000517 	ldw	r20,20(sp)
  8063dc:	dcc00417 	ldw	r19,16(sp)
  8063e0:	dc800317 	ldw	r18,12(sp)
  8063e4:	dc400217 	ldw	r17,8(sp)
  8063e8:	dc000117 	ldw	r16,4(sp)
  8063ec:	dec00b04 	addi	sp,sp,44
  8063f0:	f800283a 	ret
  8063f4:	080361c0 	call	80361c <__swsetup_r>
  8063f8:	1000e41e 	bne	r2,zero,80678c <__sfvwrite_r+0x480>
  8063fc:	91c0030b 	ldhu	r7,12(r18)
  806400:	b5400017 	ldw	r21,0(r22)
  806404:	3880008c 	andi	r2,r7,2
  806408:	103fd81e 	bne	r2,zero,80636c <__sfvwrite_r+0x60>
  80640c:	3880004c 	andi	r2,r7,1
  806410:	1005003a 	cmpeq	r2,r2,zero
  806414:	10005726 	beq	r2,zero,806574 <__sfvwrite_r+0x268>
  806418:	0029883a 	mov	r20,zero
  80641c:	002f883a 	mov	r23,zero
  806420:	a0004226 	beq	r20,zero,80652c <__sfvwrite_r+0x220>
  806424:	3880800c 	andi	r2,r7,512
  806428:	94000217 	ldw	r16,8(r18)
  80642c:	10008b26 	beq	r2,zero,80665c <__sfvwrite_r+0x350>
  806430:	800d883a 	mov	r6,r16
  806434:	a400a536 	bltu	r20,r16,8066cc <__sfvwrite_r+0x3c0>
  806438:	3881200c 	andi	r2,r7,1152
  80643c:	10002726 	beq	r2,zero,8064dc <__sfvwrite_r+0x1d0>
  806440:	90800517 	ldw	r2,20(r18)
  806444:	92000417 	ldw	r8,16(r18)
  806448:	91400017 	ldw	r5,0(r18)
  80644c:	1087883a 	add	r3,r2,r2
  806450:	1887883a 	add	r3,r3,r2
  806454:	1808d7fa 	srli	r4,r3,31
  806458:	2a21c83a 	sub	r16,r5,r8
  80645c:	80800044 	addi	r2,r16,1
  806460:	20c9883a 	add	r4,r4,r3
  806464:	2027d07a 	srai	r19,r4,1
  806468:	a085883a 	add	r2,r20,r2
  80646c:	980d883a 	mov	r6,r19
  806470:	9880022e 	bgeu	r19,r2,80647c <__sfvwrite_r+0x170>
  806474:	1027883a 	mov	r19,r2
  806478:	100d883a 	mov	r6,r2
  80647c:	3881000c 	andi	r2,r7,1024
  806480:	1000b826 	beq	r2,zero,806764 <__sfvwrite_r+0x458>
  806484:	300b883a 	mov	r5,r6
  806488:	e009883a 	mov	r4,fp
  80648c:	0806b800 	call	806b80 <_malloc_r>
  806490:	10003126 	beq	r2,zero,806558 <__sfvwrite_r+0x24c>
  806494:	91400417 	ldw	r5,16(r18)
  806498:	1009883a 	mov	r4,r2
  80649c:	800d883a 	mov	r6,r16
  8064a0:	1023883a 	mov	r17,r2
  8064a4:	08073a40 	call	8073a4 <memcpy>
  8064a8:	90c0030b 	ldhu	r3,12(r18)
  8064ac:	00beffc4 	movi	r2,-1025
  8064b0:	1886703a 	and	r3,r3,r2
  8064b4:	18c02014 	ori	r3,r3,128
  8064b8:	90c0030d 	sth	r3,12(r18)
  8064bc:	9c07c83a 	sub	r3,r19,r16
  8064c0:	8c05883a 	add	r2,r17,r16
  8064c4:	a00d883a 	mov	r6,r20
  8064c8:	a021883a 	mov	r16,r20
  8064cc:	90800015 	stw	r2,0(r18)
  8064d0:	90c00215 	stw	r3,8(r18)
  8064d4:	94400415 	stw	r17,16(r18)
  8064d8:	94c00515 	stw	r19,20(r18)
  8064dc:	91000017 	ldw	r4,0(r18)
  8064e0:	b80b883a 	mov	r5,r23
  8064e4:	a023883a 	mov	r17,r20
  8064e8:	08074440 	call	807444 <memmove>
  8064ec:	90c00217 	ldw	r3,8(r18)
  8064f0:	90800017 	ldw	r2,0(r18)
  8064f4:	a027883a 	mov	r19,r20
  8064f8:	1c07c83a 	sub	r3,r3,r16
  8064fc:	1405883a 	add	r2,r2,r16
  806500:	90c00215 	stw	r3,8(r18)
  806504:	a021883a 	mov	r16,r20
  806508:	90800015 	stw	r2,0(r18)
  80650c:	b0800217 	ldw	r2,8(r22)
  806510:	1405c83a 	sub	r2,r2,r16
  806514:	b0800215 	stw	r2,8(r22)
  806518:	103fa826 	beq	r2,zero,8063bc <__sfvwrite_r+0xb0>
  80651c:	a469c83a 	sub	r20,r20,r17
  806520:	91c0030b 	ldhu	r7,12(r18)
  806524:	bcef883a 	add	r23,r23,r19
  806528:	a03fbe1e 	bne	r20,zero,806424 <__sfvwrite_r+0x118>
  80652c:	adc00017 	ldw	r23,0(r21)
  806530:	ad000117 	ldw	r20,4(r21)
  806534:	ad400204 	addi	r21,r21,8
  806538:	003fb906 	br	806420 <__sfvwrite_r+0x114>
  80653c:	ac400017 	ldw	r17,0(r21)
  806540:	ac000117 	ldw	r16,4(r21)
  806544:	ad400204 	addi	r21,r21,8
  806548:	003f8a06 	br	806374 <__sfvwrite_r+0x68>
  80654c:	91400417 	ldw	r5,16(r18)
  806550:	e009883a 	mov	r4,fp
  806554:	0805ff80 	call	805ff8 <_free_r>
  806558:	00800304 	movi	r2,12
  80655c:	e0800015 	stw	r2,0(fp)
  806560:	9080030b 	ldhu	r2,12(r18)
  806564:	013fffc4 	movi	r4,-1
  806568:	10801014 	ori	r2,r2,64
  80656c:	9080030d 	sth	r2,12(r18)
  806570:	003f9306 	br	8063c0 <__sfvwrite_r+0xb4>
  806574:	0027883a 	mov	r19,zero
  806578:	002f883a 	mov	r23,zero
  80657c:	d8000015 	stw	zero,0(sp)
  806580:	0029883a 	mov	r20,zero
  806584:	98001e26 	beq	r19,zero,806600 <__sfvwrite_r+0x2f4>
  806588:	d8c00017 	ldw	r3,0(sp)
  80658c:	1804c03a 	cmpne	r2,r3,zero
  806590:	10005e26 	beq	r2,zero,80670c <__sfvwrite_r+0x400>
  806594:	9821883a 	mov	r16,r19
  806598:	a4c0012e 	bgeu	r20,r19,8065a0 <__sfvwrite_r+0x294>
  80659c:	a021883a 	mov	r16,r20
  8065a0:	91000017 	ldw	r4,0(r18)
  8065a4:	90800417 	ldw	r2,16(r18)
  8065a8:	91800217 	ldw	r6,8(r18)
  8065ac:	91c00517 	ldw	r7,20(r18)
  8065b0:	1100022e 	bgeu	r2,r4,8065bc <__sfvwrite_r+0x2b0>
  8065b4:	31e3883a 	add	r17,r6,r7
  8065b8:	8c001616 	blt	r17,r16,806614 <__sfvwrite_r+0x308>
  8065bc:	81c03816 	blt	r16,r7,8066a0 <__sfvwrite_r+0x394>
  8065c0:	90c00917 	ldw	r3,36(r18)
  8065c4:	91400717 	ldw	r5,28(r18)
  8065c8:	e009883a 	mov	r4,fp
  8065cc:	b80d883a 	mov	r6,r23
  8065d0:	183ee83a 	callr	r3
  8065d4:	1023883a 	mov	r17,r2
  8065d8:	00bfe10e 	bge	zero,r2,806560 <__sfvwrite_r+0x254>
  8065dc:	a469c83a 	sub	r20,r20,r17
  8065e0:	a0001826 	beq	r20,zero,806644 <__sfvwrite_r+0x338>
  8065e4:	b0800217 	ldw	r2,8(r22)
  8065e8:	1445c83a 	sub	r2,r2,r17
  8065ec:	b0800215 	stw	r2,8(r22)
  8065f0:	103f7226 	beq	r2,zero,8063bc <__sfvwrite_r+0xb0>
  8065f4:	9c67c83a 	sub	r19,r19,r17
  8065f8:	bc6f883a 	add	r23,r23,r17
  8065fc:	983fe21e 	bne	r19,zero,806588 <__sfvwrite_r+0x27c>
  806600:	adc00017 	ldw	r23,0(r21)
  806604:	acc00117 	ldw	r19,4(r21)
  806608:	ad400204 	addi	r21,r21,8
  80660c:	d8000015 	stw	zero,0(sp)
  806610:	003fdc06 	br	806584 <__sfvwrite_r+0x278>
  806614:	b80b883a 	mov	r5,r23
  806618:	880d883a 	mov	r6,r17
  80661c:	08074440 	call	807444 <memmove>
  806620:	90c00017 	ldw	r3,0(r18)
  806624:	e009883a 	mov	r4,fp
  806628:	900b883a 	mov	r5,r18
  80662c:	1c47883a 	add	r3,r3,r17
  806630:	90c00015 	stw	r3,0(r18)
  806634:	08059dc0 	call	8059dc <_fflush_r>
  806638:	103fc91e 	bne	r2,zero,806560 <__sfvwrite_r+0x254>
  80663c:	a469c83a 	sub	r20,r20,r17
  806640:	a03fe81e 	bne	r20,zero,8065e4 <__sfvwrite_r+0x2d8>
  806644:	e009883a 	mov	r4,fp
  806648:	900b883a 	mov	r5,r18
  80664c:	08059dc0 	call	8059dc <_fflush_r>
  806650:	103fc31e 	bne	r2,zero,806560 <__sfvwrite_r+0x254>
  806654:	d8000015 	stw	zero,0(sp)
  806658:	003fe206 	br	8065e4 <__sfvwrite_r+0x2d8>
  80665c:	91000017 	ldw	r4,0(r18)
  806660:	90800417 	ldw	r2,16(r18)
  806664:	1100022e 	bgeu	r2,r4,806670 <__sfvwrite_r+0x364>
  806668:	8023883a 	mov	r17,r16
  80666c:	85003136 	bltu	r16,r20,806734 <__sfvwrite_r+0x428>
  806670:	91c00517 	ldw	r7,20(r18)
  806674:	a1c01836 	bltu	r20,r7,8066d8 <__sfvwrite_r+0x3cc>
  806678:	90c00917 	ldw	r3,36(r18)
  80667c:	91400717 	ldw	r5,28(r18)
  806680:	e009883a 	mov	r4,fp
  806684:	b80d883a 	mov	r6,r23
  806688:	183ee83a 	callr	r3
  80668c:	1021883a 	mov	r16,r2
  806690:	00bfb30e 	bge	zero,r2,806560 <__sfvwrite_r+0x254>
  806694:	1023883a 	mov	r17,r2
  806698:	1027883a 	mov	r19,r2
  80669c:	003f9b06 	br	80650c <__sfvwrite_r+0x200>
  8066a0:	b80b883a 	mov	r5,r23
  8066a4:	800d883a 	mov	r6,r16
  8066a8:	08074440 	call	807444 <memmove>
  8066ac:	90c00217 	ldw	r3,8(r18)
  8066b0:	90800017 	ldw	r2,0(r18)
  8066b4:	8023883a 	mov	r17,r16
  8066b8:	1c07c83a 	sub	r3,r3,r16
  8066bc:	1405883a 	add	r2,r2,r16
  8066c0:	90c00215 	stw	r3,8(r18)
  8066c4:	90800015 	stw	r2,0(r18)
  8066c8:	003fc406 	br	8065dc <__sfvwrite_r+0x2d0>
  8066cc:	a00d883a 	mov	r6,r20
  8066d0:	a021883a 	mov	r16,r20
  8066d4:	003f8106 	br	8064dc <__sfvwrite_r+0x1d0>
  8066d8:	b80b883a 	mov	r5,r23
  8066dc:	a00d883a 	mov	r6,r20
  8066e0:	08074440 	call	807444 <memmove>
  8066e4:	90c00217 	ldw	r3,8(r18)
  8066e8:	90800017 	ldw	r2,0(r18)
  8066ec:	a021883a 	mov	r16,r20
  8066f0:	1d07c83a 	sub	r3,r3,r20
  8066f4:	1505883a 	add	r2,r2,r20
  8066f8:	a023883a 	mov	r17,r20
  8066fc:	a027883a 	mov	r19,r20
  806700:	90c00215 	stw	r3,8(r18)
  806704:	90800015 	stw	r2,0(r18)
  806708:	003f8006 	br	80650c <__sfvwrite_r+0x200>
  80670c:	b809883a 	mov	r4,r23
  806710:	01400284 	movi	r5,10
  806714:	980d883a 	mov	r6,r19
  806718:	08072c00 	call	8072c0 <memchr>
  80671c:	10001726 	beq	r2,zero,80677c <__sfvwrite_r+0x470>
  806720:	15c5c83a 	sub	r2,r2,r23
  806724:	15000044 	addi	r20,r2,1
  806728:	00800044 	movi	r2,1
  80672c:	d8800015 	stw	r2,0(sp)
  806730:	003f9806 	br	806594 <__sfvwrite_r+0x288>
  806734:	b80b883a 	mov	r5,r23
  806738:	800d883a 	mov	r6,r16
  80673c:	08074440 	call	807444 <memmove>
  806740:	90c00017 	ldw	r3,0(r18)
  806744:	e009883a 	mov	r4,fp
  806748:	900b883a 	mov	r5,r18
  80674c:	1c07883a 	add	r3,r3,r16
  806750:	90c00015 	stw	r3,0(r18)
  806754:	8027883a 	mov	r19,r16
  806758:	08059dc0 	call	8059dc <_fflush_r>
  80675c:	103f6b26 	beq	r2,zero,80650c <__sfvwrite_r+0x200>
  806760:	003f7f06 	br	806560 <__sfvwrite_r+0x254>
  806764:	400b883a 	mov	r5,r8
  806768:	e009883a 	mov	r4,fp
  80676c:	08085b00 	call	8085b0 <_realloc_r>
  806770:	103f7626 	beq	r2,zero,80654c <__sfvwrite_r+0x240>
  806774:	1023883a 	mov	r17,r2
  806778:	003f5006 	br	8064bc <__sfvwrite_r+0x1b0>
  80677c:	00c00044 	movi	r3,1
  806780:	9d000044 	addi	r20,r19,1
  806784:	d8c00015 	stw	r3,0(sp)
  806788:	003f8206 	br	806594 <__sfvwrite_r+0x288>
  80678c:	9080030b 	ldhu	r2,12(r18)
  806790:	00c00244 	movi	r3,9
  806794:	013fffc4 	movi	r4,-1
  806798:	10801014 	ori	r2,r2,64
  80679c:	9080030d 	sth	r2,12(r18)
  8067a0:	e0c00015 	stw	r3,0(fp)
  8067a4:	003f0606 	br	8063c0 <__sfvwrite_r+0xb4>

008067a8 <_fwalk_reent>:
  8067a8:	defff704 	addi	sp,sp,-36
  8067ac:	dcc00315 	stw	r19,12(sp)
  8067b0:	24c0b804 	addi	r19,r4,736
  8067b4:	dd800615 	stw	r22,24(sp)
  8067b8:	dd400515 	stw	r21,20(sp)
  8067bc:	dfc00815 	stw	ra,32(sp)
  8067c0:	ddc00715 	stw	r23,28(sp)
  8067c4:	dd000415 	stw	r20,16(sp)
  8067c8:	dc800215 	stw	r18,8(sp)
  8067cc:	dc400115 	stw	r17,4(sp)
  8067d0:	dc000015 	stw	r16,0(sp)
  8067d4:	202b883a 	mov	r21,r4
  8067d8:	282d883a 	mov	r22,r5
  8067dc:	0805c640 	call	805c64 <__sfp_lock_acquire>
  8067e0:	98002126 	beq	r19,zero,806868 <_fwalk_reent+0xc0>
  8067e4:	002f883a 	mov	r23,zero
  8067e8:	9c800117 	ldw	r18,4(r19)
  8067ec:	9c000217 	ldw	r16,8(r19)
  8067f0:	90bfffc4 	addi	r2,r18,-1
  8067f4:	10000d16 	blt	r2,zero,80682c <_fwalk_reent+0x84>
  8067f8:	0023883a 	mov	r17,zero
  8067fc:	053fffc4 	movi	r20,-1
  806800:	8080030f 	ldh	r2,12(r16)
  806804:	8c400044 	addi	r17,r17,1
  806808:	10000626 	beq	r2,zero,806824 <_fwalk_reent+0x7c>
  80680c:	8080038f 	ldh	r2,14(r16)
  806810:	800b883a 	mov	r5,r16
  806814:	a809883a 	mov	r4,r21
  806818:	15000226 	beq	r2,r20,806824 <_fwalk_reent+0x7c>
  80681c:	b03ee83a 	callr	r22
  806820:	b8aeb03a 	or	r23,r23,r2
  806824:	84001704 	addi	r16,r16,92
  806828:	947ff51e 	bne	r18,r17,806800 <_fwalk_reent+0x58>
  80682c:	9cc00017 	ldw	r19,0(r19)
  806830:	983fed1e 	bne	r19,zero,8067e8 <_fwalk_reent+0x40>
  806834:	0805c680 	call	805c68 <__sfp_lock_release>
  806838:	b805883a 	mov	r2,r23
  80683c:	dfc00817 	ldw	ra,32(sp)
  806840:	ddc00717 	ldw	r23,28(sp)
  806844:	dd800617 	ldw	r22,24(sp)
  806848:	dd400517 	ldw	r21,20(sp)
  80684c:	dd000417 	ldw	r20,16(sp)
  806850:	dcc00317 	ldw	r19,12(sp)
  806854:	dc800217 	ldw	r18,8(sp)
  806858:	dc400117 	ldw	r17,4(sp)
  80685c:	dc000017 	ldw	r16,0(sp)
  806860:	dec00904 	addi	sp,sp,36
  806864:	f800283a 	ret
  806868:	002f883a 	mov	r23,zero
  80686c:	003ff106 	br	806834 <_fwalk_reent+0x8c>

00806870 <_fwalk>:
  806870:	defff804 	addi	sp,sp,-32
  806874:	dcc00315 	stw	r19,12(sp)
  806878:	24c0b804 	addi	r19,r4,736
  80687c:	dd400515 	stw	r21,20(sp)
  806880:	dfc00715 	stw	ra,28(sp)
  806884:	dd800615 	stw	r22,24(sp)
  806888:	dd000415 	stw	r20,16(sp)
  80688c:	dc800215 	stw	r18,8(sp)
  806890:	dc400115 	stw	r17,4(sp)
  806894:	dc000015 	stw	r16,0(sp)
  806898:	282b883a 	mov	r21,r5
  80689c:	0805c640 	call	805c64 <__sfp_lock_acquire>
  8068a0:	98001f26 	beq	r19,zero,806920 <_fwalk+0xb0>
  8068a4:	002d883a 	mov	r22,zero
  8068a8:	9c800117 	ldw	r18,4(r19)
  8068ac:	9c000217 	ldw	r16,8(r19)
  8068b0:	90bfffc4 	addi	r2,r18,-1
  8068b4:	10000c16 	blt	r2,zero,8068e8 <_fwalk+0x78>
  8068b8:	0023883a 	mov	r17,zero
  8068bc:	053fffc4 	movi	r20,-1
  8068c0:	8080030f 	ldh	r2,12(r16)
  8068c4:	8c400044 	addi	r17,r17,1
  8068c8:	10000526 	beq	r2,zero,8068e0 <_fwalk+0x70>
  8068cc:	8080038f 	ldh	r2,14(r16)
  8068d0:	8009883a 	mov	r4,r16
  8068d4:	15000226 	beq	r2,r20,8068e0 <_fwalk+0x70>
  8068d8:	a83ee83a 	callr	r21
  8068dc:	b0acb03a 	or	r22,r22,r2
  8068e0:	84001704 	addi	r16,r16,92
  8068e4:	947ff61e 	bne	r18,r17,8068c0 <_fwalk+0x50>
  8068e8:	9cc00017 	ldw	r19,0(r19)
  8068ec:	983fee1e 	bne	r19,zero,8068a8 <_fwalk+0x38>
  8068f0:	0805c680 	call	805c68 <__sfp_lock_release>
  8068f4:	b005883a 	mov	r2,r22
  8068f8:	dfc00717 	ldw	ra,28(sp)
  8068fc:	dd800617 	ldw	r22,24(sp)
  806900:	dd400517 	ldw	r21,20(sp)
  806904:	dd000417 	ldw	r20,16(sp)
  806908:	dcc00317 	ldw	r19,12(sp)
  80690c:	dc800217 	ldw	r18,8(sp)
  806910:	dc400117 	ldw	r17,4(sp)
  806914:	dc000017 	ldw	r16,0(sp)
  806918:	dec00804 	addi	sp,sp,32
  80691c:	f800283a 	ret
  806920:	002d883a 	mov	r22,zero
  806924:	003ff206 	br	8068f0 <_fwalk+0x80>

00806928 <__locale_charset>:
  806928:	d0a00317 	ldw	r2,-32756(gp)
  80692c:	f800283a 	ret

00806930 <_localeconv_r>:
  806930:	00802074 	movhi	r2,129
  806934:	10b26404 	addi	r2,r2,-13936
  806938:	f800283a 	ret

0080693c <localeconv>:
  80693c:	00802074 	movhi	r2,129
  806940:	10b94704 	addi	r2,r2,-6884
  806944:	11000017 	ldw	r4,0(r2)
  806948:	08069301 	jmpi	806930 <_localeconv_r>

0080694c <_setlocale_r>:
  80694c:	defffc04 	addi	sp,sp,-16
  806950:	00c02074 	movhi	r3,129
  806954:	18f23a04 	addi	r3,r3,-14104
  806958:	dc800215 	stw	r18,8(sp)
  80695c:	dc400115 	stw	r17,4(sp)
  806960:	dc000015 	stw	r16,0(sp)
  806964:	2023883a 	mov	r17,r4
  806968:	2825883a 	mov	r18,r5
  80696c:	dfc00315 	stw	ra,12(sp)
  806970:	3021883a 	mov	r16,r6
  806974:	3009883a 	mov	r4,r6
  806978:	180b883a 	mov	r5,r3
  80697c:	30000926 	beq	r6,zero,8069a4 <_setlocale_r+0x58>
  806980:	0808dd00 	call	808dd0 <strcmp>
  806984:	8009883a 	mov	r4,r16
  806988:	01402074 	movhi	r5,129
  80698c:	2971f404 	addi	r5,r5,-14384
  806990:	10000b1e 	bne	r2,zero,8069c0 <_setlocale_r+0x74>
  806994:	8c000d15 	stw	r16,52(r17)
  806998:	8c800c15 	stw	r18,48(r17)
  80699c:	00c02074 	movhi	r3,129
  8069a0:	18f23a04 	addi	r3,r3,-14104
  8069a4:	1805883a 	mov	r2,r3
  8069a8:	dfc00317 	ldw	ra,12(sp)
  8069ac:	dc800217 	ldw	r18,8(sp)
  8069b0:	dc400117 	ldw	r17,4(sp)
  8069b4:	dc000017 	ldw	r16,0(sp)
  8069b8:	dec00404 	addi	sp,sp,16
  8069bc:	f800283a 	ret
  8069c0:	0808dd00 	call	808dd0 <strcmp>
  8069c4:	0007883a 	mov	r3,zero
  8069c8:	103ff226 	beq	r2,zero,806994 <_setlocale_r+0x48>
  8069cc:	003ff506 	br	8069a4 <_setlocale_r+0x58>

008069d0 <setlocale>:
  8069d0:	01802074 	movhi	r6,129
  8069d4:	31b94704 	addi	r6,r6,-6884
  8069d8:	2007883a 	mov	r3,r4
  8069dc:	31000017 	ldw	r4,0(r6)
  8069e0:	280d883a 	mov	r6,r5
  8069e4:	180b883a 	mov	r5,r3
  8069e8:	080694c1 	jmpi	80694c <_setlocale_r>

008069ec <__smakebuf_r>:
  8069ec:	2880030b 	ldhu	r2,12(r5)
  8069f0:	deffed04 	addi	sp,sp,-76
  8069f4:	dc401015 	stw	r17,64(sp)
  8069f8:	1080008c 	andi	r2,r2,2
  8069fc:	dc000f15 	stw	r16,60(sp)
  806a00:	dfc01215 	stw	ra,72(sp)
  806a04:	dc801115 	stw	r18,68(sp)
  806a08:	2821883a 	mov	r16,r5
  806a0c:	2023883a 	mov	r17,r4
  806a10:	10000b26 	beq	r2,zero,806a40 <__smakebuf_r+0x54>
  806a14:	28c010c4 	addi	r3,r5,67
  806a18:	00800044 	movi	r2,1
  806a1c:	28800515 	stw	r2,20(r5)
  806a20:	28c00415 	stw	r3,16(r5)
  806a24:	28c00015 	stw	r3,0(r5)
  806a28:	dfc01217 	ldw	ra,72(sp)
  806a2c:	dc801117 	ldw	r18,68(sp)
  806a30:	dc401017 	ldw	r17,64(sp)
  806a34:	dc000f17 	ldw	r16,60(sp)
  806a38:	dec01304 	addi	sp,sp,76
  806a3c:	f800283a 	ret
  806a40:	2940038f 	ldh	r5,14(r5)
  806a44:	28002116 	blt	r5,zero,806acc <__smakebuf_r+0xe0>
  806a48:	d80d883a 	mov	r6,sp
  806a4c:	08091d80 	call	8091d8 <_fstat_r>
  806a50:	10001e16 	blt	r2,zero,806acc <__smakebuf_r+0xe0>
  806a54:	d8800117 	ldw	r2,4(sp)
  806a58:	00e00014 	movui	r3,32768
  806a5c:	113c000c 	andi	r4,r2,61440
  806a60:	20c03126 	beq	r4,r3,806b28 <__smakebuf_r+0x13c>
  806a64:	8080030b 	ldhu	r2,12(r16)
  806a68:	00c80004 	movi	r3,8192
  806a6c:	10820014 	ori	r2,r2,2048
  806a70:	8080030d 	sth	r2,12(r16)
  806a74:	20c01e26 	beq	r4,r3,806af0 <__smakebuf_r+0x104>
  806a78:	04810004 	movi	r18,1024
  806a7c:	8809883a 	mov	r4,r17
  806a80:	900b883a 	mov	r5,r18
  806a84:	0806b800 	call	806b80 <_malloc_r>
  806a88:	1009883a 	mov	r4,r2
  806a8c:	10003126 	beq	r2,zero,806b54 <__smakebuf_r+0x168>
  806a90:	80c0030b 	ldhu	r3,12(r16)
  806a94:	00802034 	movhi	r2,128
  806a98:	10975604 	addi	r2,r2,23896
  806a9c:	88800f15 	stw	r2,60(r17)
  806aa0:	18c02014 	ori	r3,r3,128
  806aa4:	84800515 	stw	r18,20(r16)
  806aa8:	80c0030d 	sth	r3,12(r16)
  806aac:	81000415 	stw	r4,16(r16)
  806ab0:	81000015 	stw	r4,0(r16)
  806ab4:	dfc01217 	ldw	ra,72(sp)
  806ab8:	dc801117 	ldw	r18,68(sp)
  806abc:	dc401017 	ldw	r17,64(sp)
  806ac0:	dc000f17 	ldw	r16,60(sp)
  806ac4:	dec01304 	addi	sp,sp,76
  806ac8:	f800283a 	ret
  806acc:	80c0030b 	ldhu	r3,12(r16)
  806ad0:	1880200c 	andi	r2,r3,128
  806ad4:	10000426 	beq	r2,zero,806ae8 <__smakebuf_r+0xfc>
  806ad8:	04801004 	movi	r18,64
  806adc:	18820014 	ori	r2,r3,2048
  806ae0:	8080030d 	sth	r2,12(r16)
  806ae4:	003fe506 	br	806a7c <__smakebuf_r+0x90>
  806ae8:	04810004 	movi	r18,1024
  806aec:	003ffb06 	br	806adc <__smakebuf_r+0xf0>
  806af0:	8140038f 	ldh	r5,14(r16)
  806af4:	8809883a 	mov	r4,r17
  806af8:	080924c0 	call	80924c <_isatty_r>
  806afc:	103fde26 	beq	r2,zero,806a78 <__smakebuf_r+0x8c>
  806b00:	8080030b 	ldhu	r2,12(r16)
  806b04:	80c010c4 	addi	r3,r16,67
  806b08:	04810004 	movi	r18,1024
  806b0c:	10800054 	ori	r2,r2,1
  806b10:	8080030d 	sth	r2,12(r16)
  806b14:	00800044 	movi	r2,1
  806b18:	80c00415 	stw	r3,16(r16)
  806b1c:	80800515 	stw	r2,20(r16)
  806b20:	80c00015 	stw	r3,0(r16)
  806b24:	003fd506 	br	806a7c <__smakebuf_r+0x90>
  806b28:	80c00a17 	ldw	r3,40(r16)
  806b2c:	00802074 	movhi	r2,129
  806b30:	10a32304 	addi	r2,r2,-29556
  806b34:	18bfcb1e 	bne	r3,r2,806a64 <__smakebuf_r+0x78>
  806b38:	8080030b 	ldhu	r2,12(r16)
  806b3c:	00c10004 	movi	r3,1024
  806b40:	1825883a 	mov	r18,r3
  806b44:	10c4b03a 	or	r2,r2,r3
  806b48:	8080030d 	sth	r2,12(r16)
  806b4c:	80c01315 	stw	r3,76(r16)
  806b50:	003fca06 	br	806a7c <__smakebuf_r+0x90>
  806b54:	8100030b 	ldhu	r4,12(r16)
  806b58:	2080800c 	andi	r2,r4,512
  806b5c:	103fb21e 	bne	r2,zero,806a28 <__smakebuf_r+0x3c>
  806b60:	80c010c4 	addi	r3,r16,67
  806b64:	21000094 	ori	r4,r4,2
  806b68:	00800044 	movi	r2,1
  806b6c:	80800515 	stw	r2,20(r16)
  806b70:	8100030d 	sth	r4,12(r16)
  806b74:	80c00415 	stw	r3,16(r16)
  806b78:	80c00015 	stw	r3,0(r16)
  806b7c:	003faa06 	br	806a28 <__smakebuf_r+0x3c>

00806b80 <_malloc_r>:
  806b80:	defff604 	addi	sp,sp,-40
  806b84:	28c002c4 	addi	r3,r5,11
  806b88:	00800584 	movi	r2,22
  806b8c:	dc800215 	stw	r18,8(sp)
  806b90:	dfc00915 	stw	ra,36(sp)
  806b94:	df000815 	stw	fp,32(sp)
  806b98:	ddc00715 	stw	r23,28(sp)
  806b9c:	dd800615 	stw	r22,24(sp)
  806ba0:	dd400515 	stw	r21,20(sp)
  806ba4:	dd000415 	stw	r20,16(sp)
  806ba8:	dcc00315 	stw	r19,12(sp)
  806bac:	dc400115 	stw	r17,4(sp)
  806bb0:	dc000015 	stw	r16,0(sp)
  806bb4:	2025883a 	mov	r18,r4
  806bb8:	10c01236 	bltu	r2,r3,806c04 <_malloc_r+0x84>
  806bbc:	04400404 	movi	r17,16
  806bc0:	8940142e 	bgeu	r17,r5,806c14 <_malloc_r+0x94>
  806bc4:	00800304 	movi	r2,12
  806bc8:	0007883a 	mov	r3,zero
  806bcc:	90800015 	stw	r2,0(r18)
  806bd0:	1805883a 	mov	r2,r3
  806bd4:	dfc00917 	ldw	ra,36(sp)
  806bd8:	df000817 	ldw	fp,32(sp)
  806bdc:	ddc00717 	ldw	r23,28(sp)
  806be0:	dd800617 	ldw	r22,24(sp)
  806be4:	dd400517 	ldw	r21,20(sp)
  806be8:	dd000417 	ldw	r20,16(sp)
  806bec:	dcc00317 	ldw	r19,12(sp)
  806bf0:	dc800217 	ldw	r18,8(sp)
  806bf4:	dc400117 	ldw	r17,4(sp)
  806bf8:	dc000017 	ldw	r16,0(sp)
  806bfc:	dec00a04 	addi	sp,sp,40
  806c00:	f800283a 	ret
  806c04:	00bffe04 	movi	r2,-8
  806c08:	18a2703a 	and	r17,r3,r2
  806c0c:	883fed16 	blt	r17,zero,806bc4 <_malloc_r+0x44>
  806c10:	897fec36 	bltu	r17,r5,806bc4 <_malloc_r+0x44>
  806c14:	9009883a 	mov	r4,r18
  806c18:	080b0bc0 	call	80b0bc <__malloc_lock>
  806c1c:	00807dc4 	movi	r2,503
  806c20:	14402b2e 	bgeu	r2,r17,806cd0 <_malloc_r+0x150>
  806c24:	8806d27a 	srli	r3,r17,9
  806c28:	18003f1e 	bne	r3,zero,806d28 <_malloc_r+0x1a8>
  806c2c:	880cd0fa 	srli	r6,r17,3
  806c30:	300490fa 	slli	r2,r6,3
  806c34:	02c02074 	movhi	r11,129
  806c38:	5af3c304 	addi	r11,r11,-12532
  806c3c:	12cb883a 	add	r5,r2,r11
  806c40:	2c000317 	ldw	r16,12(r5)
  806c44:	580f883a 	mov	r7,r11
  806c48:	2c00041e 	bne	r5,r16,806c5c <_malloc_r+0xdc>
  806c4c:	00000a06 	br	806c78 <_malloc_r+0xf8>
  806c50:	1800860e 	bge	r3,zero,806e6c <_malloc_r+0x2ec>
  806c54:	84000317 	ldw	r16,12(r16)
  806c58:	2c000726 	beq	r5,r16,806c78 <_malloc_r+0xf8>
  806c5c:	80800117 	ldw	r2,4(r16)
  806c60:	00ffff04 	movi	r3,-4
  806c64:	10c8703a 	and	r4,r2,r3
  806c68:	2447c83a 	sub	r3,r4,r17
  806c6c:	008003c4 	movi	r2,15
  806c70:	10fff70e 	bge	r2,r3,806c50 <_malloc_r+0xd0>
  806c74:	31bfffc4 	addi	r6,r6,-1
  806c78:	32400044 	addi	r9,r6,1
  806c7c:	02802074 	movhi	r10,129
  806c80:	52b3c504 	addi	r10,r10,-12524
  806c84:	54000217 	ldw	r16,8(r10)
  806c88:	8280a026 	beq	r16,r10,806f0c <_malloc_r+0x38c>
  806c8c:	80800117 	ldw	r2,4(r16)
  806c90:	00ffff04 	movi	r3,-4
  806c94:	10ca703a 	and	r5,r2,r3
  806c98:	2c4dc83a 	sub	r6,r5,r17
  806c9c:	008003c4 	movi	r2,15
  806ca0:	11808316 	blt	r2,r6,806eb0 <_malloc_r+0x330>
  806ca4:	52800315 	stw	r10,12(r10)
  806ca8:	52800215 	stw	r10,8(r10)
  806cac:	30002916 	blt	r6,zero,806d54 <_malloc_r+0x1d4>
  806cb0:	8147883a 	add	r3,r16,r5
  806cb4:	18800117 	ldw	r2,4(r3)
  806cb8:	9009883a 	mov	r4,r18
  806cbc:	10800054 	ori	r2,r2,1
  806cc0:	18800115 	stw	r2,4(r3)
  806cc4:	080b0c00 	call	80b0c0 <__malloc_unlock>
  806cc8:	80c00204 	addi	r3,r16,8
  806ccc:	003fc006 	br	806bd0 <_malloc_r+0x50>
  806cd0:	02c02074 	movhi	r11,129
  806cd4:	5af3c304 	addi	r11,r11,-12532
  806cd8:	8ac5883a 	add	r2,r17,r11
  806cdc:	14000317 	ldw	r16,12(r2)
  806ce0:	580f883a 	mov	r7,r11
  806ce4:	8806d0fa 	srli	r3,r17,3
  806ce8:	14006c26 	beq	r2,r16,806e9c <_malloc_r+0x31c>
  806cec:	80c00117 	ldw	r3,4(r16)
  806cf0:	00bfff04 	movi	r2,-4
  806cf4:	81800317 	ldw	r6,12(r16)
  806cf8:	1886703a 	and	r3,r3,r2
  806cfc:	80c7883a 	add	r3,r16,r3
  806d00:	18800117 	ldw	r2,4(r3)
  806d04:	81400217 	ldw	r5,8(r16)
  806d08:	9009883a 	mov	r4,r18
  806d0c:	10800054 	ori	r2,r2,1
  806d10:	18800115 	stw	r2,4(r3)
  806d14:	31400215 	stw	r5,8(r6)
  806d18:	29800315 	stw	r6,12(r5)
  806d1c:	080b0c00 	call	80b0c0 <__malloc_unlock>
  806d20:	80c00204 	addi	r3,r16,8
  806d24:	003faa06 	br	806bd0 <_malloc_r+0x50>
  806d28:	00800104 	movi	r2,4
  806d2c:	10c0052e 	bgeu	r2,r3,806d44 <_malloc_r+0x1c4>
  806d30:	00800504 	movi	r2,20
  806d34:	10c07836 	bltu	r2,r3,806f18 <_malloc_r+0x398>
  806d38:	198016c4 	addi	r6,r3,91
  806d3c:	300490fa 	slli	r2,r6,3
  806d40:	003fbc06 	br	806c34 <_malloc_r+0xb4>
  806d44:	8804d1ba 	srli	r2,r17,6
  806d48:	11800e04 	addi	r6,r2,56
  806d4c:	300490fa 	slli	r2,r6,3
  806d50:	003fb806 	br	806c34 <_malloc_r+0xb4>
  806d54:	00807fc4 	movi	r2,511
  806d58:	1140bb36 	bltu	r2,r5,807048 <_malloc_r+0x4c8>
  806d5c:	2806d0fa 	srli	r3,r5,3
  806d60:	573ffe04 	addi	fp,r10,-8
  806d64:	00800044 	movi	r2,1
  806d68:	180890fa 	slli	r4,r3,3
  806d6c:	1807d0ba 	srai	r3,r3,2
  806d70:	e1c00117 	ldw	r7,4(fp)
  806d74:	5909883a 	add	r4,r11,r4
  806d78:	21400217 	ldw	r5,8(r4)
  806d7c:	10c4983a 	sll	r2,r2,r3
  806d80:	81000315 	stw	r4,12(r16)
  806d84:	81400215 	stw	r5,8(r16)
  806d88:	388eb03a 	or	r7,r7,r2
  806d8c:	2c000315 	stw	r16,12(r5)
  806d90:	24000215 	stw	r16,8(r4)
  806d94:	e1c00115 	stw	r7,4(fp)
  806d98:	4807883a 	mov	r3,r9
  806d9c:	4800cd16 	blt	r9,zero,8070d4 <_malloc_r+0x554>
  806da0:	1807d0ba 	srai	r3,r3,2
  806da4:	00800044 	movi	r2,1
  806da8:	10c8983a 	sll	r4,r2,r3
  806dac:	39004436 	bltu	r7,r4,806ec0 <_malloc_r+0x340>
  806db0:	21c4703a 	and	r2,r4,r7
  806db4:	10000a1e 	bne	r2,zero,806de0 <_malloc_r+0x260>
  806db8:	2109883a 	add	r4,r4,r4
  806dbc:	00bfff04 	movi	r2,-4
  806dc0:	4884703a 	and	r2,r9,r2
  806dc4:	3906703a 	and	r3,r7,r4
  806dc8:	12400104 	addi	r9,r2,4
  806dcc:	1800041e 	bne	r3,zero,806de0 <_malloc_r+0x260>
  806dd0:	2109883a 	add	r4,r4,r4
  806dd4:	3904703a 	and	r2,r7,r4
  806dd8:	4a400104 	addi	r9,r9,4
  806ddc:	103ffc26 	beq	r2,zero,806dd0 <_malloc_r+0x250>
  806de0:	480490fa 	slli	r2,r9,3
  806de4:	4819883a 	mov	r12,r9
  806de8:	023fff04 	movi	r8,-4
  806dec:	589b883a 	add	r13,r11,r2
  806df0:	6807883a 	mov	r3,r13
  806df4:	014003c4 	movi	r5,15
  806df8:	1c000317 	ldw	r16,12(r3)
  806dfc:	1c00041e 	bne	r3,r16,806e10 <_malloc_r+0x290>
  806e00:	0000a706 	br	8070a0 <_malloc_r+0x520>
  806e04:	3000ab0e 	bge	r6,zero,8070b4 <_malloc_r+0x534>
  806e08:	84000317 	ldw	r16,12(r16)
  806e0c:	1c00a426 	beq	r3,r16,8070a0 <_malloc_r+0x520>
  806e10:	80800117 	ldw	r2,4(r16)
  806e14:	1204703a 	and	r2,r2,r8
  806e18:	144dc83a 	sub	r6,r2,r17
  806e1c:	29bff90e 	bge	r5,r6,806e04 <_malloc_r+0x284>
  806e20:	81000317 	ldw	r4,12(r16)
  806e24:	80c00217 	ldw	r3,8(r16)
  806e28:	89400054 	ori	r5,r17,1
  806e2c:	8445883a 	add	r2,r16,r17
  806e30:	20c00215 	stw	r3,8(r4)
  806e34:	19000315 	stw	r4,12(r3)
  806e38:	81400115 	stw	r5,4(r16)
  806e3c:	1187883a 	add	r3,r2,r6
  806e40:	31000054 	ori	r4,r6,1
  806e44:	50800315 	stw	r2,12(r10)
  806e48:	50800215 	stw	r2,8(r10)
  806e4c:	19800015 	stw	r6,0(r3)
  806e50:	11000115 	stw	r4,4(r2)
  806e54:	12800215 	stw	r10,8(r2)
  806e58:	12800315 	stw	r10,12(r2)
  806e5c:	9009883a 	mov	r4,r18
  806e60:	080b0c00 	call	80b0c0 <__malloc_unlock>
  806e64:	80c00204 	addi	r3,r16,8
  806e68:	003f5906 	br	806bd0 <_malloc_r+0x50>
  806e6c:	8109883a 	add	r4,r16,r4
  806e70:	20800117 	ldw	r2,4(r4)
  806e74:	80c00217 	ldw	r3,8(r16)
  806e78:	81400317 	ldw	r5,12(r16)
  806e7c:	10800054 	ori	r2,r2,1
  806e80:	20800115 	stw	r2,4(r4)
  806e84:	28c00215 	stw	r3,8(r5)
  806e88:	19400315 	stw	r5,12(r3)
  806e8c:	9009883a 	mov	r4,r18
  806e90:	080b0c00 	call	80b0c0 <__malloc_unlock>
  806e94:	80c00204 	addi	r3,r16,8
  806e98:	003f4d06 	br	806bd0 <_malloc_r+0x50>
  806e9c:	80800204 	addi	r2,r16,8
  806ea0:	14000317 	ldw	r16,12(r2)
  806ea4:	143f911e 	bne	r2,r16,806cec <_malloc_r+0x16c>
  806ea8:	1a400084 	addi	r9,r3,2
  806eac:	003f7306 	br	806c7c <_malloc_r+0xfc>
  806eb0:	88c00054 	ori	r3,r17,1
  806eb4:	8445883a 	add	r2,r16,r17
  806eb8:	80c00115 	stw	r3,4(r16)
  806ebc:	003fdf06 	br	806e3c <_malloc_r+0x2bc>
  806ec0:	e4000217 	ldw	r16,8(fp)
  806ec4:	00bfff04 	movi	r2,-4
  806ec8:	80c00117 	ldw	r3,4(r16)
  806ecc:	802d883a 	mov	r22,r16
  806ed0:	18aa703a 	and	r21,r3,r2
  806ed4:	ac401636 	bltu	r21,r17,806f30 <_malloc_r+0x3b0>
  806ed8:	ac49c83a 	sub	r4,r21,r17
  806edc:	008003c4 	movi	r2,15
  806ee0:	1100130e 	bge	r2,r4,806f30 <_malloc_r+0x3b0>
  806ee4:	88800054 	ori	r2,r17,1
  806ee8:	8447883a 	add	r3,r16,r17
  806eec:	80800115 	stw	r2,4(r16)
  806ef0:	20800054 	ori	r2,r4,1
  806ef4:	18800115 	stw	r2,4(r3)
  806ef8:	e0c00215 	stw	r3,8(fp)
  806efc:	9009883a 	mov	r4,r18
  806f00:	080b0c00 	call	80b0c0 <__malloc_unlock>
  806f04:	80c00204 	addi	r3,r16,8
  806f08:	003f3106 	br	806bd0 <_malloc_r+0x50>
  806f0c:	39c00117 	ldw	r7,4(r7)
  806f10:	573ffe04 	addi	fp,r10,-8
  806f14:	003fa006 	br	806d98 <_malloc_r+0x218>
  806f18:	00801504 	movi	r2,84
  806f1c:	10c06736 	bltu	r2,r3,8070bc <_malloc_r+0x53c>
  806f20:	8804d33a 	srli	r2,r17,12
  806f24:	11801b84 	addi	r6,r2,110
  806f28:	300490fa 	slli	r2,r6,3
  806f2c:	003f4106 	br	806c34 <_malloc_r+0xb4>
  806f30:	d0a6aa17 	ldw	r2,-25944(gp)
  806f34:	d0e00517 	ldw	r3,-32748(gp)
  806f38:	053fffc4 	movi	r20,-1
  806f3c:	10800404 	addi	r2,r2,16
  806f40:	88a7883a 	add	r19,r17,r2
  806f44:	1d000326 	beq	r3,r20,806f54 <_malloc_r+0x3d4>
  806f48:	98c3ffc4 	addi	r3,r19,4095
  806f4c:	00bc0004 	movi	r2,-4096
  806f50:	18a6703a 	and	r19,r3,r2
  806f54:	9009883a 	mov	r4,r18
  806f58:	980b883a 	mov	r5,r19
  806f5c:	0808c140 	call	808c14 <_sbrk_r>
  806f60:	1009883a 	mov	r4,r2
  806f64:	15000426 	beq	r2,r20,806f78 <_malloc_r+0x3f8>
  806f68:	854b883a 	add	r5,r16,r21
  806f6c:	1029883a 	mov	r20,r2
  806f70:	11405a2e 	bgeu	r2,r5,8070dc <_malloc_r+0x55c>
  806f74:	87000c26 	beq	r16,fp,806fa8 <_malloc_r+0x428>
  806f78:	e4000217 	ldw	r16,8(fp)
  806f7c:	80c00117 	ldw	r3,4(r16)
  806f80:	00bfff04 	movi	r2,-4
  806f84:	1884703a 	and	r2,r3,r2
  806f88:	14400336 	bltu	r2,r17,806f98 <_malloc_r+0x418>
  806f8c:	1449c83a 	sub	r4,r2,r17
  806f90:	008003c4 	movi	r2,15
  806f94:	113fd316 	blt	r2,r4,806ee4 <_malloc_r+0x364>
  806f98:	9009883a 	mov	r4,r18
  806f9c:	080b0c00 	call	80b0c0 <__malloc_unlock>
  806fa0:	0007883a 	mov	r3,zero
  806fa4:	003f0a06 	br	806bd0 <_malloc_r+0x50>
  806fa8:	05c02074 	movhi	r23,129
  806fac:	bdfffb04 	addi	r23,r23,-20
  806fb0:	b8800017 	ldw	r2,0(r23)
  806fb4:	988d883a 	add	r6,r19,r2
  806fb8:	b9800015 	stw	r6,0(r23)
  806fbc:	d0e00517 	ldw	r3,-32748(gp)
  806fc0:	00bfffc4 	movi	r2,-1
  806fc4:	18808e26 	beq	r3,r2,807200 <_malloc_r+0x680>
  806fc8:	2145c83a 	sub	r2,r4,r5
  806fcc:	3085883a 	add	r2,r6,r2
  806fd0:	b8800015 	stw	r2,0(r23)
  806fd4:	20c001cc 	andi	r3,r4,7
  806fd8:	18005f1e 	bne	r3,zero,807158 <_malloc_r+0x5d8>
  806fdc:	000b883a 	mov	r5,zero
  806fe0:	a4c5883a 	add	r2,r20,r19
  806fe4:	1083ffcc 	andi	r2,r2,4095
  806fe8:	00c40004 	movi	r3,4096
  806fec:	1887c83a 	sub	r3,r3,r2
  806ff0:	28e7883a 	add	r19,r5,r3
  806ff4:	9009883a 	mov	r4,r18
  806ff8:	980b883a 	mov	r5,r19
  806ffc:	0808c140 	call	808c14 <_sbrk_r>
  807000:	1007883a 	mov	r3,r2
  807004:	00bfffc4 	movi	r2,-1
  807008:	18807a26 	beq	r3,r2,8071f4 <_malloc_r+0x674>
  80700c:	1d05c83a 	sub	r2,r3,r20
  807010:	9885883a 	add	r2,r19,r2
  807014:	10c00054 	ori	r3,r2,1
  807018:	b8800017 	ldw	r2,0(r23)
  80701c:	a021883a 	mov	r16,r20
  807020:	a0c00115 	stw	r3,4(r20)
  807024:	9885883a 	add	r2,r19,r2
  807028:	b8800015 	stw	r2,0(r23)
  80702c:	e5000215 	stw	r20,8(fp)
  807030:	b7003626 	beq	r22,fp,80710c <_malloc_r+0x58c>
  807034:	018003c4 	movi	r6,15
  807038:	35404b36 	bltu	r6,r21,807168 <_malloc_r+0x5e8>
  80703c:	00800044 	movi	r2,1
  807040:	a0800115 	stw	r2,4(r20)
  807044:	003fcd06 	br	806f7c <_malloc_r+0x3fc>
  807048:	2808d27a 	srli	r4,r5,9
  80704c:	2000371e 	bne	r4,zero,80712c <_malloc_r+0x5ac>
  807050:	2808d0fa 	srli	r4,r5,3
  807054:	200690fa 	slli	r3,r4,3
  807058:	1ad1883a 	add	r8,r3,r11
  80705c:	41800217 	ldw	r6,8(r8)
  807060:	41805b26 	beq	r8,r6,8071d0 <_malloc_r+0x650>
  807064:	30800117 	ldw	r2,4(r6)
  807068:	00ffff04 	movi	r3,-4
  80706c:	10c4703a 	and	r2,r2,r3
  807070:	2880022e 	bgeu	r5,r2,80707c <_malloc_r+0x4fc>
  807074:	31800217 	ldw	r6,8(r6)
  807078:	41bffa1e 	bne	r8,r6,807064 <_malloc_r+0x4e4>
  80707c:	32000317 	ldw	r8,12(r6)
  807080:	39c00117 	ldw	r7,4(r7)
  807084:	82000315 	stw	r8,12(r16)
  807088:	81800215 	stw	r6,8(r16)
  80708c:	07002074 	movhi	fp,129
  807090:	e733c304 	addi	fp,fp,-12532
  807094:	34000315 	stw	r16,12(r6)
  807098:	44000215 	stw	r16,8(r8)
  80709c:	003f3e06 	br	806d98 <_malloc_r+0x218>
  8070a0:	63000044 	addi	r12,r12,1
  8070a4:	608000cc 	andi	r2,r12,3
  8070a8:	10005d26 	beq	r2,zero,807220 <_malloc_r+0x6a0>
  8070ac:	18c00204 	addi	r3,r3,8
  8070b0:	003f5106 	br	806df8 <_malloc_r+0x278>
  8070b4:	8089883a 	add	r4,r16,r2
  8070b8:	003f6d06 	br	806e70 <_malloc_r+0x2f0>
  8070bc:	00805504 	movi	r2,340
  8070c0:	10c02036 	bltu	r2,r3,807144 <_malloc_r+0x5c4>
  8070c4:	8804d3fa 	srli	r2,r17,15
  8070c8:	11801dc4 	addi	r6,r2,119
  8070cc:	300490fa 	slli	r2,r6,3
  8070d0:	003ed806 	br	806c34 <_malloc_r+0xb4>
  8070d4:	48c000c4 	addi	r3,r9,3
  8070d8:	003f3106 	br	806da0 <_malloc_r+0x220>
  8070dc:	05c02074 	movhi	r23,129
  8070e0:	bdfffb04 	addi	r23,r23,-20
  8070e4:	b8800017 	ldw	r2,0(r23)
  8070e8:	988d883a 	add	r6,r19,r2
  8070ec:	b9800015 	stw	r6,0(r23)
  8070f0:	293fb21e 	bne	r5,r4,806fbc <_malloc_r+0x43c>
  8070f4:	2083ffcc 	andi	r2,r4,4095
  8070f8:	103fb01e 	bne	r2,zero,806fbc <_malloc_r+0x43c>
  8070fc:	e4000217 	ldw	r16,8(fp)
  807100:	9d45883a 	add	r2,r19,r21
  807104:	10800054 	ori	r2,r2,1
  807108:	80800115 	stw	r2,4(r16)
  80710c:	b8c00017 	ldw	r3,0(r23)
  807110:	d0a6ab17 	ldw	r2,-25940(gp)
  807114:	10c0012e 	bgeu	r2,r3,80711c <_malloc_r+0x59c>
  807118:	d0e6ab15 	stw	r3,-25940(gp)
  80711c:	d0a6ac17 	ldw	r2,-25936(gp)
  807120:	10ff962e 	bgeu	r2,r3,806f7c <_malloc_r+0x3fc>
  807124:	d0e6ac15 	stw	r3,-25936(gp)
  807128:	003f9406 	br	806f7c <_malloc_r+0x3fc>
  80712c:	00800104 	movi	r2,4
  807130:	11001e36 	bltu	r2,r4,8071ac <_malloc_r+0x62c>
  807134:	2804d1ba 	srli	r2,r5,6
  807138:	11000e04 	addi	r4,r2,56
  80713c:	200690fa 	slli	r3,r4,3
  807140:	003fc506 	br	807058 <_malloc_r+0x4d8>
  807144:	00815504 	movi	r2,1364
  807148:	10c01d2e 	bgeu	r2,r3,8071c0 <_malloc_r+0x640>
  80714c:	01801f84 	movi	r6,126
  807150:	0080fc04 	movi	r2,1008
  807154:	003eb706 	br	806c34 <_malloc_r+0xb4>
  807158:	00800204 	movi	r2,8
  80715c:	10cbc83a 	sub	r5,r2,r3
  807160:	2169883a 	add	r20,r4,r5
  807164:	003f9e06 	br	806fe0 <_malloc_r+0x460>
  807168:	00bffe04 	movi	r2,-8
  80716c:	a93ffd04 	addi	r4,r21,-12
  807170:	2088703a 	and	r4,r4,r2
  807174:	b10b883a 	add	r5,r22,r4
  807178:	00c00144 	movi	r3,5
  80717c:	28c00215 	stw	r3,8(r5)
  807180:	28c00115 	stw	r3,4(r5)
  807184:	b0800117 	ldw	r2,4(r22)
  807188:	1080004c 	andi	r2,r2,1
  80718c:	2084b03a 	or	r2,r4,r2
  807190:	b0800115 	stw	r2,4(r22)
  807194:	313fdd2e 	bgeu	r6,r4,80710c <_malloc_r+0x58c>
  807198:	b1400204 	addi	r5,r22,8
  80719c:	9009883a 	mov	r4,r18
  8071a0:	0805ff80 	call	805ff8 <_free_r>
  8071a4:	e4000217 	ldw	r16,8(fp)
  8071a8:	003fd806 	br	80710c <_malloc_r+0x58c>
  8071ac:	00800504 	movi	r2,20
  8071b0:	11001536 	bltu	r2,r4,807208 <_malloc_r+0x688>
  8071b4:	210016c4 	addi	r4,r4,91
  8071b8:	200690fa 	slli	r3,r4,3
  8071bc:	003fa606 	br	807058 <_malloc_r+0x4d8>
  8071c0:	8804d4ba 	srli	r2,r17,18
  8071c4:	11801f04 	addi	r6,r2,124
  8071c8:	300490fa 	slli	r2,r6,3
  8071cc:	003e9906 	br	806c34 <_malloc_r+0xb4>
  8071d0:	2009d0ba 	srai	r4,r4,2
  8071d4:	01402074 	movhi	r5,129
  8071d8:	2973c304 	addi	r5,r5,-12532
  8071dc:	00c00044 	movi	r3,1
  8071e0:	28800117 	ldw	r2,4(r5)
  8071e4:	1906983a 	sll	r3,r3,r4
  8071e8:	10c4b03a 	or	r2,r2,r3
  8071ec:	28800115 	stw	r2,4(r5)
  8071f0:	003fa306 	br	807080 <_malloc_r+0x500>
  8071f4:	0027883a 	mov	r19,zero
  8071f8:	00c00044 	movi	r3,1
  8071fc:	003f8606 	br	807018 <_malloc_r+0x498>
  807200:	d1200515 	stw	r4,-32748(gp)
  807204:	003f7306 	br	806fd4 <_malloc_r+0x454>
  807208:	00801504 	movi	r2,84
  80720c:	11001936 	bltu	r2,r4,807274 <_malloc_r+0x6f4>
  807210:	2804d33a 	srli	r2,r5,12
  807214:	11001b84 	addi	r4,r2,110
  807218:	200690fa 	slli	r3,r4,3
  80721c:	003f8e06 	br	807058 <_malloc_r+0x4d8>
  807220:	480b883a 	mov	r5,r9
  807224:	6807883a 	mov	r3,r13
  807228:	288000cc 	andi	r2,r5,3
  80722c:	18fffe04 	addi	r3,r3,-8
  807230:	297fffc4 	addi	r5,r5,-1
  807234:	10001526 	beq	r2,zero,80728c <_malloc_r+0x70c>
  807238:	18800217 	ldw	r2,8(r3)
  80723c:	10fffa26 	beq	r2,r3,807228 <_malloc_r+0x6a8>
  807240:	2109883a 	add	r4,r4,r4
  807244:	393f1e36 	bltu	r7,r4,806ec0 <_malloc_r+0x340>
  807248:	203f1d26 	beq	r4,zero,806ec0 <_malloc_r+0x340>
  80724c:	21c4703a 	and	r2,r4,r7
  807250:	10000226 	beq	r2,zero,80725c <_malloc_r+0x6dc>
  807254:	6013883a 	mov	r9,r12
  807258:	003ee106 	br	806de0 <_malloc_r+0x260>
  80725c:	2109883a 	add	r4,r4,r4
  807260:	3904703a 	and	r2,r7,r4
  807264:	63000104 	addi	r12,r12,4
  807268:	103ffc26 	beq	r2,zero,80725c <_malloc_r+0x6dc>
  80726c:	6013883a 	mov	r9,r12
  807270:	003edb06 	br	806de0 <_malloc_r+0x260>
  807274:	00805504 	movi	r2,340
  807278:	11000836 	bltu	r2,r4,80729c <_malloc_r+0x71c>
  80727c:	2804d3fa 	srli	r2,r5,15
  807280:	11001dc4 	addi	r4,r2,119
  807284:	200690fa 	slli	r3,r4,3
  807288:	003f7306 	br	807058 <_malloc_r+0x4d8>
  80728c:	0104303a 	nor	r2,zero,r4
  807290:	388e703a 	and	r7,r7,r2
  807294:	e1c00115 	stw	r7,4(fp)
  807298:	003fe906 	br	807240 <_malloc_r+0x6c0>
  80729c:	00815504 	movi	r2,1364
  8072a0:	1100032e 	bgeu	r2,r4,8072b0 <_malloc_r+0x730>
  8072a4:	01001f84 	movi	r4,126
  8072a8:	00c0fc04 	movi	r3,1008
  8072ac:	003f6a06 	br	807058 <_malloc_r+0x4d8>
  8072b0:	2804d4ba 	srli	r2,r5,18
  8072b4:	11001f04 	addi	r4,r2,124
  8072b8:	200690fa 	slli	r3,r4,3
  8072bc:	003f6606 	br	807058 <_malloc_r+0x4d8>

008072c0 <memchr>:
  8072c0:	008000c4 	movi	r2,3
  8072c4:	29403fcc 	andi	r5,r5,255
  8072c8:	2007883a 	mov	r3,r4
  8072cc:	1180022e 	bgeu	r2,r6,8072d8 <memchr+0x18>
  8072d0:	2084703a 	and	r2,r4,r2
  8072d4:	10000b26 	beq	r2,zero,807304 <memchr+0x44>
  8072d8:	313fffc4 	addi	r4,r6,-1
  8072dc:	3000051e 	bne	r6,zero,8072f4 <memchr+0x34>
  8072e0:	00002c06 	br	807394 <memchr+0xd4>
  8072e4:	213fffc4 	addi	r4,r4,-1
  8072e8:	00bfffc4 	movi	r2,-1
  8072ec:	18c00044 	addi	r3,r3,1
  8072f0:	20802826 	beq	r4,r2,807394 <memchr+0xd4>
  8072f4:	18800003 	ldbu	r2,0(r3)
  8072f8:	28bffa1e 	bne	r5,r2,8072e4 <memchr+0x24>
  8072fc:	1805883a 	mov	r2,r3
  807300:	f800283a 	ret
  807304:	0011883a 	mov	r8,zero
  807308:	0007883a 	mov	r3,zero
  80730c:	01c00104 	movi	r7,4
  807310:	4004923a 	slli	r2,r8,8
  807314:	18c00044 	addi	r3,r3,1
  807318:	1151883a 	add	r8,r2,r5
  80731c:	19fffc1e 	bne	r3,r7,807310 <memchr+0x50>
  807320:	02bfbff4 	movhi	r10,65279
  807324:	52bfbfc4 	addi	r10,r10,-257
  807328:	02602074 	movhi	r9,32897
  80732c:	4a602004 	addi	r9,r9,-32640
  807330:	02c000c4 	movi	r11,3
  807334:	20800017 	ldw	r2,0(r4)
  807338:	31bfff04 	addi	r6,r6,-4
  80733c:	200f883a 	mov	r7,r4
  807340:	1204f03a 	xor	r2,r2,r8
  807344:	1287883a 	add	r3,r2,r10
  807348:	1a46703a 	and	r3,r3,r9
  80734c:	0084303a 	nor	r2,zero,r2
  807350:	10c4703a 	and	r2,r2,r3
  807354:	10000b26 	beq	r2,zero,807384 <memchr+0xc4>
  807358:	20800003 	ldbu	r2,0(r4)
  80735c:	28800f26 	beq	r5,r2,80739c <memchr+0xdc>
  807360:	20800043 	ldbu	r2,1(r4)
  807364:	21c00044 	addi	r7,r4,1
  807368:	28800c26 	beq	r5,r2,80739c <memchr+0xdc>
  80736c:	20800083 	ldbu	r2,2(r4)
  807370:	21c00084 	addi	r7,r4,2
  807374:	28800926 	beq	r5,r2,80739c <memchr+0xdc>
  807378:	208000c3 	ldbu	r2,3(r4)
  80737c:	21c000c4 	addi	r7,r4,3
  807380:	28800626 	beq	r5,r2,80739c <memchr+0xdc>
  807384:	21000104 	addi	r4,r4,4
  807388:	59bfea36 	bltu	r11,r6,807334 <memchr+0x74>
  80738c:	2007883a 	mov	r3,r4
  807390:	003fd106 	br	8072d8 <memchr+0x18>
  807394:	0005883a 	mov	r2,zero
  807398:	f800283a 	ret
  80739c:	3805883a 	mov	r2,r7
  8073a0:	f800283a 	ret

008073a4 <memcpy>:
  8073a4:	01c003c4 	movi	r7,15
  8073a8:	2007883a 	mov	r3,r4
  8073ac:	3980032e 	bgeu	r7,r6,8073bc <memcpy+0x18>
  8073b0:	2904b03a 	or	r2,r5,r4
  8073b4:	108000cc 	andi	r2,r2,3
  8073b8:	10000926 	beq	r2,zero,8073e0 <memcpy+0x3c>
  8073bc:	30000626 	beq	r6,zero,8073d8 <memcpy+0x34>
  8073c0:	30cd883a 	add	r6,r6,r3
  8073c4:	28800003 	ldbu	r2,0(r5)
  8073c8:	29400044 	addi	r5,r5,1
  8073cc:	18800005 	stb	r2,0(r3)
  8073d0:	18c00044 	addi	r3,r3,1
  8073d4:	30fffb1e 	bne	r6,r3,8073c4 <memcpy+0x20>
  8073d8:	2005883a 	mov	r2,r4
  8073dc:	f800283a 	ret
  8073e0:	3811883a 	mov	r8,r7
  8073e4:	200f883a 	mov	r7,r4
  8073e8:	28c00017 	ldw	r3,0(r5)
  8073ec:	31bffc04 	addi	r6,r6,-16
  8073f0:	38c00015 	stw	r3,0(r7)
  8073f4:	28800117 	ldw	r2,4(r5)
  8073f8:	38800115 	stw	r2,4(r7)
  8073fc:	28c00217 	ldw	r3,8(r5)
  807400:	38c00215 	stw	r3,8(r7)
  807404:	28800317 	ldw	r2,12(r5)
  807408:	29400404 	addi	r5,r5,16
  80740c:	38800315 	stw	r2,12(r7)
  807410:	39c00404 	addi	r7,r7,16
  807414:	41bff436 	bltu	r8,r6,8073e8 <memcpy+0x44>
  807418:	008000c4 	movi	r2,3
  80741c:	1180072e 	bgeu	r2,r6,80743c <memcpy+0x98>
  807420:	1007883a 	mov	r3,r2
  807424:	28800017 	ldw	r2,0(r5)
  807428:	31bfff04 	addi	r6,r6,-4
  80742c:	29400104 	addi	r5,r5,4
  807430:	38800015 	stw	r2,0(r7)
  807434:	39c00104 	addi	r7,r7,4
  807438:	19bffa36 	bltu	r3,r6,807424 <memcpy+0x80>
  80743c:	3807883a 	mov	r3,r7
  807440:	003fde06 	br	8073bc <memcpy+0x18>

00807444 <memmove>:
  807444:	2807883a 	mov	r3,r5
  807448:	2011883a 	mov	r8,r4
  80744c:	29000c2e 	bgeu	r5,r4,807480 <memmove+0x3c>
  807450:	298f883a 	add	r7,r5,r6
  807454:	21c00a2e 	bgeu	r4,r7,807480 <memmove+0x3c>
  807458:	30000726 	beq	r6,zero,807478 <memmove+0x34>
  80745c:	2187883a 	add	r3,r4,r6
  807460:	198dc83a 	sub	r6,r3,r6
  807464:	39ffffc4 	addi	r7,r7,-1
  807468:	38800003 	ldbu	r2,0(r7)
  80746c:	18ffffc4 	addi	r3,r3,-1
  807470:	18800005 	stb	r2,0(r3)
  807474:	19bffb1e 	bne	r3,r6,807464 <memmove+0x20>
  807478:	2005883a 	mov	r2,r4
  80747c:	f800283a 	ret
  807480:	01c003c4 	movi	r7,15
  807484:	39800a36 	bltu	r7,r6,8074b0 <memmove+0x6c>
  807488:	303ffb26 	beq	r6,zero,807478 <memmove+0x34>
  80748c:	400f883a 	mov	r7,r8
  807490:	320d883a 	add	r6,r6,r8
  807494:	28800003 	ldbu	r2,0(r5)
  807498:	29400044 	addi	r5,r5,1
  80749c:	38800005 	stb	r2,0(r7)
  8074a0:	39c00044 	addi	r7,r7,1
  8074a4:	39bffb1e 	bne	r7,r6,807494 <memmove+0x50>
  8074a8:	2005883a 	mov	r2,r4
  8074ac:	f800283a 	ret
  8074b0:	1904b03a 	or	r2,r3,r4
  8074b4:	108000cc 	andi	r2,r2,3
  8074b8:	103ff31e 	bne	r2,zero,807488 <memmove+0x44>
  8074bc:	3811883a 	mov	r8,r7
  8074c0:	180b883a 	mov	r5,r3
  8074c4:	200f883a 	mov	r7,r4
  8074c8:	28c00017 	ldw	r3,0(r5)
  8074cc:	31bffc04 	addi	r6,r6,-16
  8074d0:	38c00015 	stw	r3,0(r7)
  8074d4:	28800117 	ldw	r2,4(r5)
  8074d8:	38800115 	stw	r2,4(r7)
  8074dc:	28c00217 	ldw	r3,8(r5)
  8074e0:	38c00215 	stw	r3,8(r7)
  8074e4:	28800317 	ldw	r2,12(r5)
  8074e8:	29400404 	addi	r5,r5,16
  8074ec:	38800315 	stw	r2,12(r7)
  8074f0:	39c00404 	addi	r7,r7,16
  8074f4:	41bff436 	bltu	r8,r6,8074c8 <memmove+0x84>
  8074f8:	008000c4 	movi	r2,3
  8074fc:	1180072e 	bgeu	r2,r6,80751c <memmove+0xd8>
  807500:	1007883a 	mov	r3,r2
  807504:	28800017 	ldw	r2,0(r5)
  807508:	31bfff04 	addi	r6,r6,-4
  80750c:	29400104 	addi	r5,r5,4
  807510:	38800015 	stw	r2,0(r7)
  807514:	39c00104 	addi	r7,r7,4
  807518:	19bffa36 	bltu	r3,r6,807504 <memmove+0xc0>
  80751c:	3811883a 	mov	r8,r7
  807520:	003fd906 	br	807488 <memmove+0x44>

00807524 <memset>:
  807524:	008000c4 	movi	r2,3
  807528:	29403fcc 	andi	r5,r5,255
  80752c:	2007883a 	mov	r3,r4
  807530:	1180022e 	bgeu	r2,r6,80753c <memset+0x18>
  807534:	2084703a 	and	r2,r4,r2
  807538:	10000826 	beq	r2,zero,80755c <memset+0x38>
  80753c:	30000526 	beq	r6,zero,807554 <memset+0x30>
  807540:	2805883a 	mov	r2,r5
  807544:	30cd883a 	add	r6,r6,r3
  807548:	18800005 	stb	r2,0(r3)
  80754c:	18c00044 	addi	r3,r3,1
  807550:	19bffd1e 	bne	r3,r6,807548 <memset+0x24>
  807554:	2005883a 	mov	r2,r4
  807558:	f800283a 	ret
  80755c:	2804923a 	slli	r2,r5,8
  807560:	020003c4 	movi	r8,15
  807564:	200f883a 	mov	r7,r4
  807568:	2884b03a 	or	r2,r5,r2
  80756c:	1006943a 	slli	r3,r2,16
  807570:	10c6b03a 	or	r3,r2,r3
  807574:	41800a2e 	bgeu	r8,r6,8075a0 <memset+0x7c>
  807578:	4005883a 	mov	r2,r8
  80757c:	31bffc04 	addi	r6,r6,-16
  807580:	38c00015 	stw	r3,0(r7)
  807584:	38c00115 	stw	r3,4(r7)
  807588:	38c00215 	stw	r3,8(r7)
  80758c:	38c00315 	stw	r3,12(r7)
  807590:	39c00404 	addi	r7,r7,16
  807594:	11bff936 	bltu	r2,r6,80757c <memset+0x58>
  807598:	008000c4 	movi	r2,3
  80759c:	1180052e 	bgeu	r2,r6,8075b4 <memset+0x90>
  8075a0:	31bfff04 	addi	r6,r6,-4
  8075a4:	008000c4 	movi	r2,3
  8075a8:	38c00015 	stw	r3,0(r7)
  8075ac:	39c00104 	addi	r7,r7,4
  8075b0:	11bffb36 	bltu	r2,r6,8075a0 <memset+0x7c>
  8075b4:	3807883a 	mov	r3,r7
  8075b8:	003fe006 	br	80753c <memset+0x18>

008075bc <_Bfree>:
  8075bc:	28000826 	beq	r5,zero,8075e0 <_Bfree+0x24>
  8075c0:	28800117 	ldw	r2,4(r5)
  8075c4:	21001317 	ldw	r4,76(r4)
  8075c8:	1085883a 	add	r2,r2,r2
  8075cc:	1085883a 	add	r2,r2,r2
  8075d0:	1105883a 	add	r2,r2,r4
  8075d4:	10c00017 	ldw	r3,0(r2)
  8075d8:	28c00015 	stw	r3,0(r5)
  8075dc:	11400015 	stw	r5,0(r2)
  8075e0:	f800283a 	ret

008075e4 <__hi0bits>:
  8075e4:	20bfffec 	andhi	r2,r4,65535
  8075e8:	10001426 	beq	r2,zero,80763c <__hi0bits+0x58>
  8075ec:	0007883a 	mov	r3,zero
  8075f0:	20bfc02c 	andhi	r2,r4,65280
  8075f4:	1000021e 	bne	r2,zero,807600 <__hi0bits+0x1c>
  8075f8:	2008923a 	slli	r4,r4,8
  8075fc:	18c00204 	addi	r3,r3,8
  807600:	20bc002c 	andhi	r2,r4,61440
  807604:	1000021e 	bne	r2,zero,807610 <__hi0bits+0x2c>
  807608:	2008913a 	slli	r4,r4,4
  80760c:	18c00104 	addi	r3,r3,4
  807610:	20b0002c 	andhi	r2,r4,49152
  807614:	1000031e 	bne	r2,zero,807624 <__hi0bits+0x40>
  807618:	2105883a 	add	r2,r4,r4
  80761c:	18c00084 	addi	r3,r3,2
  807620:	1089883a 	add	r4,r2,r2
  807624:	20000316 	blt	r4,zero,807634 <__hi0bits+0x50>
  807628:	2090002c 	andhi	r2,r4,16384
  80762c:	10000626 	beq	r2,zero,807648 <__hi0bits+0x64>
  807630:	18c00044 	addi	r3,r3,1
  807634:	1805883a 	mov	r2,r3
  807638:	f800283a 	ret
  80763c:	2008943a 	slli	r4,r4,16
  807640:	00c00404 	movi	r3,16
  807644:	003fea06 	br	8075f0 <__hi0bits+0xc>
  807648:	00c00804 	movi	r3,32
  80764c:	1805883a 	mov	r2,r3
  807650:	f800283a 	ret

00807654 <__lo0bits>:
  807654:	20c00017 	ldw	r3,0(r4)
  807658:	188001cc 	andi	r2,r3,7
  80765c:	10000a26 	beq	r2,zero,807688 <__lo0bits+0x34>
  807660:	1880004c 	andi	r2,r3,1
  807664:	1005003a 	cmpeq	r2,r2,zero
  807668:	10002126 	beq	r2,zero,8076f0 <__lo0bits+0x9c>
  80766c:	1880008c 	andi	r2,r3,2
  807670:	1000251e 	bne	r2,zero,807708 <__lo0bits+0xb4>
  807674:	1804d0ba 	srli	r2,r3,2
  807678:	01400084 	movi	r5,2
  80767c:	20800015 	stw	r2,0(r4)
  807680:	2805883a 	mov	r2,r5
  807684:	f800283a 	ret
  807688:	18bfffcc 	andi	r2,r3,65535
  80768c:	10001526 	beq	r2,zero,8076e4 <__lo0bits+0x90>
  807690:	000b883a 	mov	r5,zero
  807694:	18803fcc 	andi	r2,r3,255
  807698:	1000021e 	bne	r2,zero,8076a4 <__lo0bits+0x50>
  80769c:	1806d23a 	srli	r3,r3,8
  8076a0:	29400204 	addi	r5,r5,8
  8076a4:	188003cc 	andi	r2,r3,15
  8076a8:	1000021e 	bne	r2,zero,8076b4 <__lo0bits+0x60>
  8076ac:	1806d13a 	srli	r3,r3,4
  8076b0:	29400104 	addi	r5,r5,4
  8076b4:	188000cc 	andi	r2,r3,3
  8076b8:	1000021e 	bne	r2,zero,8076c4 <__lo0bits+0x70>
  8076bc:	1806d0ba 	srli	r3,r3,2
  8076c0:	29400084 	addi	r5,r5,2
  8076c4:	1880004c 	andi	r2,r3,1
  8076c8:	1000031e 	bne	r2,zero,8076d8 <__lo0bits+0x84>
  8076cc:	1806d07a 	srli	r3,r3,1
  8076d0:	18000a26 	beq	r3,zero,8076fc <__lo0bits+0xa8>
  8076d4:	29400044 	addi	r5,r5,1
  8076d8:	2805883a 	mov	r2,r5
  8076dc:	20c00015 	stw	r3,0(r4)
  8076e0:	f800283a 	ret
  8076e4:	1806d43a 	srli	r3,r3,16
  8076e8:	01400404 	movi	r5,16
  8076ec:	003fe906 	br	807694 <__lo0bits+0x40>
  8076f0:	000b883a 	mov	r5,zero
  8076f4:	2805883a 	mov	r2,r5
  8076f8:	f800283a 	ret
  8076fc:	01400804 	movi	r5,32
  807700:	2805883a 	mov	r2,r5
  807704:	f800283a 	ret
  807708:	1804d07a 	srli	r2,r3,1
  80770c:	01400044 	movi	r5,1
  807710:	20800015 	stw	r2,0(r4)
  807714:	003fda06 	br	807680 <__lo0bits+0x2c>

00807718 <__mcmp>:
  807718:	20800417 	ldw	r2,16(r4)
  80771c:	28c00417 	ldw	r3,16(r5)
  807720:	10cfc83a 	sub	r7,r2,r3
  807724:	38000c1e 	bne	r7,zero,807758 <__mcmp+0x40>
  807728:	18c5883a 	add	r2,r3,r3
  80772c:	1085883a 	add	r2,r2,r2
  807730:	10c00504 	addi	r3,r2,20
  807734:	21000504 	addi	r4,r4,20
  807738:	28cb883a 	add	r5,r5,r3
  80773c:	2085883a 	add	r2,r4,r2
  807740:	10bfff04 	addi	r2,r2,-4
  807744:	297fff04 	addi	r5,r5,-4
  807748:	11800017 	ldw	r6,0(r2)
  80774c:	28c00017 	ldw	r3,0(r5)
  807750:	30c0031e 	bne	r6,r3,807760 <__mcmp+0x48>
  807754:	20bffa36 	bltu	r4,r2,807740 <__mcmp+0x28>
  807758:	3805883a 	mov	r2,r7
  80775c:	f800283a 	ret
  807760:	30c00336 	bltu	r6,r3,807770 <__mcmp+0x58>
  807764:	01c00044 	movi	r7,1
  807768:	3805883a 	mov	r2,r7
  80776c:	f800283a 	ret
  807770:	01ffffc4 	movi	r7,-1
  807774:	003ff806 	br	807758 <__mcmp+0x40>

00807778 <__ulp>:
  807778:	295ffc2c 	andhi	r5,r5,32752
  80777c:	013f3034 	movhi	r4,64704
  807780:	290b883a 	add	r5,r5,r4
  807784:	0145c83a 	sub	r2,zero,r5
  807788:	1007d53a 	srai	r3,r2,20
  80778c:	000d883a 	mov	r6,zero
  807790:	0140040e 	bge	zero,r5,8077a4 <__ulp+0x2c>
  807794:	280f883a 	mov	r7,r5
  807798:	3807883a 	mov	r3,r7
  80779c:	3005883a 	mov	r2,r6
  8077a0:	f800283a 	ret
  8077a4:	008004c4 	movi	r2,19
  8077a8:	193ffb04 	addi	r4,r3,-20
  8077ac:	10c00c0e 	bge	r2,r3,8077e0 <__ulp+0x68>
  8077b0:	008007c4 	movi	r2,31
  8077b4:	1107c83a 	sub	r3,r2,r4
  8077b8:	00800784 	movi	r2,30
  8077bc:	01400044 	movi	r5,1
  8077c0:	11000216 	blt	r2,r4,8077cc <__ulp+0x54>
  8077c4:	00800044 	movi	r2,1
  8077c8:	10ca983a 	sll	r5,r2,r3
  8077cc:	000f883a 	mov	r7,zero
  8077d0:	280d883a 	mov	r6,r5
  8077d4:	3807883a 	mov	r3,r7
  8077d8:	3005883a 	mov	r2,r6
  8077dc:	f800283a 	ret
  8077e0:	00800234 	movhi	r2,8
  8077e4:	10cfd83a 	sra	r7,r2,r3
  8077e8:	000d883a 	mov	r6,zero
  8077ec:	3005883a 	mov	r2,r6
  8077f0:	3807883a 	mov	r3,r7
  8077f4:	f800283a 	ret

008077f8 <__b2d>:
  8077f8:	20800417 	ldw	r2,16(r4)
  8077fc:	defff904 	addi	sp,sp,-28
  807800:	dd000415 	stw	r20,16(sp)
  807804:	1085883a 	add	r2,r2,r2
  807808:	25000504 	addi	r20,r4,20
  80780c:	1085883a 	add	r2,r2,r2
  807810:	dc000015 	stw	r16,0(sp)
  807814:	a0a1883a 	add	r16,r20,r2
  807818:	dd400515 	stw	r21,20(sp)
  80781c:	857fff17 	ldw	r21,-4(r16)
  807820:	dc400115 	stw	r17,4(sp)
  807824:	dfc00615 	stw	ra,24(sp)
  807828:	a809883a 	mov	r4,r21
  80782c:	2823883a 	mov	r17,r5
  807830:	dcc00315 	stw	r19,12(sp)
  807834:	dc800215 	stw	r18,8(sp)
  807838:	08075e40 	call	8075e4 <__hi0bits>
  80783c:	100b883a 	mov	r5,r2
  807840:	00800804 	movi	r2,32
  807844:	1145c83a 	sub	r2,r2,r5
  807848:	88800015 	stw	r2,0(r17)
  80784c:	00800284 	movi	r2,10
  807850:	80ffff04 	addi	r3,r16,-4
  807854:	11401416 	blt	r2,r5,8078a8 <__b2d+0xb0>
  807858:	008002c4 	movi	r2,11
  80785c:	1149c83a 	sub	r4,r2,r5
  807860:	a0c02736 	bltu	r20,r3,807900 <__b2d+0x108>
  807864:	000d883a 	mov	r6,zero
  807868:	28800544 	addi	r2,r5,21
  80786c:	a906d83a 	srl	r3,r21,r4
  807870:	a884983a 	sll	r2,r21,r2
  807874:	1ccffc34 	orhi	r19,r3,16368
  807878:	11a4b03a 	or	r18,r2,r6
  80787c:	9005883a 	mov	r2,r18
  807880:	9807883a 	mov	r3,r19
  807884:	dfc00617 	ldw	ra,24(sp)
  807888:	dd400517 	ldw	r21,20(sp)
  80788c:	dd000417 	ldw	r20,16(sp)
  807890:	dcc00317 	ldw	r19,12(sp)
  807894:	dc800217 	ldw	r18,8(sp)
  807898:	dc400117 	ldw	r17,4(sp)
  80789c:	dc000017 	ldw	r16,0(sp)
  8078a0:	dec00704 	addi	sp,sp,28
  8078a4:	f800283a 	ret
  8078a8:	a0c00e36 	bltu	r20,r3,8078e4 <__b2d+0xec>
  8078ac:	293ffd44 	addi	r4,r5,-11
  8078b0:	000d883a 	mov	r6,zero
  8078b4:	20000f26 	beq	r4,zero,8078f4 <__b2d+0xfc>
  8078b8:	00800804 	movi	r2,32
  8078bc:	110bc83a 	sub	r5,r2,r4
  8078c0:	a0c01236 	bltu	r20,r3,80790c <__b2d+0x114>
  8078c4:	000f883a 	mov	r7,zero
  8078c8:	a904983a 	sll	r2,r21,r4
  8078cc:	3146d83a 	srl	r3,r6,r5
  8078d0:	3108983a 	sll	r4,r6,r4
  8078d4:	108ffc34 	orhi	r2,r2,16368
  8078d8:	18a6b03a 	or	r19,r3,r2
  8078dc:	3924b03a 	or	r18,r7,r4
  8078e0:	003fe606 	br	80787c <__b2d+0x84>
  8078e4:	293ffd44 	addi	r4,r5,-11
  8078e8:	81bffe17 	ldw	r6,-8(r16)
  8078ec:	80fffe04 	addi	r3,r16,-8
  8078f0:	203ff11e 	bne	r4,zero,8078b8 <__b2d+0xc0>
  8078f4:	accffc34 	orhi	r19,r21,16368
  8078f8:	3025883a 	mov	r18,r6
  8078fc:	003fdf06 	br	80787c <__b2d+0x84>
  807900:	18bfff17 	ldw	r2,-4(r3)
  807904:	110cd83a 	srl	r6,r2,r4
  807908:	003fd706 	br	807868 <__b2d+0x70>
  80790c:	18bfff17 	ldw	r2,-4(r3)
  807910:	114ed83a 	srl	r7,r2,r5
  807914:	003fec06 	br	8078c8 <__b2d+0xd0>

00807918 <__ratio>:
  807918:	defff904 	addi	sp,sp,-28
  80791c:	dc400215 	stw	r17,8(sp)
  807920:	2823883a 	mov	r17,r5
  807924:	d80b883a 	mov	r5,sp
  807928:	dfc00615 	stw	ra,24(sp)
  80792c:	dd000515 	stw	r20,20(sp)
  807930:	dcc00415 	stw	r19,16(sp)
  807934:	dc800315 	stw	r18,12(sp)
  807938:	2025883a 	mov	r18,r4
  80793c:	08077f80 	call	8077f8 <__b2d>
  807940:	8809883a 	mov	r4,r17
  807944:	d9400104 	addi	r5,sp,4
  807948:	1027883a 	mov	r19,r2
  80794c:	1829883a 	mov	r20,r3
  807950:	08077f80 	call	8077f8 <__b2d>
  807954:	89000417 	ldw	r4,16(r17)
  807958:	91c00417 	ldw	r7,16(r18)
  80795c:	d9800117 	ldw	r6,4(sp)
  807960:	180b883a 	mov	r5,r3
  807964:	390fc83a 	sub	r7,r7,r4
  807968:	1009883a 	mov	r4,r2
  80796c:	d8800017 	ldw	r2,0(sp)
  807970:	380e917a 	slli	r7,r7,5
  807974:	2011883a 	mov	r8,r4
  807978:	1185c83a 	sub	r2,r2,r6
  80797c:	11c5883a 	add	r2,r2,r7
  807980:	1006953a 	slli	r3,r2,20
  807984:	2813883a 	mov	r9,r5
  807988:	00800d0e 	bge	zero,r2,8079c0 <__ratio+0xa8>
  80798c:	1d29883a 	add	r20,r3,r20
  807990:	a00b883a 	mov	r5,r20
  807994:	480f883a 	mov	r7,r9
  807998:	9809883a 	mov	r4,r19
  80799c:	400d883a 	mov	r6,r8
  8079a0:	080a2fc0 	call	80a2fc <__divdf3>
  8079a4:	dfc00617 	ldw	ra,24(sp)
  8079a8:	dd000517 	ldw	r20,20(sp)
  8079ac:	dcc00417 	ldw	r19,16(sp)
  8079b0:	dc800317 	ldw	r18,12(sp)
  8079b4:	dc400217 	ldw	r17,8(sp)
  8079b8:	dec00704 	addi	sp,sp,28
  8079bc:	f800283a 	ret
  8079c0:	28d3c83a 	sub	r9,r5,r3
  8079c4:	003ff206 	br	807990 <__ratio+0x78>

008079c8 <_mprec_log10>:
  8079c8:	defffe04 	addi	sp,sp,-8
  8079cc:	008005c4 	movi	r2,23
  8079d0:	dc000015 	stw	r16,0(sp)
  8079d4:	dfc00115 	stw	ra,4(sp)
  8079d8:	2021883a 	mov	r16,r4
  8079dc:	11000c16 	blt	r2,r4,807a10 <_mprec_log10+0x48>
  8079e0:	200490fa 	slli	r2,r4,3
  8079e4:	00c02074 	movhi	r3,129
  8079e8:	18f27004 	addi	r3,r3,-13888
  8079ec:	10c5883a 	add	r2,r2,r3
  8079f0:	12400117 	ldw	r9,4(r2)
  8079f4:	12000017 	ldw	r8,0(r2)
  8079f8:	4807883a 	mov	r3,r9
  8079fc:	4005883a 	mov	r2,r8
  807a00:	dfc00117 	ldw	ra,4(sp)
  807a04:	dc000017 	ldw	r16,0(sp)
  807a08:	dec00204 	addi	sp,sp,8
  807a0c:	f800283a 	ret
  807a10:	0011883a 	mov	r8,zero
  807a14:	024ffc34 	movhi	r9,16368
  807a18:	0005883a 	mov	r2,zero
  807a1c:	00d00934 	movhi	r3,16420
  807a20:	480b883a 	mov	r5,r9
  807a24:	4009883a 	mov	r4,r8
  807a28:	180f883a 	mov	r7,r3
  807a2c:	100d883a 	mov	r6,r2
  807a30:	0809f380 	call	809f38 <__muldf3>
  807a34:	843fffc4 	addi	r16,r16,-1
  807a38:	1011883a 	mov	r8,r2
  807a3c:	1813883a 	mov	r9,r3
  807a40:	803ff51e 	bne	r16,zero,807a18 <_mprec_log10+0x50>
  807a44:	4005883a 	mov	r2,r8
  807a48:	4807883a 	mov	r3,r9
  807a4c:	dfc00117 	ldw	ra,4(sp)
  807a50:	dc000017 	ldw	r16,0(sp)
  807a54:	dec00204 	addi	sp,sp,8
  807a58:	f800283a 	ret

00807a5c <__copybits>:
  807a5c:	297fffc4 	addi	r5,r5,-1
  807a60:	30800417 	ldw	r2,16(r6)
  807a64:	280bd17a 	srai	r5,r5,5
  807a68:	31800504 	addi	r6,r6,20
  807a6c:	1085883a 	add	r2,r2,r2
  807a70:	294b883a 	add	r5,r5,r5
  807a74:	294b883a 	add	r5,r5,r5
  807a78:	1085883a 	add	r2,r2,r2
  807a7c:	290b883a 	add	r5,r5,r4
  807a80:	3087883a 	add	r3,r6,r2
  807a84:	29400104 	addi	r5,r5,4
  807a88:	30c0052e 	bgeu	r6,r3,807aa0 <__copybits+0x44>
  807a8c:	30800017 	ldw	r2,0(r6)
  807a90:	31800104 	addi	r6,r6,4
  807a94:	20800015 	stw	r2,0(r4)
  807a98:	21000104 	addi	r4,r4,4
  807a9c:	30fffb36 	bltu	r6,r3,807a8c <__copybits+0x30>
  807aa0:	2140032e 	bgeu	r4,r5,807ab0 <__copybits+0x54>
  807aa4:	20000015 	stw	zero,0(r4)
  807aa8:	21000104 	addi	r4,r4,4
  807aac:	217ffd36 	bltu	r4,r5,807aa4 <__copybits+0x48>
  807ab0:	f800283a 	ret

00807ab4 <__any_on>:
  807ab4:	20800417 	ldw	r2,16(r4)
  807ab8:	2807d17a 	srai	r3,r5,5
  807abc:	21000504 	addi	r4,r4,20
  807ac0:	10c00d0e 	bge	r2,r3,807af8 <__any_on+0x44>
  807ac4:	1085883a 	add	r2,r2,r2
  807ac8:	1085883a 	add	r2,r2,r2
  807acc:	208d883a 	add	r6,r4,r2
  807ad0:	2180182e 	bgeu	r4,r6,807b34 <__any_on+0x80>
  807ad4:	30bfff17 	ldw	r2,-4(r6)
  807ad8:	30ffff04 	addi	r3,r6,-4
  807adc:	1000041e 	bne	r2,zero,807af0 <__any_on+0x3c>
  807ae0:	20c0142e 	bgeu	r4,r3,807b34 <__any_on+0x80>
  807ae4:	18ffff04 	addi	r3,r3,-4
  807ae8:	18800017 	ldw	r2,0(r3)
  807aec:	103ffc26 	beq	r2,zero,807ae0 <__any_on+0x2c>
  807af0:	00800044 	movi	r2,1
  807af4:	f800283a 	ret
  807af8:	18800a0e 	bge	r3,r2,807b24 <__any_on+0x70>
  807afc:	294007cc 	andi	r5,r5,31
  807b00:	28000826 	beq	r5,zero,807b24 <__any_on+0x70>
  807b04:	18c5883a 	add	r2,r3,r3
  807b08:	1085883a 	add	r2,r2,r2
  807b0c:	208d883a 	add	r6,r4,r2
  807b10:	30c00017 	ldw	r3,0(r6)
  807b14:	1944d83a 	srl	r2,r3,r5
  807b18:	1144983a 	sll	r2,r2,r5
  807b1c:	18bff41e 	bne	r3,r2,807af0 <__any_on+0x3c>
  807b20:	003feb06 	br	807ad0 <__any_on+0x1c>
  807b24:	18c5883a 	add	r2,r3,r3
  807b28:	1085883a 	add	r2,r2,r2
  807b2c:	208d883a 	add	r6,r4,r2
  807b30:	003fe706 	br	807ad0 <__any_on+0x1c>
  807b34:	0005883a 	mov	r2,zero
  807b38:	f800283a 	ret

00807b3c <_Balloc>:
  807b3c:	20c01317 	ldw	r3,76(r4)
  807b40:	defffb04 	addi	sp,sp,-20
  807b44:	dcc00315 	stw	r19,12(sp)
  807b48:	dc800215 	stw	r18,8(sp)
  807b4c:	dfc00415 	stw	ra,16(sp)
  807b50:	2825883a 	mov	r18,r5
  807b54:	dc400115 	stw	r17,4(sp)
  807b58:	dc000015 	stw	r16,0(sp)
  807b5c:	2027883a 	mov	r19,r4
  807b60:	01800404 	movi	r6,16
  807b64:	01400104 	movi	r5,4
  807b68:	18001726 	beq	r3,zero,807bc8 <_Balloc+0x8c>
  807b6c:	01400044 	movi	r5,1
  807b70:	9485883a 	add	r2,r18,r18
  807b74:	2ca2983a 	sll	r17,r5,r18
  807b78:	1085883a 	add	r2,r2,r2
  807b7c:	10c7883a 	add	r3,r2,r3
  807b80:	1c000017 	ldw	r16,0(r3)
  807b84:	8c4d883a 	add	r6,r17,r17
  807b88:	318d883a 	add	r6,r6,r6
  807b8c:	9809883a 	mov	r4,r19
  807b90:	31800504 	addi	r6,r6,20
  807b94:	80001226 	beq	r16,zero,807be0 <_Balloc+0xa4>
  807b98:	80800017 	ldw	r2,0(r16)
  807b9c:	18800015 	stw	r2,0(r3)
  807ba0:	80000415 	stw	zero,16(r16)
  807ba4:	80000315 	stw	zero,12(r16)
  807ba8:	8005883a 	mov	r2,r16
  807bac:	dfc00417 	ldw	ra,16(sp)
  807bb0:	dcc00317 	ldw	r19,12(sp)
  807bb4:	dc800217 	ldw	r18,8(sp)
  807bb8:	dc400117 	ldw	r17,4(sp)
  807bbc:	dc000017 	ldw	r16,0(sp)
  807bc0:	dec00504 	addi	sp,sp,20
  807bc4:	f800283a 	ret
  807bc8:	0808f900 	call	808f90 <_calloc_r>
  807bcc:	1007883a 	mov	r3,r2
  807bd0:	0021883a 	mov	r16,zero
  807bd4:	98801315 	stw	r2,76(r19)
  807bd8:	103fe41e 	bne	r2,zero,807b6c <_Balloc+0x30>
  807bdc:	003ff206 	br	807ba8 <_Balloc+0x6c>
  807be0:	0808f900 	call	808f90 <_calloc_r>
  807be4:	103ff026 	beq	r2,zero,807ba8 <_Balloc+0x6c>
  807be8:	1021883a 	mov	r16,r2
  807bec:	14800115 	stw	r18,4(r2)
  807bf0:	14400215 	stw	r17,8(r2)
  807bf4:	003fea06 	br	807ba0 <_Balloc+0x64>

00807bf8 <__d2b>:
  807bf8:	defff504 	addi	sp,sp,-44
  807bfc:	dcc00515 	stw	r19,20(sp)
  807c00:	04c00044 	movi	r19,1
  807c04:	dc000215 	stw	r16,8(sp)
  807c08:	2821883a 	mov	r16,r5
  807c0c:	980b883a 	mov	r5,r19
  807c10:	ddc00915 	stw	r23,36(sp)
  807c14:	dd800815 	stw	r22,32(sp)
  807c18:	dd400715 	stw	r21,28(sp)
  807c1c:	dd000615 	stw	r20,24(sp)
  807c20:	dc800415 	stw	r18,16(sp)
  807c24:	dc400315 	stw	r17,12(sp)
  807c28:	dfc00a15 	stw	ra,40(sp)
  807c2c:	3023883a 	mov	r17,r6
  807c30:	382d883a 	mov	r22,r7
  807c34:	ddc00b17 	ldw	r23,44(sp)
  807c38:	0807b3c0 	call	807b3c <_Balloc>
  807c3c:	1025883a 	mov	r18,r2
  807c40:	00a00034 	movhi	r2,32768
  807c44:	10bfffc4 	addi	r2,r2,-1
  807c48:	8888703a 	and	r4,r17,r2
  807c4c:	202ad53a 	srli	r21,r4,20
  807c50:	00800434 	movhi	r2,16
  807c54:	10bfffc4 	addi	r2,r2,-1
  807c58:	8886703a 	and	r3,r17,r2
  807c5c:	a829003a 	cmpeq	r20,r21,zero
  807c60:	800b883a 	mov	r5,r16
  807c64:	d8c00115 	stw	r3,4(sp)
  807c68:	94000504 	addi	r16,r18,20
  807c6c:	a000021e 	bne	r20,zero,807c78 <__d2b+0x80>
  807c70:	18c00434 	orhi	r3,r3,16
  807c74:	d8c00115 	stw	r3,4(sp)
  807c78:	28002726 	beq	r5,zero,807d18 <__d2b+0x120>
  807c7c:	d809883a 	mov	r4,sp
  807c80:	d9400015 	stw	r5,0(sp)
  807c84:	08076540 	call	807654 <__lo0bits>
  807c88:	100d883a 	mov	r6,r2
  807c8c:	10003526 	beq	r2,zero,807d64 <__d2b+0x16c>
  807c90:	d8c00117 	ldw	r3,4(sp)
  807c94:	00800804 	movi	r2,32
  807c98:	1185c83a 	sub	r2,r2,r6
  807c9c:	d9000017 	ldw	r4,0(sp)
  807ca0:	1886983a 	sll	r3,r3,r2
  807ca4:	1906b03a 	or	r3,r3,r4
  807ca8:	90c00515 	stw	r3,20(r18)
  807cac:	d8c00117 	ldw	r3,4(sp)
  807cb0:	1986d83a 	srl	r3,r3,r6
  807cb4:	d8c00115 	stw	r3,4(sp)
  807cb8:	180b003a 	cmpeq	r5,r3,zero
  807cbc:	00800084 	movi	r2,2
  807cc0:	114bc83a 	sub	r5,r2,r5
  807cc4:	80c00115 	stw	r3,4(r16)
  807cc8:	91400415 	stw	r5,16(r18)
  807ccc:	a0001a1e 	bne	r20,zero,807d38 <__d2b+0x140>
  807cd0:	3545883a 	add	r2,r6,r21
  807cd4:	10bef344 	addi	r2,r2,-1075
  807cd8:	00c00d44 	movi	r3,53
  807cdc:	b0800015 	stw	r2,0(r22)
  807ce0:	1987c83a 	sub	r3,r3,r6
  807ce4:	b8c00015 	stw	r3,0(r23)
  807ce8:	9005883a 	mov	r2,r18
  807cec:	dfc00a17 	ldw	ra,40(sp)
  807cf0:	ddc00917 	ldw	r23,36(sp)
  807cf4:	dd800817 	ldw	r22,32(sp)
  807cf8:	dd400717 	ldw	r21,28(sp)
  807cfc:	dd000617 	ldw	r20,24(sp)
  807d00:	dcc00517 	ldw	r19,20(sp)
  807d04:	dc800417 	ldw	r18,16(sp)
  807d08:	dc400317 	ldw	r17,12(sp)
  807d0c:	dc000217 	ldw	r16,8(sp)
  807d10:	dec00b04 	addi	sp,sp,44
  807d14:	f800283a 	ret
  807d18:	d9000104 	addi	r4,sp,4
  807d1c:	08076540 	call	807654 <__lo0bits>
  807d20:	11800804 	addi	r6,r2,32
  807d24:	d8800117 	ldw	r2,4(sp)
  807d28:	94c00415 	stw	r19,16(r18)
  807d2c:	980b883a 	mov	r5,r19
  807d30:	90800515 	stw	r2,20(r18)
  807d34:	a03fe626 	beq	r20,zero,807cd0 <__d2b+0xd8>
  807d38:	2945883a 	add	r2,r5,r5
  807d3c:	1085883a 	add	r2,r2,r2
  807d40:	1405883a 	add	r2,r2,r16
  807d44:	113fff17 	ldw	r4,-4(r2)
  807d48:	30fef384 	addi	r3,r6,-1074
  807d4c:	2820917a 	slli	r16,r5,5
  807d50:	b0c00015 	stw	r3,0(r22)
  807d54:	08075e40 	call	8075e4 <__hi0bits>
  807d58:	80a1c83a 	sub	r16,r16,r2
  807d5c:	bc000015 	stw	r16,0(r23)
  807d60:	003fe106 	br	807ce8 <__d2b+0xf0>
  807d64:	d8800017 	ldw	r2,0(sp)
  807d68:	90800515 	stw	r2,20(r18)
  807d6c:	d8c00117 	ldw	r3,4(sp)
  807d70:	003fd106 	br	807cb8 <__d2b+0xc0>

00807d74 <__mdiff>:
  807d74:	defffb04 	addi	sp,sp,-20
  807d78:	dc000015 	stw	r16,0(sp)
  807d7c:	2821883a 	mov	r16,r5
  807d80:	dc800215 	stw	r18,8(sp)
  807d84:	300b883a 	mov	r5,r6
  807d88:	2025883a 	mov	r18,r4
  807d8c:	8009883a 	mov	r4,r16
  807d90:	dc400115 	stw	r17,4(sp)
  807d94:	dfc00415 	stw	ra,16(sp)
  807d98:	dcc00315 	stw	r19,12(sp)
  807d9c:	3023883a 	mov	r17,r6
  807da0:	08077180 	call	807718 <__mcmp>
  807da4:	10004226 	beq	r2,zero,807eb0 <__mdiff+0x13c>
  807da8:	10005016 	blt	r2,zero,807eec <__mdiff+0x178>
  807dac:	0027883a 	mov	r19,zero
  807db0:	81400117 	ldw	r5,4(r16)
  807db4:	9009883a 	mov	r4,r18
  807db8:	0807b3c0 	call	807b3c <_Balloc>
  807dbc:	1019883a 	mov	r12,r2
  807dc0:	82800417 	ldw	r10,16(r16)
  807dc4:	88800417 	ldw	r2,16(r17)
  807dc8:	81800504 	addi	r6,r16,20
  807dcc:	5287883a 	add	r3,r10,r10
  807dd0:	1085883a 	add	r2,r2,r2
  807dd4:	18c7883a 	add	r3,r3,r3
  807dd8:	1085883a 	add	r2,r2,r2
  807ddc:	8a000504 	addi	r8,r17,20
  807de0:	64c00315 	stw	r19,12(r12)
  807de4:	30db883a 	add	r13,r6,r3
  807de8:	4097883a 	add	r11,r8,r2
  807dec:	61c00504 	addi	r7,r12,20
  807df0:	0013883a 	mov	r9,zero
  807df4:	31000017 	ldw	r4,0(r6)
  807df8:	41400017 	ldw	r5,0(r8)
  807dfc:	42000104 	addi	r8,r8,4
  807e00:	20bfffcc 	andi	r2,r4,65535
  807e04:	28ffffcc 	andi	r3,r5,65535
  807e08:	10c5c83a 	sub	r2,r2,r3
  807e0c:	1245883a 	add	r2,r2,r9
  807e10:	2008d43a 	srli	r4,r4,16
  807e14:	280ad43a 	srli	r5,r5,16
  807e18:	1007d43a 	srai	r3,r2,16
  807e1c:	3880000d 	sth	r2,0(r7)
  807e20:	2149c83a 	sub	r4,r4,r5
  807e24:	20c9883a 	add	r4,r4,r3
  807e28:	3900008d 	sth	r4,2(r7)
  807e2c:	31800104 	addi	r6,r6,4
  807e30:	39c00104 	addi	r7,r7,4
  807e34:	2013d43a 	srai	r9,r4,16
  807e38:	42ffee36 	bltu	r8,r11,807df4 <__mdiff+0x80>
  807e3c:	33400c2e 	bgeu	r6,r13,807e70 <__mdiff+0xfc>
  807e40:	30800017 	ldw	r2,0(r6)
  807e44:	31800104 	addi	r6,r6,4
  807e48:	10ffffcc 	andi	r3,r2,65535
  807e4c:	1a47883a 	add	r3,r3,r9
  807e50:	1004d43a 	srli	r2,r2,16
  807e54:	1809d43a 	srai	r4,r3,16
  807e58:	38c0000d 	sth	r3,0(r7)
  807e5c:	1105883a 	add	r2,r2,r4
  807e60:	3880008d 	sth	r2,2(r7)
  807e64:	1013d43a 	srai	r9,r2,16
  807e68:	39c00104 	addi	r7,r7,4
  807e6c:	337ff436 	bltu	r6,r13,807e40 <__mdiff+0xcc>
  807e70:	38bfff17 	ldw	r2,-4(r7)
  807e74:	38ffff04 	addi	r3,r7,-4
  807e78:	1000041e 	bne	r2,zero,807e8c <__mdiff+0x118>
  807e7c:	18ffff04 	addi	r3,r3,-4
  807e80:	18800017 	ldw	r2,0(r3)
  807e84:	52bfffc4 	addi	r10,r10,-1
  807e88:	103ffc26 	beq	r2,zero,807e7c <__mdiff+0x108>
  807e8c:	6005883a 	mov	r2,r12
  807e90:	62800415 	stw	r10,16(r12)
  807e94:	dfc00417 	ldw	ra,16(sp)
  807e98:	dcc00317 	ldw	r19,12(sp)
  807e9c:	dc800217 	ldw	r18,8(sp)
  807ea0:	dc400117 	ldw	r17,4(sp)
  807ea4:	dc000017 	ldw	r16,0(sp)
  807ea8:	dec00504 	addi	sp,sp,20
  807eac:	f800283a 	ret
  807eb0:	9009883a 	mov	r4,r18
  807eb4:	000b883a 	mov	r5,zero
  807eb8:	0807b3c0 	call	807b3c <_Balloc>
  807ebc:	1019883a 	mov	r12,r2
  807ec0:	00800044 	movi	r2,1
  807ec4:	60800415 	stw	r2,16(r12)
  807ec8:	6005883a 	mov	r2,r12
  807ecc:	60000515 	stw	zero,20(r12)
  807ed0:	dfc00417 	ldw	ra,16(sp)
  807ed4:	dcc00317 	ldw	r19,12(sp)
  807ed8:	dc800217 	ldw	r18,8(sp)
  807edc:	dc400117 	ldw	r17,4(sp)
  807ee0:	dc000017 	ldw	r16,0(sp)
  807ee4:	dec00504 	addi	sp,sp,20
  807ee8:	f800283a 	ret
  807eec:	880d883a 	mov	r6,r17
  807ef0:	04c00044 	movi	r19,1
  807ef4:	8023883a 	mov	r17,r16
  807ef8:	3021883a 	mov	r16,r6
  807efc:	003fac06 	br	807db0 <__mdiff+0x3c>

00807f00 <__lshift>:
  807f00:	defff904 	addi	sp,sp,-28
  807f04:	28800417 	ldw	r2,16(r5)
  807f08:	dc000015 	stw	r16,0(sp)
  807f0c:	3021d17a 	srai	r16,r6,5
  807f10:	28c00217 	ldw	r3,8(r5)
  807f14:	10800044 	addi	r2,r2,1
  807f18:	dc400115 	stw	r17,4(sp)
  807f1c:	80a3883a 	add	r17,r16,r2
  807f20:	dd400515 	stw	r21,20(sp)
  807f24:	dd000415 	stw	r20,16(sp)
  807f28:	dc800215 	stw	r18,8(sp)
  807f2c:	dfc00615 	stw	ra,24(sp)
  807f30:	2825883a 	mov	r18,r5
  807f34:	dcc00315 	stw	r19,12(sp)
  807f38:	3029883a 	mov	r20,r6
  807f3c:	202b883a 	mov	r21,r4
  807f40:	29400117 	ldw	r5,4(r5)
  807f44:	1c40030e 	bge	r3,r17,807f54 <__lshift+0x54>
  807f48:	18c7883a 	add	r3,r3,r3
  807f4c:	29400044 	addi	r5,r5,1
  807f50:	1c7ffd16 	blt	r3,r17,807f48 <__lshift+0x48>
  807f54:	a809883a 	mov	r4,r21
  807f58:	0807b3c0 	call	807b3c <_Balloc>
  807f5c:	1027883a 	mov	r19,r2
  807f60:	11400504 	addi	r5,r2,20
  807f64:	0400090e 	bge	zero,r16,807f8c <__lshift+0x8c>
  807f68:	2805883a 	mov	r2,r5
  807f6c:	0007883a 	mov	r3,zero
  807f70:	18c00044 	addi	r3,r3,1
  807f74:	10000015 	stw	zero,0(r2)
  807f78:	10800104 	addi	r2,r2,4
  807f7c:	80fffc1e 	bne	r16,r3,807f70 <__lshift+0x70>
  807f80:	8405883a 	add	r2,r16,r16
  807f84:	1085883a 	add	r2,r2,r2
  807f88:	288b883a 	add	r5,r5,r2
  807f8c:	90800417 	ldw	r2,16(r18)
  807f90:	91000504 	addi	r4,r18,20
  807f94:	a18007cc 	andi	r6,r20,31
  807f98:	1085883a 	add	r2,r2,r2
  807f9c:	1085883a 	add	r2,r2,r2
  807fa0:	208f883a 	add	r7,r4,r2
  807fa4:	30001e26 	beq	r6,zero,808020 <__lshift+0x120>
  807fa8:	00800804 	movi	r2,32
  807fac:	1191c83a 	sub	r8,r2,r6
  807fb0:	0007883a 	mov	r3,zero
  807fb4:	20800017 	ldw	r2,0(r4)
  807fb8:	1184983a 	sll	r2,r2,r6
  807fbc:	1884b03a 	or	r2,r3,r2
  807fc0:	28800015 	stw	r2,0(r5)
  807fc4:	20c00017 	ldw	r3,0(r4)
  807fc8:	21000104 	addi	r4,r4,4
  807fcc:	29400104 	addi	r5,r5,4
  807fd0:	1a06d83a 	srl	r3,r3,r8
  807fd4:	21fff736 	bltu	r4,r7,807fb4 <__lshift+0xb4>
  807fd8:	28c00015 	stw	r3,0(r5)
  807fdc:	18000126 	beq	r3,zero,807fe4 <__lshift+0xe4>
  807fe0:	8c400044 	addi	r17,r17,1
  807fe4:	88bfffc4 	addi	r2,r17,-1
  807fe8:	98800415 	stw	r2,16(r19)
  807fec:	a809883a 	mov	r4,r21
  807ff0:	900b883a 	mov	r5,r18
  807ff4:	08075bc0 	call	8075bc <_Bfree>
  807ff8:	9805883a 	mov	r2,r19
  807ffc:	dfc00617 	ldw	ra,24(sp)
  808000:	dd400517 	ldw	r21,20(sp)
  808004:	dd000417 	ldw	r20,16(sp)
  808008:	dcc00317 	ldw	r19,12(sp)
  80800c:	dc800217 	ldw	r18,8(sp)
  808010:	dc400117 	ldw	r17,4(sp)
  808014:	dc000017 	ldw	r16,0(sp)
  808018:	dec00704 	addi	sp,sp,28
  80801c:	f800283a 	ret
  808020:	20800017 	ldw	r2,0(r4)
  808024:	21000104 	addi	r4,r4,4
  808028:	28800015 	stw	r2,0(r5)
  80802c:	29400104 	addi	r5,r5,4
  808030:	21ffec2e 	bgeu	r4,r7,807fe4 <__lshift+0xe4>
  808034:	20800017 	ldw	r2,0(r4)
  808038:	21000104 	addi	r4,r4,4
  80803c:	28800015 	stw	r2,0(r5)
  808040:	29400104 	addi	r5,r5,4
  808044:	21fff636 	bltu	r4,r7,808020 <__lshift+0x120>
  808048:	003fe606 	br	807fe4 <__lshift+0xe4>

0080804c <__multiply>:
  80804c:	defff904 	addi	sp,sp,-28
  808050:	dcc00315 	stw	r19,12(sp)
  808054:	dc800215 	stw	r18,8(sp)
  808058:	2cc00417 	ldw	r19,16(r5)
  80805c:	34800417 	ldw	r18,16(r6)
  808060:	dd000415 	stw	r20,16(sp)
  808064:	dc400115 	stw	r17,4(sp)
  808068:	dfc00615 	stw	ra,24(sp)
  80806c:	dd400515 	stw	r21,20(sp)
  808070:	dc000015 	stw	r16,0(sp)
  808074:	2823883a 	mov	r17,r5
  808078:	3029883a 	mov	r20,r6
  80807c:	9c80040e 	bge	r19,r18,808090 <__multiply+0x44>
  808080:	9027883a 	mov	r19,r18
  808084:	2c800417 	ldw	r18,16(r5)
  808088:	2829883a 	mov	r20,r5
  80808c:	3023883a 	mov	r17,r6
  808090:	88800217 	ldw	r2,8(r17)
  808094:	9ca1883a 	add	r16,r19,r18
  808098:	89400117 	ldw	r5,4(r17)
  80809c:	1400010e 	bge	r2,r16,8080a4 <__multiply+0x58>
  8080a0:	29400044 	addi	r5,r5,1
  8080a4:	0807b3c0 	call	807b3c <_Balloc>
  8080a8:	102b883a 	mov	r21,r2
  8080ac:	8405883a 	add	r2,r16,r16
  8080b0:	1085883a 	add	r2,r2,r2
  8080b4:	a9000504 	addi	r4,r21,20
  8080b8:	209d883a 	add	r14,r4,r2
  8080bc:	2380042e 	bgeu	r4,r14,8080d0 <__multiply+0x84>
  8080c0:	2005883a 	mov	r2,r4
  8080c4:	10000015 	stw	zero,0(r2)
  8080c8:	10800104 	addi	r2,r2,4
  8080cc:	13bffd36 	bltu	r2,r14,8080c4 <__multiply+0x78>
  8080d0:	9485883a 	add	r2,r18,r18
  8080d4:	9cc7883a 	add	r3,r19,r19
  8080d8:	a1800504 	addi	r6,r20,20
  8080dc:	1085883a 	add	r2,r2,r2
  8080e0:	8b400504 	addi	r13,r17,20
  8080e4:	18c7883a 	add	r3,r3,r3
  8080e8:	309f883a 	add	r15,r6,r2
  8080ec:	68d7883a 	add	r11,r13,r3
  8080f0:	33c03b2e 	bgeu	r6,r15,8081e0 <__multiply+0x194>
  8080f4:	2019883a 	mov	r12,r4
  8080f8:	30800017 	ldw	r2,0(r6)
  8080fc:	127fffcc 	andi	r9,r2,65535
  808100:	48001826 	beq	r9,zero,808164 <__multiply+0x118>
  808104:	6811883a 	mov	r8,r13
  808108:	600f883a 	mov	r7,r12
  80810c:	0015883a 	mov	r10,zero
  808110:	40c00017 	ldw	r3,0(r8)
  808114:	39400017 	ldw	r5,0(r7)
  808118:	42000104 	addi	r8,r8,4
  80811c:	193fffcc 	andi	r4,r3,65535
  808120:	4909383a 	mul	r4,r9,r4
  808124:	1806d43a 	srli	r3,r3,16
  808128:	28bfffcc 	andi	r2,r5,65535
  80812c:	5085883a 	add	r2,r10,r2
  808130:	2089883a 	add	r4,r4,r2
  808134:	48c7383a 	mul	r3,r9,r3
  808138:	280ad43a 	srli	r5,r5,16
  80813c:	2004d43a 	srli	r2,r4,16
  808140:	3900000d 	sth	r4,0(r7)
  808144:	1947883a 	add	r3,r3,r5
  808148:	10c5883a 	add	r2,r2,r3
  80814c:	3880008d 	sth	r2,2(r7)
  808150:	1014d43a 	srli	r10,r2,16
  808154:	39c00104 	addi	r7,r7,4
  808158:	42ffed36 	bltu	r8,r11,808110 <__multiply+0xc4>
  80815c:	3a800015 	stw	r10,0(r7)
  808160:	30800017 	ldw	r2,0(r6)
  808164:	1012d43a 	srli	r9,r2,16
  808168:	48001926 	beq	r9,zero,8081d0 <__multiply+0x184>
  80816c:	60800017 	ldw	r2,0(r12)
  808170:	6811883a 	mov	r8,r13
  808174:	600f883a 	mov	r7,r12
  808178:	0015883a 	mov	r10,zero
  80817c:	100b883a 	mov	r5,r2
  808180:	41000017 	ldw	r4,0(r8)
  808184:	2806d43a 	srli	r3,r5,16
  808188:	3880000d 	sth	r2,0(r7)
  80818c:	20bfffcc 	andi	r2,r4,65535
  808190:	4885383a 	mul	r2,r9,r2
  808194:	50c7883a 	add	r3,r10,r3
  808198:	2008d43a 	srli	r4,r4,16
  80819c:	10c5883a 	add	r2,r2,r3
  8081a0:	3880008d 	sth	r2,2(r7)
  8081a4:	39c00104 	addi	r7,r7,4
  8081a8:	39400017 	ldw	r5,0(r7)
  8081ac:	4909383a 	mul	r4,r9,r4
  8081b0:	1004d43a 	srli	r2,r2,16
  8081b4:	28ffffcc 	andi	r3,r5,65535
  8081b8:	20c9883a 	add	r4,r4,r3
  8081bc:	1105883a 	add	r2,r2,r4
  8081c0:	42000104 	addi	r8,r8,4
  8081c4:	1014d43a 	srli	r10,r2,16
  8081c8:	42ffed36 	bltu	r8,r11,808180 <__multiply+0x134>
  8081cc:	38800015 	stw	r2,0(r7)
  8081d0:	31800104 	addi	r6,r6,4
  8081d4:	33c0022e 	bgeu	r6,r15,8081e0 <__multiply+0x194>
  8081d8:	63000104 	addi	r12,r12,4
  8081dc:	003fc606 	br	8080f8 <__multiply+0xac>
  8081e0:	0400090e 	bge	zero,r16,808208 <__multiply+0x1bc>
  8081e4:	70bfff17 	ldw	r2,-4(r14)
  8081e8:	70ffff04 	addi	r3,r14,-4
  8081ec:	10000326 	beq	r2,zero,8081fc <__multiply+0x1b0>
  8081f0:	00000506 	br	808208 <__multiply+0x1bc>
  8081f4:	18800017 	ldw	r2,0(r3)
  8081f8:	1000031e 	bne	r2,zero,808208 <__multiply+0x1bc>
  8081fc:	843fffc4 	addi	r16,r16,-1
  808200:	18ffff04 	addi	r3,r3,-4
  808204:	803ffb1e 	bne	r16,zero,8081f4 <__multiply+0x1a8>
  808208:	a805883a 	mov	r2,r21
  80820c:	ac000415 	stw	r16,16(r21)
  808210:	dfc00617 	ldw	ra,24(sp)
  808214:	dd400517 	ldw	r21,20(sp)
  808218:	dd000417 	ldw	r20,16(sp)
  80821c:	dcc00317 	ldw	r19,12(sp)
  808220:	dc800217 	ldw	r18,8(sp)
  808224:	dc400117 	ldw	r17,4(sp)
  808228:	dc000017 	ldw	r16,0(sp)
  80822c:	dec00704 	addi	sp,sp,28
  808230:	f800283a 	ret

00808234 <__i2b>:
  808234:	defffd04 	addi	sp,sp,-12
  808238:	dc000015 	stw	r16,0(sp)
  80823c:	04000044 	movi	r16,1
  808240:	dc800115 	stw	r18,4(sp)
  808244:	2825883a 	mov	r18,r5
  808248:	800b883a 	mov	r5,r16
  80824c:	dfc00215 	stw	ra,8(sp)
  808250:	0807b3c0 	call	807b3c <_Balloc>
  808254:	14000415 	stw	r16,16(r2)
  808258:	14800515 	stw	r18,20(r2)
  80825c:	dfc00217 	ldw	ra,8(sp)
  808260:	dc800117 	ldw	r18,4(sp)
  808264:	dc000017 	ldw	r16,0(sp)
  808268:	dec00304 	addi	sp,sp,12
  80826c:	f800283a 	ret

00808270 <__multadd>:
  808270:	defffa04 	addi	sp,sp,-24
  808274:	dc800215 	stw	r18,8(sp)
  808278:	2c800417 	ldw	r18,16(r5)
  80827c:	dd000415 	stw	r20,16(sp)
  808280:	dcc00315 	stw	r19,12(sp)
  808284:	dc000015 	stw	r16,0(sp)
  808288:	dfc00515 	stw	ra,20(sp)
  80828c:	3821883a 	mov	r16,r7
  808290:	dc400115 	stw	r17,4(sp)
  808294:	2827883a 	mov	r19,r5
  808298:	2029883a 	mov	r20,r4
  80829c:	2a000504 	addi	r8,r5,20
  8082a0:	000f883a 	mov	r7,zero
  8082a4:	40800017 	ldw	r2,0(r8)
  8082a8:	39c00044 	addi	r7,r7,1
  8082ac:	10ffffcc 	andi	r3,r2,65535
  8082b0:	1987383a 	mul	r3,r3,r6
  8082b4:	1004d43a 	srli	r2,r2,16
  8082b8:	1c07883a 	add	r3,r3,r16
  8082bc:	180ad43a 	srli	r5,r3,16
  8082c0:	1185383a 	mul	r2,r2,r6
  8082c4:	18ffffcc 	andi	r3,r3,65535
  8082c8:	1145883a 	add	r2,r2,r5
  8082cc:	1008943a 	slli	r4,r2,16
  8082d0:	1020d43a 	srli	r16,r2,16
  8082d4:	20c9883a 	add	r4,r4,r3
  8082d8:	41000015 	stw	r4,0(r8)
  8082dc:	42000104 	addi	r8,r8,4
  8082e0:	3cbff016 	blt	r7,r18,8082a4 <__multadd+0x34>
  8082e4:	80000826 	beq	r16,zero,808308 <__multadd+0x98>
  8082e8:	98800217 	ldw	r2,8(r19)
  8082ec:	90800f0e 	bge	r18,r2,80832c <__multadd+0xbc>
  8082f0:	9485883a 	add	r2,r18,r18
  8082f4:	1085883a 	add	r2,r2,r2
  8082f8:	14c5883a 	add	r2,r2,r19
  8082fc:	90c00044 	addi	r3,r18,1
  808300:	14000515 	stw	r16,20(r2)
  808304:	98c00415 	stw	r3,16(r19)
  808308:	9805883a 	mov	r2,r19
  80830c:	dfc00517 	ldw	ra,20(sp)
  808310:	dd000417 	ldw	r20,16(sp)
  808314:	dcc00317 	ldw	r19,12(sp)
  808318:	dc800217 	ldw	r18,8(sp)
  80831c:	dc400117 	ldw	r17,4(sp)
  808320:	dc000017 	ldw	r16,0(sp)
  808324:	dec00604 	addi	sp,sp,24
  808328:	f800283a 	ret
  80832c:	99400117 	ldw	r5,4(r19)
  808330:	a009883a 	mov	r4,r20
  808334:	29400044 	addi	r5,r5,1
  808338:	0807b3c0 	call	807b3c <_Balloc>
  80833c:	99800417 	ldw	r6,16(r19)
  808340:	99400304 	addi	r5,r19,12
  808344:	11000304 	addi	r4,r2,12
  808348:	318d883a 	add	r6,r6,r6
  80834c:	318d883a 	add	r6,r6,r6
  808350:	31800204 	addi	r6,r6,8
  808354:	1023883a 	mov	r17,r2
  808358:	08073a40 	call	8073a4 <memcpy>
  80835c:	980b883a 	mov	r5,r19
  808360:	a009883a 	mov	r4,r20
  808364:	08075bc0 	call	8075bc <_Bfree>
  808368:	8827883a 	mov	r19,r17
  80836c:	003fe006 	br	8082f0 <__multadd+0x80>

00808370 <__pow5mult>:
  808370:	defffa04 	addi	sp,sp,-24
  808374:	308000cc 	andi	r2,r6,3
  808378:	dd000415 	stw	r20,16(sp)
  80837c:	dcc00315 	stw	r19,12(sp)
  808380:	dc000015 	stw	r16,0(sp)
  808384:	dfc00515 	stw	ra,20(sp)
  808388:	dc800215 	stw	r18,8(sp)
  80838c:	dc400115 	stw	r17,4(sp)
  808390:	3021883a 	mov	r16,r6
  808394:	2027883a 	mov	r19,r4
  808398:	2829883a 	mov	r20,r5
  80839c:	10002b1e 	bne	r2,zero,80844c <__pow5mult+0xdc>
  8083a0:	8025d0ba 	srai	r18,r16,2
  8083a4:	90001b26 	beq	r18,zero,808414 <__pow5mult+0xa4>
  8083a8:	9c001217 	ldw	r16,72(r19)
  8083ac:	8000081e 	bne	r16,zero,8083d0 <__pow5mult+0x60>
  8083b0:	00003006 	br	808474 <__pow5mult+0x104>
  8083b4:	800b883a 	mov	r5,r16
  8083b8:	800d883a 	mov	r6,r16
  8083bc:	9809883a 	mov	r4,r19
  8083c0:	90001426 	beq	r18,zero,808414 <__pow5mult+0xa4>
  8083c4:	80800017 	ldw	r2,0(r16)
  8083c8:	10001b26 	beq	r2,zero,808438 <__pow5mult+0xc8>
  8083cc:	1021883a 	mov	r16,r2
  8083d0:	9080004c 	andi	r2,r18,1
  8083d4:	1005003a 	cmpeq	r2,r2,zero
  8083d8:	9025d07a 	srai	r18,r18,1
  8083dc:	800d883a 	mov	r6,r16
  8083e0:	9809883a 	mov	r4,r19
  8083e4:	a00b883a 	mov	r5,r20
  8083e8:	103ff21e 	bne	r2,zero,8083b4 <__pow5mult+0x44>
  8083ec:	080804c0 	call	80804c <__multiply>
  8083f0:	a00b883a 	mov	r5,r20
  8083f4:	9809883a 	mov	r4,r19
  8083f8:	1023883a 	mov	r17,r2
  8083fc:	08075bc0 	call	8075bc <_Bfree>
  808400:	8829883a 	mov	r20,r17
  808404:	800b883a 	mov	r5,r16
  808408:	800d883a 	mov	r6,r16
  80840c:	9809883a 	mov	r4,r19
  808410:	903fec1e 	bne	r18,zero,8083c4 <__pow5mult+0x54>
  808414:	a005883a 	mov	r2,r20
  808418:	dfc00517 	ldw	ra,20(sp)
  80841c:	dd000417 	ldw	r20,16(sp)
  808420:	dcc00317 	ldw	r19,12(sp)
  808424:	dc800217 	ldw	r18,8(sp)
  808428:	dc400117 	ldw	r17,4(sp)
  80842c:	dc000017 	ldw	r16,0(sp)
  808430:	dec00604 	addi	sp,sp,24
  808434:	f800283a 	ret
  808438:	080804c0 	call	80804c <__multiply>
  80843c:	80800015 	stw	r2,0(r16)
  808440:	1021883a 	mov	r16,r2
  808444:	10000015 	stw	zero,0(r2)
  808448:	003fe106 	br	8083d0 <__pow5mult+0x60>
  80844c:	1085883a 	add	r2,r2,r2
  808450:	00c02074 	movhi	r3,129
  808454:	18f2b604 	addi	r3,r3,-13608
  808458:	1085883a 	add	r2,r2,r2
  80845c:	10c5883a 	add	r2,r2,r3
  808460:	11bfff17 	ldw	r6,-4(r2)
  808464:	000f883a 	mov	r7,zero
  808468:	08082700 	call	808270 <__multadd>
  80846c:	1029883a 	mov	r20,r2
  808470:	003fcb06 	br	8083a0 <__pow5mult+0x30>
  808474:	9809883a 	mov	r4,r19
  808478:	01409c44 	movi	r5,625
  80847c:	08082340 	call	808234 <__i2b>
  808480:	98801215 	stw	r2,72(r19)
  808484:	1021883a 	mov	r16,r2
  808488:	10000015 	stw	zero,0(r2)
  80848c:	003fd006 	br	8083d0 <__pow5mult+0x60>

00808490 <__s2b>:
  808490:	defff904 	addi	sp,sp,-28
  808494:	dcc00315 	stw	r19,12(sp)
  808498:	dc800215 	stw	r18,8(sp)
  80849c:	2827883a 	mov	r19,r5
  8084a0:	2025883a 	mov	r18,r4
  8084a4:	01400244 	movi	r5,9
  8084a8:	39000204 	addi	r4,r7,8
  8084ac:	dd000415 	stw	r20,16(sp)
  8084b0:	dc400115 	stw	r17,4(sp)
  8084b4:	dfc00615 	stw	ra,24(sp)
  8084b8:	dd400515 	stw	r21,20(sp)
  8084bc:	dc000015 	stw	r16,0(sp)
  8084c0:	3829883a 	mov	r20,r7
  8084c4:	3023883a 	mov	r17,r6
  8084c8:	080aad00 	call	80aad0 <__divsi3>
  8084cc:	00c00044 	movi	r3,1
  8084d0:	1880350e 	bge	r3,r2,8085a8 <__s2b+0x118>
  8084d4:	000b883a 	mov	r5,zero
  8084d8:	18c7883a 	add	r3,r3,r3
  8084dc:	29400044 	addi	r5,r5,1
  8084e0:	18bffd16 	blt	r3,r2,8084d8 <__s2b+0x48>
  8084e4:	9009883a 	mov	r4,r18
  8084e8:	0807b3c0 	call	807b3c <_Balloc>
  8084ec:	1011883a 	mov	r8,r2
  8084f0:	d8800717 	ldw	r2,28(sp)
  8084f4:	00c00044 	movi	r3,1
  8084f8:	01800244 	movi	r6,9
  8084fc:	40800515 	stw	r2,20(r8)
  808500:	40c00415 	stw	r3,16(r8)
  808504:	3440260e 	bge	r6,r17,8085a0 <__s2b+0x110>
  808508:	3021883a 	mov	r16,r6
  80850c:	99ab883a 	add	r21,r19,r6
  808510:	9c05883a 	add	r2,r19,r16
  808514:	11c00007 	ldb	r7,0(r2)
  808518:	400b883a 	mov	r5,r8
  80851c:	9009883a 	mov	r4,r18
  808520:	39fff404 	addi	r7,r7,-48
  808524:	01800284 	movi	r6,10
  808528:	08082700 	call	808270 <__multadd>
  80852c:	84000044 	addi	r16,r16,1
  808530:	1011883a 	mov	r8,r2
  808534:	8c3ff61e 	bne	r17,r16,808510 <__s2b+0x80>
  808538:	ac45883a 	add	r2,r21,r17
  80853c:	117ffe04 	addi	r5,r2,-8
  808540:	880d883a 	mov	r6,r17
  808544:	35000c0e 	bge	r6,r20,808578 <__s2b+0xe8>
  808548:	a185c83a 	sub	r2,r20,r6
  80854c:	2821883a 	mov	r16,r5
  808550:	28a3883a 	add	r17,r5,r2
  808554:	81c00007 	ldb	r7,0(r16)
  808558:	400b883a 	mov	r5,r8
  80855c:	9009883a 	mov	r4,r18
  808560:	39fff404 	addi	r7,r7,-48
  808564:	01800284 	movi	r6,10
  808568:	08082700 	call	808270 <__multadd>
  80856c:	84000044 	addi	r16,r16,1
  808570:	1011883a 	mov	r8,r2
  808574:	847ff71e 	bne	r16,r17,808554 <__s2b+0xc4>
  808578:	4005883a 	mov	r2,r8
  80857c:	dfc00617 	ldw	ra,24(sp)
  808580:	dd400517 	ldw	r21,20(sp)
  808584:	dd000417 	ldw	r20,16(sp)
  808588:	dcc00317 	ldw	r19,12(sp)
  80858c:	dc800217 	ldw	r18,8(sp)
  808590:	dc400117 	ldw	r17,4(sp)
  808594:	dc000017 	ldw	r16,0(sp)
  808598:	dec00704 	addi	sp,sp,28
  80859c:	f800283a 	ret
  8085a0:	99400284 	addi	r5,r19,10
  8085a4:	003fe706 	br	808544 <__s2b+0xb4>
  8085a8:	000b883a 	mov	r5,zero
  8085ac:	003fcd06 	br	8084e4 <__s2b+0x54>

008085b0 <_realloc_r>:
  8085b0:	defff404 	addi	sp,sp,-48
  8085b4:	dd800815 	stw	r22,32(sp)
  8085b8:	dc800415 	stw	r18,16(sp)
  8085bc:	dc400315 	stw	r17,12(sp)
  8085c0:	dfc00b15 	stw	ra,44(sp)
  8085c4:	df000a15 	stw	fp,40(sp)
  8085c8:	ddc00915 	stw	r23,36(sp)
  8085cc:	dd400715 	stw	r21,28(sp)
  8085d0:	dd000615 	stw	r20,24(sp)
  8085d4:	dcc00515 	stw	r19,20(sp)
  8085d8:	dc000215 	stw	r16,8(sp)
  8085dc:	2825883a 	mov	r18,r5
  8085e0:	3023883a 	mov	r17,r6
  8085e4:	202d883a 	mov	r22,r4
  8085e8:	2800c926 	beq	r5,zero,808910 <_realloc_r+0x360>
  8085ec:	080b0bc0 	call	80b0bc <__malloc_lock>
  8085f0:	943ffe04 	addi	r16,r18,-8
  8085f4:	88c002c4 	addi	r3,r17,11
  8085f8:	00800584 	movi	r2,22
  8085fc:	82000117 	ldw	r8,4(r16)
  808600:	10c01b2e 	bgeu	r2,r3,808670 <_realloc_r+0xc0>
  808604:	00bffe04 	movi	r2,-8
  808608:	188e703a 	and	r7,r3,r2
  80860c:	3839883a 	mov	fp,r7
  808610:	38001a16 	blt	r7,zero,80867c <_realloc_r+0xcc>
  808614:	e4401936 	bltu	fp,r17,80867c <_realloc_r+0xcc>
  808618:	013fff04 	movi	r4,-4
  80861c:	4126703a 	and	r19,r8,r4
  808620:	99c02616 	blt	r19,r7,8086bc <_realloc_r+0x10c>
  808624:	802b883a 	mov	r21,r16
  808628:	9829883a 	mov	r20,r19
  80862c:	84000204 	addi	r16,r16,8
  808630:	a80f883a 	mov	r7,r21
  808634:	a70dc83a 	sub	r6,r20,fp
  808638:	008003c4 	movi	r2,15
  80863c:	1180c136 	bltu	r2,r6,808944 <_realloc_r+0x394>
  808640:	38800117 	ldw	r2,4(r7)
  808644:	a549883a 	add	r4,r20,r21
  808648:	1080004c 	andi	r2,r2,1
  80864c:	a084b03a 	or	r2,r20,r2
  808650:	38800115 	stw	r2,4(r7)
  808654:	20c00117 	ldw	r3,4(r4)
  808658:	18c00054 	ori	r3,r3,1
  80865c:	20c00115 	stw	r3,4(r4)
  808660:	b009883a 	mov	r4,r22
  808664:	080b0c00 	call	80b0c0 <__malloc_unlock>
  808668:	8023883a 	mov	r17,r16
  80866c:	00000606 	br	808688 <_realloc_r+0xd8>
  808670:	01c00404 	movi	r7,16
  808674:	3839883a 	mov	fp,r7
  808678:	e47fe72e 	bgeu	fp,r17,808618 <_realloc_r+0x68>
  80867c:	00800304 	movi	r2,12
  808680:	0023883a 	mov	r17,zero
  808684:	b0800015 	stw	r2,0(r22)
  808688:	8805883a 	mov	r2,r17
  80868c:	dfc00b17 	ldw	ra,44(sp)
  808690:	df000a17 	ldw	fp,40(sp)
  808694:	ddc00917 	ldw	r23,36(sp)
  808698:	dd800817 	ldw	r22,32(sp)
  80869c:	dd400717 	ldw	r21,28(sp)
  8086a0:	dd000617 	ldw	r20,24(sp)
  8086a4:	dcc00517 	ldw	r19,20(sp)
  8086a8:	dc800417 	ldw	r18,16(sp)
  8086ac:	dc400317 	ldw	r17,12(sp)
  8086b0:	dc000217 	ldw	r16,8(sp)
  8086b4:	dec00c04 	addi	sp,sp,48
  8086b8:	f800283a 	ret
  8086bc:	00802074 	movhi	r2,129
  8086c0:	10b3c304 	addi	r2,r2,-12532
  8086c4:	12400217 	ldw	r9,8(r2)
  8086c8:	84cd883a 	add	r6,r16,r19
  8086cc:	802b883a 	mov	r21,r16
  8086d0:	3240b926 	beq	r6,r9,8089b8 <_realloc_r+0x408>
  8086d4:	31400117 	ldw	r5,4(r6)
  8086d8:	00bfff84 	movi	r2,-2
  8086dc:	2884703a 	and	r2,r5,r2
  8086e0:	1185883a 	add	r2,r2,r6
  8086e4:	10c00117 	ldw	r3,4(r2)
  8086e8:	18c0004c 	andi	r3,r3,1
  8086ec:	1807003a 	cmpeq	r3,r3,zero
  8086f0:	1800a326 	beq	r3,zero,808980 <_realloc_r+0x3d0>
  8086f4:	2908703a 	and	r4,r5,r4
  8086f8:	9929883a 	add	r20,r19,r4
  8086fc:	a1c0a30e 	bge	r20,r7,80898c <_realloc_r+0x3dc>
  808700:	4080004c 	andi	r2,r8,1
  808704:	1000551e 	bne	r2,zero,80885c <_realloc_r+0x2ac>
  808708:	80800017 	ldw	r2,0(r16)
  80870c:	80afc83a 	sub	r23,r16,r2
  808710:	b8c00117 	ldw	r3,4(r23)
  808714:	00bfff04 	movi	r2,-4
  808718:	1884703a 	and	r2,r3,r2
  80871c:	30002e26 	beq	r6,zero,8087d8 <_realloc_r+0x228>
  808720:	3240b926 	beq	r6,r9,808a08 <_realloc_r+0x458>
  808724:	98a9883a 	add	r20,r19,r2
  808728:	2509883a 	add	r4,r4,r20
  80872c:	d9000015 	stw	r4,0(sp)
  808730:	21c02a16 	blt	r4,r7,8087dc <_realloc_r+0x22c>
  808734:	30800317 	ldw	r2,12(r6)
  808738:	30c00217 	ldw	r3,8(r6)
  80873c:	01400904 	movi	r5,36
  808740:	99bfff04 	addi	r6,r19,-4
  808744:	18800315 	stw	r2,12(r3)
  808748:	10c00215 	stw	r3,8(r2)
  80874c:	b9000317 	ldw	r4,12(r23)
  808750:	b8800217 	ldw	r2,8(r23)
  808754:	b82b883a 	mov	r21,r23
  808758:	bc000204 	addi	r16,r23,8
  80875c:	20800215 	stw	r2,8(r4)
  808760:	11000315 	stw	r4,12(r2)
  808764:	2980e436 	bltu	r5,r6,808af8 <_realloc_r+0x548>
  808768:	008004c4 	movi	r2,19
  80876c:	9009883a 	mov	r4,r18
  808770:	8011883a 	mov	r8,r16
  808774:	11800f2e 	bgeu	r2,r6,8087b4 <_realloc_r+0x204>
  808778:	90800017 	ldw	r2,0(r18)
  80877c:	ba000404 	addi	r8,r23,16
  808780:	91000204 	addi	r4,r18,8
  808784:	b8800215 	stw	r2,8(r23)
  808788:	90c00117 	ldw	r3,4(r18)
  80878c:	008006c4 	movi	r2,27
  808790:	b8c00315 	stw	r3,12(r23)
  808794:	1180072e 	bgeu	r2,r6,8087b4 <_realloc_r+0x204>
  808798:	90c00217 	ldw	r3,8(r18)
  80879c:	ba000604 	addi	r8,r23,24
  8087a0:	91000404 	addi	r4,r18,16
  8087a4:	b8c00415 	stw	r3,16(r23)
  8087a8:	90800317 	ldw	r2,12(r18)
  8087ac:	b8800515 	stw	r2,20(r23)
  8087b0:	3140e726 	beq	r6,r5,808b50 <_realloc_r+0x5a0>
  8087b4:	20800017 	ldw	r2,0(r4)
  8087b8:	dd000017 	ldw	r20,0(sp)
  8087bc:	b80f883a 	mov	r7,r23
  8087c0:	40800015 	stw	r2,0(r8)
  8087c4:	20c00117 	ldw	r3,4(r4)
  8087c8:	40c00115 	stw	r3,4(r8)
  8087cc:	20800217 	ldw	r2,8(r4)
  8087d0:	40800215 	stw	r2,8(r8)
  8087d4:	003f9706 	br	808634 <_realloc_r+0x84>
  8087d8:	98a9883a 	add	r20,r19,r2
  8087dc:	a1c01f16 	blt	r20,r7,80885c <_realloc_r+0x2ac>
  8087e0:	b8c00317 	ldw	r3,12(r23)
  8087e4:	b8800217 	ldw	r2,8(r23)
  8087e8:	99bfff04 	addi	r6,r19,-4
  8087ec:	01400904 	movi	r5,36
  8087f0:	b82b883a 	mov	r21,r23
  8087f4:	18800215 	stw	r2,8(r3)
  8087f8:	10c00315 	stw	r3,12(r2)
  8087fc:	bc000204 	addi	r16,r23,8
  808800:	2980c336 	bltu	r5,r6,808b10 <_realloc_r+0x560>
  808804:	008004c4 	movi	r2,19
  808808:	9009883a 	mov	r4,r18
  80880c:	8011883a 	mov	r8,r16
  808810:	11800f2e 	bgeu	r2,r6,808850 <_realloc_r+0x2a0>
  808814:	90800017 	ldw	r2,0(r18)
  808818:	ba000404 	addi	r8,r23,16
  80881c:	91000204 	addi	r4,r18,8
  808820:	b8800215 	stw	r2,8(r23)
  808824:	90c00117 	ldw	r3,4(r18)
  808828:	008006c4 	movi	r2,27
  80882c:	b8c00315 	stw	r3,12(r23)
  808830:	1180072e 	bgeu	r2,r6,808850 <_realloc_r+0x2a0>
  808834:	90c00217 	ldw	r3,8(r18)
  808838:	ba000604 	addi	r8,r23,24
  80883c:	91000404 	addi	r4,r18,16
  808840:	b8c00415 	stw	r3,16(r23)
  808844:	90800317 	ldw	r2,12(r18)
  808848:	b8800515 	stw	r2,20(r23)
  80884c:	3140c726 	beq	r6,r5,808b6c <_realloc_r+0x5bc>
  808850:	20800017 	ldw	r2,0(r4)
  808854:	b80f883a 	mov	r7,r23
  808858:	003fd906 	br	8087c0 <_realloc_r+0x210>
  80885c:	880b883a 	mov	r5,r17
  808860:	b009883a 	mov	r4,r22
  808864:	0806b800 	call	806b80 <_malloc_r>
  808868:	1023883a 	mov	r17,r2
  80886c:	10002526 	beq	r2,zero,808904 <_realloc_r+0x354>
  808870:	80800117 	ldw	r2,4(r16)
  808874:	00ffff84 	movi	r3,-2
  808878:	893ffe04 	addi	r4,r17,-8
  80887c:	10c4703a 	and	r2,r2,r3
  808880:	8085883a 	add	r2,r16,r2
  808884:	20809526 	beq	r4,r2,808adc <_realloc_r+0x52c>
  808888:	99bfff04 	addi	r6,r19,-4
  80888c:	01c00904 	movi	r7,36
  808890:	39804536 	bltu	r7,r6,8089a8 <_realloc_r+0x3f8>
  808894:	008004c4 	movi	r2,19
  808898:	9009883a 	mov	r4,r18
  80889c:	880b883a 	mov	r5,r17
  8088a0:	11800f2e 	bgeu	r2,r6,8088e0 <_realloc_r+0x330>
  8088a4:	90800017 	ldw	r2,0(r18)
  8088a8:	89400204 	addi	r5,r17,8
  8088ac:	91000204 	addi	r4,r18,8
  8088b0:	88800015 	stw	r2,0(r17)
  8088b4:	90c00117 	ldw	r3,4(r18)
  8088b8:	008006c4 	movi	r2,27
  8088bc:	88c00115 	stw	r3,4(r17)
  8088c0:	1180072e 	bgeu	r2,r6,8088e0 <_realloc_r+0x330>
  8088c4:	90c00217 	ldw	r3,8(r18)
  8088c8:	89400404 	addi	r5,r17,16
  8088cc:	91000404 	addi	r4,r18,16
  8088d0:	88c00215 	stw	r3,8(r17)
  8088d4:	90800317 	ldw	r2,12(r18)
  8088d8:	88800315 	stw	r2,12(r17)
  8088dc:	31c09126 	beq	r6,r7,808b24 <_realloc_r+0x574>
  8088e0:	20800017 	ldw	r2,0(r4)
  8088e4:	28800015 	stw	r2,0(r5)
  8088e8:	20c00117 	ldw	r3,4(r4)
  8088ec:	28c00115 	stw	r3,4(r5)
  8088f0:	20800217 	ldw	r2,8(r4)
  8088f4:	28800215 	stw	r2,8(r5)
  8088f8:	900b883a 	mov	r5,r18
  8088fc:	b009883a 	mov	r4,r22
  808900:	0805ff80 	call	805ff8 <_free_r>
  808904:	b009883a 	mov	r4,r22
  808908:	080b0c00 	call	80b0c0 <__malloc_unlock>
  80890c:	003f5e06 	br	808688 <_realloc_r+0xd8>
  808910:	300b883a 	mov	r5,r6
  808914:	dfc00b17 	ldw	ra,44(sp)
  808918:	df000a17 	ldw	fp,40(sp)
  80891c:	ddc00917 	ldw	r23,36(sp)
  808920:	dd800817 	ldw	r22,32(sp)
  808924:	dd400717 	ldw	r21,28(sp)
  808928:	dd000617 	ldw	r20,24(sp)
  80892c:	dcc00517 	ldw	r19,20(sp)
  808930:	dc800417 	ldw	r18,16(sp)
  808934:	dc400317 	ldw	r17,12(sp)
  808938:	dc000217 	ldw	r16,8(sp)
  80893c:	dec00c04 	addi	sp,sp,48
  808940:	0806b801 	jmpi	806b80 <_malloc_r>
  808944:	38800117 	ldw	r2,4(r7)
  808948:	e54b883a 	add	r5,fp,r21
  80894c:	31000054 	ori	r4,r6,1
  808950:	1080004c 	andi	r2,r2,1
  808954:	1704b03a 	or	r2,r2,fp
  808958:	38800115 	stw	r2,4(r7)
  80895c:	29000115 	stw	r4,4(r5)
  808960:	2987883a 	add	r3,r5,r6
  808964:	18800117 	ldw	r2,4(r3)
  808968:	29400204 	addi	r5,r5,8
  80896c:	b009883a 	mov	r4,r22
  808970:	10800054 	ori	r2,r2,1
  808974:	18800115 	stw	r2,4(r3)
  808978:	0805ff80 	call	805ff8 <_free_r>
  80897c:	003f3806 	br	808660 <_realloc_r+0xb0>
  808980:	000d883a 	mov	r6,zero
  808984:	0009883a 	mov	r4,zero
  808988:	003f5d06 	br	808700 <_realloc_r+0x150>
  80898c:	30c00217 	ldw	r3,8(r6)
  808990:	30800317 	ldw	r2,12(r6)
  808994:	800f883a 	mov	r7,r16
  808998:	84000204 	addi	r16,r16,8
  80899c:	10c00215 	stw	r3,8(r2)
  8089a0:	18800315 	stw	r2,12(r3)
  8089a4:	003f2306 	br	808634 <_realloc_r+0x84>
  8089a8:	8809883a 	mov	r4,r17
  8089ac:	900b883a 	mov	r5,r18
  8089b0:	08074440 	call	807444 <memmove>
  8089b4:	003fd006 	br	8088f8 <_realloc_r+0x348>
  8089b8:	30800117 	ldw	r2,4(r6)
  8089bc:	e0c00404 	addi	r3,fp,16
  8089c0:	1108703a 	and	r4,r2,r4
  8089c4:	9905883a 	add	r2,r19,r4
  8089c8:	10ff4d16 	blt	r2,r3,808700 <_realloc_r+0x150>
  8089cc:	1705c83a 	sub	r2,r2,fp
  8089d0:	870b883a 	add	r5,r16,fp
  8089d4:	10800054 	ori	r2,r2,1
  8089d8:	28800115 	stw	r2,4(r5)
  8089dc:	80c00117 	ldw	r3,4(r16)
  8089e0:	00802074 	movhi	r2,129
  8089e4:	10b3c304 	addi	r2,r2,-12532
  8089e8:	b009883a 	mov	r4,r22
  8089ec:	18c0004c 	andi	r3,r3,1
  8089f0:	e0c6b03a 	or	r3,fp,r3
  8089f4:	11400215 	stw	r5,8(r2)
  8089f8:	80c00115 	stw	r3,4(r16)
  8089fc:	080b0c00 	call	80b0c0 <__malloc_unlock>
  808a00:	84400204 	addi	r17,r16,8
  808a04:	003f2006 	br	808688 <_realloc_r+0xd8>
  808a08:	98a9883a 	add	r20,r19,r2
  808a0c:	2509883a 	add	r4,r4,r20
  808a10:	e0800404 	addi	r2,fp,16
  808a14:	d9000115 	stw	r4,4(sp)
  808a18:	20bf7016 	blt	r4,r2,8087dc <_realloc_r+0x22c>
  808a1c:	b8c00317 	ldw	r3,12(r23)
  808a20:	b8800217 	ldw	r2,8(r23)
  808a24:	99bfff04 	addi	r6,r19,-4
  808a28:	01400904 	movi	r5,36
  808a2c:	18800215 	stw	r2,8(r3)
  808a30:	10c00315 	stw	r3,12(r2)
  808a34:	bc400204 	addi	r17,r23,8
  808a38:	29804136 	bltu	r5,r6,808b40 <_realloc_r+0x590>
  808a3c:	008004c4 	movi	r2,19
  808a40:	9009883a 	mov	r4,r18
  808a44:	880f883a 	mov	r7,r17
  808a48:	11800f2e 	bgeu	r2,r6,808a88 <_realloc_r+0x4d8>
  808a4c:	90800017 	ldw	r2,0(r18)
  808a50:	b9c00404 	addi	r7,r23,16
  808a54:	91000204 	addi	r4,r18,8
  808a58:	b8800215 	stw	r2,8(r23)
  808a5c:	90c00117 	ldw	r3,4(r18)
  808a60:	008006c4 	movi	r2,27
  808a64:	b8c00315 	stw	r3,12(r23)
  808a68:	1180072e 	bgeu	r2,r6,808a88 <_realloc_r+0x4d8>
  808a6c:	90c00217 	ldw	r3,8(r18)
  808a70:	b9c00604 	addi	r7,r23,24
  808a74:	91000404 	addi	r4,r18,16
  808a78:	b8c00415 	stw	r3,16(r23)
  808a7c:	90800317 	ldw	r2,12(r18)
  808a80:	b8800515 	stw	r2,20(r23)
  808a84:	31404026 	beq	r6,r5,808b88 <_realloc_r+0x5d8>
  808a88:	20800017 	ldw	r2,0(r4)
  808a8c:	38800015 	stw	r2,0(r7)
  808a90:	20c00117 	ldw	r3,4(r4)
  808a94:	38c00115 	stw	r3,4(r7)
  808a98:	20800217 	ldw	r2,8(r4)
  808a9c:	38800215 	stw	r2,8(r7)
  808aa0:	d8c00117 	ldw	r3,4(sp)
  808aa4:	bf0b883a 	add	r5,r23,fp
  808aa8:	b009883a 	mov	r4,r22
  808aac:	1f05c83a 	sub	r2,r3,fp
  808ab0:	10800054 	ori	r2,r2,1
  808ab4:	28800115 	stw	r2,4(r5)
  808ab8:	b8c00117 	ldw	r3,4(r23)
  808abc:	00802074 	movhi	r2,129
  808ac0:	10b3c304 	addi	r2,r2,-12532
  808ac4:	11400215 	stw	r5,8(r2)
  808ac8:	18c0004c 	andi	r3,r3,1
  808acc:	e0c6b03a 	or	r3,fp,r3
  808ad0:	b8c00115 	stw	r3,4(r23)
  808ad4:	080b0c00 	call	80b0c0 <__malloc_unlock>
  808ad8:	003eeb06 	br	808688 <_realloc_r+0xd8>
  808adc:	20800117 	ldw	r2,4(r4)
  808ae0:	00ffff04 	movi	r3,-4
  808ae4:	800f883a 	mov	r7,r16
  808ae8:	10c4703a 	and	r2,r2,r3
  808aec:	98a9883a 	add	r20,r19,r2
  808af0:	84000204 	addi	r16,r16,8
  808af4:	003ecf06 	br	808634 <_realloc_r+0x84>
  808af8:	900b883a 	mov	r5,r18
  808afc:	8009883a 	mov	r4,r16
  808b00:	08074440 	call	807444 <memmove>
  808b04:	dd000017 	ldw	r20,0(sp)
  808b08:	b80f883a 	mov	r7,r23
  808b0c:	003ec906 	br	808634 <_realloc_r+0x84>
  808b10:	900b883a 	mov	r5,r18
  808b14:	8009883a 	mov	r4,r16
  808b18:	08074440 	call	807444 <memmove>
  808b1c:	b80f883a 	mov	r7,r23
  808b20:	003ec406 	br	808634 <_realloc_r+0x84>
  808b24:	90c00417 	ldw	r3,16(r18)
  808b28:	89400604 	addi	r5,r17,24
  808b2c:	91000604 	addi	r4,r18,24
  808b30:	88c00415 	stw	r3,16(r17)
  808b34:	90800517 	ldw	r2,20(r18)
  808b38:	88800515 	stw	r2,20(r17)
  808b3c:	003f6806 	br	8088e0 <_realloc_r+0x330>
  808b40:	900b883a 	mov	r5,r18
  808b44:	8809883a 	mov	r4,r17
  808b48:	08074440 	call	807444 <memmove>
  808b4c:	003fd406 	br	808aa0 <_realloc_r+0x4f0>
  808b50:	90c00417 	ldw	r3,16(r18)
  808b54:	91000604 	addi	r4,r18,24
  808b58:	ba000804 	addi	r8,r23,32
  808b5c:	b8c00615 	stw	r3,24(r23)
  808b60:	90800517 	ldw	r2,20(r18)
  808b64:	b8800715 	stw	r2,28(r23)
  808b68:	003f1206 	br	8087b4 <_realloc_r+0x204>
  808b6c:	90c00417 	ldw	r3,16(r18)
  808b70:	91000604 	addi	r4,r18,24
  808b74:	ba000804 	addi	r8,r23,32
  808b78:	b8c00615 	stw	r3,24(r23)
  808b7c:	90800517 	ldw	r2,20(r18)
  808b80:	b8800715 	stw	r2,28(r23)
  808b84:	003f3206 	br	808850 <_realloc_r+0x2a0>
  808b88:	90c00417 	ldw	r3,16(r18)
  808b8c:	91000604 	addi	r4,r18,24
  808b90:	b9c00804 	addi	r7,r23,32
  808b94:	b8c00615 	stw	r3,24(r23)
  808b98:	90800517 	ldw	r2,20(r18)
  808b9c:	b8800715 	stw	r2,28(r23)
  808ba0:	003fb906 	br	808a88 <_realloc_r+0x4d8>

00808ba4 <__isinfd>:
  808ba4:	200d883a 	mov	r6,r4
  808ba8:	0109c83a 	sub	r4,zero,r4
  808bac:	2188b03a 	or	r4,r4,r6
  808bb0:	2008d7fa 	srli	r4,r4,31
  808bb4:	00a00034 	movhi	r2,32768
  808bb8:	10bfffc4 	addi	r2,r2,-1
  808bbc:	1144703a 	and	r2,r2,r5
  808bc0:	2088b03a 	or	r4,r4,r2
  808bc4:	009ffc34 	movhi	r2,32752
  808bc8:	1105c83a 	sub	r2,r2,r4
  808bcc:	0087c83a 	sub	r3,zero,r2
  808bd0:	10c4b03a 	or	r2,r2,r3
  808bd4:	1004d7fa 	srli	r2,r2,31
  808bd8:	00c00044 	movi	r3,1
  808bdc:	1885c83a 	sub	r2,r3,r2
  808be0:	f800283a 	ret

00808be4 <__isnand>:
  808be4:	200d883a 	mov	r6,r4
  808be8:	0109c83a 	sub	r4,zero,r4
  808bec:	2188b03a 	or	r4,r4,r6
  808bf0:	2008d7fa 	srli	r4,r4,31
  808bf4:	00a00034 	movhi	r2,32768
  808bf8:	10bfffc4 	addi	r2,r2,-1
  808bfc:	1144703a 	and	r2,r2,r5
  808c00:	2088b03a 	or	r4,r4,r2
  808c04:	009ffc34 	movhi	r2,32752
  808c08:	1105c83a 	sub	r2,r2,r4
  808c0c:	1004d7fa 	srli	r2,r2,31
  808c10:	f800283a 	ret

00808c14 <_sbrk_r>:
  808c14:	defffd04 	addi	sp,sp,-12
  808c18:	dc000015 	stw	r16,0(sp)
  808c1c:	04002074 	movhi	r16,129
  808c20:	843ff404 	addi	r16,r16,-48
  808c24:	dc400115 	stw	r17,4(sp)
  808c28:	80000015 	stw	zero,0(r16)
  808c2c:	2023883a 	mov	r17,r4
  808c30:	2809883a 	mov	r4,r5
  808c34:	dfc00215 	stw	ra,8(sp)
  808c38:	080b2180 	call	80b218 <sbrk>
  808c3c:	1007883a 	mov	r3,r2
  808c40:	00bfffc4 	movi	r2,-1
  808c44:	18800626 	beq	r3,r2,808c60 <_sbrk_r+0x4c>
  808c48:	1805883a 	mov	r2,r3
  808c4c:	dfc00217 	ldw	ra,8(sp)
  808c50:	dc400117 	ldw	r17,4(sp)
  808c54:	dc000017 	ldw	r16,0(sp)
  808c58:	dec00304 	addi	sp,sp,12
  808c5c:	f800283a 	ret
  808c60:	80800017 	ldw	r2,0(r16)
  808c64:	103ff826 	beq	r2,zero,808c48 <_sbrk_r+0x34>
  808c68:	88800015 	stw	r2,0(r17)
  808c6c:	1805883a 	mov	r2,r3
  808c70:	dfc00217 	ldw	ra,8(sp)
  808c74:	dc400117 	ldw	r17,4(sp)
  808c78:	dc000017 	ldw	r16,0(sp)
  808c7c:	dec00304 	addi	sp,sp,12
  808c80:	f800283a 	ret

00808c84 <__sclose>:
  808c84:	2940038f 	ldh	r5,14(r5)
  808c88:	08090441 	jmpi	809044 <_close_r>

00808c8c <__sseek>:
  808c8c:	defffe04 	addi	sp,sp,-8
  808c90:	dc000015 	stw	r16,0(sp)
  808c94:	2821883a 	mov	r16,r5
  808c98:	2940038f 	ldh	r5,14(r5)
  808c9c:	dfc00115 	stw	ra,4(sp)
  808ca0:	08092bc0 	call	8092bc <_lseek_r>
  808ca4:	1007883a 	mov	r3,r2
  808ca8:	00bfffc4 	movi	r2,-1
  808cac:	18800926 	beq	r3,r2,808cd4 <__sseek+0x48>
  808cb0:	8080030b 	ldhu	r2,12(r16)
  808cb4:	80c01415 	stw	r3,80(r16)
  808cb8:	10840014 	ori	r2,r2,4096
  808cbc:	8080030d 	sth	r2,12(r16)
  808cc0:	1805883a 	mov	r2,r3
  808cc4:	dfc00117 	ldw	ra,4(sp)
  808cc8:	dc000017 	ldw	r16,0(sp)
  808ccc:	dec00204 	addi	sp,sp,8
  808cd0:	f800283a 	ret
  808cd4:	8080030b 	ldhu	r2,12(r16)
  808cd8:	10bbffcc 	andi	r2,r2,61439
  808cdc:	8080030d 	sth	r2,12(r16)
  808ce0:	1805883a 	mov	r2,r3
  808ce4:	dfc00117 	ldw	ra,4(sp)
  808ce8:	dc000017 	ldw	r16,0(sp)
  808cec:	dec00204 	addi	sp,sp,8
  808cf0:	f800283a 	ret

00808cf4 <__swrite>:
  808cf4:	2880030b 	ldhu	r2,12(r5)
  808cf8:	defffb04 	addi	sp,sp,-20
  808cfc:	dcc00315 	stw	r19,12(sp)
  808d00:	1080400c 	andi	r2,r2,256
  808d04:	dc800215 	stw	r18,8(sp)
  808d08:	dc400115 	stw	r17,4(sp)
  808d0c:	dc000015 	stw	r16,0(sp)
  808d10:	3027883a 	mov	r19,r6
  808d14:	3825883a 	mov	r18,r7
  808d18:	dfc00415 	stw	ra,16(sp)
  808d1c:	2821883a 	mov	r16,r5
  808d20:	000d883a 	mov	r6,zero
  808d24:	01c00084 	movi	r7,2
  808d28:	2023883a 	mov	r17,r4
  808d2c:	10000226 	beq	r2,zero,808d38 <__swrite+0x44>
  808d30:	2940038f 	ldh	r5,14(r5)
  808d34:	08092bc0 	call	8092bc <_lseek_r>
  808d38:	8080030b 	ldhu	r2,12(r16)
  808d3c:	8140038f 	ldh	r5,14(r16)
  808d40:	8809883a 	mov	r4,r17
  808d44:	10bbffcc 	andi	r2,r2,61439
  808d48:	980d883a 	mov	r6,r19
  808d4c:	900f883a 	mov	r7,r18
  808d50:	8080030d 	sth	r2,12(r16)
  808d54:	dfc00417 	ldw	ra,16(sp)
  808d58:	dcc00317 	ldw	r19,12(sp)
  808d5c:	dc800217 	ldw	r18,8(sp)
  808d60:	dc400117 	ldw	r17,4(sp)
  808d64:	dc000017 	ldw	r16,0(sp)
  808d68:	dec00504 	addi	sp,sp,20
  808d6c:	0808f181 	jmpi	808f18 <_write_r>

00808d70 <__sread>:
  808d70:	defffe04 	addi	sp,sp,-8
  808d74:	dc000015 	stw	r16,0(sp)
  808d78:	2821883a 	mov	r16,r5
  808d7c:	2940038f 	ldh	r5,14(r5)
  808d80:	dfc00115 	stw	ra,4(sp)
  808d84:	08093340 	call	809334 <_read_r>
  808d88:	1007883a 	mov	r3,r2
  808d8c:	10000816 	blt	r2,zero,808db0 <__sread+0x40>
  808d90:	80801417 	ldw	r2,80(r16)
  808d94:	10c5883a 	add	r2,r2,r3
  808d98:	80801415 	stw	r2,80(r16)
  808d9c:	1805883a 	mov	r2,r3
  808da0:	dfc00117 	ldw	ra,4(sp)
  808da4:	dc000017 	ldw	r16,0(sp)
  808da8:	dec00204 	addi	sp,sp,8
  808dac:	f800283a 	ret
  808db0:	8080030b 	ldhu	r2,12(r16)
  808db4:	10bbffcc 	andi	r2,r2,61439
  808db8:	8080030d 	sth	r2,12(r16)
  808dbc:	1805883a 	mov	r2,r3
  808dc0:	dfc00117 	ldw	ra,4(sp)
  808dc4:	dc000017 	ldw	r16,0(sp)
  808dc8:	dec00204 	addi	sp,sp,8
  808dcc:	f800283a 	ret

00808dd0 <strcmp>:
  808dd0:	2144b03a 	or	r2,r4,r5
  808dd4:	108000cc 	andi	r2,r2,3
  808dd8:	10001d1e 	bne	r2,zero,808e50 <strcmp+0x80>
  808ddc:	200f883a 	mov	r7,r4
  808de0:	28800017 	ldw	r2,0(r5)
  808de4:	21000017 	ldw	r4,0(r4)
  808de8:	280d883a 	mov	r6,r5
  808dec:	2080161e 	bne	r4,r2,808e48 <strcmp+0x78>
  808df0:	023fbff4 	movhi	r8,65279
  808df4:	423fbfc4 	addi	r8,r8,-257
  808df8:	2207883a 	add	r3,r4,r8
  808dfc:	01602074 	movhi	r5,32897
  808e00:	29602004 	addi	r5,r5,-32640
  808e04:	1946703a 	and	r3,r3,r5
  808e08:	0104303a 	nor	r2,zero,r4
  808e0c:	10c4703a 	and	r2,r2,r3
  808e10:	10001c1e 	bne	r2,zero,808e84 <strcmp+0xb4>
  808e14:	4013883a 	mov	r9,r8
  808e18:	2811883a 	mov	r8,r5
  808e1c:	00000106 	br	808e24 <strcmp+0x54>
  808e20:	1800181e 	bne	r3,zero,808e84 <strcmp+0xb4>
  808e24:	39c00104 	addi	r7,r7,4
  808e28:	39000017 	ldw	r4,0(r7)
  808e2c:	31800104 	addi	r6,r6,4
  808e30:	31400017 	ldw	r5,0(r6)
  808e34:	2245883a 	add	r2,r4,r9
  808e38:	1204703a 	and	r2,r2,r8
  808e3c:	0106303a 	nor	r3,zero,r4
  808e40:	1886703a 	and	r3,r3,r2
  808e44:	217ff626 	beq	r4,r5,808e20 <strcmp+0x50>
  808e48:	3809883a 	mov	r4,r7
  808e4c:	300b883a 	mov	r5,r6
  808e50:	20c00007 	ldb	r3,0(r4)
  808e54:	1800051e 	bne	r3,zero,808e6c <strcmp+0x9c>
  808e58:	00000606 	br	808e74 <strcmp+0xa4>
  808e5c:	21000044 	addi	r4,r4,1
  808e60:	20c00007 	ldb	r3,0(r4)
  808e64:	29400044 	addi	r5,r5,1
  808e68:	18000226 	beq	r3,zero,808e74 <strcmp+0xa4>
  808e6c:	28800007 	ldb	r2,0(r5)
  808e70:	18bffa26 	beq	r3,r2,808e5c <strcmp+0x8c>
  808e74:	20c00003 	ldbu	r3,0(r4)
  808e78:	28800003 	ldbu	r2,0(r5)
  808e7c:	1885c83a 	sub	r2,r3,r2
  808e80:	f800283a 	ret
  808e84:	0005883a 	mov	r2,zero
  808e88:	f800283a 	ret

00808e8c <strcpy>:
  808e8c:	2904b03a 	or	r2,r5,r4
  808e90:	108000cc 	andi	r2,r2,3
  808e94:	10000826 	beq	r2,zero,808eb8 <strcpy+0x2c>
  808e98:	2007883a 	mov	r3,r4
  808e9c:	28800003 	ldbu	r2,0(r5)
  808ea0:	29400044 	addi	r5,r5,1
  808ea4:	18800005 	stb	r2,0(r3)
  808ea8:	18c00044 	addi	r3,r3,1
  808eac:	103ffb1e 	bne	r2,zero,808e9c <strcpy+0x10>
  808eb0:	2005883a 	mov	r2,r4
  808eb4:	f800283a 	ret
  808eb8:	29800017 	ldw	r6,0(r5)
  808ebc:	023fbff4 	movhi	r8,65279
  808ec0:	423fbfc4 	addi	r8,r8,-257
  808ec4:	02a02074 	movhi	r10,32897
  808ec8:	52a02004 	addi	r10,r10,-32640
  808ecc:	3205883a 	add	r2,r6,r8
  808ed0:	0186303a 	nor	r3,zero,r6
  808ed4:	10c4703a 	and	r2,r2,r3
  808ed8:	1284703a 	and	r2,r2,r10
  808edc:	200f883a 	mov	r7,r4
  808ee0:	10000b1e 	bne	r2,zero,808f10 <strcpy+0x84>
  808ee4:	4013883a 	mov	r9,r8
  808ee8:	5011883a 	mov	r8,r10
  808eec:	39800015 	stw	r6,0(r7)
  808ef0:	29400104 	addi	r5,r5,4
  808ef4:	29800017 	ldw	r6,0(r5)
  808ef8:	39c00104 	addi	r7,r7,4
  808efc:	3245883a 	add	r2,r6,r9
  808f00:	0186303a 	nor	r3,zero,r6
  808f04:	10c4703a 	and	r2,r2,r3
  808f08:	1204703a 	and	r2,r2,r8
  808f0c:	103ff726 	beq	r2,zero,808eec <strcpy+0x60>
  808f10:	3807883a 	mov	r3,r7
  808f14:	003fe106 	br	808e9c <strcpy+0x10>

00808f18 <_write_r>:
  808f18:	defffd04 	addi	sp,sp,-12
  808f1c:	dc000015 	stw	r16,0(sp)
  808f20:	04002074 	movhi	r16,129
  808f24:	843ff404 	addi	r16,r16,-48
  808f28:	dc400115 	stw	r17,4(sp)
  808f2c:	80000015 	stw	zero,0(r16)
  808f30:	2023883a 	mov	r17,r4
  808f34:	2809883a 	mov	r4,r5
  808f38:	300b883a 	mov	r5,r6
  808f3c:	380d883a 	mov	r6,r7
  808f40:	dfc00215 	stw	ra,8(sp)
  808f44:	080b2ec0 	call	80b2ec <write>
  808f48:	1007883a 	mov	r3,r2
  808f4c:	00bfffc4 	movi	r2,-1
  808f50:	18800626 	beq	r3,r2,808f6c <_write_r+0x54>
  808f54:	1805883a 	mov	r2,r3
  808f58:	dfc00217 	ldw	ra,8(sp)
  808f5c:	dc400117 	ldw	r17,4(sp)
  808f60:	dc000017 	ldw	r16,0(sp)
  808f64:	dec00304 	addi	sp,sp,12
  808f68:	f800283a 	ret
  808f6c:	80800017 	ldw	r2,0(r16)
  808f70:	103ff826 	beq	r2,zero,808f54 <_write_r+0x3c>
  808f74:	88800015 	stw	r2,0(r17)
  808f78:	1805883a 	mov	r2,r3
  808f7c:	dfc00217 	ldw	ra,8(sp)
  808f80:	dc400117 	ldw	r17,4(sp)
  808f84:	dc000017 	ldw	r16,0(sp)
  808f88:	dec00304 	addi	sp,sp,12
  808f8c:	f800283a 	ret

00808f90 <_calloc_r>:
  808f90:	298b383a 	mul	r5,r5,r6
  808f94:	defffe04 	addi	sp,sp,-8
  808f98:	dc000015 	stw	r16,0(sp)
  808f9c:	dfc00115 	stw	ra,4(sp)
  808fa0:	0806b800 	call	806b80 <_malloc_r>
  808fa4:	1021883a 	mov	r16,r2
  808fa8:	01c00904 	movi	r7,36
  808fac:	10000d26 	beq	r2,zero,808fe4 <_calloc_r+0x54>
  808fb0:	10ffff17 	ldw	r3,-4(r2)
  808fb4:	1009883a 	mov	r4,r2
  808fb8:	00bfff04 	movi	r2,-4
  808fbc:	1886703a 	and	r3,r3,r2
  808fc0:	1887883a 	add	r3,r3,r2
  808fc4:	180d883a 	mov	r6,r3
  808fc8:	000b883a 	mov	r5,zero
  808fcc:	38c01736 	bltu	r7,r3,80902c <_calloc_r+0x9c>
  808fd0:	008004c4 	movi	r2,19
  808fd4:	10c00836 	bltu	r2,r3,808ff8 <_calloc_r+0x68>
  808fd8:	20000215 	stw	zero,8(r4)
  808fdc:	20000015 	stw	zero,0(r4)
  808fe0:	20000115 	stw	zero,4(r4)
  808fe4:	8005883a 	mov	r2,r16
  808fe8:	dfc00117 	ldw	ra,4(sp)
  808fec:	dc000017 	ldw	r16,0(sp)
  808ff0:	dec00204 	addi	sp,sp,8
  808ff4:	f800283a 	ret
  808ff8:	008006c4 	movi	r2,27
  808ffc:	80000015 	stw	zero,0(r16)
  809000:	80000115 	stw	zero,4(r16)
  809004:	81000204 	addi	r4,r16,8
  809008:	10fff32e 	bgeu	r2,r3,808fd8 <_calloc_r+0x48>
  80900c:	80000215 	stw	zero,8(r16)
  809010:	80000315 	stw	zero,12(r16)
  809014:	81000404 	addi	r4,r16,16
  809018:	19ffef1e 	bne	r3,r7,808fd8 <_calloc_r+0x48>
  80901c:	81000604 	addi	r4,r16,24
  809020:	80000415 	stw	zero,16(r16)
  809024:	80000515 	stw	zero,20(r16)
  809028:	003feb06 	br	808fd8 <_calloc_r+0x48>
  80902c:	08075240 	call	807524 <memset>
  809030:	8005883a 	mov	r2,r16
  809034:	dfc00117 	ldw	ra,4(sp)
  809038:	dc000017 	ldw	r16,0(sp)
  80903c:	dec00204 	addi	sp,sp,8
  809040:	f800283a 	ret

00809044 <_close_r>:
  809044:	defffd04 	addi	sp,sp,-12
  809048:	dc000015 	stw	r16,0(sp)
  80904c:	04002074 	movhi	r16,129
  809050:	843ff404 	addi	r16,r16,-48
  809054:	dc400115 	stw	r17,4(sp)
  809058:	80000015 	stw	zero,0(r16)
  80905c:	2023883a 	mov	r17,r4
  809060:	2809883a 	mov	r4,r5
  809064:	dfc00215 	stw	ra,8(sp)
  809068:	080ad000 	call	80ad00 <close>
  80906c:	1007883a 	mov	r3,r2
  809070:	00bfffc4 	movi	r2,-1
  809074:	18800626 	beq	r3,r2,809090 <_close_r+0x4c>
  809078:	1805883a 	mov	r2,r3
  80907c:	dfc00217 	ldw	ra,8(sp)
  809080:	dc400117 	ldw	r17,4(sp)
  809084:	dc000017 	ldw	r16,0(sp)
  809088:	dec00304 	addi	sp,sp,12
  80908c:	f800283a 	ret
  809090:	80800017 	ldw	r2,0(r16)
  809094:	103ff826 	beq	r2,zero,809078 <_close_r+0x34>
  809098:	88800015 	stw	r2,0(r17)
  80909c:	1805883a 	mov	r2,r3
  8090a0:	dfc00217 	ldw	ra,8(sp)
  8090a4:	dc400117 	ldw	r17,4(sp)
  8090a8:	dc000017 	ldw	r16,0(sp)
  8090ac:	dec00304 	addi	sp,sp,12
  8090b0:	f800283a 	ret

008090b4 <_fclose_r>:
  8090b4:	defffc04 	addi	sp,sp,-16
  8090b8:	dc400115 	stw	r17,4(sp)
  8090bc:	dc000015 	stw	r16,0(sp)
  8090c0:	dfc00315 	stw	ra,12(sp)
  8090c4:	dc800215 	stw	r18,8(sp)
  8090c8:	2821883a 	mov	r16,r5
  8090cc:	2023883a 	mov	r17,r4
  8090d0:	28002926 	beq	r5,zero,809178 <_fclose_r+0xc4>
  8090d4:	0805c640 	call	805c64 <__sfp_lock_acquire>
  8090d8:	88000226 	beq	r17,zero,8090e4 <_fclose_r+0x30>
  8090dc:	88800e17 	ldw	r2,56(r17)
  8090e0:	10002d26 	beq	r2,zero,809198 <_fclose_r+0xe4>
  8090e4:	8080030f 	ldh	r2,12(r16)
  8090e8:	10002226 	beq	r2,zero,809174 <_fclose_r+0xc0>
  8090ec:	8809883a 	mov	r4,r17
  8090f0:	800b883a 	mov	r5,r16
  8090f4:	08059dc0 	call	8059dc <_fflush_r>
  8090f8:	1025883a 	mov	r18,r2
  8090fc:	80800b17 	ldw	r2,44(r16)
  809100:	10000426 	beq	r2,zero,809114 <_fclose_r+0x60>
  809104:	81400717 	ldw	r5,28(r16)
  809108:	8809883a 	mov	r4,r17
  80910c:	103ee83a 	callr	r2
  809110:	10002a16 	blt	r2,zero,8091bc <_fclose_r+0x108>
  809114:	8080030b 	ldhu	r2,12(r16)
  809118:	1080200c 	andi	r2,r2,128
  80911c:	1000231e 	bne	r2,zero,8091ac <_fclose_r+0xf8>
  809120:	81400c17 	ldw	r5,48(r16)
  809124:	28000526 	beq	r5,zero,80913c <_fclose_r+0x88>
  809128:	80801004 	addi	r2,r16,64
  80912c:	28800226 	beq	r5,r2,809138 <_fclose_r+0x84>
  809130:	8809883a 	mov	r4,r17
  809134:	0805ff80 	call	805ff8 <_free_r>
  809138:	80000c15 	stw	zero,48(r16)
  80913c:	81401117 	ldw	r5,68(r16)
  809140:	28000326 	beq	r5,zero,809150 <_fclose_r+0x9c>
  809144:	8809883a 	mov	r4,r17
  809148:	0805ff80 	call	805ff8 <_free_r>
  80914c:	80001115 	stw	zero,68(r16)
  809150:	8000030d 	sth	zero,12(r16)
  809154:	0805c680 	call	805c68 <__sfp_lock_release>
  809158:	9005883a 	mov	r2,r18
  80915c:	dfc00317 	ldw	ra,12(sp)
  809160:	dc800217 	ldw	r18,8(sp)
  809164:	dc400117 	ldw	r17,4(sp)
  809168:	dc000017 	ldw	r16,0(sp)
  80916c:	dec00404 	addi	sp,sp,16
  809170:	f800283a 	ret
  809174:	0805c680 	call	805c68 <__sfp_lock_release>
  809178:	0025883a 	mov	r18,zero
  80917c:	9005883a 	mov	r2,r18
  809180:	dfc00317 	ldw	ra,12(sp)
  809184:	dc800217 	ldw	r18,8(sp)
  809188:	dc400117 	ldw	r17,4(sp)
  80918c:	dc000017 	ldw	r16,0(sp)
  809190:	dec00404 	addi	sp,sp,16
  809194:	f800283a 	ret
  809198:	8809883a 	mov	r4,r17
  80919c:	0805c740 	call	805c74 <__sinit>
  8091a0:	8080030f 	ldh	r2,12(r16)
  8091a4:	103fd11e 	bne	r2,zero,8090ec <_fclose_r+0x38>
  8091a8:	003ff206 	br	809174 <_fclose_r+0xc0>
  8091ac:	81400417 	ldw	r5,16(r16)
  8091b0:	8809883a 	mov	r4,r17
  8091b4:	0805ff80 	call	805ff8 <_free_r>
  8091b8:	003fd906 	br	809120 <_fclose_r+0x6c>
  8091bc:	04bfffc4 	movi	r18,-1
  8091c0:	003fd406 	br	809114 <_fclose_r+0x60>

008091c4 <fclose>:
  8091c4:	00802074 	movhi	r2,129
  8091c8:	10b94704 	addi	r2,r2,-6884
  8091cc:	200b883a 	mov	r5,r4
  8091d0:	11000017 	ldw	r4,0(r2)
  8091d4:	08090b41 	jmpi	8090b4 <_fclose_r>

008091d8 <_fstat_r>:
  8091d8:	defffd04 	addi	sp,sp,-12
  8091dc:	dc000015 	stw	r16,0(sp)
  8091e0:	04002074 	movhi	r16,129
  8091e4:	843ff404 	addi	r16,r16,-48
  8091e8:	dc400115 	stw	r17,4(sp)
  8091ec:	80000015 	stw	zero,0(r16)
  8091f0:	2023883a 	mov	r17,r4
  8091f4:	2809883a 	mov	r4,r5
  8091f8:	300b883a 	mov	r5,r6
  8091fc:	dfc00215 	stw	ra,8(sp)
  809200:	080adf80 	call	80adf8 <fstat>
  809204:	1007883a 	mov	r3,r2
  809208:	00bfffc4 	movi	r2,-1
  80920c:	18800626 	beq	r3,r2,809228 <_fstat_r+0x50>
  809210:	1805883a 	mov	r2,r3
  809214:	dfc00217 	ldw	ra,8(sp)
  809218:	dc400117 	ldw	r17,4(sp)
  80921c:	dc000017 	ldw	r16,0(sp)
  809220:	dec00304 	addi	sp,sp,12
  809224:	f800283a 	ret
  809228:	80800017 	ldw	r2,0(r16)
  80922c:	103ff826 	beq	r2,zero,809210 <_fstat_r+0x38>
  809230:	88800015 	stw	r2,0(r17)
  809234:	1805883a 	mov	r2,r3
  809238:	dfc00217 	ldw	ra,8(sp)
  80923c:	dc400117 	ldw	r17,4(sp)
  809240:	dc000017 	ldw	r16,0(sp)
  809244:	dec00304 	addi	sp,sp,12
  809248:	f800283a 	ret

0080924c <_isatty_r>:
  80924c:	defffd04 	addi	sp,sp,-12
  809250:	dc000015 	stw	r16,0(sp)
  809254:	04002074 	movhi	r16,129
  809258:	843ff404 	addi	r16,r16,-48
  80925c:	dc400115 	stw	r17,4(sp)
  809260:	80000015 	stw	zero,0(r16)
  809264:	2023883a 	mov	r17,r4
  809268:	2809883a 	mov	r4,r5
  80926c:	dfc00215 	stw	ra,8(sp)
  809270:	080ae880 	call	80ae88 <isatty>
  809274:	1007883a 	mov	r3,r2
  809278:	00bfffc4 	movi	r2,-1
  80927c:	18800626 	beq	r3,r2,809298 <_isatty_r+0x4c>
  809280:	1805883a 	mov	r2,r3
  809284:	dfc00217 	ldw	ra,8(sp)
  809288:	dc400117 	ldw	r17,4(sp)
  80928c:	dc000017 	ldw	r16,0(sp)
  809290:	dec00304 	addi	sp,sp,12
  809294:	f800283a 	ret
  809298:	80800017 	ldw	r2,0(r16)
  80929c:	103ff826 	beq	r2,zero,809280 <_isatty_r+0x34>
  8092a0:	88800015 	stw	r2,0(r17)
  8092a4:	1805883a 	mov	r2,r3
  8092a8:	dfc00217 	ldw	ra,8(sp)
  8092ac:	dc400117 	ldw	r17,4(sp)
  8092b0:	dc000017 	ldw	r16,0(sp)
  8092b4:	dec00304 	addi	sp,sp,12
  8092b8:	f800283a 	ret

008092bc <_lseek_r>:
  8092bc:	defffd04 	addi	sp,sp,-12
  8092c0:	dc000015 	stw	r16,0(sp)
  8092c4:	04002074 	movhi	r16,129
  8092c8:	843ff404 	addi	r16,r16,-48
  8092cc:	dc400115 	stw	r17,4(sp)
  8092d0:	80000015 	stw	zero,0(r16)
  8092d4:	2023883a 	mov	r17,r4
  8092d8:	2809883a 	mov	r4,r5
  8092dc:	300b883a 	mov	r5,r6
  8092e0:	380d883a 	mov	r6,r7
  8092e4:	dfc00215 	stw	ra,8(sp)
  8092e8:	080afc00 	call	80afc0 <lseek>
  8092ec:	1007883a 	mov	r3,r2
  8092f0:	00bfffc4 	movi	r2,-1
  8092f4:	18800626 	beq	r3,r2,809310 <_lseek_r+0x54>
  8092f8:	1805883a 	mov	r2,r3
  8092fc:	dfc00217 	ldw	ra,8(sp)
  809300:	dc400117 	ldw	r17,4(sp)
  809304:	dc000017 	ldw	r16,0(sp)
  809308:	dec00304 	addi	sp,sp,12
  80930c:	f800283a 	ret
  809310:	80800017 	ldw	r2,0(r16)
  809314:	103ff826 	beq	r2,zero,8092f8 <_lseek_r+0x3c>
  809318:	88800015 	stw	r2,0(r17)
  80931c:	1805883a 	mov	r2,r3
  809320:	dfc00217 	ldw	ra,8(sp)
  809324:	dc400117 	ldw	r17,4(sp)
  809328:	dc000017 	ldw	r16,0(sp)
  80932c:	dec00304 	addi	sp,sp,12
  809330:	f800283a 	ret

00809334 <_read_r>:
  809334:	defffd04 	addi	sp,sp,-12
  809338:	dc000015 	stw	r16,0(sp)
  80933c:	04002074 	movhi	r16,129
  809340:	843ff404 	addi	r16,r16,-48
  809344:	dc400115 	stw	r17,4(sp)
  809348:	80000015 	stw	zero,0(r16)
  80934c:	2023883a 	mov	r17,r4
  809350:	2809883a 	mov	r4,r5
  809354:	300b883a 	mov	r5,r6
  809358:	380d883a 	mov	r6,r7
  80935c:	dfc00215 	stw	ra,8(sp)
  809360:	080b0d80 	call	80b0d8 <read>
  809364:	1007883a 	mov	r3,r2
  809368:	00bfffc4 	movi	r2,-1
  80936c:	18800626 	beq	r3,r2,809388 <_read_r+0x54>
  809370:	1805883a 	mov	r2,r3
  809374:	dfc00217 	ldw	ra,8(sp)
  809378:	dc400117 	ldw	r17,4(sp)
  80937c:	dc000017 	ldw	r16,0(sp)
  809380:	dec00304 	addi	sp,sp,12
  809384:	f800283a 	ret
  809388:	80800017 	ldw	r2,0(r16)
  80938c:	103ff826 	beq	r2,zero,809370 <_read_r+0x3c>
  809390:	88800015 	stw	r2,0(r17)
  809394:	1805883a 	mov	r2,r3
  809398:	dfc00217 	ldw	ra,8(sp)
  80939c:	dc400117 	ldw	r17,4(sp)
  8093a0:	dc000017 	ldw	r16,0(sp)
  8093a4:	dec00304 	addi	sp,sp,12
  8093a8:	f800283a 	ret

008093ac <__udivdi3>:
  8093ac:	defff004 	addi	sp,sp,-64
  8093b0:	2005883a 	mov	r2,r4
  8093b4:	3011883a 	mov	r8,r6
  8093b8:	df000e15 	stw	fp,56(sp)
  8093bc:	dd000a15 	stw	r20,40(sp)
  8093c0:	dc000615 	stw	r16,24(sp)
  8093c4:	dfc00f15 	stw	ra,60(sp)
  8093c8:	ddc00d15 	stw	r23,52(sp)
  8093cc:	dd800c15 	stw	r22,48(sp)
  8093d0:	dd400b15 	stw	r21,44(sp)
  8093d4:	dcc00915 	stw	r19,36(sp)
  8093d8:	dc800815 	stw	r18,32(sp)
  8093dc:	dc400715 	stw	r17,28(sp)
  8093e0:	4021883a 	mov	r16,r8
  8093e4:	1039883a 	mov	fp,r2
  8093e8:	2829883a 	mov	r20,r5
  8093ec:	38003b1e 	bne	r7,zero,8094dc <__udivdi3+0x130>
  8093f0:	2a005c36 	bltu	r5,r8,809564 <__udivdi3+0x1b8>
  8093f4:	4000a626 	beq	r8,zero,809690 <__udivdi3+0x2e4>
  8093f8:	00bfffd4 	movui	r2,65535
  8093fc:	14009e36 	bltu	r2,r16,809678 <__udivdi3+0x2cc>
  809400:	00803fc4 	movi	r2,255
  809404:	14013d36 	bltu	r2,r16,8098fc <__udivdi3+0x550>
  809408:	000b883a 	mov	r5,zero
  80940c:	0005883a 	mov	r2,zero
  809410:	8084d83a 	srl	r2,r16,r2
  809414:	01002074 	movhi	r4,129
  809418:	2131fa04 	addi	r4,r4,-14360
  80941c:	01800804 	movi	r6,32
  809420:	1105883a 	add	r2,r2,r4
  809424:	10c00003 	ldbu	r3,0(r2)
  809428:	28c7883a 	add	r3,r5,r3
  80942c:	30edc83a 	sub	r22,r6,r3
  809430:	b000ee1e 	bne	r22,zero,8097ec <__udivdi3+0x440>
  809434:	802ad43a 	srli	r21,r16,16
  809438:	00800044 	movi	r2,1
  80943c:	a423c83a 	sub	r17,r20,r16
  809440:	85ffffcc 	andi	r23,r16,65535
  809444:	d8800315 	stw	r2,12(sp)
  809448:	8809883a 	mov	r4,r17
  80944c:	a80b883a 	mov	r5,r21
  809450:	080ab900 	call	80ab90 <__udivsi3>
  809454:	8809883a 	mov	r4,r17
  809458:	a80b883a 	mov	r5,r21
  80945c:	102d883a 	mov	r22,r2
  809460:	080ab980 	call	80ab98 <__umodsi3>
  809464:	1004943a 	slli	r2,r2,16
  809468:	e006d43a 	srli	r3,fp,16
  80946c:	bda3383a 	mul	r17,r23,r22
  809470:	10c4b03a 	or	r2,r2,r3
  809474:	1440042e 	bgeu	r2,r17,809488 <__udivdi3+0xdc>
  809478:	1405883a 	add	r2,r2,r16
  80947c:	b5bfffc4 	addi	r22,r22,-1
  809480:	14000136 	bltu	r2,r16,809488 <__udivdi3+0xdc>
  809484:	14413d36 	bltu	r2,r17,80997c <__udivdi3+0x5d0>
  809488:	1463c83a 	sub	r17,r2,r17
  80948c:	8809883a 	mov	r4,r17
  809490:	a80b883a 	mov	r5,r21
  809494:	080ab900 	call	80ab90 <__udivsi3>
  809498:	8809883a 	mov	r4,r17
  80949c:	a80b883a 	mov	r5,r21
  8094a0:	1029883a 	mov	r20,r2
  8094a4:	080ab980 	call	80ab98 <__umodsi3>
  8094a8:	1004943a 	slli	r2,r2,16
  8094ac:	bd09383a 	mul	r4,r23,r20
  8094b0:	e0ffffcc 	andi	r3,fp,65535
  8094b4:	10c4b03a 	or	r2,r2,r3
  8094b8:	1100042e 	bgeu	r2,r4,8094cc <__udivdi3+0x120>
  8094bc:	8085883a 	add	r2,r16,r2
  8094c0:	a53fffc4 	addi	r20,r20,-1
  8094c4:	14000136 	bltu	r2,r16,8094cc <__udivdi3+0x120>
  8094c8:	11012036 	bltu	r2,r4,80994c <__udivdi3+0x5a0>
  8094cc:	b004943a 	slli	r2,r22,16
  8094d0:	d9000317 	ldw	r4,12(sp)
  8094d4:	a084b03a 	or	r2,r20,r2
  8094d8:	00001506 	br	809530 <__udivdi3+0x184>
  8094dc:	380d883a 	mov	r6,r7
  8094e0:	29c06236 	bltu	r5,r7,80966c <__udivdi3+0x2c0>
  8094e4:	00bfffd4 	movui	r2,65535
  8094e8:	11c05a36 	bltu	r2,r7,809654 <__udivdi3+0x2a8>
  8094ec:	00803fc4 	movi	r2,255
  8094f0:	11c0fc36 	bltu	r2,r7,8098e4 <__udivdi3+0x538>
  8094f4:	000b883a 	mov	r5,zero
  8094f8:	0005883a 	mov	r2,zero
  8094fc:	3084d83a 	srl	r2,r6,r2
  809500:	01002074 	movhi	r4,129
  809504:	2131fa04 	addi	r4,r4,-14360
  809508:	01c00804 	movi	r7,32
  80950c:	1105883a 	add	r2,r2,r4
  809510:	10c00003 	ldbu	r3,0(r2)
  809514:	28c7883a 	add	r3,r5,r3
  809518:	38efc83a 	sub	r23,r7,r3
  80951c:	b800691e 	bne	r23,zero,8096c4 <__udivdi3+0x318>
  809520:	35000136 	bltu	r6,r20,809528 <__udivdi3+0x17c>
  809524:	e4005136 	bltu	fp,r16,80966c <__udivdi3+0x2c0>
  809528:	00800044 	movi	r2,1
  80952c:	0009883a 	mov	r4,zero
  809530:	2007883a 	mov	r3,r4
  809534:	dfc00f17 	ldw	ra,60(sp)
  809538:	df000e17 	ldw	fp,56(sp)
  80953c:	ddc00d17 	ldw	r23,52(sp)
  809540:	dd800c17 	ldw	r22,48(sp)
  809544:	dd400b17 	ldw	r21,44(sp)
  809548:	dd000a17 	ldw	r20,40(sp)
  80954c:	dcc00917 	ldw	r19,36(sp)
  809550:	dc800817 	ldw	r18,32(sp)
  809554:	dc400717 	ldw	r17,28(sp)
  809558:	dc000617 	ldw	r16,24(sp)
  80955c:	dec01004 	addi	sp,sp,64
  809560:	f800283a 	ret
  809564:	00bfffd4 	movui	r2,65535
  809568:	12005036 	bltu	r2,r8,8096ac <__udivdi3+0x300>
  80956c:	00803fc4 	movi	r2,255
  809570:	1200e836 	bltu	r2,r8,809914 <__udivdi3+0x568>
  809574:	000b883a 	mov	r5,zero
  809578:	0005883a 	mov	r2,zero
  80957c:	8084d83a 	srl	r2,r16,r2
  809580:	01002074 	movhi	r4,129
  809584:	2131fa04 	addi	r4,r4,-14360
  809588:	01800804 	movi	r6,32
  80958c:	1105883a 	add	r2,r2,r4
  809590:	10c00003 	ldbu	r3,0(r2)
  809594:	28c7883a 	add	r3,r5,r3
  809598:	30cbc83a 	sub	r5,r6,r3
  80959c:	28000626 	beq	r5,zero,8095b8 <__udivdi3+0x20c>
  8095a0:	3145c83a 	sub	r2,r6,r5
  8095a4:	e084d83a 	srl	r2,fp,r2
  8095a8:	a146983a 	sll	r3,r20,r5
  8095ac:	e178983a 	sll	fp,fp,r5
  8095b0:	8160983a 	sll	r16,r16,r5
  8095b4:	18a8b03a 	or	r20,r3,r2
  8095b8:	802ad43a 	srli	r21,r16,16
  8095bc:	a009883a 	mov	r4,r20
  8095c0:	85ffffcc 	andi	r23,r16,65535
  8095c4:	a80b883a 	mov	r5,r21
  8095c8:	080ab900 	call	80ab90 <__udivsi3>
  8095cc:	a009883a 	mov	r4,r20
  8095d0:	a80b883a 	mov	r5,r21
  8095d4:	102d883a 	mov	r22,r2
  8095d8:	080ab980 	call	80ab98 <__umodsi3>
  8095dc:	1004943a 	slli	r2,r2,16
  8095e0:	e006d43a 	srli	r3,fp,16
  8095e4:	bda3383a 	mul	r17,r23,r22
  8095e8:	10c4b03a 	or	r2,r2,r3
  8095ec:	1440042e 	bgeu	r2,r17,809600 <__udivdi3+0x254>
  8095f0:	1405883a 	add	r2,r2,r16
  8095f4:	b5bfffc4 	addi	r22,r22,-1
  8095f8:	14000136 	bltu	r2,r16,809600 <__udivdi3+0x254>
  8095fc:	1440d536 	bltu	r2,r17,809954 <__udivdi3+0x5a8>
  809600:	1463c83a 	sub	r17,r2,r17
  809604:	8809883a 	mov	r4,r17
  809608:	a80b883a 	mov	r5,r21
  80960c:	080ab900 	call	80ab90 <__udivsi3>
  809610:	8809883a 	mov	r4,r17
  809614:	a80b883a 	mov	r5,r21
  809618:	1029883a 	mov	r20,r2
  80961c:	080ab980 	call	80ab98 <__umodsi3>
  809620:	1004943a 	slli	r2,r2,16
  809624:	bd09383a 	mul	r4,r23,r20
  809628:	e0ffffcc 	andi	r3,fp,65535
  80962c:	10c4b03a 	or	r2,r2,r3
  809630:	1100042e 	bgeu	r2,r4,809644 <__udivdi3+0x298>
  809634:	8085883a 	add	r2,r16,r2
  809638:	a53fffc4 	addi	r20,r20,-1
  80963c:	14000136 	bltu	r2,r16,809644 <__udivdi3+0x298>
  809640:	1100c736 	bltu	r2,r4,809960 <__udivdi3+0x5b4>
  809644:	b004943a 	slli	r2,r22,16
  809648:	0009883a 	mov	r4,zero
  80964c:	a084b03a 	or	r2,r20,r2
  809650:	003fb706 	br	809530 <__udivdi3+0x184>
  809654:	00804034 	movhi	r2,256
  809658:	10bfffc4 	addi	r2,r2,-1
  80965c:	11c0a436 	bltu	r2,r7,8098f0 <__udivdi3+0x544>
  809660:	01400404 	movi	r5,16
  809664:	2805883a 	mov	r2,r5
  809668:	003fa406 	br	8094fc <__udivdi3+0x150>
  80966c:	0005883a 	mov	r2,zero
  809670:	0009883a 	mov	r4,zero
  809674:	003fae06 	br	809530 <__udivdi3+0x184>
  809678:	00804034 	movhi	r2,256
  80967c:	10bfffc4 	addi	r2,r2,-1
  809680:	1400a136 	bltu	r2,r16,809908 <__udivdi3+0x55c>
  809684:	01400404 	movi	r5,16
  809688:	2805883a 	mov	r2,r5
  80968c:	003f6006 	br	809410 <__udivdi3+0x64>
  809690:	01000044 	movi	r4,1
  809694:	000b883a 	mov	r5,zero
  809698:	080ab900 	call	80ab90 <__udivsi3>
  80969c:	1021883a 	mov	r16,r2
  8096a0:	00bfffd4 	movui	r2,65535
  8096a4:	143ff436 	bltu	r2,r16,809678 <__udivdi3+0x2cc>
  8096a8:	003f5506 	br	809400 <__udivdi3+0x54>
  8096ac:	00804034 	movhi	r2,256
  8096b0:	10bfffc4 	addi	r2,r2,-1
  8096b4:	12009a36 	bltu	r2,r8,809920 <__udivdi3+0x574>
  8096b8:	01400404 	movi	r5,16
  8096bc:	2805883a 	mov	r2,r5
  8096c0:	003fae06 	br	80957c <__udivdi3+0x1d0>
  8096c4:	3dc5c83a 	sub	r2,r7,r23
  8096c8:	35c8983a 	sll	r4,r6,r23
  8096cc:	8086d83a 	srl	r3,r16,r2
  8096d0:	a0a2d83a 	srl	r17,r20,r2
  8096d4:	e084d83a 	srl	r2,fp,r2
  8096d8:	20eab03a 	or	r21,r4,r3
  8096dc:	a82cd43a 	srli	r22,r21,16
  8096e0:	a5c6983a 	sll	r3,r20,r23
  8096e4:	8809883a 	mov	r4,r17
  8096e8:	b00b883a 	mov	r5,r22
  8096ec:	1886b03a 	or	r3,r3,r2
  8096f0:	d8c00215 	stw	r3,8(sp)
  8096f4:	080ab900 	call	80ab90 <__udivsi3>
  8096f8:	8809883a 	mov	r4,r17
  8096fc:	b00b883a 	mov	r5,r22
  809700:	1029883a 	mov	r20,r2
  809704:	080ab980 	call	80ab98 <__umodsi3>
  809708:	a8ffffcc 	andi	r3,r21,65535
  80970c:	d8c00515 	stw	r3,20(sp)
  809710:	d9000217 	ldw	r4,8(sp)
  809714:	d9400517 	ldw	r5,20(sp)
  809718:	1004943a 	slli	r2,r2,16
  80971c:	2006d43a 	srli	r3,r4,16
  809720:	85e0983a 	sll	r16,r16,r23
  809724:	2d23383a 	mul	r17,r5,r20
  809728:	10c4b03a 	or	r2,r2,r3
  80972c:	dc000015 	stw	r16,0(sp)
  809730:	1440032e 	bgeu	r2,r17,809740 <__udivdi3+0x394>
  809734:	1545883a 	add	r2,r2,r21
  809738:	a53fffc4 	addi	r20,r20,-1
  80973c:	15407f2e 	bgeu	r2,r21,80993c <__udivdi3+0x590>
  809740:	1463c83a 	sub	r17,r2,r17
  809744:	8809883a 	mov	r4,r17
  809748:	b00b883a 	mov	r5,r22
  80974c:	080ab900 	call	80ab90 <__udivsi3>
  809750:	8809883a 	mov	r4,r17
  809754:	b00b883a 	mov	r5,r22
  809758:	1021883a 	mov	r16,r2
  80975c:	080ab980 	call	80ab98 <__umodsi3>
  809760:	d8c00517 	ldw	r3,20(sp)
  809764:	d9000217 	ldw	r4,8(sp)
  809768:	1004943a 	slli	r2,r2,16
  80976c:	1c0f383a 	mul	r7,r3,r16
  809770:	20ffffcc 	andi	r3,r4,65535
  809774:	10e2b03a 	or	r17,r2,r3
  809778:	89c0032e 	bgeu	r17,r7,809788 <__udivdi3+0x3dc>
  80977c:	8d63883a 	add	r17,r17,r21
  809780:	843fffc4 	addi	r16,r16,-1
  809784:	8d40692e 	bgeu	r17,r21,80992c <__udivdi3+0x580>
  809788:	a008943a 	slli	r4,r20,16
  80978c:	d9400017 	ldw	r5,0(sp)
  809790:	89e3c83a 	sub	r17,r17,r7
  809794:	8110b03a 	or	r8,r16,r4
  809798:	280cd43a 	srli	r6,r5,16
  80979c:	28ffffcc 	andi	r3,r5,65535
  8097a0:	40bfffcc 	andi	r2,r8,65535
  8097a4:	400ad43a 	srli	r5,r8,16
  8097a8:	10d3383a 	mul	r9,r2,r3
  8097ac:	1185383a 	mul	r2,r2,r6
  8097b0:	28c7383a 	mul	r3,r5,r3
  8097b4:	4808d43a 	srli	r4,r9,16
  8097b8:	298b383a 	mul	r5,r5,r6
  8097bc:	10c5883a 	add	r2,r2,r3
  8097c0:	2089883a 	add	r4,r4,r2
  8097c4:	20c0022e 	bgeu	r4,r3,8097d0 <__udivdi3+0x424>
  8097c8:	00800074 	movhi	r2,1
  8097cc:	288b883a 	add	r5,r5,r2
  8097d0:	2004d43a 	srli	r2,r4,16
  8097d4:	288b883a 	add	r5,r5,r2
  8097d8:	89403f36 	bltu	r17,r5,8098d8 <__udivdi3+0x52c>
  8097dc:	89403926 	beq	r17,r5,8098c4 <__udivdi3+0x518>
  8097e0:	4005883a 	mov	r2,r8
  8097e4:	0009883a 	mov	r4,zero
  8097e8:	003f5106 	br	809530 <__udivdi3+0x184>
  8097ec:	85a0983a 	sll	r16,r16,r22
  8097f0:	3585c83a 	sub	r2,r6,r22
  8097f4:	a0a2d83a 	srl	r17,r20,r2
  8097f8:	802ad43a 	srli	r21,r16,16
  8097fc:	e084d83a 	srl	r2,fp,r2
  809800:	a586983a 	sll	r3,r20,r22
  809804:	8809883a 	mov	r4,r17
  809808:	a80b883a 	mov	r5,r21
  80980c:	1886b03a 	or	r3,r3,r2
  809810:	d8c00115 	stw	r3,4(sp)
  809814:	080ab900 	call	80ab90 <__udivsi3>
  809818:	8809883a 	mov	r4,r17
  80981c:	a80b883a 	mov	r5,r21
  809820:	d8800415 	stw	r2,16(sp)
  809824:	080ab980 	call	80ab98 <__umodsi3>
  809828:	d9000117 	ldw	r4,4(sp)
  80982c:	d9400417 	ldw	r5,16(sp)
  809830:	1004943a 	slli	r2,r2,16
  809834:	85ffffcc 	andi	r23,r16,65535
  809838:	2006d43a 	srli	r3,r4,16
  80983c:	b963383a 	mul	r17,r23,r5
  809840:	10c4b03a 	or	r2,r2,r3
  809844:	1440042e 	bgeu	r2,r17,809858 <__udivdi3+0x4ac>
  809848:	297fffc4 	addi	r5,r5,-1
  80984c:	1405883a 	add	r2,r2,r16
  809850:	d9400415 	stw	r5,16(sp)
  809854:	1400442e 	bgeu	r2,r16,809968 <__udivdi3+0x5bc>
  809858:	1463c83a 	sub	r17,r2,r17
  80985c:	8809883a 	mov	r4,r17
  809860:	a80b883a 	mov	r5,r21
  809864:	080ab900 	call	80ab90 <__udivsi3>
  809868:	8809883a 	mov	r4,r17
  80986c:	a80b883a 	mov	r5,r21
  809870:	1029883a 	mov	r20,r2
  809874:	080ab980 	call	80ab98 <__umodsi3>
  809878:	d9400117 	ldw	r5,4(sp)
  80987c:	1004943a 	slli	r2,r2,16
  809880:	bd09383a 	mul	r4,r23,r20
  809884:	28ffffcc 	andi	r3,r5,65535
  809888:	10c6b03a 	or	r3,r2,r3
  80988c:	1900062e 	bgeu	r3,r4,8098a8 <__udivdi3+0x4fc>
  809890:	1c07883a 	add	r3,r3,r16
  809894:	a53fffc4 	addi	r20,r20,-1
  809898:	1c000336 	bltu	r3,r16,8098a8 <__udivdi3+0x4fc>
  80989c:	1900022e 	bgeu	r3,r4,8098a8 <__udivdi3+0x4fc>
  8098a0:	a53fffc4 	addi	r20,r20,-1
  8098a4:	1c07883a 	add	r3,r3,r16
  8098a8:	d9400417 	ldw	r5,16(sp)
  8098ac:	e5b8983a 	sll	fp,fp,r22
  8098b0:	1923c83a 	sub	r17,r3,r4
  8098b4:	2804943a 	slli	r2,r5,16
  8098b8:	a0a8b03a 	or	r20,r20,r2
  8098bc:	dd000315 	stw	r20,12(sp)
  8098c0:	003ee106 	br	809448 <__udivdi3+0x9c>
  8098c4:	2004943a 	slli	r2,r4,16
  8098c8:	e5c8983a 	sll	r4,fp,r23
  8098cc:	48ffffcc 	andi	r3,r9,65535
  8098d0:	10c5883a 	add	r2,r2,r3
  8098d4:	20bfc22e 	bgeu	r4,r2,8097e0 <__udivdi3+0x434>
  8098d8:	40bfffc4 	addi	r2,r8,-1
  8098dc:	0009883a 	mov	r4,zero
  8098e0:	003f1306 	br	809530 <__udivdi3+0x184>
  8098e4:	01400204 	movi	r5,8
  8098e8:	2805883a 	mov	r2,r5
  8098ec:	003f0306 	br	8094fc <__udivdi3+0x150>
  8098f0:	01400604 	movi	r5,24
  8098f4:	2805883a 	mov	r2,r5
  8098f8:	003f0006 	br	8094fc <__udivdi3+0x150>
  8098fc:	01400204 	movi	r5,8
  809900:	2805883a 	mov	r2,r5
  809904:	003ec206 	br	809410 <__udivdi3+0x64>
  809908:	01400604 	movi	r5,24
  80990c:	2805883a 	mov	r2,r5
  809910:	003ebf06 	br	809410 <__udivdi3+0x64>
  809914:	01400204 	movi	r5,8
  809918:	2805883a 	mov	r2,r5
  80991c:	003f1706 	br	80957c <__udivdi3+0x1d0>
  809920:	01400604 	movi	r5,24
  809924:	2805883a 	mov	r2,r5
  809928:	003f1406 	br	80957c <__udivdi3+0x1d0>
  80992c:	89ff962e 	bgeu	r17,r7,809788 <__udivdi3+0x3dc>
  809930:	8d63883a 	add	r17,r17,r21
  809934:	843fffc4 	addi	r16,r16,-1
  809938:	003f9306 	br	809788 <__udivdi3+0x3dc>
  80993c:	147f802e 	bgeu	r2,r17,809740 <__udivdi3+0x394>
  809940:	a53fffc4 	addi	r20,r20,-1
  809944:	1545883a 	add	r2,r2,r21
  809948:	003f7d06 	br	809740 <__udivdi3+0x394>
  80994c:	a53fffc4 	addi	r20,r20,-1
  809950:	003ede06 	br	8094cc <__udivdi3+0x120>
  809954:	b5bfffc4 	addi	r22,r22,-1
  809958:	1405883a 	add	r2,r2,r16
  80995c:	003f2806 	br	809600 <__udivdi3+0x254>
  809960:	a53fffc4 	addi	r20,r20,-1
  809964:	003f3706 	br	809644 <__udivdi3+0x298>
  809968:	147fbb2e 	bgeu	r2,r17,809858 <__udivdi3+0x4ac>
  80996c:	297fffc4 	addi	r5,r5,-1
  809970:	1405883a 	add	r2,r2,r16
  809974:	d9400415 	stw	r5,16(sp)
  809978:	003fb706 	br	809858 <__udivdi3+0x4ac>
  80997c:	b5bfffc4 	addi	r22,r22,-1
  809980:	1405883a 	add	r2,r2,r16
  809984:	003ec006 	br	809488 <__udivdi3+0xdc>

00809988 <__umoddi3>:
  809988:	defff104 	addi	sp,sp,-60
  80998c:	dd800b15 	stw	r22,44(sp)
  809990:	dd000915 	stw	r20,36(sp)
  809994:	dc000515 	stw	r16,20(sp)
  809998:	dfc00e15 	stw	ra,56(sp)
  80999c:	df000d15 	stw	fp,52(sp)
  8099a0:	ddc00c15 	stw	r23,48(sp)
  8099a4:	dd400a15 	stw	r21,40(sp)
  8099a8:	dcc00815 	stw	r19,32(sp)
  8099ac:	dc800715 	stw	r18,28(sp)
  8099b0:	dc400615 	stw	r17,24(sp)
  8099b4:	3021883a 	mov	r16,r6
  8099b8:	202d883a 	mov	r22,r4
  8099bc:	2829883a 	mov	r20,r5
  8099c0:	38002b1e 	bne	r7,zero,809a70 <__umoddi3+0xe8>
  8099c4:	29805036 	bltu	r5,r6,809b08 <__umoddi3+0x180>
  8099c8:	30008a26 	beq	r6,zero,809bf4 <__umoddi3+0x26c>
  8099cc:	00bfffd4 	movui	r2,65535
  8099d0:	14008236 	bltu	r2,r16,809bdc <__umoddi3+0x254>
  8099d4:	00803fc4 	movi	r2,255
  8099d8:	14013636 	bltu	r2,r16,809eb4 <__umoddi3+0x52c>
  8099dc:	000b883a 	mov	r5,zero
  8099e0:	0005883a 	mov	r2,zero
  8099e4:	8084d83a 	srl	r2,r16,r2
  8099e8:	01002074 	movhi	r4,129
  8099ec:	2131fa04 	addi	r4,r4,-14360
  8099f0:	01800804 	movi	r6,32
  8099f4:	1105883a 	add	r2,r2,r4
  8099f8:	10c00003 	ldbu	r3,0(r2)
  8099fc:	28c7883a 	add	r3,r5,r3
  809a00:	30efc83a 	sub	r23,r6,r3
  809a04:	b800941e 	bne	r23,zero,809c58 <__umoddi3+0x2d0>
  809a08:	802ad43a 	srli	r21,r16,16
  809a0c:	a423c83a 	sub	r17,r20,r16
  809a10:	0039883a 	mov	fp,zero
  809a14:	853fffcc 	andi	r20,r16,65535
  809a18:	8809883a 	mov	r4,r17
  809a1c:	a80b883a 	mov	r5,r21
  809a20:	080ab900 	call	80ab90 <__udivsi3>
  809a24:	8809883a 	mov	r4,r17
  809a28:	a80b883a 	mov	r5,r21
  809a2c:	a0a3383a 	mul	r17,r20,r2
  809a30:	080ab980 	call	80ab98 <__umodsi3>
  809a34:	1004943a 	slli	r2,r2,16
  809a38:	b006d43a 	srli	r3,r22,16
  809a3c:	10c4b03a 	or	r2,r2,r3
  809a40:	1440032e 	bgeu	r2,r17,809a50 <__umoddi3+0xc8>
  809a44:	1405883a 	add	r2,r2,r16
  809a48:	14000136 	bltu	r2,r16,809a50 <__umoddi3+0xc8>
  809a4c:	14413536 	bltu	r2,r17,809f24 <__umoddi3+0x59c>
  809a50:	1463c83a 	sub	r17,r2,r17
  809a54:	8809883a 	mov	r4,r17
  809a58:	a80b883a 	mov	r5,r21
  809a5c:	080ab900 	call	80ab90 <__udivsi3>
  809a60:	8809883a 	mov	r4,r17
  809a64:	a0a3383a 	mul	r17,r20,r2
  809a68:	a80b883a 	mov	r5,r21
  809a6c:	00004d06 	br	809ba4 <__umoddi3+0x21c>
  809a70:	380d883a 	mov	r6,r7
  809a74:	29c0102e 	bgeu	r5,r7,809ab8 <__umoddi3+0x130>
  809a78:	2011883a 	mov	r8,r4
  809a7c:	2813883a 	mov	r9,r5
  809a80:	4005883a 	mov	r2,r8
  809a84:	4807883a 	mov	r3,r9
  809a88:	dfc00e17 	ldw	ra,56(sp)
  809a8c:	df000d17 	ldw	fp,52(sp)
  809a90:	ddc00c17 	ldw	r23,48(sp)
  809a94:	dd800b17 	ldw	r22,44(sp)
  809a98:	dd400a17 	ldw	r21,40(sp)
  809a9c:	dd000917 	ldw	r20,36(sp)
  809aa0:	dcc00817 	ldw	r19,32(sp)
  809aa4:	dc800717 	ldw	r18,28(sp)
  809aa8:	dc400617 	ldw	r17,24(sp)
  809aac:	dc000517 	ldw	r16,20(sp)
  809ab0:	dec00f04 	addi	sp,sp,60
  809ab4:	f800283a 	ret
  809ab8:	00bfffd4 	movui	r2,65535
  809abc:	11c05a36 	bltu	r2,r7,809c28 <__umoddi3+0x2a0>
  809ac0:	00803fc4 	movi	r2,255
  809ac4:	11c0fe36 	bltu	r2,r7,809ec0 <__umoddi3+0x538>
  809ac8:	000b883a 	mov	r5,zero
  809acc:	0005883a 	mov	r2,zero
  809ad0:	3084d83a 	srl	r2,r6,r2
  809ad4:	01002074 	movhi	r4,129
  809ad8:	2131fa04 	addi	r4,r4,-14360
  809adc:	01c00804 	movi	r7,32
  809ae0:	1105883a 	add	r2,r2,r4
  809ae4:	10c00003 	ldbu	r3,0(r2)
  809ae8:	28c7883a 	add	r3,r5,r3
  809aec:	38ebc83a 	sub	r21,r7,r3
  809af0:	a800851e 	bne	r21,zero,809d08 <__umoddi3+0x380>
  809af4:	35005236 	bltu	r6,r20,809c40 <__umoddi3+0x2b8>
  809af8:	b400512e 	bgeu	r22,r16,809c40 <__umoddi3+0x2b8>
  809afc:	b011883a 	mov	r8,r22
  809b00:	a013883a 	mov	r9,r20
  809b04:	003fde06 	br	809a80 <__umoddi3+0xf8>
  809b08:	00bfffd4 	movui	r2,65535
  809b0c:	11804036 	bltu	r2,r6,809c10 <__umoddi3+0x288>
  809b10:	00803fc4 	movi	r2,255
  809b14:	1180ed36 	bltu	r2,r6,809ecc <__umoddi3+0x544>
  809b18:	000b883a 	mov	r5,zero
  809b1c:	0005883a 	mov	r2,zero
  809b20:	8084d83a 	srl	r2,r16,r2
  809b24:	01002074 	movhi	r4,129
  809b28:	2131fa04 	addi	r4,r4,-14360
  809b2c:	01800804 	movi	r6,32
  809b30:	1105883a 	add	r2,r2,r4
  809b34:	10c00003 	ldbu	r3,0(r2)
  809b38:	28c7883a 	add	r3,r5,r3
  809b3c:	30c7c83a 	sub	r3,r6,r3
  809b40:	1800bf1e 	bne	r3,zero,809e40 <__umoddi3+0x4b8>
  809b44:	0039883a 	mov	fp,zero
  809b48:	802ad43a 	srli	r21,r16,16
  809b4c:	a009883a 	mov	r4,r20
  809b50:	85ffffcc 	andi	r23,r16,65535
  809b54:	a80b883a 	mov	r5,r21
  809b58:	080ab900 	call	80ab90 <__udivsi3>
  809b5c:	a009883a 	mov	r4,r20
  809b60:	a80b883a 	mov	r5,r21
  809b64:	b8a3383a 	mul	r17,r23,r2
  809b68:	080ab980 	call	80ab98 <__umodsi3>
  809b6c:	1004943a 	slli	r2,r2,16
  809b70:	b006d43a 	srli	r3,r22,16
  809b74:	10c4b03a 	or	r2,r2,r3
  809b78:	1440032e 	bgeu	r2,r17,809b88 <__umoddi3+0x200>
  809b7c:	1405883a 	add	r2,r2,r16
  809b80:	14000136 	bltu	r2,r16,809b88 <__umoddi3+0x200>
  809b84:	1440e536 	bltu	r2,r17,809f1c <__umoddi3+0x594>
  809b88:	1463c83a 	sub	r17,r2,r17
  809b8c:	8809883a 	mov	r4,r17
  809b90:	a80b883a 	mov	r5,r21
  809b94:	080ab900 	call	80ab90 <__udivsi3>
  809b98:	8809883a 	mov	r4,r17
  809b9c:	b8a3383a 	mul	r17,r23,r2
  809ba0:	a80b883a 	mov	r5,r21
  809ba4:	080ab980 	call	80ab98 <__umodsi3>
  809ba8:	1004943a 	slli	r2,r2,16
  809bac:	b0ffffcc 	andi	r3,r22,65535
  809bb0:	10c4b03a 	or	r2,r2,r3
  809bb4:	1440042e 	bgeu	r2,r17,809bc8 <__umoddi3+0x240>
  809bb8:	1405883a 	add	r2,r2,r16
  809bbc:	14000236 	bltu	r2,r16,809bc8 <__umoddi3+0x240>
  809bc0:	1440012e 	bgeu	r2,r17,809bc8 <__umoddi3+0x240>
  809bc4:	1405883a 	add	r2,r2,r16
  809bc8:	1445c83a 	sub	r2,r2,r17
  809bcc:	1724d83a 	srl	r18,r2,fp
  809bd0:	0013883a 	mov	r9,zero
  809bd4:	9011883a 	mov	r8,r18
  809bd8:	003fa906 	br	809a80 <__umoddi3+0xf8>
  809bdc:	00804034 	movhi	r2,256
  809be0:	10bfffc4 	addi	r2,r2,-1
  809be4:	1400b036 	bltu	r2,r16,809ea8 <__umoddi3+0x520>
  809be8:	01400404 	movi	r5,16
  809bec:	2805883a 	mov	r2,r5
  809bf0:	003f7c06 	br	8099e4 <__umoddi3+0x5c>
  809bf4:	01000044 	movi	r4,1
  809bf8:	000b883a 	mov	r5,zero
  809bfc:	080ab900 	call	80ab90 <__udivsi3>
  809c00:	1021883a 	mov	r16,r2
  809c04:	00bfffd4 	movui	r2,65535
  809c08:	143ff436 	bltu	r2,r16,809bdc <__umoddi3+0x254>
  809c0c:	003f7106 	br	8099d4 <__umoddi3+0x4c>
  809c10:	00804034 	movhi	r2,256
  809c14:	10bfffc4 	addi	r2,r2,-1
  809c18:	1180af36 	bltu	r2,r6,809ed8 <__umoddi3+0x550>
  809c1c:	01400404 	movi	r5,16
  809c20:	2805883a 	mov	r2,r5
  809c24:	003fbe06 	br	809b20 <__umoddi3+0x198>
  809c28:	00804034 	movhi	r2,256
  809c2c:	10bfffc4 	addi	r2,r2,-1
  809c30:	11c0ac36 	bltu	r2,r7,809ee4 <__umoddi3+0x55c>
  809c34:	01400404 	movi	r5,16
  809c38:	2805883a 	mov	r2,r5
  809c3c:	003fa406 	br	809ad0 <__umoddi3+0x148>
  809c40:	b409c83a 	sub	r4,r22,r16
  809c44:	b105803a 	cmpltu	r2,r22,r4
  809c48:	a187c83a 	sub	r3,r20,r6
  809c4c:	18a9c83a 	sub	r20,r3,r2
  809c50:	202d883a 	mov	r22,r4
  809c54:	003fa906 	br	809afc <__umoddi3+0x174>
  809c58:	85e0983a 	sll	r16,r16,r23
  809c5c:	35c5c83a 	sub	r2,r6,r23
  809c60:	a0a2d83a 	srl	r17,r20,r2
  809c64:	802ad43a 	srli	r21,r16,16
  809c68:	b084d83a 	srl	r2,r22,r2
  809c6c:	a5c6983a 	sll	r3,r20,r23
  809c70:	8809883a 	mov	r4,r17
  809c74:	a80b883a 	mov	r5,r21
  809c78:	1886b03a 	or	r3,r3,r2
  809c7c:	d8c00115 	stw	r3,4(sp)
  809c80:	853fffcc 	andi	r20,r16,65535
  809c84:	080ab900 	call	80ab90 <__udivsi3>
  809c88:	8809883a 	mov	r4,r17
  809c8c:	a80b883a 	mov	r5,r21
  809c90:	a0a3383a 	mul	r17,r20,r2
  809c94:	080ab980 	call	80ab98 <__umodsi3>
  809c98:	d9000117 	ldw	r4,4(sp)
  809c9c:	1004943a 	slli	r2,r2,16
  809ca0:	b839883a 	mov	fp,r23
  809ca4:	2006d43a 	srli	r3,r4,16
  809ca8:	10c4b03a 	or	r2,r2,r3
  809cac:	1440022e 	bgeu	r2,r17,809cb8 <__umoddi3+0x330>
  809cb0:	1405883a 	add	r2,r2,r16
  809cb4:	1400962e 	bgeu	r2,r16,809f10 <__umoddi3+0x588>
  809cb8:	1463c83a 	sub	r17,r2,r17
  809cbc:	8809883a 	mov	r4,r17
  809cc0:	a80b883a 	mov	r5,r21
  809cc4:	080ab900 	call	80ab90 <__udivsi3>
  809cc8:	8809883a 	mov	r4,r17
  809ccc:	a80b883a 	mov	r5,r21
  809cd0:	a0a3383a 	mul	r17,r20,r2
  809cd4:	080ab980 	call	80ab98 <__umodsi3>
  809cd8:	d9400117 	ldw	r5,4(sp)
  809cdc:	1004943a 	slli	r2,r2,16
  809ce0:	28ffffcc 	andi	r3,r5,65535
  809ce4:	10c4b03a 	or	r2,r2,r3
  809ce8:	1440042e 	bgeu	r2,r17,809cfc <__umoddi3+0x374>
  809cec:	1405883a 	add	r2,r2,r16
  809cf0:	14000236 	bltu	r2,r16,809cfc <__umoddi3+0x374>
  809cf4:	1440012e 	bgeu	r2,r17,809cfc <__umoddi3+0x374>
  809cf8:	1405883a 	add	r2,r2,r16
  809cfc:	b5ec983a 	sll	r22,r22,r23
  809d00:	1463c83a 	sub	r17,r2,r17
  809d04:	003f4406 	br	809a18 <__umoddi3+0x90>
  809d08:	3d4fc83a 	sub	r7,r7,r21
  809d0c:	3546983a 	sll	r3,r6,r21
  809d10:	81c4d83a 	srl	r2,r16,r7
  809d14:	a1e2d83a 	srl	r17,r20,r7
  809d18:	a54c983a 	sll	r6,r20,r21
  809d1c:	18aeb03a 	or	r23,r3,r2
  809d20:	b828d43a 	srli	r20,r23,16
  809d24:	b1c4d83a 	srl	r2,r22,r7
  809d28:	8809883a 	mov	r4,r17
  809d2c:	a00b883a 	mov	r5,r20
  809d30:	308cb03a 	or	r6,r6,r2
  809d34:	d9c00315 	stw	r7,12(sp)
  809d38:	d9800215 	stw	r6,8(sp)
  809d3c:	080ab900 	call	80ab90 <__udivsi3>
  809d40:	8809883a 	mov	r4,r17
  809d44:	a00b883a 	mov	r5,r20
  809d48:	1039883a 	mov	fp,r2
  809d4c:	080ab980 	call	80ab98 <__umodsi3>
  809d50:	b8ffffcc 	andi	r3,r23,65535
  809d54:	d8c00415 	stw	r3,16(sp)
  809d58:	d9000217 	ldw	r4,8(sp)
  809d5c:	d9400417 	ldw	r5,16(sp)
  809d60:	1004943a 	slli	r2,r2,16
  809d64:	2006d43a 	srli	r3,r4,16
  809d68:	8560983a 	sll	r16,r16,r21
  809d6c:	2f23383a 	mul	r17,r5,fp
  809d70:	10c4b03a 	or	r2,r2,r3
  809d74:	dc000015 	stw	r16,0(sp)
  809d78:	b56c983a 	sll	r22,r22,r21
  809d7c:	1440032e 	bgeu	r2,r17,809d8c <__umoddi3+0x404>
  809d80:	15c5883a 	add	r2,r2,r23
  809d84:	e73fffc4 	addi	fp,fp,-1
  809d88:	15c05d2e 	bgeu	r2,r23,809f00 <__umoddi3+0x578>
  809d8c:	1463c83a 	sub	r17,r2,r17
  809d90:	8809883a 	mov	r4,r17
  809d94:	a00b883a 	mov	r5,r20
  809d98:	080ab900 	call	80ab90 <__udivsi3>
  809d9c:	8809883a 	mov	r4,r17
  809da0:	a00b883a 	mov	r5,r20
  809da4:	1021883a 	mov	r16,r2
  809da8:	080ab980 	call	80ab98 <__umodsi3>
  809dac:	d8c00417 	ldw	r3,16(sp)
  809db0:	d9000217 	ldw	r4,8(sp)
  809db4:	1004943a 	slli	r2,r2,16
  809db8:	1c23383a 	mul	r17,r3,r16
  809dbc:	20ffffcc 	andi	r3,r4,65535
  809dc0:	10ceb03a 	or	r7,r2,r3
  809dc4:	3c40032e 	bgeu	r7,r17,809dd4 <__umoddi3+0x44c>
  809dc8:	3dcf883a 	add	r7,r7,r23
  809dcc:	843fffc4 	addi	r16,r16,-1
  809dd0:	3dc0472e 	bgeu	r7,r23,809ef0 <__umoddi3+0x568>
  809dd4:	e004943a 	slli	r2,fp,16
  809dd8:	d9400017 	ldw	r5,0(sp)
  809ddc:	3c4fc83a 	sub	r7,r7,r17
  809de0:	8084b03a 	or	r2,r16,r2
  809de4:	28ffffcc 	andi	r3,r5,65535
  809de8:	280cd43a 	srli	r6,r5,16
  809dec:	100ad43a 	srli	r5,r2,16
  809df0:	10bfffcc 	andi	r2,r2,65535
  809df4:	10d1383a 	mul	r8,r2,r3
  809df8:	28c7383a 	mul	r3,r5,r3
  809dfc:	1185383a 	mul	r2,r2,r6
  809e00:	4008d43a 	srli	r4,r8,16
  809e04:	298b383a 	mul	r5,r5,r6
  809e08:	10c5883a 	add	r2,r2,r3
  809e0c:	2089883a 	add	r4,r4,r2
  809e10:	20c0022e 	bgeu	r4,r3,809e1c <__umoddi3+0x494>
  809e14:	00800074 	movhi	r2,1
  809e18:	288b883a 	add	r5,r5,r2
  809e1c:	2004d43a 	srli	r2,r4,16
  809e20:	2008943a 	slli	r4,r4,16
  809e24:	40ffffcc 	andi	r3,r8,65535
  809e28:	288b883a 	add	r5,r5,r2
  809e2c:	20c9883a 	add	r4,r4,r3
  809e30:	39400b36 	bltu	r7,r5,809e60 <__umoddi3+0x4d8>
  809e34:	39403d26 	beq	r7,r5,809f2c <__umoddi3+0x5a4>
  809e38:	394bc83a 	sub	r5,r7,r5
  809e3c:	00000f06 	br	809e7c <__umoddi3+0x4f4>
  809e40:	30c5c83a 	sub	r2,r6,r3
  809e44:	1839883a 	mov	fp,r3
  809e48:	b084d83a 	srl	r2,r22,r2
  809e4c:	a0c6983a 	sll	r3,r20,r3
  809e50:	8720983a 	sll	r16,r16,fp
  809e54:	b72c983a 	sll	r22,r22,fp
  809e58:	18a8b03a 	or	r20,r3,r2
  809e5c:	003f3a06 	br	809b48 <__umoddi3+0x1c0>
  809e60:	d8c00017 	ldw	r3,0(sp)
  809e64:	20c5c83a 	sub	r2,r4,r3
  809e68:	2089803a 	cmpltu	r4,r4,r2
  809e6c:	2dc7c83a 	sub	r3,r5,r23
  809e70:	1907c83a 	sub	r3,r3,r4
  809e74:	38cbc83a 	sub	r5,r7,r3
  809e78:	1009883a 	mov	r4,r2
  809e7c:	b105c83a 	sub	r2,r22,r4
  809e80:	b087803a 	cmpltu	r3,r22,r2
  809e84:	28c7c83a 	sub	r3,r5,r3
  809e88:	d9400317 	ldw	r5,12(sp)
  809e8c:	1544d83a 	srl	r2,r2,r21
  809e90:	1948983a 	sll	r4,r3,r5
  809e94:	1d46d83a 	srl	r3,r3,r21
  809e98:	20a4b03a 	or	r18,r4,r2
  809e9c:	9011883a 	mov	r8,r18
  809ea0:	1813883a 	mov	r9,r3
  809ea4:	003ef606 	br	809a80 <__umoddi3+0xf8>
  809ea8:	01400604 	movi	r5,24
  809eac:	2805883a 	mov	r2,r5
  809eb0:	003ecc06 	br	8099e4 <__umoddi3+0x5c>
  809eb4:	01400204 	movi	r5,8
  809eb8:	2805883a 	mov	r2,r5
  809ebc:	003ec906 	br	8099e4 <__umoddi3+0x5c>
  809ec0:	01400204 	movi	r5,8
  809ec4:	2805883a 	mov	r2,r5
  809ec8:	003f0106 	br	809ad0 <__umoddi3+0x148>
  809ecc:	01400204 	movi	r5,8
  809ed0:	2805883a 	mov	r2,r5
  809ed4:	003f1206 	br	809b20 <__umoddi3+0x198>
  809ed8:	01400604 	movi	r5,24
  809edc:	2805883a 	mov	r2,r5
  809ee0:	003f0f06 	br	809b20 <__umoddi3+0x198>
  809ee4:	01400604 	movi	r5,24
  809ee8:	2805883a 	mov	r2,r5
  809eec:	003ef806 	br	809ad0 <__umoddi3+0x148>
  809ef0:	3c7fb82e 	bgeu	r7,r17,809dd4 <__umoddi3+0x44c>
  809ef4:	843fffc4 	addi	r16,r16,-1
  809ef8:	3dcf883a 	add	r7,r7,r23
  809efc:	003fb506 	br	809dd4 <__umoddi3+0x44c>
  809f00:	147fa22e 	bgeu	r2,r17,809d8c <__umoddi3+0x404>
  809f04:	e73fffc4 	addi	fp,fp,-1
  809f08:	15c5883a 	add	r2,r2,r23
  809f0c:	003f9f06 	br	809d8c <__umoddi3+0x404>
  809f10:	147f692e 	bgeu	r2,r17,809cb8 <__umoddi3+0x330>
  809f14:	1405883a 	add	r2,r2,r16
  809f18:	003f6706 	br	809cb8 <__umoddi3+0x330>
  809f1c:	1405883a 	add	r2,r2,r16
  809f20:	003f1906 	br	809b88 <__umoddi3+0x200>
  809f24:	1405883a 	add	r2,r2,r16
  809f28:	003ec906 	br	809a50 <__umoddi3+0xc8>
  809f2c:	b13fcc36 	bltu	r22,r4,809e60 <__umoddi3+0x4d8>
  809f30:	000b883a 	mov	r5,zero
  809f34:	003fd106 	br	809e7c <__umoddi3+0x4f4>

00809f38 <__muldf3>:
  809f38:	deffe004 	addi	sp,sp,-128
  809f3c:	dc401815 	stw	r17,96(sp)
  809f40:	dc400404 	addi	r17,sp,16
  809f44:	2011883a 	mov	r8,r4
  809f48:	2813883a 	mov	r9,r5
  809f4c:	dc001715 	stw	r16,92(sp)
  809f50:	d809883a 	mov	r4,sp
  809f54:	880b883a 	mov	r5,r17
  809f58:	dc000904 	addi	r16,sp,36
  809f5c:	dfc01f15 	stw	ra,124(sp)
  809f60:	da400115 	stw	r9,4(sp)
  809f64:	d9c00315 	stw	r7,12(sp)
  809f68:	da000015 	stw	r8,0(sp)
  809f6c:	d9800215 	stw	r6,8(sp)
  809f70:	ddc01e15 	stw	r23,120(sp)
  809f74:	dd801d15 	stw	r22,116(sp)
  809f78:	dd401c15 	stw	r21,112(sp)
  809f7c:	dd001b15 	stw	r20,108(sp)
  809f80:	dcc01a15 	stw	r19,104(sp)
  809f84:	dc801915 	stw	r18,100(sp)
  809f88:	08010c00 	call	8010c0 <__unpack_d>
  809f8c:	d9000204 	addi	r4,sp,8
  809f90:	800b883a 	mov	r5,r16
  809f94:	08010c00 	call	8010c0 <__unpack_d>
  809f98:	d9000417 	ldw	r4,16(sp)
  809f9c:	00800044 	movi	r2,1
  809fa0:	1100102e 	bgeu	r2,r4,809fe4 <__muldf3+0xac>
  809fa4:	d8c00917 	ldw	r3,36(sp)
  809fa8:	10c0062e 	bgeu	r2,r3,809fc4 <__muldf3+0x8c>
  809fac:	00800104 	movi	r2,4
  809fb0:	20800a26 	beq	r4,r2,809fdc <__muldf3+0xa4>
  809fb4:	1880cc26 	beq	r3,r2,80a2e8 <__muldf3+0x3b0>
  809fb8:	00800084 	movi	r2,2
  809fbc:	20800926 	beq	r4,r2,809fe4 <__muldf3+0xac>
  809fc0:	1880191e 	bne	r3,r2,80a028 <__muldf3+0xf0>
  809fc4:	d8c00a17 	ldw	r3,40(sp)
  809fc8:	d8800517 	ldw	r2,20(sp)
  809fcc:	8009883a 	mov	r4,r16
  809fd0:	10c4c03a 	cmpne	r2,r2,r3
  809fd4:	d8800a15 	stw	r2,40(sp)
  809fd8:	00000706 	br	809ff8 <__muldf3+0xc0>
  809fdc:	00800084 	movi	r2,2
  809fe0:	1880c326 	beq	r3,r2,80a2f0 <__muldf3+0x3b8>
  809fe4:	d8800517 	ldw	r2,20(sp)
  809fe8:	d8c00a17 	ldw	r3,40(sp)
  809fec:	8809883a 	mov	r4,r17
  809ff0:	10c4c03a 	cmpne	r2,r2,r3
  809ff4:	d8800515 	stw	r2,20(sp)
  809ff8:	0800dac0 	call	800dac <__pack_d>
  809ffc:	dfc01f17 	ldw	ra,124(sp)
  80a000:	ddc01e17 	ldw	r23,120(sp)
  80a004:	dd801d17 	ldw	r22,116(sp)
  80a008:	dd401c17 	ldw	r21,112(sp)
  80a00c:	dd001b17 	ldw	r20,108(sp)
  80a010:	dcc01a17 	ldw	r19,104(sp)
  80a014:	dc801917 	ldw	r18,100(sp)
  80a018:	dc401817 	ldw	r17,96(sp)
  80a01c:	dc001717 	ldw	r16,92(sp)
  80a020:	dec02004 	addi	sp,sp,128
  80a024:	f800283a 	ret
  80a028:	dd800717 	ldw	r22,28(sp)
  80a02c:	dc800c17 	ldw	r18,48(sp)
  80a030:	002b883a 	mov	r21,zero
  80a034:	0023883a 	mov	r17,zero
  80a038:	a80b883a 	mov	r5,r21
  80a03c:	b00d883a 	mov	r6,r22
  80a040:	880f883a 	mov	r7,r17
  80a044:	ddc00817 	ldw	r23,32(sp)
  80a048:	dcc00d17 	ldw	r19,52(sp)
  80a04c:	9009883a 	mov	r4,r18
  80a050:	080aba00 	call	80aba0 <__muldi3>
  80a054:	001b883a 	mov	r13,zero
  80a058:	680f883a 	mov	r7,r13
  80a05c:	b009883a 	mov	r4,r22
  80a060:	000b883a 	mov	r5,zero
  80a064:	980d883a 	mov	r6,r19
  80a068:	b82d883a 	mov	r22,r23
  80a06c:	002f883a 	mov	r23,zero
  80a070:	db401615 	stw	r13,88(sp)
  80a074:	d8801315 	stw	r2,76(sp)
  80a078:	d8c01415 	stw	r3,80(sp)
  80a07c:	dcc01515 	stw	r19,84(sp)
  80a080:	080aba00 	call	80aba0 <__muldi3>
  80a084:	b00d883a 	mov	r6,r22
  80a088:	000b883a 	mov	r5,zero
  80a08c:	9009883a 	mov	r4,r18
  80a090:	b80f883a 	mov	r7,r23
  80a094:	1021883a 	mov	r16,r2
  80a098:	1823883a 	mov	r17,r3
  80a09c:	080aba00 	call	80aba0 <__muldi3>
  80a0a0:	8085883a 	add	r2,r16,r2
  80a0a4:	140d803a 	cmpltu	r6,r2,r16
  80a0a8:	88c7883a 	add	r3,r17,r3
  80a0ac:	30cd883a 	add	r6,r6,r3
  80a0b0:	1029883a 	mov	r20,r2
  80a0b4:	302b883a 	mov	r21,r6
  80a0b8:	da801317 	ldw	r10,76(sp)
  80a0bc:	dac01417 	ldw	r11,80(sp)
  80a0c0:	db001517 	ldw	r12,84(sp)
  80a0c4:	db401617 	ldw	r13,88(sp)
  80a0c8:	3440612e 	bgeu	r6,r17,80a250 <__muldf3+0x318>
  80a0cc:	0009883a 	mov	r4,zero
  80a0d0:	5105883a 	add	r2,r10,r4
  80a0d4:	128d803a 	cmpltu	r6,r2,r10
  80a0d8:	5d07883a 	add	r3,r11,r20
  80a0dc:	30cd883a 	add	r6,r6,r3
  80a0e0:	0021883a 	mov	r16,zero
  80a0e4:	04400044 	movi	r17,1
  80a0e8:	1025883a 	mov	r18,r2
  80a0ec:	3027883a 	mov	r19,r6
  80a0f0:	32c06236 	bltu	r6,r11,80a27c <__muldf3+0x344>
  80a0f4:	59807a26 	beq	r11,r6,80a2e0 <__muldf3+0x3a8>
  80a0f8:	680b883a 	mov	r5,r13
  80a0fc:	b80f883a 	mov	r7,r23
  80a100:	6009883a 	mov	r4,r12
  80a104:	b00d883a 	mov	r6,r22
  80a108:	080aba00 	call	80aba0 <__muldi3>
  80a10c:	1009883a 	mov	r4,r2
  80a110:	000f883a 	mov	r7,zero
  80a114:	1545883a 	add	r2,r2,r21
  80a118:	1111803a 	cmpltu	r8,r2,r4
  80a11c:	19c7883a 	add	r3,r3,r7
  80a120:	40c7883a 	add	r3,r8,r3
  80a124:	88cb883a 	add	r5,r17,r3
  80a128:	d8c00617 	ldw	r3,24(sp)
  80a12c:	8089883a 	add	r4,r16,r2
  80a130:	d8800b17 	ldw	r2,44(sp)
  80a134:	18c00104 	addi	r3,r3,4
  80a138:	240d803a 	cmpltu	r6,r4,r16
  80a13c:	10c7883a 	add	r3,r2,r3
  80a140:	2013883a 	mov	r9,r4
  80a144:	d8800a17 	ldw	r2,40(sp)
  80a148:	d9000517 	ldw	r4,20(sp)
  80a14c:	314d883a 	add	r6,r6,r5
  80a150:	3015883a 	mov	r10,r6
  80a154:	2088c03a 	cmpne	r4,r4,r2
  80a158:	00880034 	movhi	r2,8192
  80a15c:	10bfffc4 	addi	r2,r2,-1
  80a160:	d9000f15 	stw	r4,60(sp)
  80a164:	d8c01015 	stw	r3,64(sp)
  80a168:	1180162e 	bgeu	r2,r6,80a1c4 <__muldf3+0x28c>
  80a16c:	1811883a 	mov	r8,r3
  80a170:	101f883a 	mov	r15,r2
  80a174:	980497fa 	slli	r2,r19,31
  80a178:	9016d07a 	srli	r11,r18,1
  80a17c:	500697fa 	slli	r3,r10,31
  80a180:	480cd07a 	srli	r6,r9,1
  80a184:	500ed07a 	srli	r7,r10,1
  80a188:	12d6b03a 	or	r11,r2,r11
  80a18c:	00800044 	movi	r2,1
  80a190:	198cb03a 	or	r6,r3,r6
  80a194:	4888703a 	and	r4,r9,r2
  80a198:	9818d07a 	srli	r12,r19,1
  80a19c:	001b883a 	mov	r13,zero
  80a1a0:	03a00034 	movhi	r14,32768
  80a1a4:	3013883a 	mov	r9,r6
  80a1a8:	3815883a 	mov	r10,r7
  80a1ac:	4091883a 	add	r8,r8,r2
  80a1b0:	20000226 	beq	r4,zero,80a1bc <__muldf3+0x284>
  80a1b4:	5b64b03a 	or	r18,r11,r13
  80a1b8:	63a6b03a 	or	r19,r12,r14
  80a1bc:	7abfed36 	bltu	r15,r10,80a174 <__muldf3+0x23c>
  80a1c0:	da001015 	stw	r8,64(sp)
  80a1c4:	00840034 	movhi	r2,4096
  80a1c8:	10bfffc4 	addi	r2,r2,-1
  80a1cc:	12801436 	bltu	r2,r10,80a220 <__muldf3+0x2e8>
  80a1d0:	da001017 	ldw	r8,64(sp)
  80a1d4:	101f883a 	mov	r15,r2
  80a1d8:	4a45883a 	add	r2,r9,r9
  80a1dc:	124d803a 	cmpltu	r6,r2,r9
  80a1e0:	5287883a 	add	r3,r10,r10
  80a1e4:	9497883a 	add	r11,r18,r18
  80a1e8:	5c8f803a 	cmpltu	r7,r11,r18
  80a1ec:	9cd9883a 	add	r12,r19,r19
  80a1f0:	01000044 	movi	r4,1
  80a1f4:	30cd883a 	add	r6,r6,r3
  80a1f8:	3b0f883a 	add	r7,r7,r12
  80a1fc:	423fffc4 	addi	r8,r8,-1
  80a200:	1013883a 	mov	r9,r2
  80a204:	3015883a 	mov	r10,r6
  80a208:	111ab03a 	or	r13,r2,r4
  80a20c:	98003016 	blt	r19,zero,80a2d0 <__muldf3+0x398>
  80a210:	5825883a 	mov	r18,r11
  80a214:	3827883a 	mov	r19,r7
  80a218:	7abfef2e 	bgeu	r15,r10,80a1d8 <__muldf3+0x2a0>
  80a21c:	da001015 	stw	r8,64(sp)
  80a220:	00803fc4 	movi	r2,255
  80a224:	488e703a 	and	r7,r9,r2
  80a228:	00802004 	movi	r2,128
  80a22c:	0007883a 	mov	r3,zero
  80a230:	0011883a 	mov	r8,zero
  80a234:	38801826 	beq	r7,r2,80a298 <__muldf3+0x360>
  80a238:	008000c4 	movi	r2,3
  80a23c:	d9000e04 	addi	r4,sp,56
  80a240:	da801215 	stw	r10,72(sp)
  80a244:	d8800e15 	stw	r2,56(sp)
  80a248:	da401115 	stw	r9,68(sp)
  80a24c:	003f6a06 	br	809ff8 <__muldf3+0xc0>
  80a250:	89802126 	beq	r17,r6,80a2d8 <__muldf3+0x3a0>
  80a254:	0009883a 	mov	r4,zero
  80a258:	5105883a 	add	r2,r10,r4
  80a25c:	128d803a 	cmpltu	r6,r2,r10
  80a260:	5d07883a 	add	r3,r11,r20
  80a264:	30cd883a 	add	r6,r6,r3
  80a268:	0021883a 	mov	r16,zero
  80a26c:	0023883a 	mov	r17,zero
  80a270:	1025883a 	mov	r18,r2
  80a274:	3027883a 	mov	r19,r6
  80a278:	32ff9e2e 	bgeu	r6,r11,80a0f4 <__muldf3+0x1bc>
  80a27c:	00800044 	movi	r2,1
  80a280:	8089883a 	add	r4,r16,r2
  80a284:	240d803a 	cmpltu	r6,r4,r16
  80a288:	344d883a 	add	r6,r6,r17
  80a28c:	2021883a 	mov	r16,r4
  80a290:	3023883a 	mov	r17,r6
  80a294:	003f9806 	br	80a0f8 <__muldf3+0x1c0>
  80a298:	403fe71e 	bne	r8,zero,80a238 <__muldf3+0x300>
  80a29c:	01004004 	movi	r4,256
  80a2a0:	4904703a 	and	r2,r9,r4
  80a2a4:	10c4b03a 	or	r2,r2,r3
  80a2a8:	103fe31e 	bne	r2,zero,80a238 <__muldf3+0x300>
  80a2ac:	94c4b03a 	or	r2,r18,r19
  80a2b0:	103fe126 	beq	r2,zero,80a238 <__muldf3+0x300>
  80a2b4:	49c5883a 	add	r2,r9,r7
  80a2b8:	1251803a 	cmpltu	r8,r2,r9
  80a2bc:	4291883a 	add	r8,r8,r10
  80a2c0:	013fc004 	movi	r4,-256
  80a2c4:	1112703a 	and	r9,r2,r4
  80a2c8:	4015883a 	mov	r10,r8
  80a2cc:	003fda06 	br	80a238 <__muldf3+0x300>
  80a2d0:	6813883a 	mov	r9,r13
  80a2d4:	003fce06 	br	80a210 <__muldf3+0x2d8>
  80a2d8:	143f7c36 	bltu	r2,r16,80a0cc <__muldf3+0x194>
  80a2dc:	003fdd06 	br	80a254 <__muldf3+0x31c>
  80a2e0:	12bf852e 	bgeu	r2,r10,80a0f8 <__muldf3+0x1c0>
  80a2e4:	003fe506 	br	80a27c <__muldf3+0x344>
  80a2e8:	00800084 	movi	r2,2
  80a2ec:	20bf351e 	bne	r4,r2,809fc4 <__muldf3+0x8c>
  80a2f0:	01002074 	movhi	r4,129
  80a2f4:	2131f504 	addi	r4,r4,-14380
  80a2f8:	003f3f06 	br	809ff8 <__muldf3+0xc0>

0080a2fc <__divdf3>:
  80a2fc:	deffed04 	addi	sp,sp,-76
  80a300:	dcc01115 	stw	r19,68(sp)
  80a304:	dcc00404 	addi	r19,sp,16
  80a308:	2011883a 	mov	r8,r4
  80a30c:	2813883a 	mov	r9,r5
  80a310:	dc000e15 	stw	r16,56(sp)
  80a314:	d809883a 	mov	r4,sp
  80a318:	980b883a 	mov	r5,r19
  80a31c:	dc000904 	addi	r16,sp,36
  80a320:	dfc01215 	stw	ra,72(sp)
  80a324:	da400115 	stw	r9,4(sp)
  80a328:	d9c00315 	stw	r7,12(sp)
  80a32c:	da000015 	stw	r8,0(sp)
  80a330:	d9800215 	stw	r6,8(sp)
  80a334:	dc801015 	stw	r18,64(sp)
  80a338:	dc400f15 	stw	r17,60(sp)
  80a33c:	08010c00 	call	8010c0 <__unpack_d>
  80a340:	d9000204 	addi	r4,sp,8
  80a344:	800b883a 	mov	r5,r16
  80a348:	08010c00 	call	8010c0 <__unpack_d>
  80a34c:	d9000417 	ldw	r4,16(sp)
  80a350:	00800044 	movi	r2,1
  80a354:	11000b2e 	bgeu	r2,r4,80a384 <__divdf3+0x88>
  80a358:	d9400917 	ldw	r5,36(sp)
  80a35c:	1140762e 	bgeu	r2,r5,80a538 <__divdf3+0x23c>
  80a360:	d8800517 	ldw	r2,20(sp)
  80a364:	d8c00a17 	ldw	r3,40(sp)
  80a368:	01800104 	movi	r6,4
  80a36c:	10c4f03a 	xor	r2,r2,r3
  80a370:	d8800515 	stw	r2,20(sp)
  80a374:	21800226 	beq	r4,r6,80a380 <__divdf3+0x84>
  80a378:	00800084 	movi	r2,2
  80a37c:	2080141e 	bne	r4,r2,80a3d0 <__divdf3+0xd4>
  80a380:	29000926 	beq	r5,r4,80a3a8 <__divdf3+0xac>
  80a384:	9809883a 	mov	r4,r19
  80a388:	0800dac0 	call	800dac <__pack_d>
  80a38c:	dfc01217 	ldw	ra,72(sp)
  80a390:	dcc01117 	ldw	r19,68(sp)
  80a394:	dc801017 	ldw	r18,64(sp)
  80a398:	dc400f17 	ldw	r17,60(sp)
  80a39c:	dc000e17 	ldw	r16,56(sp)
  80a3a0:	dec01304 	addi	sp,sp,76
  80a3a4:	f800283a 	ret
  80a3a8:	01002074 	movhi	r4,129
  80a3ac:	2131f504 	addi	r4,r4,-14380
  80a3b0:	0800dac0 	call	800dac <__pack_d>
  80a3b4:	dfc01217 	ldw	ra,72(sp)
  80a3b8:	dcc01117 	ldw	r19,68(sp)
  80a3bc:	dc801017 	ldw	r18,64(sp)
  80a3c0:	dc400f17 	ldw	r17,60(sp)
  80a3c4:	dc000e17 	ldw	r16,56(sp)
  80a3c8:	dec01304 	addi	sp,sp,76
  80a3cc:	f800283a 	ret
  80a3d0:	29805b26 	beq	r5,r6,80a540 <__divdf3+0x244>
  80a3d4:	28802d26 	beq	r5,r2,80a48c <__divdf3+0x190>
  80a3d8:	d8c00617 	ldw	r3,24(sp)
  80a3dc:	d8800b17 	ldw	r2,44(sp)
  80a3e0:	d9c00817 	ldw	r7,32(sp)
  80a3e4:	dc400d17 	ldw	r17,52(sp)
  80a3e8:	188bc83a 	sub	r5,r3,r2
  80a3ec:	d9800717 	ldw	r6,28(sp)
  80a3f0:	dc000c17 	ldw	r16,48(sp)
  80a3f4:	d9400615 	stw	r5,24(sp)
  80a3f8:	3c403836 	bltu	r7,r17,80a4dc <__divdf3+0x1e0>
  80a3fc:	89c03626 	beq	r17,r7,80a4d8 <__divdf3+0x1dc>
  80a400:	0015883a 	mov	r10,zero
  80a404:	001d883a 	mov	r14,zero
  80a408:	02c40034 	movhi	r11,4096
  80a40c:	001f883a 	mov	r15,zero
  80a410:	003f883a 	mov	ra,zero
  80a414:	04800f44 	movi	r18,61
  80a418:	00000f06 	br	80a458 <__divdf3+0x15c>
  80a41c:	601d883a 	mov	r14,r12
  80a420:	681f883a 	mov	r15,r13
  80a424:	400d883a 	mov	r6,r8
  80a428:	100f883a 	mov	r7,r2
  80a42c:	3191883a 	add	r8,r6,r6
  80a430:	5808d07a 	srli	r4,r11,1
  80a434:	4185803a 	cmpltu	r2,r8,r6
  80a438:	39d3883a 	add	r9,r7,r7
  80a43c:	28c6b03a 	or	r3,r5,r3
  80a440:	1245883a 	add	r2,r2,r9
  80a444:	1815883a 	mov	r10,r3
  80a448:	2017883a 	mov	r11,r4
  80a44c:	400d883a 	mov	r6,r8
  80a450:	100f883a 	mov	r7,r2
  80a454:	fc801726 	beq	ra,r18,80a4b4 <__divdf3+0x1b8>
  80a458:	580a97fa 	slli	r5,r11,31
  80a45c:	5006d07a 	srli	r3,r10,1
  80a460:	ffc00044 	addi	ra,ra,1
  80a464:	3c7ff136 	bltu	r7,r17,80a42c <__divdf3+0x130>
  80a468:	3411c83a 	sub	r8,r6,r16
  80a46c:	3205803a 	cmpltu	r2,r6,r8
  80a470:	3c53c83a 	sub	r9,r7,r17
  80a474:	7298b03a 	or	r12,r14,r10
  80a478:	7adab03a 	or	r13,r15,r11
  80a47c:	4885c83a 	sub	r2,r9,r2
  80a480:	89ffe61e 	bne	r17,r7,80a41c <__divdf3+0x120>
  80a484:	343fe936 	bltu	r6,r16,80a42c <__divdf3+0x130>
  80a488:	003fe406 	br	80a41c <__divdf3+0x120>
  80a48c:	9809883a 	mov	r4,r19
  80a490:	d9800415 	stw	r6,16(sp)
  80a494:	0800dac0 	call	800dac <__pack_d>
  80a498:	dfc01217 	ldw	ra,72(sp)
  80a49c:	dcc01117 	ldw	r19,68(sp)
  80a4a0:	dc801017 	ldw	r18,64(sp)
  80a4a4:	dc400f17 	ldw	r17,60(sp)
  80a4a8:	dc000e17 	ldw	r16,56(sp)
  80a4ac:	dec01304 	addi	sp,sp,76
  80a4b0:	f800283a 	ret
  80a4b4:	00803fc4 	movi	r2,255
  80a4b8:	7090703a 	and	r8,r14,r2
  80a4bc:	00802004 	movi	r2,128
  80a4c0:	0007883a 	mov	r3,zero
  80a4c4:	0013883a 	mov	r9,zero
  80a4c8:	40800d26 	beq	r8,r2,80a500 <__divdf3+0x204>
  80a4cc:	dbc00815 	stw	r15,32(sp)
  80a4d0:	db800715 	stw	r14,28(sp)
  80a4d4:	003fab06 	br	80a384 <__divdf3+0x88>
  80a4d8:	343fc92e 	bgeu	r6,r16,80a400 <__divdf3+0x104>
  80a4dc:	3185883a 	add	r2,r6,r6
  80a4e0:	1189803a 	cmpltu	r4,r2,r6
  80a4e4:	39c7883a 	add	r3,r7,r7
  80a4e8:	20c9883a 	add	r4,r4,r3
  80a4ec:	297fffc4 	addi	r5,r5,-1
  80a4f0:	100d883a 	mov	r6,r2
  80a4f4:	200f883a 	mov	r7,r4
  80a4f8:	d9400615 	stw	r5,24(sp)
  80a4fc:	003fc006 	br	80a400 <__divdf3+0x104>
  80a500:	483ff21e 	bne	r9,zero,80a4cc <__divdf3+0x1d0>
  80a504:	01004004 	movi	r4,256
  80a508:	7104703a 	and	r2,r14,r4
  80a50c:	10c4b03a 	or	r2,r2,r3
  80a510:	103fee1e 	bne	r2,zero,80a4cc <__divdf3+0x1d0>
  80a514:	31c4b03a 	or	r2,r6,r7
  80a518:	103fec26 	beq	r2,zero,80a4cc <__divdf3+0x1d0>
  80a51c:	7205883a 	add	r2,r14,r8
  80a520:	1391803a 	cmpltu	r8,r2,r14
  80a524:	43d1883a 	add	r8,r8,r15
  80a528:	013fc004 	movi	r4,-256
  80a52c:	111c703a 	and	r14,r2,r4
  80a530:	401f883a 	mov	r15,r8
  80a534:	003fe506 	br	80a4cc <__divdf3+0x1d0>
  80a538:	8009883a 	mov	r4,r16
  80a53c:	003f9206 	br	80a388 <__divdf3+0x8c>
  80a540:	9809883a 	mov	r4,r19
  80a544:	d8000715 	stw	zero,28(sp)
  80a548:	d8000815 	stw	zero,32(sp)
  80a54c:	d8000615 	stw	zero,24(sp)
  80a550:	003f8d06 	br	80a388 <__divdf3+0x8c>

0080a554 <__eqdf2>:
  80a554:	deffef04 	addi	sp,sp,-68
  80a558:	dc400f15 	stw	r17,60(sp)
  80a55c:	dc400404 	addi	r17,sp,16
  80a560:	2005883a 	mov	r2,r4
  80a564:	2807883a 	mov	r3,r5
  80a568:	dc000e15 	stw	r16,56(sp)
  80a56c:	d809883a 	mov	r4,sp
  80a570:	880b883a 	mov	r5,r17
  80a574:	dc000904 	addi	r16,sp,36
  80a578:	d8c00115 	stw	r3,4(sp)
  80a57c:	d8800015 	stw	r2,0(sp)
  80a580:	d9800215 	stw	r6,8(sp)
  80a584:	dfc01015 	stw	ra,64(sp)
  80a588:	d9c00315 	stw	r7,12(sp)
  80a58c:	08010c00 	call	8010c0 <__unpack_d>
  80a590:	d9000204 	addi	r4,sp,8
  80a594:	800b883a 	mov	r5,r16
  80a598:	08010c00 	call	8010c0 <__unpack_d>
  80a59c:	d8800417 	ldw	r2,16(sp)
  80a5a0:	00c00044 	movi	r3,1
  80a5a4:	180d883a 	mov	r6,r3
  80a5a8:	1880062e 	bgeu	r3,r2,80a5c4 <__eqdf2+0x70>
  80a5ac:	d8800917 	ldw	r2,36(sp)
  80a5b0:	8809883a 	mov	r4,r17
  80a5b4:	800b883a 	mov	r5,r16
  80a5b8:	1880022e 	bgeu	r3,r2,80a5c4 <__eqdf2+0x70>
  80a5bc:	080ac380 	call	80ac38 <__fpcmp_parts_d>
  80a5c0:	100d883a 	mov	r6,r2
  80a5c4:	3005883a 	mov	r2,r6
  80a5c8:	dfc01017 	ldw	ra,64(sp)
  80a5cc:	dc400f17 	ldw	r17,60(sp)
  80a5d0:	dc000e17 	ldw	r16,56(sp)
  80a5d4:	dec01104 	addi	sp,sp,68
  80a5d8:	f800283a 	ret

0080a5dc <__nedf2>:
  80a5dc:	deffef04 	addi	sp,sp,-68
  80a5e0:	dc400f15 	stw	r17,60(sp)
  80a5e4:	dc400404 	addi	r17,sp,16
  80a5e8:	2005883a 	mov	r2,r4
  80a5ec:	2807883a 	mov	r3,r5
  80a5f0:	dc000e15 	stw	r16,56(sp)
  80a5f4:	d809883a 	mov	r4,sp
  80a5f8:	880b883a 	mov	r5,r17
  80a5fc:	dc000904 	addi	r16,sp,36
  80a600:	d8c00115 	stw	r3,4(sp)
  80a604:	d8800015 	stw	r2,0(sp)
  80a608:	d9800215 	stw	r6,8(sp)
  80a60c:	dfc01015 	stw	ra,64(sp)
  80a610:	d9c00315 	stw	r7,12(sp)
  80a614:	08010c00 	call	8010c0 <__unpack_d>
  80a618:	d9000204 	addi	r4,sp,8
  80a61c:	800b883a 	mov	r5,r16
  80a620:	08010c00 	call	8010c0 <__unpack_d>
  80a624:	d8800417 	ldw	r2,16(sp)
  80a628:	00c00044 	movi	r3,1
  80a62c:	180d883a 	mov	r6,r3
  80a630:	1880062e 	bgeu	r3,r2,80a64c <__nedf2+0x70>
  80a634:	d8800917 	ldw	r2,36(sp)
  80a638:	8809883a 	mov	r4,r17
  80a63c:	800b883a 	mov	r5,r16
  80a640:	1880022e 	bgeu	r3,r2,80a64c <__nedf2+0x70>
  80a644:	080ac380 	call	80ac38 <__fpcmp_parts_d>
  80a648:	100d883a 	mov	r6,r2
  80a64c:	3005883a 	mov	r2,r6
  80a650:	dfc01017 	ldw	ra,64(sp)
  80a654:	dc400f17 	ldw	r17,60(sp)
  80a658:	dc000e17 	ldw	r16,56(sp)
  80a65c:	dec01104 	addi	sp,sp,68
  80a660:	f800283a 	ret

0080a664 <__gtdf2>:
  80a664:	deffef04 	addi	sp,sp,-68
  80a668:	dc400f15 	stw	r17,60(sp)
  80a66c:	dc400404 	addi	r17,sp,16
  80a670:	2005883a 	mov	r2,r4
  80a674:	2807883a 	mov	r3,r5
  80a678:	dc000e15 	stw	r16,56(sp)
  80a67c:	d809883a 	mov	r4,sp
  80a680:	880b883a 	mov	r5,r17
  80a684:	dc000904 	addi	r16,sp,36
  80a688:	d8c00115 	stw	r3,4(sp)
  80a68c:	d8800015 	stw	r2,0(sp)
  80a690:	d9800215 	stw	r6,8(sp)
  80a694:	dfc01015 	stw	ra,64(sp)
  80a698:	d9c00315 	stw	r7,12(sp)
  80a69c:	08010c00 	call	8010c0 <__unpack_d>
  80a6a0:	d9000204 	addi	r4,sp,8
  80a6a4:	800b883a 	mov	r5,r16
  80a6a8:	08010c00 	call	8010c0 <__unpack_d>
  80a6ac:	d8800417 	ldw	r2,16(sp)
  80a6b0:	00c00044 	movi	r3,1
  80a6b4:	01bfffc4 	movi	r6,-1
  80a6b8:	1880062e 	bgeu	r3,r2,80a6d4 <__gtdf2+0x70>
  80a6bc:	d8800917 	ldw	r2,36(sp)
  80a6c0:	8809883a 	mov	r4,r17
  80a6c4:	800b883a 	mov	r5,r16
  80a6c8:	1880022e 	bgeu	r3,r2,80a6d4 <__gtdf2+0x70>
  80a6cc:	080ac380 	call	80ac38 <__fpcmp_parts_d>
  80a6d0:	100d883a 	mov	r6,r2
  80a6d4:	3005883a 	mov	r2,r6
  80a6d8:	dfc01017 	ldw	ra,64(sp)
  80a6dc:	dc400f17 	ldw	r17,60(sp)
  80a6e0:	dc000e17 	ldw	r16,56(sp)
  80a6e4:	dec01104 	addi	sp,sp,68
  80a6e8:	f800283a 	ret

0080a6ec <__gedf2>:
  80a6ec:	deffef04 	addi	sp,sp,-68
  80a6f0:	dc400f15 	stw	r17,60(sp)
  80a6f4:	dc400404 	addi	r17,sp,16
  80a6f8:	2005883a 	mov	r2,r4
  80a6fc:	2807883a 	mov	r3,r5
  80a700:	dc000e15 	stw	r16,56(sp)
  80a704:	d809883a 	mov	r4,sp
  80a708:	880b883a 	mov	r5,r17
  80a70c:	dc000904 	addi	r16,sp,36
  80a710:	d8c00115 	stw	r3,4(sp)
  80a714:	d8800015 	stw	r2,0(sp)
  80a718:	d9800215 	stw	r6,8(sp)
  80a71c:	dfc01015 	stw	ra,64(sp)
  80a720:	d9c00315 	stw	r7,12(sp)
  80a724:	08010c00 	call	8010c0 <__unpack_d>
  80a728:	d9000204 	addi	r4,sp,8
  80a72c:	800b883a 	mov	r5,r16
  80a730:	08010c00 	call	8010c0 <__unpack_d>
  80a734:	d8800417 	ldw	r2,16(sp)
  80a738:	00c00044 	movi	r3,1
  80a73c:	01bfffc4 	movi	r6,-1
  80a740:	1880062e 	bgeu	r3,r2,80a75c <__gedf2+0x70>
  80a744:	d8800917 	ldw	r2,36(sp)
  80a748:	8809883a 	mov	r4,r17
  80a74c:	800b883a 	mov	r5,r16
  80a750:	1880022e 	bgeu	r3,r2,80a75c <__gedf2+0x70>
  80a754:	080ac380 	call	80ac38 <__fpcmp_parts_d>
  80a758:	100d883a 	mov	r6,r2
  80a75c:	3005883a 	mov	r2,r6
  80a760:	dfc01017 	ldw	ra,64(sp)
  80a764:	dc400f17 	ldw	r17,60(sp)
  80a768:	dc000e17 	ldw	r16,56(sp)
  80a76c:	dec01104 	addi	sp,sp,68
  80a770:	f800283a 	ret

0080a774 <__ltdf2>:
  80a774:	deffef04 	addi	sp,sp,-68
  80a778:	dc400f15 	stw	r17,60(sp)
  80a77c:	dc400404 	addi	r17,sp,16
  80a780:	2005883a 	mov	r2,r4
  80a784:	2807883a 	mov	r3,r5
  80a788:	dc000e15 	stw	r16,56(sp)
  80a78c:	d809883a 	mov	r4,sp
  80a790:	880b883a 	mov	r5,r17
  80a794:	dc000904 	addi	r16,sp,36
  80a798:	d8c00115 	stw	r3,4(sp)
  80a79c:	d8800015 	stw	r2,0(sp)
  80a7a0:	d9800215 	stw	r6,8(sp)
  80a7a4:	dfc01015 	stw	ra,64(sp)
  80a7a8:	d9c00315 	stw	r7,12(sp)
  80a7ac:	08010c00 	call	8010c0 <__unpack_d>
  80a7b0:	d9000204 	addi	r4,sp,8
  80a7b4:	800b883a 	mov	r5,r16
  80a7b8:	08010c00 	call	8010c0 <__unpack_d>
  80a7bc:	d8800417 	ldw	r2,16(sp)
  80a7c0:	00c00044 	movi	r3,1
  80a7c4:	180d883a 	mov	r6,r3
  80a7c8:	1880062e 	bgeu	r3,r2,80a7e4 <__ltdf2+0x70>
  80a7cc:	d8800917 	ldw	r2,36(sp)
  80a7d0:	8809883a 	mov	r4,r17
  80a7d4:	800b883a 	mov	r5,r16
  80a7d8:	1880022e 	bgeu	r3,r2,80a7e4 <__ltdf2+0x70>
  80a7dc:	080ac380 	call	80ac38 <__fpcmp_parts_d>
  80a7e0:	100d883a 	mov	r6,r2
  80a7e4:	3005883a 	mov	r2,r6
  80a7e8:	dfc01017 	ldw	ra,64(sp)
  80a7ec:	dc400f17 	ldw	r17,60(sp)
  80a7f0:	dc000e17 	ldw	r16,56(sp)
  80a7f4:	dec01104 	addi	sp,sp,68
  80a7f8:	f800283a 	ret

0080a7fc <__ledf2>:
  80a7fc:	deffef04 	addi	sp,sp,-68
  80a800:	dc400f15 	stw	r17,60(sp)
  80a804:	dc400404 	addi	r17,sp,16
  80a808:	2005883a 	mov	r2,r4
  80a80c:	2807883a 	mov	r3,r5
  80a810:	dc000e15 	stw	r16,56(sp)
  80a814:	d809883a 	mov	r4,sp
  80a818:	880b883a 	mov	r5,r17
  80a81c:	dc000904 	addi	r16,sp,36
  80a820:	d8c00115 	stw	r3,4(sp)
  80a824:	d8800015 	stw	r2,0(sp)
  80a828:	d9800215 	stw	r6,8(sp)
  80a82c:	dfc01015 	stw	ra,64(sp)
  80a830:	d9c00315 	stw	r7,12(sp)
  80a834:	08010c00 	call	8010c0 <__unpack_d>
  80a838:	d9000204 	addi	r4,sp,8
  80a83c:	800b883a 	mov	r5,r16
  80a840:	08010c00 	call	8010c0 <__unpack_d>
  80a844:	d8800417 	ldw	r2,16(sp)
  80a848:	00c00044 	movi	r3,1
  80a84c:	180d883a 	mov	r6,r3
  80a850:	1880062e 	bgeu	r3,r2,80a86c <__ledf2+0x70>
  80a854:	d8800917 	ldw	r2,36(sp)
  80a858:	8809883a 	mov	r4,r17
  80a85c:	800b883a 	mov	r5,r16
  80a860:	1880022e 	bgeu	r3,r2,80a86c <__ledf2+0x70>
  80a864:	080ac380 	call	80ac38 <__fpcmp_parts_d>
  80a868:	100d883a 	mov	r6,r2
  80a86c:	3005883a 	mov	r2,r6
  80a870:	dfc01017 	ldw	ra,64(sp)
  80a874:	dc400f17 	ldw	r17,60(sp)
  80a878:	dc000e17 	ldw	r16,56(sp)
  80a87c:	dec01104 	addi	sp,sp,68
  80a880:	f800283a 	ret

0080a884 <__floatsidf>:
  80a884:	2006d7fa 	srli	r3,r4,31
  80a888:	defff604 	addi	sp,sp,-40
  80a88c:	008000c4 	movi	r2,3
  80a890:	dfc00915 	stw	ra,36(sp)
  80a894:	dcc00815 	stw	r19,32(sp)
  80a898:	dc800715 	stw	r18,28(sp)
  80a89c:	dc400615 	stw	r17,24(sp)
  80a8a0:	dc000515 	stw	r16,20(sp)
  80a8a4:	d8800015 	stw	r2,0(sp)
  80a8a8:	d8c00115 	stw	r3,4(sp)
  80a8ac:	20000f1e 	bne	r4,zero,80a8ec <__floatsidf+0x68>
  80a8b0:	00800084 	movi	r2,2
  80a8b4:	d8800015 	stw	r2,0(sp)
  80a8b8:	d809883a 	mov	r4,sp
  80a8bc:	0800dac0 	call	800dac <__pack_d>
  80a8c0:	1009883a 	mov	r4,r2
  80a8c4:	180b883a 	mov	r5,r3
  80a8c8:	2005883a 	mov	r2,r4
  80a8cc:	2807883a 	mov	r3,r5
  80a8d0:	dfc00917 	ldw	ra,36(sp)
  80a8d4:	dcc00817 	ldw	r19,32(sp)
  80a8d8:	dc800717 	ldw	r18,28(sp)
  80a8dc:	dc400617 	ldw	r17,24(sp)
  80a8e0:	dc000517 	ldw	r16,20(sp)
  80a8e4:	dec00a04 	addi	sp,sp,40
  80a8e8:	f800283a 	ret
  80a8ec:	00800f04 	movi	r2,60
  80a8f0:	1807003a 	cmpeq	r3,r3,zero
  80a8f4:	d8800215 	stw	r2,8(sp)
  80a8f8:	18001126 	beq	r3,zero,80a940 <__floatsidf+0xbc>
  80a8fc:	0027883a 	mov	r19,zero
  80a900:	2025883a 	mov	r18,r4
  80a904:	d9000315 	stw	r4,12(sp)
  80a908:	dcc00415 	stw	r19,16(sp)
  80a90c:	0800c380 	call	800c38 <__clzsi2>
  80a910:	11000744 	addi	r4,r2,29
  80a914:	013fe80e 	bge	zero,r4,80a8b8 <__floatsidf+0x34>
  80a918:	10bfff44 	addi	r2,r2,-3
  80a91c:	10000c16 	blt	r2,zero,80a950 <__floatsidf+0xcc>
  80a920:	90a2983a 	sll	r17,r18,r2
  80a924:	0021883a 	mov	r16,zero
  80a928:	d8800217 	ldw	r2,8(sp)
  80a92c:	dc400415 	stw	r17,16(sp)
  80a930:	dc000315 	stw	r16,12(sp)
  80a934:	1105c83a 	sub	r2,r2,r4
  80a938:	d8800215 	stw	r2,8(sp)
  80a93c:	003fde06 	br	80a8b8 <__floatsidf+0x34>
  80a940:	00a00034 	movhi	r2,32768
  80a944:	20800a26 	beq	r4,r2,80a970 <__floatsidf+0xec>
  80a948:	0109c83a 	sub	r4,zero,r4
  80a94c:	003feb06 	br	80a8fc <__floatsidf+0x78>
  80a950:	9006d07a 	srli	r3,r18,1
  80a954:	008007c4 	movi	r2,31
  80a958:	1105c83a 	sub	r2,r2,r4
  80a95c:	1886d83a 	srl	r3,r3,r2
  80a960:	9922983a 	sll	r17,r19,r4
  80a964:	9120983a 	sll	r16,r18,r4
  80a968:	1c62b03a 	or	r17,r3,r17
  80a96c:	003fee06 	br	80a928 <__floatsidf+0xa4>
  80a970:	0009883a 	mov	r4,zero
  80a974:	01707834 	movhi	r5,49632
  80a978:	003fd306 	br	80a8c8 <__floatsidf+0x44>

0080a97c <__fixdfsi>:
  80a97c:	defff804 	addi	sp,sp,-32
  80a980:	2005883a 	mov	r2,r4
  80a984:	2807883a 	mov	r3,r5
  80a988:	d809883a 	mov	r4,sp
  80a98c:	d9400204 	addi	r5,sp,8
  80a990:	d8c00115 	stw	r3,4(sp)
  80a994:	d8800015 	stw	r2,0(sp)
  80a998:	dfc00715 	stw	ra,28(sp)
  80a99c:	08010c00 	call	8010c0 <__unpack_d>
  80a9a0:	d8c00217 	ldw	r3,8(sp)
  80a9a4:	00800084 	movi	r2,2
  80a9a8:	1880051e 	bne	r3,r2,80a9c0 <__fixdfsi+0x44>
  80a9ac:	0007883a 	mov	r3,zero
  80a9b0:	1805883a 	mov	r2,r3
  80a9b4:	dfc00717 	ldw	ra,28(sp)
  80a9b8:	dec00804 	addi	sp,sp,32
  80a9bc:	f800283a 	ret
  80a9c0:	00800044 	movi	r2,1
  80a9c4:	10fff92e 	bgeu	r2,r3,80a9ac <__fixdfsi+0x30>
  80a9c8:	00800104 	movi	r2,4
  80a9cc:	18800426 	beq	r3,r2,80a9e0 <__fixdfsi+0x64>
  80a9d0:	d8c00417 	ldw	r3,16(sp)
  80a9d4:	183ff516 	blt	r3,zero,80a9ac <__fixdfsi+0x30>
  80a9d8:	00800784 	movi	r2,30
  80a9dc:	10c0080e 	bge	r2,r3,80aa00 <__fixdfsi+0x84>
  80a9e0:	d8800317 	ldw	r2,12(sp)
  80a9e4:	1000121e 	bne	r2,zero,80aa30 <__fixdfsi+0xb4>
  80a9e8:	00e00034 	movhi	r3,32768
  80a9ec:	18ffffc4 	addi	r3,r3,-1
  80a9f0:	1805883a 	mov	r2,r3
  80a9f4:	dfc00717 	ldw	ra,28(sp)
  80a9f8:	dec00804 	addi	sp,sp,32
  80a9fc:	f800283a 	ret
  80aa00:	00800f04 	movi	r2,60
  80aa04:	10d1c83a 	sub	r8,r2,r3
  80aa08:	40bff804 	addi	r2,r8,-32
  80aa0c:	d9800517 	ldw	r6,20(sp)
  80aa10:	d9c00617 	ldw	r7,24(sp)
  80aa14:	10000816 	blt	r2,zero,80aa38 <__fixdfsi+0xbc>
  80aa18:	3888d83a 	srl	r4,r7,r2
  80aa1c:	d8800317 	ldw	r2,12(sp)
  80aa20:	2007883a 	mov	r3,r4
  80aa24:	103fe226 	beq	r2,zero,80a9b0 <__fixdfsi+0x34>
  80aa28:	0107c83a 	sub	r3,zero,r4
  80aa2c:	003fe006 	br	80a9b0 <__fixdfsi+0x34>
  80aa30:	00e00034 	movhi	r3,32768
  80aa34:	003fde06 	br	80a9b0 <__fixdfsi+0x34>
  80aa38:	39c7883a 	add	r3,r7,r7
  80aa3c:	008007c4 	movi	r2,31
  80aa40:	1205c83a 	sub	r2,r2,r8
  80aa44:	1886983a 	sll	r3,r3,r2
  80aa48:	3208d83a 	srl	r4,r6,r8
  80aa4c:	1908b03a 	or	r4,r3,r4
  80aa50:	003ff206 	br	80aa1c <__fixdfsi+0xa0>

0080aa54 <udivmodsi4>:
  80aa54:	29001b2e 	bgeu	r5,r4,80aac4 <udivmodsi4+0x70>
  80aa58:	28001a16 	blt	r5,zero,80aac4 <udivmodsi4+0x70>
  80aa5c:	00800044 	movi	r2,1
  80aa60:	0007883a 	mov	r3,zero
  80aa64:	01c007c4 	movi	r7,31
  80aa68:	00000306 	br	80aa78 <udivmodsi4+0x24>
  80aa6c:	19c01326 	beq	r3,r7,80aabc <udivmodsi4+0x68>
  80aa70:	18c00044 	addi	r3,r3,1
  80aa74:	28000416 	blt	r5,zero,80aa88 <udivmodsi4+0x34>
  80aa78:	294b883a 	add	r5,r5,r5
  80aa7c:	1085883a 	add	r2,r2,r2
  80aa80:	293ffa36 	bltu	r5,r4,80aa6c <udivmodsi4+0x18>
  80aa84:	10000d26 	beq	r2,zero,80aabc <udivmodsi4+0x68>
  80aa88:	0007883a 	mov	r3,zero
  80aa8c:	21400236 	bltu	r4,r5,80aa98 <udivmodsi4+0x44>
  80aa90:	2149c83a 	sub	r4,r4,r5
  80aa94:	1886b03a 	or	r3,r3,r2
  80aa98:	1004d07a 	srli	r2,r2,1
  80aa9c:	280ad07a 	srli	r5,r5,1
  80aaa0:	103ffa1e 	bne	r2,zero,80aa8c <udivmodsi4+0x38>
  80aaa4:	30000226 	beq	r6,zero,80aab0 <udivmodsi4+0x5c>
  80aaa8:	2005883a 	mov	r2,r4
  80aaac:	f800283a 	ret
  80aab0:	1809883a 	mov	r4,r3
  80aab4:	2005883a 	mov	r2,r4
  80aab8:	f800283a 	ret
  80aabc:	0007883a 	mov	r3,zero
  80aac0:	003ff806 	br	80aaa4 <udivmodsi4+0x50>
  80aac4:	00800044 	movi	r2,1
  80aac8:	0007883a 	mov	r3,zero
  80aacc:	003fef06 	br	80aa8c <udivmodsi4+0x38>

0080aad0 <__divsi3>:
  80aad0:	defffe04 	addi	sp,sp,-8
  80aad4:	dc000015 	stw	r16,0(sp)
  80aad8:	dfc00115 	stw	ra,4(sp)
  80aadc:	0021883a 	mov	r16,zero
  80aae0:	20000c16 	blt	r4,zero,80ab14 <__divsi3+0x44>
  80aae4:	000d883a 	mov	r6,zero
  80aae8:	28000e16 	blt	r5,zero,80ab24 <__divsi3+0x54>
  80aaec:	080aa540 	call	80aa54 <udivmodsi4>
  80aaf0:	1007883a 	mov	r3,r2
  80aaf4:	8005003a 	cmpeq	r2,r16,zero
  80aaf8:	1000011e 	bne	r2,zero,80ab00 <__divsi3+0x30>
  80aafc:	00c7c83a 	sub	r3,zero,r3
  80ab00:	1805883a 	mov	r2,r3
  80ab04:	dfc00117 	ldw	ra,4(sp)
  80ab08:	dc000017 	ldw	r16,0(sp)
  80ab0c:	dec00204 	addi	sp,sp,8
  80ab10:	f800283a 	ret
  80ab14:	0109c83a 	sub	r4,zero,r4
  80ab18:	04000044 	movi	r16,1
  80ab1c:	000d883a 	mov	r6,zero
  80ab20:	283ff20e 	bge	r5,zero,80aaec <__divsi3+0x1c>
  80ab24:	014bc83a 	sub	r5,zero,r5
  80ab28:	8021003a 	cmpeq	r16,r16,zero
  80ab2c:	003fef06 	br	80aaec <__divsi3+0x1c>

0080ab30 <__modsi3>:
  80ab30:	deffff04 	addi	sp,sp,-4
  80ab34:	dfc00015 	stw	ra,0(sp)
  80ab38:	01800044 	movi	r6,1
  80ab3c:	2807883a 	mov	r3,r5
  80ab40:	20000416 	blt	r4,zero,80ab54 <__modsi3+0x24>
  80ab44:	28000c16 	blt	r5,zero,80ab78 <__modsi3+0x48>
  80ab48:	dfc00017 	ldw	ra,0(sp)
  80ab4c:	dec00104 	addi	sp,sp,4
  80ab50:	080aa541 	jmpi	80aa54 <udivmodsi4>
  80ab54:	0109c83a 	sub	r4,zero,r4
  80ab58:	28000b16 	blt	r5,zero,80ab88 <__modsi3+0x58>
  80ab5c:	180b883a 	mov	r5,r3
  80ab60:	01800044 	movi	r6,1
  80ab64:	080aa540 	call	80aa54 <udivmodsi4>
  80ab68:	0085c83a 	sub	r2,zero,r2
  80ab6c:	dfc00017 	ldw	ra,0(sp)
  80ab70:	dec00104 	addi	sp,sp,4
  80ab74:	f800283a 	ret
  80ab78:	014bc83a 	sub	r5,zero,r5
  80ab7c:	dfc00017 	ldw	ra,0(sp)
  80ab80:	dec00104 	addi	sp,sp,4
  80ab84:	080aa541 	jmpi	80aa54 <udivmodsi4>
  80ab88:	0147c83a 	sub	r3,zero,r5
  80ab8c:	003ff306 	br	80ab5c <__modsi3+0x2c>

0080ab90 <__udivsi3>:
  80ab90:	000d883a 	mov	r6,zero
  80ab94:	080aa541 	jmpi	80aa54 <udivmodsi4>

0080ab98 <__umodsi3>:
  80ab98:	01800044 	movi	r6,1
  80ab9c:	080aa541 	jmpi	80aa54 <udivmodsi4>

0080aba0 <__muldi3>:
  80aba0:	2011883a 	mov	r8,r4
  80aba4:	427fffcc 	andi	r9,r8,65535
  80aba8:	4018d43a 	srli	r12,r8,16
  80abac:	32bfffcc 	andi	r10,r6,65535
  80abb0:	3016d43a 	srli	r11,r6,16
  80abb4:	4a85383a 	mul	r2,r9,r10
  80abb8:	6295383a 	mul	r10,r12,r10
  80abbc:	4ad3383a 	mul	r9,r9,r11
  80abc0:	113fffcc 	andi	r4,r2,65535
  80abc4:	1004d43a 	srli	r2,r2,16
  80abc8:	4a93883a 	add	r9,r9,r10
  80abcc:	3807883a 	mov	r3,r7
  80abd0:	1245883a 	add	r2,r2,r9
  80abd4:	280f883a 	mov	r7,r5
  80abd8:	180b883a 	mov	r5,r3
  80abdc:	1006943a 	slli	r3,r2,16
  80abe0:	defffd04 	addi	sp,sp,-12
  80abe4:	dc800215 	stw	r18,8(sp)
  80abe8:	1907883a 	add	r3,r3,r4
  80abec:	dc400115 	stw	r17,4(sp)
  80abf0:	dc000015 	stw	r16,0(sp)
  80abf4:	4165383a 	mul	r18,r8,r5
  80abf8:	31e3383a 	mul	r17,r6,r7
  80abfc:	1012d43a 	srli	r9,r2,16
  80ac00:	62d9383a 	mul	r12,r12,r11
  80ac04:	181f883a 	mov	r15,r3
  80ac08:	1280022e 	bgeu	r2,r10,80ac14 <__muldi3+0x74>
  80ac0c:	00800074 	movhi	r2,1
  80ac10:	6099883a 	add	r12,r12,r2
  80ac14:	624d883a 	add	r6,r12,r9
  80ac18:	9187883a 	add	r3,r18,r6
  80ac1c:	88c7883a 	add	r3,r17,r3
  80ac20:	7805883a 	mov	r2,r15
  80ac24:	dc800217 	ldw	r18,8(sp)
  80ac28:	dc400117 	ldw	r17,4(sp)
  80ac2c:	dc000017 	ldw	r16,0(sp)
  80ac30:	dec00304 	addi	sp,sp,12
  80ac34:	f800283a 	ret

0080ac38 <__fpcmp_parts_d>:
  80ac38:	21800017 	ldw	r6,0(r4)
  80ac3c:	00c00044 	movi	r3,1
  80ac40:	19800a2e 	bgeu	r3,r6,80ac6c <__fpcmp_parts_d+0x34>
  80ac44:	28800017 	ldw	r2,0(r5)
  80ac48:	1880082e 	bgeu	r3,r2,80ac6c <__fpcmp_parts_d+0x34>
  80ac4c:	00c00104 	movi	r3,4
  80ac50:	30c02626 	beq	r6,r3,80acec <__fpcmp_parts_d+0xb4>
  80ac54:	10c02226 	beq	r2,r3,80ace0 <__fpcmp_parts_d+0xa8>
  80ac58:	00c00084 	movi	r3,2
  80ac5c:	30c00526 	beq	r6,r3,80ac74 <__fpcmp_parts_d+0x3c>
  80ac60:	10c0071e 	bne	r2,r3,80ac80 <__fpcmp_parts_d+0x48>
  80ac64:	20800117 	ldw	r2,4(r4)
  80ac68:	1000091e 	bne	r2,zero,80ac90 <__fpcmp_parts_d+0x58>
  80ac6c:	00800044 	movi	r2,1
  80ac70:	f800283a 	ret
  80ac74:	10c01a1e 	bne	r2,r3,80ace0 <__fpcmp_parts_d+0xa8>
  80ac78:	0005883a 	mov	r2,zero
  80ac7c:	f800283a 	ret
  80ac80:	22000117 	ldw	r8,4(r4)
  80ac84:	28800117 	ldw	r2,4(r5)
  80ac88:	40800326 	beq	r8,r2,80ac98 <__fpcmp_parts_d+0x60>
  80ac8c:	403ff726 	beq	r8,zero,80ac6c <__fpcmp_parts_d+0x34>
  80ac90:	00bfffc4 	movi	r2,-1
  80ac94:	f800283a 	ret
  80ac98:	20c00217 	ldw	r3,8(r4)
  80ac9c:	28800217 	ldw	r2,8(r5)
  80aca0:	10fffa16 	blt	r2,r3,80ac8c <__fpcmp_parts_d+0x54>
  80aca4:	18800916 	blt	r3,r2,80accc <__fpcmp_parts_d+0x94>
  80aca8:	21c00417 	ldw	r7,16(r4)
  80acac:	28c00417 	ldw	r3,16(r5)
  80acb0:	21800317 	ldw	r6,12(r4)
  80acb4:	28800317 	ldw	r2,12(r5)
  80acb8:	19fff436 	bltu	r3,r7,80ac8c <__fpcmp_parts_d+0x54>
  80acbc:	38c00526 	beq	r7,r3,80acd4 <__fpcmp_parts_d+0x9c>
  80acc0:	38c00236 	bltu	r7,r3,80accc <__fpcmp_parts_d+0x94>
  80acc4:	19ffec1e 	bne	r3,r7,80ac78 <__fpcmp_parts_d+0x40>
  80acc8:	30bfeb2e 	bgeu	r6,r2,80ac78 <__fpcmp_parts_d+0x40>
  80accc:	403fe71e 	bne	r8,zero,80ac6c <__fpcmp_parts_d+0x34>
  80acd0:	003fef06 	br	80ac90 <__fpcmp_parts_d+0x58>
  80acd4:	11bffa2e 	bgeu	r2,r6,80acc0 <__fpcmp_parts_d+0x88>
  80acd8:	403fe426 	beq	r8,zero,80ac6c <__fpcmp_parts_d+0x34>
  80acdc:	003fec06 	br	80ac90 <__fpcmp_parts_d+0x58>
  80ace0:	28800117 	ldw	r2,4(r5)
  80ace4:	103fe11e 	bne	r2,zero,80ac6c <__fpcmp_parts_d+0x34>
  80ace8:	003fe906 	br	80ac90 <__fpcmp_parts_d+0x58>
  80acec:	11bfdd1e 	bne	r2,r6,80ac64 <__fpcmp_parts_d+0x2c>
  80acf0:	28c00117 	ldw	r3,4(r5)
  80acf4:	20800117 	ldw	r2,4(r4)
  80acf8:	1885c83a 	sub	r2,r3,r2
  80acfc:	f800283a 	ret

0080ad00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80ad00:	defffd04 	addi	sp,sp,-12
  80ad04:	dc000015 	stw	r16,0(sp)
  80ad08:	dfc00215 	stw	ra,8(sp)
  80ad0c:	dc400115 	stw	r17,4(sp)
  80ad10:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80ad14:	20001516 	blt	r4,zero,80ad6c <close+0x6c>
  80ad18:	20c00324 	muli	r3,r4,12
  80ad1c:	00802074 	movhi	r2,129
  80ad20:	10b4cf04 	addi	r2,r2,-11460
  80ad24:	1887883a 	add	r3,r3,r2

  if (fd)
  80ad28:	18001026 	beq	r3,zero,80ad6c <close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80ad2c:	18800017 	ldw	r2,0(r3)
  80ad30:	10800417 	ldw	r2,16(r2)
  80ad34:	10001c26 	beq	r2,zero,80ada8 <close+0xa8>
  80ad38:	1809883a 	mov	r4,r3
  80ad3c:	103ee83a 	callr	r2
  80ad40:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80ad44:	8009883a 	mov	r4,r16
  80ad48:	080b1f40 	call	80b1f4 <alt_release_fd>
    if (rval < 0)
  80ad4c:	88001b16 	blt	r17,zero,80adbc <close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80ad50:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80ad54:	1805883a 	mov	r2,r3
  80ad58:	dfc00217 	ldw	ra,8(sp)
  80ad5c:	dc400117 	ldw	r17,4(sp)
  80ad60:	dc000017 	ldw	r16,0(sp)
  80ad64:	dec00304 	addi	sp,sp,12
  80ad68:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  80ad6c:	00802074 	movhi	r2,129
  80ad70:	10b95204 	addi	r2,r2,-6840
  80ad74:	10800017 	ldw	r2,0(r2)
  80ad78:	10000d26 	beq	r2,zero,80adb0 <close+0xb0>
  80ad7c:	103ee83a 	callr	r2
  80ad80:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ad84:	00ffffc4 	movi	r3,-1
  80ad88:	00801444 	movi	r2,81
  80ad8c:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
  80ad90:	1805883a 	mov	r2,r3
  80ad94:	dfc00217 	ldw	ra,8(sp)
  80ad98:	dc400117 	ldw	r17,4(sp)
  80ad9c:	dc000017 	ldw	r16,0(sp)
  80ada0:	dec00304 	addi	sp,sp,12
  80ada4:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80ada8:	080b1f40 	call	80b1f4 <alt_release_fd>
  80adac:	003fe806 	br	80ad50 <close+0x50>
  80adb0:	01002074 	movhi	r4,129
  80adb4:	213ff404 	addi	r4,r4,-48
  80adb8:	003ff206 	br	80ad84 <close+0x84>
  80adbc:	00802074 	movhi	r2,129
  80adc0:	10b95204 	addi	r2,r2,-6840
  80adc4:	10800017 	ldw	r2,0(r2)
  80adc8:	10000626 	beq	r2,zero,80ade4 <close+0xe4>
  80adcc:	103ee83a 	callr	r2
  80add0:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  80add4:	0445c83a 	sub	r2,zero,r17
  80add8:	00ffffc4 	movi	r3,-1
  80addc:	20800015 	stw	r2,0(r4)
  80ade0:	003fdc06 	br	80ad54 <close+0x54>
  80ade4:	01002074 	movhi	r4,129
  80ade8:	213ff404 	addi	r4,r4,-48
  80adec:	003ff906 	br	80add4 <close+0xd4>

0080adf0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  80adf0:	3005883a 	mov	r2,r6
  80adf4:	f800283a 	ret

0080adf8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80adf8:	deffff04 	addi	sp,sp,-4
  80adfc:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ae00:	20c00324 	muli	r3,r4,12
  80ae04:	20001116 	blt	r4,zero,80ae4c <fstat+0x54>
  80ae08:	00802074 	movhi	r2,129
  80ae0c:	10b4cf04 	addi	r2,r2,-11460
  80ae10:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80ae14:	20000d26 	beq	r4,zero,80ae4c <fstat+0x54>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ae18:	20800017 	ldw	r2,0(r4)
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ae1c:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ae20:	10800817 	ldw	r2,32(r2)
  80ae24:	10000326 	beq	r2,zero,80ae34 <fstat+0x3c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80ae28:	dfc00017 	ldw	ra,0(sp)
  80ae2c:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  80ae30:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ae34:	00880004 	movi	r2,8192
  80ae38:	28800115 	stw	r2,4(r5)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80ae3c:	1805883a 	mov	r2,r3
  80ae40:	dfc00017 	ldw	ra,0(sp)
  80ae44:	dec00104 	addi	sp,sp,4
  80ae48:	f800283a 	ret
  80ae4c:	00802074 	movhi	r2,129
  80ae50:	10b95204 	addi	r2,r2,-6840
  80ae54:	10800017 	ldw	r2,0(r2)
  80ae58:	00c02074 	movhi	r3,129
  80ae5c:	18fff404 	addi	r3,r3,-48
  80ae60:	10000226 	beq	r2,zero,80ae6c <fstat+0x74>
  80ae64:	103ee83a 	callr	r2
  80ae68:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ae6c:	00801444 	movi	r2,81
  80ae70:	18800015 	stw	r2,0(r3)
  80ae74:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
  80ae78:	1805883a 	mov	r2,r3
  80ae7c:	dfc00017 	ldw	ra,0(sp)
  80ae80:	dec00104 	addi	sp,sp,4
  80ae84:	f800283a 	ret

0080ae88 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80ae88:	defff004 	addi	sp,sp,-64
  80ae8c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ae90:	20c00324 	muli	r3,r4,12
  80ae94:	20000f16 	blt	r4,zero,80aed4 <isatty+0x4c>
  80ae98:	00802074 	movhi	r2,129
  80ae9c:	10b4cf04 	addi	r2,r2,-11460
  80aea0:	1885883a 	add	r2,r3,r2
  
  if (fd)
  80aea4:	10000b26 	beq	r2,zero,80aed4 <isatty+0x4c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80aea8:	10800017 	ldw	r2,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80aeac:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80aeb0:	10c00817 	ldw	r3,32(r2)
  80aeb4:	00800044 	movi	r2,1
  80aeb8:	18000326 	beq	r3,zero,80aec8 <isatty+0x40>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80aebc:	080adf80 	call	80adf8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80aec0:	d8c00117 	ldw	r3,4(sp)
  80aec4:	18880020 	cmpeqi	r2,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  80aec8:	dfc00f17 	ldw	ra,60(sp)
  80aecc:	dec01004 	addi	sp,sp,64
  80aed0:	f800283a 	ret
  80aed4:	00802074 	movhi	r2,129
  80aed8:	10b95204 	addi	r2,r2,-6840
  80aedc:	10800017 	ldw	r2,0(r2)
  80aee0:	00c02074 	movhi	r3,129
  80aee4:	18fff404 	addi	r3,r3,-48
  80aee8:	10000226 	beq	r2,zero,80aef4 <isatty+0x6c>
  80aeec:	103ee83a 	callr	r2
  80aef0:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80aef4:	00801444 	movi	r2,81
  80aef8:	18800015 	stw	r2,0(r3)
  80aefc:	0005883a 	mov	r2,zero
    return 0;
  }
}
  80af00:	dfc00f17 	ldw	ra,60(sp)
  80af04:	dec01004 	addi	sp,sp,64
  80af08:	f800283a 	ret

0080af0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80af0c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80af10:	01002074 	movhi	r4,129
  80af14:	21395704 	addi	r4,r4,-6820
  80af18:	00c02074 	movhi	r3,129
  80af1c:	18f2c004 	addi	r3,r3,-13568
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80af20:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80af24:	20c00826 	beq	r4,r3,80af48 <alt_load+0x3c>
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80af28:	01402074 	movhi	r5,129
  80af2c:	29795704 	addi	r5,r5,-6820
  {
    while( to != end )
  80af30:	19400526 	beq	r3,r5,80af48 <alt_load+0x3c>
    {
      *to++ = *from++;
  80af34:	20800017 	ldw	r2,0(r4)
  80af38:	21000104 	addi	r4,r4,4
  80af3c:	18800015 	stw	r2,0(r3)
  80af40:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80af44:	28fffb1e 	bne	r5,r3,80af34 <alt_load+0x28>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80af48:	01002034 	movhi	r4,128
  80af4c:	21000804 	addi	r4,r4,32
  80af50:	00c02034 	movhi	r3,128
  80af54:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80af58:	20c00826 	beq	r4,r3,80af7c <alt_load+0x70>
  80af5c:	01402034 	movhi	r5,128
  80af60:	29406104 	addi	r5,r5,388
  {
    while( to != end )
  80af64:	19400526 	beq	r3,r5,80af7c <alt_load+0x70>
    {
      *to++ = *from++;
  80af68:	20800017 	ldw	r2,0(r4)
  80af6c:	21000104 	addi	r4,r4,4
  80af70:	18800015 	stw	r2,0(r3)
  80af74:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80af78:	28fffb1e 	bne	r5,r3,80af68 <alt_load+0x5c>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80af7c:	01002074 	movhi	r4,129
  80af80:	2131e504 	addi	r4,r4,-14444
  80af84:	00c02074 	movhi	r3,129
  80af88:	18f1e504 	addi	r3,r3,-14444

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80af8c:	20c00826 	beq	r4,r3,80afb0 <alt_load+0xa4>
  80af90:	01402074 	movhi	r5,129
  80af94:	2972c004 	addi	r5,r5,-13568
  {
    while( to != end )
  80af98:	19400526 	beq	r3,r5,80afb0 <alt_load+0xa4>
    {
      *to++ = *from++;
  80af9c:	20800017 	ldw	r2,0(r4)
  80afa0:	21000104 	addi	r4,r4,4
  80afa4:	18800015 	stw	r2,0(r3)
  80afa8:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80afac:	28fffb1e 	bne	r5,r3,80af9c <alt_load+0x90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80afb0:	080bb780 	call	80bb78 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  80afb4:	dfc00017 	ldw	ra,0(sp)
  80afb8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  80afbc:	080bc901 	jmpi	80bc90 <alt_icache_flush_all>

0080afc0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80afc0:	defffe04 	addi	sp,sp,-8
  80afc4:	dfc00115 	stw	ra,4(sp)
  80afc8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80afcc:	20001f16 	blt	r4,zero,80b04c <lseek+0x8c>
  80afd0:	20c00324 	muli	r3,r4,12
  80afd4:	00802074 	movhi	r2,129
  80afd8:	10b4cf04 	addi	r2,r2,-11460
  80afdc:	1889883a 	add	r4,r3,r2
  
  if (fd) 
  80afe0:	20001c26 	beq	r4,zero,80b054 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80afe4:	20800017 	ldw	r2,0(r4)
  80afe8:	10800717 	ldw	r2,28(r2)
  80afec:	10000626 	beq	r2,zero,80b008 <lseek+0x48>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80aff0:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  80aff4:	10000516 	blt	r2,zero,80b00c <lseek+0x4c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  80aff8:	dfc00117 	ldw	ra,4(sp)
  80affc:	dc000017 	ldw	r16,0(sp)
  80b000:	dec00204 	addi	sp,sp,8
  80b004:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80b008:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  80b00c:	00a1c83a 	sub	r16,zero,r2
  80b010:	00802074 	movhi	r2,129
  80b014:	10b95204 	addi	r2,r2,-6840
  80b018:	10800017 	ldw	r2,0(r2)
  80b01c:	10000826 	beq	r2,zero,80b040 <lseek+0x80>
  80b020:	103ee83a 	callr	r2
  80b024:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
  80b028:	00bfffc4 	movi	r2,-1
  80b02c:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
  80b030:	dfc00117 	ldw	ra,4(sp)
  80b034:	dc000017 	ldw	r16,0(sp)
  80b038:	dec00204 	addi	sp,sp,8
  80b03c:	f800283a 	ret
  80b040:	00c02074 	movhi	r3,129
  80b044:	18fff404 	addi	r3,r3,-48
  80b048:	003ff706 	br	80b028 <lseek+0x68>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b04c:	04001444 	movi	r16,81
  80b050:	003fef06 	br	80b010 <lseek+0x50>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  80b054:	00bfebc4 	movi	r2,-81
  80b058:	003fec06 	br	80b00c <lseek+0x4c>

0080b05c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80b05c:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80b060:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80b064:	dfc00115 	stw	ra,4(sp)
  80b068:	dc400015 	stw	r17,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80b06c:	080b45c0 	call	80b45c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80b070:	080b4040 	call	80b404 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80b074:	01002074 	movhi	r4,129
  80b078:	2132bc04 	addi	r4,r4,-13584
  80b07c:	200b883a 	mov	r5,r4
  80b080:	200d883a 	mov	r6,r4
  80b084:	080bdc00 	call	80bdc0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80b088:	080bbf80 	call	80bbf8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80b08c:	01002074 	movhi	r4,129
  80b090:	212f1104 	addi	r4,r4,-17340
  80b094:	080c3440 	call	80c344 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80b098:	d126ae17 	ldw	r4,-25928(gp)
  80b09c:	d166af17 	ldw	r5,-25924(gp)
  80b0a0:	d1a6b017 	ldw	r6,-25920(gp)
  80b0a4:	08002d40 	call	8002d4 <main>
  80b0a8:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
  80b0ac:	01000044 	movi	r4,1
  80b0b0:	080ad000 	call	80ad00 <close>
  exit (result);
  80b0b4:	8809883a 	mov	r4,r17
  80b0b8:	080c3580 	call	80c358 <exit>

0080b0bc <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
  80b0bc:	f800283a 	ret

0080b0c0 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
  80b0c0:	f800283a 	ret

0080b0c4 <alt_putstr>:
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
  80b0c4:	00802074 	movhi	r2,129
  80b0c8:	10b94704 	addi	r2,r2,-6884
  80b0cc:	10c00017 	ldw	r3,0(r2)
  80b0d0:	19400217 	ldw	r5,8(r3)
  80b0d4:	080c4041 	jmpi	80c404 <fputs>

0080b0d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80b0d8:	defffe04 	addi	sp,sp,-8
  80b0dc:	dfc00115 	stw	ra,4(sp)
  80b0e0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b0e4:	20002516 	blt	r4,zero,80b17c <read+0xa4>
  80b0e8:	20c00324 	muli	r3,r4,12
  80b0ec:	00802074 	movhi	r2,129
  80b0f0:	10b4cf04 	addi	r2,r2,-11460
  80b0f4:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80b0f8:	20002026 	beq	r4,zero,80b17c <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80b0fc:	20800217 	ldw	r2,8(r4)
  80b100:	00c00044 	movi	r3,1
  80b104:	108000cc 	andi	r2,r2,3
  80b108:	10c00b26 	beq	r2,r3,80b138 <read+0x60>
  80b10c:	20800017 	ldw	r2,0(r4)
  80b110:	10800517 	ldw	r2,20(r2)
  80b114:	10000826 	beq	r2,zero,80b138 <read+0x60>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80b118:	103ee83a 	callr	r2
  80b11c:	1021883a 	mov	r16,r2
  80b120:	10002716 	blt	r2,zero,80b1c0 <read+0xe8>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80b124:	8005883a 	mov	r2,r16
  80b128:	dfc00117 	ldw	ra,4(sp)
  80b12c:	dc000017 	ldw	r16,0(sp)
  80b130:	dec00204 	addi	sp,sp,8
  80b134:	f800283a 	ret
  80b138:	00802074 	movhi	r2,129
  80b13c:	10b95204 	addi	r2,r2,-6840
  80b140:	10800017 	ldw	r2,0(r2)
  80b144:	10000a26 	beq	r2,zero,80b170 <read+0x98>
  80b148:	103ee83a 	callr	r2
  80b14c:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  80b150:	043fffc4 	movi	r16,-1
  80b154:	00800344 	movi	r2,13
  80b158:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80b15c:	8005883a 	mov	r2,r16
  80b160:	dfc00117 	ldw	ra,4(sp)
  80b164:	dc000017 	ldw	r16,0(sp)
  80b168:	dec00204 	addi	sp,sp,8
  80b16c:	f800283a 	ret
  80b170:	00c02074 	movhi	r3,129
  80b174:	18fff404 	addi	r3,r3,-48
  80b178:	003ff506 	br	80b150 <read+0x78>
  80b17c:	00802074 	movhi	r2,129
  80b180:	10b95204 	addi	r2,r2,-6840
  80b184:	10800017 	ldw	r2,0(r2)
  80b188:	10000a26 	beq	r2,zero,80b1b4 <read+0xdc>
  80b18c:	103ee83a 	callr	r2
  80b190:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80b194:	00801444 	movi	r2,81
  80b198:	043fffc4 	movi	r16,-1
  80b19c:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  80b1a0:	8005883a 	mov	r2,r16
  80b1a4:	dfc00117 	ldw	ra,4(sp)
  80b1a8:	dc000017 	ldw	r16,0(sp)
  80b1ac:	dec00204 	addi	sp,sp,8
  80b1b0:	f800283a 	ret
  80b1b4:	00c02074 	movhi	r3,129
  80b1b8:	18fff404 	addi	r3,r3,-48
  80b1bc:	003ff506 	br	80b194 <read+0xbc>
  80b1c0:	00802074 	movhi	r2,129
  80b1c4:	10b95204 	addi	r2,r2,-6840
  80b1c8:	10800017 	ldw	r2,0(r2)
  80b1cc:	10000626 	beq	r2,zero,80b1e8 <read+0x110>
  80b1d0:	103ee83a 	callr	r2
  80b1d4:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  80b1d8:	0405c83a 	sub	r2,zero,r16
  80b1dc:	043fffc4 	movi	r16,-1
  80b1e0:	18800015 	stw	r2,0(r3)
  80b1e4:	003fcf06 	br	80b124 <read+0x4c>
  80b1e8:	00c02074 	movhi	r3,129
  80b1ec:	18fff404 	addi	r3,r3,-48
  80b1f0:	003ff906 	br	80b1d8 <read+0x100>

0080b1f4 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  80b1f4:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
  80b1f8:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
  80b1fc:	1100050e 	bge	r2,r4,80b214 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b200:	00802074 	movhi	r2,129
  80b204:	10b4cf04 	addi	r2,r2,-11460
  80b208:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
  80b20c:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  80b210:	10000215 	stw	zero,8(r2)
  80b214:	f800283a 	ret

0080b218 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b218:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b21c:	00bfff84 	movi	r2,-2
  80b220:	2884703a 	and	r2,r5,r2
  80b224:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80b228:	d0e00c17 	ldw	r3,-32720(gp)
  80b22c:	00bfff04 	movi	r2,-4
  80b230:	18c000c4 	addi	r3,r3,3
  80b234:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80b238:	1909883a 	add	r4,r3,r4
  80b23c:	00804034 	movhi	r2,256
  80b240:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80b244:	d0e00c15 	stw	r3,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80b248:	1100042e 	bgeu	r2,r4,80b25c <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b24c:	2801703a 	wrctl	status,r5
  80b250:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  80b254:	1805883a 	mov	r2,r3
  80b258:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  80b25c:	d1200c15 	stw	r4,-32720(gp)
  80b260:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  80b264:	1805883a 	mov	r2,r3
  80b268:	f800283a 	ret

0080b26c <times>:
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  80b26c:	00802074 	movhi	r2,129
  80b270:	10bff904 	addi	r2,r2,-28
  80b274:	11400017 	ldw	r5,0(r2)
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  80b278:	deffff04 	addi	sp,sp,-4
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80b27c:	00c02074 	movhi	r3,129
  80b280:	18fffa04 	addi	r3,r3,-24
  80b284:	dfc00015 	stw	ra,0(sp)
  80b288:	18c00017 	ldw	r3,0(r3)
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  80b28c:	28000f1e 	bne	r5,zero,80b2cc <times+0x60>
  80b290:	00802074 	movhi	r2,129
  80b294:	10b95204 	addi	r2,r2,-6840
  80b298:	10800017 	ldw	r2,0(r2)
  80b29c:	01002074 	movhi	r4,129
  80b2a0:	213ff404 	addi	r4,r4,-48
  80b2a4:	10000226 	beq	r2,zero,80b2b0 <times+0x44>
  80b2a8:	103ee83a 	callr	r2
  80b2ac:	1009883a 	mov	r4,r2
  {
    ALT_ERRNO = ENOSYS;
  80b2b0:	0007883a 	mov	r3,zero
  80b2b4:	00801604 	movi	r2,88
  80b2b8:	20800015 	stw	r2,0(r4)
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
  80b2bc:	1805883a 	mov	r2,r3
  80b2c0:	dfc00017 	ldw	ra,0(sp)
  80b2c4:	dec00104 	addi	sp,sp,4
  80b2c8:	f800283a 	ret
  80b2cc:	1805883a 	mov	r2,r3
  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;
  80b2d0:	20000315 	stw	zero,12(r4)
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  80b2d4:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
  80b2d8:	20c00115 	stw	r3,4(r4)
  buf->tms_cutime = 0;
  80b2dc:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;

  return ticks;
}
  80b2e0:	dfc00017 	ldw	ra,0(sp)
  80b2e4:	dec00104 	addi	sp,sp,4
  80b2e8:	f800283a 	ret

0080b2ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80b2ec:	defffe04 	addi	sp,sp,-8
  80b2f0:	dfc00115 	stw	ra,4(sp)
  80b2f4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b2f8:	20002416 	blt	r4,zero,80b38c <write+0xa0>
  80b2fc:	20c00324 	muli	r3,r4,12
  80b300:	00802074 	movhi	r2,129
  80b304:	10b4cf04 	addi	r2,r2,-11460
  80b308:	1889883a 	add	r4,r3,r2
  
  if (fd)
  80b30c:	20001f26 	beq	r4,zero,80b38c <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80b310:	20800217 	ldw	r2,8(r4)
  80b314:	108000cc 	andi	r2,r2,3
  80b318:	10000b26 	beq	r2,zero,80b348 <write+0x5c>
  80b31c:	20800017 	ldw	r2,0(r4)
  80b320:	10800617 	ldw	r2,24(r2)
  80b324:	10000826 	beq	r2,zero,80b348 <write+0x5c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80b328:	103ee83a 	callr	r2
  80b32c:	1021883a 	mov	r16,r2
  80b330:	10002716 	blt	r2,zero,80b3d0 <write+0xe4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80b334:	8005883a 	mov	r2,r16
  80b338:	dfc00117 	ldw	ra,4(sp)
  80b33c:	dc000017 	ldw	r16,0(sp)
  80b340:	dec00204 	addi	sp,sp,8
  80b344:	f800283a 	ret
  80b348:	00802074 	movhi	r2,129
  80b34c:	10b95204 	addi	r2,r2,-6840
  80b350:	10800017 	ldw	r2,0(r2)
  80b354:	10000a26 	beq	r2,zero,80b380 <write+0x94>
  80b358:	103ee83a 	callr	r2
  80b35c:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  80b360:	043fffc4 	movi	r16,-1
  80b364:	00800344 	movi	r2,13
  80b368:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  80b36c:	8005883a 	mov	r2,r16
  80b370:	dfc00117 	ldw	ra,4(sp)
  80b374:	dc000017 	ldw	r16,0(sp)
  80b378:	dec00204 	addi	sp,sp,8
  80b37c:	f800283a 	ret
  80b380:	00c02074 	movhi	r3,129
  80b384:	18fff404 	addi	r3,r3,-48
  80b388:	003ff506 	br	80b360 <write+0x74>
  80b38c:	00802074 	movhi	r2,129
  80b390:	10b95204 	addi	r2,r2,-6840
  80b394:	10800017 	ldw	r2,0(r2)
  80b398:	10000a26 	beq	r2,zero,80b3c4 <write+0xd8>
  80b39c:	103ee83a 	callr	r2
  80b3a0:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80b3a4:	00801444 	movi	r2,81
  80b3a8:	043fffc4 	movi	r16,-1
  80b3ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
  80b3b0:	8005883a 	mov	r2,r16
  80b3b4:	dfc00117 	ldw	ra,4(sp)
  80b3b8:	dc000017 	ldw	r16,0(sp)
  80b3bc:	dec00204 	addi	sp,sp,8
  80b3c0:	f800283a 	ret
  80b3c4:	00c02074 	movhi	r3,129
  80b3c8:	18fff404 	addi	r3,r3,-48
  80b3cc:	003ff506 	br	80b3a4 <write+0xb8>
  80b3d0:	00802074 	movhi	r2,129
  80b3d4:	10b95204 	addi	r2,r2,-6840
  80b3d8:	10800017 	ldw	r2,0(r2)
  80b3dc:	10000626 	beq	r2,zero,80b3f8 <write+0x10c>
  80b3e0:	103ee83a 	callr	r2
  80b3e4:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  80b3e8:	0405c83a 	sub	r2,zero,r16
  80b3ec:	043fffc4 	movi	r16,-1
  80b3f0:	18800015 	stw	r2,0(r3)
  80b3f4:	003fcf06 	br	80b334 <write+0x48>
  80b3f8:	00c02074 	movhi	r3,129
  80b3fc:	18fff404 	addi	r3,r3,-48
  80b400:	003ff906 	br	80b3e8 <write+0xfc>

0080b404 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b404:	defffe04 	addi	sp,sp,-8
  80b408:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80b40c:	01c0fa04 	movi	r7,1000
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80b410:	04002074 	movhi	r16,129
  80b414:	84353904 	addi	r16,r16,-11036
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80b418:	01004034 	movhi	r4,256
  80b41c:	21040004 	addi	r4,r4,4096
  80b420:	000b883a 	mov	r5,zero
  80b424:	01800044 	movi	r6,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b428:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80b42c:	080ba580 	call	80ba58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80b430:	8009883a 	mov	r4,r16
  80b434:	000b883a 	mov	r5,zero
  80b438:	01800404 	movi	r6,16
  80b43c:	080b5580 	call	80b558 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b440:	813ff604 	addi	r4,r16,-40
  80b444:	01402074 	movhi	r5,129
  80b448:	29794f04 	addi	r5,r5,-6852
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
  80b44c:	dfc00117 	ldw	ra,4(sp)
  80b450:	dc000017 	ldw	r16,0(sp)
  80b454:	dec00204 	addi	sp,sp,8
  80b458:	080bb7c1 	jmpi	80bb7c <alt_dev_llist_insert>

0080b45c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b45c:	deffff04 	addi	sp,sp,-4
  80b460:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  80b464:	080c1600 	call	80c160 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b468:	00800044 	movi	r2,1
  80b46c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b470:	dfc00017 	ldw	ra,0(sp)
  80b474:	dec00104 	addi	sp,sp,4
  80b478:	f800283a 	ret

0080b47c <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80b47c:	21000017 	ldw	r4,0(r4)
  80b480:	21000a04 	addi	r4,r4,40
  80b484:	080b6e01 	jmpi	80b6e0 <altera_avalon_jtag_uart_ioctl>

0080b488 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80b488:	20800017 	ldw	r2,0(r4)
  80b48c:	21400217 	ldw	r5,8(r4)
  80b490:	11000a04 	addi	r4,r2,40
  80b494:	080b4b81 	jmpi	80b4b8 <altera_avalon_jtag_uart_close>

0080b498 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80b498:	20800017 	ldw	r2,0(r4)
  80b49c:	21c00217 	ldw	r7,8(r4)
  80b4a0:	11000a04 	addi	r4,r2,40
  80b4a4:	080b8d41 	jmpi	80b8d4 <altera_avalon_jtag_uart_write>

0080b4a8 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80b4a8:	20800017 	ldw	r2,0(r4)
  80b4ac:	21c00217 	ldw	r7,8(r4)
  80b4b0:	11000a04 	addi	r4,r2,40
  80b4b4:	080b7681 	jmpi	80b768 <altera_avalon_jtag_uart_read>

0080b4b8 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b4b8:	2950000c 	andi	r5,r5,16384
  80b4bc:	21800c17 	ldw	r6,48(r4)
  80b4c0:	28000426 	beq	r5,zero,80b4d4 <altera_avalon_jtag_uart_close+0x1c>
  80b4c4:	00000706 	br	80b4e4 <altera_avalon_jtag_uart_close+0x2c>
  80b4c8:	20c00917 	ldw	r3,36(r4)
  80b4cc:	20800117 	ldw	r2,4(r4)
  80b4d0:	1880022e 	bgeu	r3,r2,80b4dc <altera_avalon_jtag_uart_close+0x24>
  80b4d4:	20800d17 	ldw	r2,52(r4)
  80b4d8:	11bffb1e 	bne	r2,r6,80b4c8 <altera_avalon_jtag_uart_close+0x10>
  80b4dc:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
  80b4e0:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b4e4:	20800d17 	ldw	r2,52(r4)
  80b4e8:	11bffc26 	beq	r2,r6,80b4dc <altera_avalon_jtag_uart_close+0x24>
  80b4ec:	20c00117 	ldw	r3,4(r4)
  80b4f0:	20800917 	ldw	r2,36(r4)
  80b4f4:	10fff92e 	bgeu	r2,r3,80b4dc <altera_avalon_jtag_uart_close+0x24>
  80b4f8:	00bffd44 	movi	r2,-11
  80b4fc:	f800283a 	ret

0080b500 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80b500:	20c00017 	ldw	r3,0(r4)
  80b504:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80b508:	1081000c 	andi	r2,r2,1024
  80b50c:	10000a1e 	bne	r2,zero,80b538 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b510:	20c00917 	ldw	r3,36(r4)
  80b514:	00a00034 	movhi	r2,32768
  80b518:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
  80b51c:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b520:	10c00136 	bltu	r2,r3,80b528 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
  80b524:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b528:	00c02074 	movhi	r3,129
  80b52c:	18fff904 	addi	r3,r3,-28
  80b530:	18800017 	ldw	r2,0(r3)
  80b534:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80b538:	20800817 	ldw	r2,32(r4)
  80b53c:	10810014 	ori	r2,r2,1024
  80b540:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b544:	00c02074 	movhi	r3,129
  80b548:	18fff904 	addi	r3,r3,-28
  80b54c:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  80b550:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b554:	f800283a 	ret

0080b558 <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80b558:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80b55c:	defffd04 	addi	sp,sp,-12
  80b560:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b564:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80b568:	2021883a 	mov	r16,r4
  80b56c:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b570:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80b574:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80b578:	2809883a 	mov	r4,r5
  80b57c:	800f883a 	mov	r7,r16
  80b580:	300b883a 	mov	r5,r6
  80b584:	01802074 	movhi	r6,129
  80b588:	31ad7604 	addi	r6,r6,-18984
  80b58c:	d8000015 	stw	zero,0(sp)
  80b590:	080bd340 	call	80bd34 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80b594:	00c02074 	movhi	r3,129
  80b598:	18fff904 	addi	r3,r3,-28
  80b59c:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80b5a0:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80b5a4:	81000204 	addi	r4,r16,8
  80b5a8:	01802074 	movhi	r6,129
  80b5ac:	31ad4004 	addi	r6,r6,-19200
  80b5b0:	800f883a 	mov	r7,r16
  80b5b4:	080bae40 	call	80bae4 <alt_alarm_start>
  80b5b8:	1000030e 	bge	r2,zero,80b5c8 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80b5bc:	00a00034 	movhi	r2,32768
  80b5c0:	10bfffc4 	addi	r2,r2,-1
  80b5c4:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80b5c8:	dfc00217 	ldw	ra,8(sp)
  80b5cc:	dc000117 	ldw	r16,4(sp)
  80b5d0:	dec00304 	addi	sp,sp,12
  80b5d4:	f800283a 	ret

0080b5d8 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  80b5d8:	21c00017 	ldw	r7,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80b5dc:	200b883a 	mov	r5,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  80b5e0:	3a800104 	addi	r10,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b5e4:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80b5e8:	4880c00c 	andi	r2,r9,768
  80b5ec:	10003426 	beq	r2,zero,80b6c0 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80b5f0:	4880400c 	andi	r2,r9,256
  80b5f4:	10001626 	beq	r2,zero,80b650 <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b5f8:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
  80b5fc:	2a000b17 	ldw	r8,44(r5)
  80b600:	10800044 	addi	r2,r2,1
  80b604:	1081ffcc 	andi	r2,r2,2047
  80b608:	12000c1e 	bne	r2,r8,80b63c <altera_avalon_jtag_uart_irq+0x64>
  80b60c:	00002d06 	br	80b6c4 <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b610:	28800a17 	ldw	r2,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b614:	28c00a17 	ldw	r3,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b618:	1145883a 	add	r2,r2,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b61c:	18c00044 	addi	r3,r3,1
  80b620:	18c1ffcc 	andi	r3,r3,2047
  80b624:	28c00a15 	stw	r3,40(r5)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b628:	29000a17 	ldw	r4,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b62c:	11800e05 	stb	r6,56(r2)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
  80b630:	21000044 	addi	r4,r4,1
  80b634:	2101ffcc 	andi	r4,r4,2047
  80b638:	22000326 	beq	r4,r8,80b648 <altera_avalon_jtag_uart_irq+0x70>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80b63c:	39800037 	ldwio	r6,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80b640:	30a0000c 	andi	r2,r6,32768
  80b644:	103ff21e 	bne	r2,zero,80b610 <altera_avalon_jtag_uart_irq+0x38>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80b648:	30bfffec 	andhi	r2,r6,65535
  80b64c:	10001d1e 	bne	r2,zero,80b6c4 <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80b650:	4880800c 	andi	r2,r9,512
  80b654:	103fe326 	beq	r2,zero,80b5e4 <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80b658:	4808d43a 	srli	r4,r9,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b65c:	20000b1e 	bne	r4,zero,80b68c <altera_avalon_jtag_uart_irq+0xb4>
  80b660:	003fe006 	br	80b5e4 <altera_avalon_jtag_uart_irq+0xc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80b664:	28800d17 	ldw	r2,52(r5)
  80b668:	1145883a 	add	r2,r2,r5
  80b66c:	10c20e07 	ldb	r3,2104(r2)
  80b670:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b674:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80b678:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b67c:	10800044 	addi	r2,r2,1
  80b680:	1081ffcc 	andi	r2,r2,2047
  80b684:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b688:	203fd626 	beq	r4,zero,80b5e4 <altera_avalon_jtag_uart_irq+0xc>
  80b68c:	28c00d17 	ldw	r3,52(r5)
  80b690:	28800c17 	ldw	r2,48(r5)
  80b694:	18bff31e 	bne	r3,r2,80b664 <altera_avalon_jtag_uart_irq+0x8c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b698:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b69c:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b6a0:	00ffff44 	movi	r3,-3
  80b6a4:	10c4703a 	and	r2,r2,r3
  80b6a8:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b6ac:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b6b0:	50c00037 	ldwio	r3,0(r10)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b6b4:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80b6b8:	4880c00c 	andi	r2,r9,768
  80b6bc:	103fcc1e 	bne	r2,zero,80b5f0 <altera_avalon_jtag_uart_irq+0x18>
  80b6c0:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b6c4:	28800817 	ldw	r2,32(r5)
  80b6c8:	00ffff84 	movi	r3,-2
  80b6cc:	10c4703a 	and	r2,r2,r3
  80b6d0:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80b6d4:	50800035 	stwio	r2,0(r10)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b6d8:	50c00037 	ldwio	r3,0(r10)
  80b6dc:	003fdc06 	br	80b650 <altera_avalon_jtag_uart_irq+0x78>

0080b6e0 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  80b6e0:	009a8044 	movi	r2,27137
  80b6e4:	28800f26 	beq	r5,r2,80b724 <altera_avalon_jtag_uart_ioctl+0x44>
  80b6e8:	009a8084 	movi	r2,27138
  80b6ec:	28800326 	beq	r5,r2,80b6fc <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80b6f0:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
  80b6f4:	1805883a 	mov	r2,r3
  80b6f8:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80b6fc:	21400117 	ldw	r5,4(r4)
  80b700:	00a00034 	movhi	r2,32768
  80b704:	10bfffc4 	addi	r2,r2,-1
  80b708:	28bff926 	beq	r5,r2,80b6f0 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80b70c:	20800917 	ldw	r2,36(r4)
  80b710:	0007883a 	mov	r3,zero
  80b714:	1145803a 	cmpltu	r2,r2,r5
  80b718:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
  80b71c:	1805883a 	mov	r2,r3
  80b720:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80b724:	20c00117 	ldw	r3,4(r4)
  80b728:	00a00034 	movhi	r2,32768
  80b72c:	10bfffc4 	addi	r2,r2,-1
  80b730:	18bfef26 	beq	r3,r2,80b6f0 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80b734:	31800017 	ldw	r6,0(r6)
  80b738:	10bfff44 	addi	r2,r2,-3
  80b73c:	30ffff84 	addi	r3,r6,-2
  80b740:	10c00436 	bltu	r2,r3,80b754 <altera_avalon_jtag_uart_ioctl+0x74>
  80b744:	0007883a 	mov	r3,zero
  80b748:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
  80b74c:	1805883a 	mov	r2,r3
  80b750:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80b754:	01a00034 	movhi	r6,32768
  80b758:	31bfff84 	addi	r6,r6,-2
  80b75c:	0007883a 	mov	r3,zero
  80b760:	21800115 	stw	r6,4(r4)
  80b764:	003ff906 	br	80b74c <altera_avalon_jtag_uart_ioctl+0x6c>

0080b768 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b768:	defff404 	addi	sp,sp,-48
  80b76c:	dd400715 	stw	r21,28(sp)
  80b770:	dcc00515 	stw	r19,20(sp)
  80b774:	dfc00b15 	stw	ra,44(sp)
  80b778:	df000a15 	stw	fp,40(sp)
  80b77c:	ddc00915 	stw	r23,36(sp)
  80b780:	dd800815 	stw	r22,32(sp)
  80b784:	dd000615 	stw	r20,24(sp)
  80b788:	dc800415 	stw	r18,16(sp)
  80b78c:	dc400315 	stw	r17,12(sp)
  80b790:	dc000215 	stw	r16,8(sp)
  80b794:	302b883a 	mov	r21,r6
  80b798:	2027883a 	mov	r19,r4
  80b79c:	d9400115 	stw	r5,4(sp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b7a0:	0180480e 	bge	zero,r6,80b8c4 <altera_avalon_jtag_uart_read+0x15c>
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b7a4:	39d0000c 	andi	r7,r7,16384
  80b7a8:	d9c00015 	stw	r7,0(sp)
  80b7ac:	dd000117 	ldw	r20,4(sp)
  80b7b0:	07020004 	movi	fp,2048
  80b7b4:	9dc00e04 	addi	r23,r19,56

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
  80b7b8:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b7bc:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80b7c0:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  80b7c4:	b4400136 	bltu	r22,r17,80b7cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80b7c8:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80b7cc:	a009883a 	mov	r4,r20
  80b7d0:	bc4b883a 	add	r5,r23,r17
  80b7d4:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  80b7d8:	80000826 	beq	r16,zero,80b7fc <altera_avalon_jtag_uart_read+0x94>
        break; /* No more data available */

      if (n > space)
  80b7dc:	ac002036 	bltu	r21,r16,80b860 <altera_avalon_jtag_uart_read+0xf8>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80b7e0:	08073a40 	call	8073a4 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b7e4:	8445883a 	add	r2,r16,r17
  80b7e8:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  80b7ec:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b7f0:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80b7f4:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  80b7f8:	057fef16 	blt	zero,r21,80b7b8 <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
  80b7fc:	d8800117 	ldw	r2,4(sp)
  80b800:	a080231e 	bne	r20,r2,80b890 <altera_avalon_jtag_uart_read+0x128>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b804:	d8c00017 	ldw	r3,0(sp)
  80b808:	1800301e 	bne	r3,zero,80b8cc <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80b80c:	98800a17 	ldw	r2,40(r19)
  80b810:	b080031e 	bne	r22,r2,80b820 <altera_avalon_jtag_uart_read+0xb8>
  80b814:	98c00917 	ldw	r3,36(r19)
  80b818:	98800117 	ldw	r2,4(r19)
  80b81c:	18bffb36 	bltu	r3,r2,80b80c <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80b820:	98800a17 	ldw	r2,40(r19)
  80b824:	b0800126 	beq	r22,r2,80b82c <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b828:	057fe016 	blt	zero,r21,80b7ac <altera_avalon_jtag_uart_read+0x44>
  80b82c:	00bffec4 	movi	r2,-5
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  80b830:	dfc00b17 	ldw	ra,44(sp)
  80b834:	df000a17 	ldw	fp,40(sp)
  80b838:	ddc00917 	ldw	r23,36(sp)
  80b83c:	dd800817 	ldw	r22,32(sp)
  80b840:	dd400717 	ldw	r21,28(sp)
  80b844:	dd000617 	ldw	r20,24(sp)
  80b848:	dcc00517 	ldw	r19,20(sp)
  80b84c:	dc800417 	ldw	r18,16(sp)
  80b850:	dc400317 	ldw	r17,12(sp)
  80b854:	dc000217 	ldw	r16,8(sp)
  80b858:	dec00c04 	addi	sp,sp,48
  80b85c:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  80b860:	99400e04 	addi	r5,r19,56
  80b864:	a009883a 	mov	r4,r20
  80b868:	a80d883a 	mov	r6,r21
  80b86c:	894b883a 	add	r5,r17,r5
  80b870:	08073a40 	call	8073a4 <memcpy>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80b874:	d8800117 	ldw	r2,4(sp)

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b878:	ac47883a 	add	r3,r21,r17

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  80b87c:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b880:	18c1ffcc 	andi	r3,r3,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
  80b884:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b888:	98c00b15 	stw	r3,44(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80b88c:	a0bfdd26 	beq	r20,r2,80b804 <altera_avalon_jtag_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b890:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b894:	00bfff84 	movi	r2,-2
  80b898:	2084703a 	and	r2,r4,r2
  80b89c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b8a0:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b8a4:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b8a8:	18c00054 	ori	r3,r3,1
  80b8ac:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b8b0:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b8b4:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  80b8b8:	d8c00117 	ldw	r3,4(sp)
  80b8bc:	a0c5c83a 	sub	r2,r20,r3
  80b8c0:	003fdb06 	br	80b830 <altera_avalon_jtag_uart_read+0xc8>
  else if (flags & O_NONBLOCK)
  80b8c4:	3890000c 	andi	r2,r7,16384
  80b8c8:	103fd826 	beq	r2,zero,80b82c <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b8cc:	00bffd44 	movi	r2,-11
  80b8d0:	003fd706 	br	80b830 <altera_avalon_jtag_uart_read+0xc8>

0080b8d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80b8d4:	defff704 	addi	sp,sp,-36
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b8d8:	32000048 	cmpgei	r8,r6,1
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80b8dc:	ddc00715 	stw	r23,28(sp)
  80b8e0:	dd800615 	stw	r22,24(sp)
  80b8e4:	dcc00315 	stw	r19,12(sp)
  80b8e8:	dc000015 	stw	r16,0(sp)
  80b8ec:	dfc00815 	stw	ra,32(sp)
  80b8f0:	dd400515 	stw	r21,20(sp)
  80b8f4:	dd000415 	stw	r20,16(sp)
  80b8f8:	dc800215 	stw	r18,8(sp)
  80b8fc:	dc400115 	stw	r17,4(sp)
  80b900:	3027883a 	mov	r19,r6
  80b904:	2021883a 	mov	r16,r4
  80b908:	282d883a 	mov	r22,r5
  80b90c:	382f883a 	mov	r23,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b910:	40004926 	beq	r8,zero,80ba38 <altera_avalon_jtag_uart_write+0x164>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  80b914:	3d50000c 	andi	r21,r7,16384
  80b918:	2829883a 	mov	r20,r5
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80b91c:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
  80b920:	81400d17 	ldw	r5,52(r16)

      if (in < out)
  80b924:	91403d2e 	bgeu	r18,r5,80ba1c <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
  80b928:	2c85c83a 	sub	r2,r5,r18
  80b92c:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  80b930:	30002626 	beq	r6,zero,80b9cc <altera_avalon_jtag_uart_write+0xf8>
        break;

      if (n > count)
  80b934:	3023883a 	mov	r17,r6
  80b938:	9980012e 	bgeu	r19,r6,80b940 <altera_avalon_jtag_uart_write+0x6c>
  80b93c:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  80b940:	81020e04 	addi	r4,r16,2104
  80b944:	a00b883a 	mov	r5,r20
  80b948:	2489883a 	add	r4,r4,r18
  80b94c:	880d883a 	mov	r6,r17
  80b950:	08073a40 	call	8073a4 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b954:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
  80b958:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b95c:	18c1ffcc 	andi	r3,r3,2047
  80b960:	9a000048 	cmpgei	r8,r19,1
  80b964:	80c00c15 	stw	r3,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  80b968:	a469883a 	add	r20,r20,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b96c:	403feb1e 	bne	r8,zero,80b91c <altera_avalon_jtag_uart_write+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b970:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b974:	00bfff84 	movi	r2,-2
  80b978:	2084703a 	and	r2,r4,r2
  80b97c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b980:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b984:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b988:	18c00094 	ori	r3,r3,2
  80b98c:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b990:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b994:	2001703a 	wrctl	status,r4
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80b998:	b5002926 	beq	r22,r20,80ba40 <altera_avalon_jtag_uart_write+0x16c>
    return ptr - start;
  80b99c:	a585c83a 	sub	r2,r20,r22
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
  80b9a0:	dfc00817 	ldw	ra,32(sp)
  80b9a4:	ddc00717 	ldw	r23,28(sp)
  80b9a8:	dd800617 	ldw	r22,24(sp)
  80b9ac:	dd400517 	ldw	r21,20(sp)
  80b9b0:	dd000417 	ldw	r20,16(sp)
  80b9b4:	dcc00317 	ldw	r19,12(sp)
  80b9b8:	dc800217 	ldw	r18,8(sp)
  80b9bc:	dc400117 	ldw	r17,4(sp)
  80b9c0:	dc000017 	ldw	r16,0(sp)
  80b9c4:	dec00904 	addi	sp,sp,36
  80b9c8:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b9cc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b9d0:	00bfff84 	movi	r2,-2
  80b9d4:	2084703a 	and	r2,r4,r2
  80b9d8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b9dc:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b9e0:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b9e4:	18c00094 	ori	r3,r3,2
  80b9e8:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b9ec:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b9f0:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  80b9f4:	a83fe81e 	bne	r21,zero,80b998 <altera_avalon_jtag_uart_write+0xc4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80b9f8:	80800d17 	ldw	r2,52(r16)
  80b9fc:	1140031e 	bne	r2,r5,80ba0c <altera_avalon_jtag_uart_write+0x138>
  80ba00:	80c00917 	ldw	r3,36(r16)
  80ba04:	80800117 	ldw	r2,4(r16)
  80ba08:	18bffb36 	bltu	r3,r2,80b9f8 <altera_avalon_jtag_uart_write+0x124>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80ba0c:	80800d17 	ldw	r2,52(r16)
  80ba10:	117fe126 	beq	r2,r5,80b998 <altera_avalon_jtag_uart_write+0xc4>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ba14:	403fc11e 	bne	r8,zero,80b91c <altera_avalon_jtag_uart_write+0x48>
  80ba18:	003fd506 	br	80b970 <altera_avalon_jtag_uart_write+0x9c>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  80ba1c:	28000326 	beq	r5,zero,80ba2c <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80ba20:	00820004 	movi	r2,2048
  80ba24:	148dc83a 	sub	r6,r2,r18
  80ba28:	003fc106 	br	80b930 <altera_avalon_jtag_uart_write+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80ba2c:	0081ffc4 	movi	r2,2047
  80ba30:	148dc83a 	sub	r6,r2,r18
  80ba34:	003fbe06 	br	80b930 <altera_avalon_jtag_uart_write+0x5c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ba38:	2829883a 	mov	r20,r5
  80ba3c:	003fcc06 	br	80b970 <altera_avalon_jtag_uart_write+0x9c>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  80ba40:	b890000c 	andi	r2,r23,16384
  80ba44:	1000021e 	bne	r2,zero,80ba50 <altera_avalon_jtag_uart_write+0x17c>
  80ba48:	00bffec4 	movi	r2,-5
  80ba4c:	003fd406 	br	80b9a0 <altera_avalon_jtag_uart_write+0xcc>
  80ba50:	00bffd44 	movi	r2,-11
  80ba54:	003fd206 	br	80b9a0 <altera_avalon_jtag_uart_write+0xcc>

0080ba58 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80ba58:	02002074 	movhi	r8,129
  80ba5c:	423ff904 	addi	r8,r8,-28
  80ba60:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80ba64:	defffe04 	addi	sp,sp,-8
  80ba68:	3807883a 	mov	r3,r7
  80ba6c:	dfc00115 	stw	ra,4(sp)
  80ba70:	200f883a 	mov	r7,r4
  80ba74:	1000011e 	bne	r2,zero,80ba7c <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
  80ba78:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80ba7c:	008001c4 	movi	r2,7
  80ba80:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80ba84:	2809883a 	mov	r4,r5
  80ba88:	300b883a 	mov	r5,r6
  80ba8c:	01802074 	movhi	r6,129
  80ba90:	31aeaa04 	addi	r6,r6,-17752
  80ba94:	d8000015 	stw	zero,0(sp)
  80ba98:	080bd340 	call	80bd34 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80ba9c:	dfc00117 	ldw	ra,4(sp)
  80baa0:	dec00204 	addi	sp,sp,8
  80baa4:	f800283a 	ret

0080baa8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80baa8:	defffe04 	addi	sp,sp,-8
  80baac:	dfc00115 	stw	ra,4(sp)
  80bab0:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80bab4:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80bab8:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80babc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bac0:	00bfff84 	movi	r2,-2
  80bac4:	8084703a 	and	r2,r16,r2
  80bac8:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  80bacc:	080c0780 	call	80c078 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bad0:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  80bad4:	dfc00117 	ldw	ra,4(sp)
  80bad8:	dc000017 	ldw	r16,0(sp)
  80badc:	dec00204 	addi	sp,sp,8
  80bae0:	f800283a 	ret

0080bae4 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  80bae4:	00802074 	movhi	r2,129
  80bae8:	10bff904 	addi	r2,r2,-28
  80baec:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80baf0:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  80baf4:	00bfde84 	movi	r2,-134
  80baf8:	1800011e 	bne	r3,zero,80bb00 <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
  80bafc:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  80bb00:	00bffa84 	movi	r2,-22
  80bb04:	203ffd26 	beq	r4,zero,80bafc <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
  80bb08:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  80bb0c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb10:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb14:	00bfff84 	movi	r2,-2
  80bb18:	3084703a 	and	r2,r6,r2
  80bb1c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80bb20:	00c02074 	movhi	r3,129
  80bb24:	18fffa04 	addi	r3,r3,-24
  80bb28:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  80bb2c:	20800044 	addi	r2,r4,1
  80bb30:	2885883a 	add	r2,r5,r2
  80bb34:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80bb38:	11000d2e 	bgeu	r2,r4,80bb70 <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
  80bb3c:	00800044 	movi	r2,1
  80bb40:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80bb44:	00802074 	movhi	r2,129
  80bb48:	10b95504 	addi	r2,r2,-6828
  entry->next     = list->next;
  80bb4c:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80bb50:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
  80bb54:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
  80bb58:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
  80bb5c:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  80bb60:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb64:	3001703a 	wrctl	status,r6
  80bb68:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  80bb6c:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  80bb70:	40000405 	stb	zero,16(r8)
  80bb74:	003ff306 	br	80bb44 <alt_alarm_start+0x60>

0080bb78 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80bb78:	f800283a 	ret

0080bb7c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80bb7c:	deffff04 	addi	sp,sp,-4
  80bb80:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80bb84:	20000d26 	beq	r4,zero,80bbbc <alt_dev_llist_insert+0x40>
  80bb88:	20800217 	ldw	r2,8(r4)
  list->next           = entry;
  80bb8c:	000d883a 	mov	r6,zero
  80bb90:	10000a26 	beq	r2,zero,80bbbc <alt_dev_llist_insert+0x40>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  80bb94:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80bb98:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  80bb9c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  80bba0:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
  80bba4:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  80bba8:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  80bbac:	3005883a 	mov	r2,r6
  80bbb0:	dfc00017 	ldw	ra,0(sp)
  80bbb4:	dec00104 	addi	sp,sp,4
  80bbb8:	f800283a 	ret
  80bbbc:	00802074 	movhi	r2,129
  80bbc0:	10b95204 	addi	r2,r2,-6840
  80bbc4:	10800017 	ldw	r2,0(r2)
  80bbc8:	00c02074 	movhi	r3,129
  80bbcc:	18fff404 	addi	r3,r3,-48
  80bbd0:	10000226 	beq	r2,zero,80bbdc <alt_dev_llist_insert+0x60>
  80bbd4:	103ee83a 	callr	r2
  80bbd8:	1007883a 	mov	r3,r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  80bbdc:	01bffa84 	movi	r6,-22
  80bbe0:	00800584 	movi	r2,22
  80bbe4:	18800015 	stw	r2,0(r3)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  80bbe8:	3005883a 	mov	r2,r6
  80bbec:	dfc00017 	ldw	ra,0(sp)
  80bbf0:	dec00104 	addi	sp,sp,4
  80bbf4:	f800283a 	ret

0080bbf8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80bbf8:	defffd04 	addi	sp,sp,-12
  80bbfc:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80bc00:	00802074 	movhi	r2,129
  80bc04:	10b1e404 	addi	r2,r2,-14448
  80bc08:	04402074 	movhi	r17,129
  80bc0c:	8c71e404 	addi	r17,r17,-14448
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80bc10:	dfc00215 	stw	ra,8(sp)
  80bc14:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80bc18:	14400536 	bltu	r2,r17,80bc30 <_do_ctors+0x38>
  80bc1c:	1021883a 	mov	r16,r2
        (*ctor) (); 
  80bc20:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80bc24:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
  80bc28:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80bc2c:	847ffc2e 	bgeu	r16,r17,80bc20 <_do_ctors+0x28>
        (*ctor) (); 
}
  80bc30:	dfc00217 	ldw	ra,8(sp)
  80bc34:	dc400117 	ldw	r17,4(sp)
  80bc38:	dc000017 	ldw	r16,0(sp)
  80bc3c:	dec00304 	addi	sp,sp,12
  80bc40:	f800283a 	ret

0080bc44 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80bc44:	defffd04 	addi	sp,sp,-12
  80bc48:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80bc4c:	00802074 	movhi	r2,129
  80bc50:	10b1e404 	addi	r2,r2,-14448
  80bc54:	04402074 	movhi	r17,129
  80bc58:	8c71e504 	addi	r17,r17,-14444
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80bc5c:	dfc00215 	stw	ra,8(sp)
  80bc60:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80bc64:	14400536 	bltu	r2,r17,80bc7c <_do_dtors+0x38>
  80bc68:	1021883a 	mov	r16,r2
        (*dtor) (); 
  80bc6c:	80800017 	ldw	r2,0(r16)

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80bc70:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
  80bc74:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80bc78:	847ffc2e 	bgeu	r16,r17,80bc6c <_do_dtors+0x28>
        (*dtor) (); 
}
  80bc7c:	dfc00217 	ldw	ra,8(sp)
  80bc80:	dc400117 	ldw	r17,4(sp)
  80bc84:	dc000017 	ldw	r16,0(sp)
  80bc88:	dec00304 	addi	sp,sp,12
  80bc8c:	f800283a 	ret

0080bc90 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80bc90:	0009883a 	mov	r4,zero
  80bc94:	01480004 	movi	r5,8192
  80bc98:	080c30c1 	jmpi	80c30c <alt_icache_flush>

0080bc9c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80bc9c:	000530fa 	rdctl	r2,ienable
  80bca0:	00c00044 	movi	r3,1
  80bca4:	1946983a 	sll	r3,r3,r5
  80bca8:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
  80bcac:	1004c03a 	cmpne	r2,r2,zero
  80bcb0:	f800283a 	ret

0080bcb4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bcb4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bcb8:	00bfff84 	movi	r2,-2
  80bcbc:	3084703a 	and	r2,r6,r2
  80bcc0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  80bcc4:	01002074 	movhi	r4,129
  80bcc8:	213ff804 	addi	r4,r4,-32
  80bccc:	00800044 	movi	r2,1
  80bcd0:	20c00017 	ldw	r3,0(r4)
  80bcd4:	1144983a 	sll	r2,r2,r5
  80bcd8:	10c4b03a 	or	r2,r2,r3
  80bcdc:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80bce0:	20c00017 	ldw	r3,0(r4)
  80bce4:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bce8:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  80bcec:	0005883a 	mov	r2,zero
  80bcf0:	f800283a 	ret

0080bcf4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bcf4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bcf8:	00bfff84 	movi	r2,-2
  80bcfc:	3084703a 	and	r2,r6,r2
  80bd00:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  80bd04:	01002074 	movhi	r4,129
  80bd08:	213ff804 	addi	r4,r4,-32
  80bd0c:	00bfff84 	movi	r2,-2
  80bd10:	20c00017 	ldw	r3,0(r4)
  80bd14:	1144183a 	rol	r2,r2,r5
  80bd18:	10c4703a 	and	r2,r2,r3
  80bd1c:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80bd20:	20c00017 	ldw	r3,0(r4)
  80bd24:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bd28:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  80bd2c:	0005883a 	mov	r2,zero
  80bd30:	f800283a 	ret

0080bd34 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80bd34:	080bd381 	jmpi	80bd38 <alt_iic_isr_register>

0080bd38 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80bd38:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80bd3c:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80bd40:	dfc00115 	stw	ra,4(sp)
  80bd44:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80bd48:	023ffa84 	movi	r8,-22
  80bd4c:	1140050e 	bge	r2,r5,80bd64 <alt_iic_isr_register+0x2c>

    alt_irq_enable_all(status);
  }

  return rc; 
}
  80bd50:	4005883a 	mov	r2,r8
  80bd54:	dfc00117 	ldw	ra,4(sp)
  80bd58:	dc000017 	ldw	r16,0(sp)
  80bd5c:	dec00204 	addi	sp,sp,8
  80bd60:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bd64:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bd68:	00bfff84 	movi	r2,-2
  80bd6c:	8084703a 	and	r2,r16,r2
  80bd70:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  80bd74:	280690fa 	slli	r3,r5,3
  80bd78:	00802074 	movhi	r2,129
  80bd7c:	10800504 	addi	r2,r2,20
  80bd80:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = isr_context;
  80bd84:	19c00115 	stw	r7,4(r3)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  80bd88:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80bd8c:	30000826 	beq	r6,zero,80bdb0 <alt_iic_isr_register+0x78>
  80bd90:	080bcb40 	call	80bcb4 <alt_ic_irq_enable>
  80bd94:	1011883a 	mov	r8,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bd98:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  80bd9c:	4005883a 	mov	r2,r8
  80bda0:	dfc00117 	ldw	ra,4(sp)
  80bda4:	dc000017 	ldw	r16,0(sp)
  80bda8:	dec00204 	addi	sp,sp,8
  80bdac:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80bdb0:	080bcf40 	call	80bcf4 <alt_ic_irq_disable>
  80bdb4:	1011883a 	mov	r8,r2
  80bdb8:	8001703a 	wrctl	status,r16
  80bdbc:	003ff706 	br	80bd9c <alt_iic_isr_register+0x64>

0080bdc0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80bdc0:	defffd04 	addi	sp,sp,-12
  80bdc4:	dc400115 	stw	r17,4(sp)
  80bdc8:	dc000015 	stw	r16,0(sp)
  80bdcc:	3023883a 	mov	r17,r6
  80bdd0:	2821883a 	mov	r16,r5

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  80bdd4:	01807fc4 	movi	r6,511
  80bdd8:	01400044 	movi	r5,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80bddc:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  80bde0:	080bec40 	call	80bec4 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80bde4:	10c00324 	muli	r3,r2,12
  80bde8:	01802074 	movhi	r6,129
  80bdec:	31b4cf04 	addi	r6,r6,-11460
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  80bdf0:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80bdf4:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  80bdf8:	10000716 	blt	r2,zero,80be18 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80bdfc:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be00:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  80be04:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80be08:	30800515 	stw	r2,20(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be0c:	30c00315 	stw	r3,12(r6)
    fd->priv     = alt_fd_list[old].priv;
  80be10:	31400415 	stw	r5,16(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  80be14:	080b1f40 	call	80b1f4 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  80be18:	8009883a 	mov	r4,r16
  80be1c:	000b883a 	mov	r5,zero
  80be20:	01807fc4 	movi	r6,511
  80be24:	080bec40 	call	80bec4 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be28:	10c00324 	muli	r3,r2,12
  80be2c:	01802074 	movhi	r6,129
  80be30:	31b4cf04 	addi	r6,r6,-11460
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  80be34:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be38:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  80be3c:	10000716 	blt	r2,zero,80be5c <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80be40:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be44:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  80be48:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80be4c:	30800215 	stw	r2,8(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be50:	30c00015 	stw	r3,0(r6)
    fd->priv     = alt_fd_list[old].priv;
  80be54:	31400115 	stw	r5,4(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  80be58:	080b1f40 	call	80b1f4 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
  80be5c:	8809883a 	mov	r4,r17
  80be60:	01400044 	movi	r5,1
  80be64:	01807fc4 	movi	r6,511
  80be68:	080bec40 	call	80bec4 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be6c:	10c00324 	muli	r3,r2,12
  80be70:	01802074 	movhi	r6,129
  80be74:	31b4cf04 	addi	r6,r6,-11460
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  80be78:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be7c:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  80be80:	10000b16 	blt	r2,zero,80beb0 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80be84:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be88:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
  80be8c:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80be90:	30800815 	stw	r2,32(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  80be94:	30c00615 	stw	r3,24(r6)
    fd->priv     = alt_fd_list[old].priv;
  80be98:	31400715 	stw	r5,28(r6)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  80be9c:	dfc00217 	ldw	ra,8(sp)
  80bea0:	dc400117 	ldw	r17,4(sp)
  80bea4:	dc000017 	ldw	r16,0(sp)
  80bea8:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  80beac:	080b1f41 	jmpi	80b1f4 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
  80beb0:	dfc00217 	ldw	ra,8(sp)
  80beb4:	dc400117 	ldw	r17,4(sp)
  80beb8:	dc000017 	ldw	r16,0(sp)
  80bebc:	dec00304 	addi	sp,sp,12
  80bec0:	f800283a 	ret

0080bec4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80bec4:	defff904 	addi	sp,sp,-28
  80bec8:	dcc00315 	stw	r19,12(sp)
  80becc:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80bed0:	01402074 	movhi	r5,129
  80bed4:	29794f04 	addi	r5,r5,-6852
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80bed8:	dd400515 	stw	r21,20(sp)
  80bedc:	dd000415 	stw	r20,16(sp)
  80bee0:	dc400115 	stw	r17,4(sp)
  80bee4:	dfc00615 	stw	ra,24(sp)
  80bee8:	dc800215 	stw	r18,8(sp)
  80beec:	dc000015 	stw	r16,0(sp)
  80bef0:	302b883a 	mov	r21,r6
  80bef4:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80bef8:	080c1680 	call	80c168 <alt_find_dev>
  80befc:	1023883a 	mov	r17,r2
  80bf00:	10004726 	beq	r2,zero,80c020 <open+0x15c>
  80bf04:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  80bf08:	8809883a 	mov	r4,r17
  80bf0c:	080c2ac0 	call	80c2ac <alt_get_fd>
  80bf10:	1021883a 	mov	r16,r2
  80bf14:	10002d16 	blt	r2,zero,80bfcc <open+0x108>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  80bf18:	10800324 	muli	r2,r2,12
  80bf1c:	01402074 	movhi	r5,129
  80bf20:	2974cf04 	addi	r5,r5,-11460
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80bf24:	00d00034 	movhi	r3,16384
  80bf28:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  80bf2c:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80bf30:	98c6703a 	and	r3,r19,r3
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80bf34:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80bf38:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80bf3c:	1000121e 	bne	r2,zero,80bf88 <open+0xc4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80bf40:	00802074 	movhi	r2,129
  80bf44:	10b95104 	addi	r2,r2,-6844
  80bf48:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80bf4c:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80bf50:	18900034 	orhi	r2,r3,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80bf54:	0007883a 	mov	r3,zero

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80bf58:	20800215 	stw	r2,8(r4)
  80bf5c:	00000206 	br	80bf68 <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80bf60:	29400304 	addi	r5,r5,12
  80bf64:	38c00836 	bltu	r7,r3,80bf88 <open+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80bf68:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80bf6c:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80bf70:	11bffb1e 	bne	r2,r6,80bf60 <open+0x9c>
  80bf74:	28800217 	ldw	r2,8(r5)
  80bf78:	103ff90e 	bge	r2,zero,80bf60 <open+0x9c>
  80bf7c:	293ff826 	beq	r5,r4,80bf60 <open+0x9c>
  80bf80:	04400344 	movi	r17,13
  80bf84:	00001206 	br	80bfd0 <open+0x10c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80bf88:	88800317 	ldw	r2,12(r17)
  80bf8c:	10000526 	beq	r2,zero,80bfa4 <open+0xe0>
  80bf90:	a00b883a 	mov	r5,r20
  80bf94:	980d883a 	mov	r6,r19
  80bf98:	a80f883a 	mov	r7,r21
  80bf9c:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80bfa0:	10001516 	blt	r2,zero,80bff8 <open+0x134>
  }
  
  /* return the reference upon success */

  return index;
}
  80bfa4:	8005883a 	mov	r2,r16
  80bfa8:	dfc00617 	ldw	ra,24(sp)
  80bfac:	dd400517 	ldw	r21,20(sp)
  80bfb0:	dd000417 	ldw	r20,16(sp)
  80bfb4:	dcc00317 	ldw	r19,12(sp)
  80bfb8:	dc800217 	ldw	r18,8(sp)
  80bfbc:	dc400117 	ldw	r17,4(sp)
  80bfc0:	dc000017 	ldw	r16,0(sp)
  80bfc4:	dec00704 	addi	sp,sp,28
  80bfc8:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  80bfcc:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  80bfd0:	8009883a 	mov	r4,r16
  80bfd4:	080b1f40 	call	80b1f4 <alt_release_fd>
  80bfd8:	00802074 	movhi	r2,129
  80bfdc:	10b95204 	addi	r2,r2,-6840
  80bfe0:	10800017 	ldw	r2,0(r2)
  80bfe4:	10000b26 	beq	r2,zero,80c014 <open+0x150>
  80bfe8:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  80bfec:	043fffc4 	movi	r16,-1
  80bff0:	14400015 	stw	r17,0(r2)
  80bff4:	003feb06 	br	80bfa4 <open+0xe0>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  80bff8:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80bffc:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
  80c000:	080b1f40 	call	80b1f4 <alt_release_fd>
  80c004:	00802074 	movhi	r2,129
  80c008:	10b95204 	addi	r2,r2,-6840
  80c00c:	10800017 	ldw	r2,0(r2)
  80c010:	103ff51e 	bne	r2,zero,80bfe8 <open+0x124>
  80c014:	00802074 	movhi	r2,129
  80c018:	10bff404 	addi	r2,r2,-48
  80c01c:	003ff306 	br	80bfec <open+0x128>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80c020:	a009883a 	mov	r4,r20
  80c024:	080c1fc0 	call	80c1fc <alt_find_file>
  80c028:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80c02c:	10000226 	beq	r2,zero,80c038 <open+0x174>
  80c030:	04800044 	movi	r18,1
  80c034:	003fb406 	br	80bf08 <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
  80c038:	043fffc4 	movi	r16,-1
  80c03c:	044004c4 	movi	r17,19
  80c040:	003fe306 	br	80bfd0 <open+0x10c>

0080c044 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c044:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c048:	00bfff84 	movi	r2,-2
  80c04c:	3084703a 	and	r2,r6,r2
  80c050:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80c054:	21400017 	ldw	r5,0(r4)
  80c058:	20800117 	ldw	r2,4(r4)
  80c05c:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
  80c060:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80c064:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  80c068:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  80c06c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c070:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  80c074:	f800283a 	ret

0080c078 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c078:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c07c:	d0a6b317 	ldw	r2,-25908(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c080:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80c084:	d4200e17 	ldw	r16,-32712(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c088:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c08c:	10800044 	addi	r2,r2,1
  80c090:	d4a00e04 	addi	r18,gp,-32712
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c094:	dfc00315 	stw	ra,12(sp)
  80c098:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c09c:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c0a0:	84800d26 	beq	r16,r18,80c0d8 <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80c0a4:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  80c0a8:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80c0ac:	10000326 	beq	r2,zero,80c0bc <alt_tick+0x44>
  80c0b0:	d0a6b317 	ldw	r2,-25908(gp)
  80c0b4:	1000011e 	bne	r2,zero,80c0bc <alt_tick+0x44>
    {
      alarm->rollover = 0;
  80c0b8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80c0bc:	d0e6b317 	ldw	r3,-25908(gp)
  80c0c0:	80800217 	ldw	r2,8(r16)
  80c0c4:	18800236 	bltu	r3,r2,80c0d0 <alt_tick+0x58>
  80c0c8:	80800403 	ldbu	r2,16(r16)
  80c0cc:	10000826 	beq	r2,zero,80c0f0 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  80c0d0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c0d4:	84bff31e 	bne	r16,r18,80c0a4 <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80c0d8:	dfc00317 	ldw	ra,12(sp)
  80c0dc:	dc800217 	ldw	r18,8(sp)
  80c0e0:	dc400117 	ldw	r17,4(sp)
  80c0e4:	dc000017 	ldw	r16,0(sp)
  80c0e8:	dec00404 	addi	sp,sp,16
  80c0ec:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  80c0f0:	81000517 	ldw	r4,20(r16)
  80c0f4:	80c00317 	ldw	r3,12(r16)
  80c0f8:	183ee83a 	callr	r3
  80c0fc:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80c100:	10000926 	beq	r2,zero,80c128 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  80c104:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80c108:	d0e6b317 	ldw	r3,-25908(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  80c10c:	2085883a 	add	r2,r4,r2
  80c110:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80c114:	10ffee2e 	bgeu	r2,r3,80c0d0 <alt_tick+0x58>
        {
          alarm->rollover = 1;
  80c118:	00800044 	movi	r2,1
  80c11c:	80800405 	stb	r2,16(r16)
  80c120:	8821883a 	mov	r16,r17
  80c124:	003feb06 	br	80c0d4 <alt_tick+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c128:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c12c:	00bfff84 	movi	r2,-2
  80c130:	2884703a 	and	r2,r5,r2
  80c134:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80c138:	81000017 	ldw	r4,0(r16)
  80c13c:	80800117 	ldw	r2,4(r16)
  80c140:	20800115 	stw	r2,4(r4)
  entry->previous->next = entry->next;
  80c144:	80c00117 	ldw	r3,4(r16)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80c148:	84000115 	stw	r16,4(r16)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  80c14c:	19000015 	stw	r4,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  80c150:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c154:	2801703a 	wrctl	status,r5
  80c158:	8821883a 	mov	r16,r17
  80c15c:	003fdd06 	br	80c0d4 <alt_tick+0x5c>

0080c160 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  80c160:	000170fa 	wrctl	ienable,zero
}
  80c164:	f800283a 	ret

0080c168 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80c168:	defffb04 	addi	sp,sp,-20
  80c16c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  80c170:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80c174:	dcc00315 	stw	r19,12(sp)
  80c178:	dc400115 	stw	r17,4(sp)
  80c17c:	dfc00415 	stw	ra,16(sp)
  80c180:	2823883a 	mov	r17,r5
  80c184:	dc800215 	stw	r18,8(sp)
  80c188:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  80c18c:	08016800 	call	801680 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c190:	84401126 	beq	r16,r17,80c1d8 <alt_find_dev+0x70>
  80c194:	14800044 	addi	r18,r2,1
  80c198:	00000206 	br	80c1a4 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  80c19c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c1a0:	84400d26 	beq	r16,r17,80c1d8 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80c1a4:	81000217 	ldw	r4,8(r16)
  80c1a8:	980b883a 	mov	r5,r19
  80c1ac:	900d883a 	mov	r6,r18
  80c1b0:	080c4200 	call	80c420 <memcmp>
  80c1b4:	103ff91e 	bne	r2,zero,80c19c <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
  80c1b8:	8005883a 	mov	r2,r16
  80c1bc:	dfc00417 	ldw	ra,16(sp)
  80c1c0:	dcc00317 	ldw	r19,12(sp)
  80c1c4:	dc800217 	ldw	r18,8(sp)
  80c1c8:	dc400117 	ldw	r17,4(sp)
  80c1cc:	dc000017 	ldw	r16,0(sp)
  80c1d0:	dec00504 	addi	sp,sp,20
  80c1d4:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c1d8:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
  80c1dc:	8005883a 	mov	r2,r16
  80c1e0:	dfc00417 	ldw	ra,16(sp)
  80c1e4:	dcc00317 	ldw	r19,12(sp)
  80c1e8:	dc800217 	ldw	r18,8(sp)
  80c1ec:	dc400117 	ldw	r17,4(sp)
  80c1f0:	dc000017 	ldw	r16,0(sp)
  80c1f4:	dec00504 	addi	sp,sp,20
  80c1f8:	f800283a 	ret

0080c1fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80c1fc:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80c200:	00802074 	movhi	r2,129
  80c204:	10b94d04 	addi	r2,r2,-6860
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80c208:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80c20c:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80c210:	dd000415 	stw	r20,16(sp)
  80c214:	dc800215 	stw	r18,8(sp)
  80c218:	dfc00515 	stw	ra,20(sp)
  80c21c:	dcc00315 	stw	r19,12(sp)
  80c220:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c224:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80c228:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c22c:	80801526 	beq	r16,r2,80c284 <alt_find_file+0x88>
  80c230:	04c00bc4 	movi	r19,47
  80c234:	00000806 	br	80c258 <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80c238:	3485883a 	add	r2,r6,r18
  80c23c:	10800007 	ldb	r2,0(r2)
  80c240:	14c00126 	beq	r2,r19,80c248 <alt_find_file+0x4c>
  80c244:	1000021e 	bne	r2,zero,80c250 <alt_find_file+0x54>
  80c248:	080c4200 	call	80c420 <memcmp>
  80c24c:	10000e26 	beq	r2,zero,80c288 <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  80c250:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c254:	85000b26 	beq	r16,r20,80c284 <alt_find_file+0x88>
  {
    len = strlen(next->name);
  80c258:	84400217 	ldw	r17,8(r16)
  80c25c:	8809883a 	mov	r4,r17
  80c260:	08016800 	call	801680 <strlen>
  80c264:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  80c268:	8885883a 	add	r2,r17,r2
  80c26c:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80c270:	8809883a 	mov	r4,r17
  80c274:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  80c278:	1cffef1e 	bne	r3,r19,80c238 <alt_find_file+0x3c>
    {
      len -= 1;
  80c27c:	31bfffc4 	addi	r6,r6,-1
  80c280:	003fed06 	br	80c238 <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c284:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
  80c288:	8005883a 	mov	r2,r16
  80c28c:	dfc00517 	ldw	ra,20(sp)
  80c290:	dd000417 	ldw	r20,16(sp)
  80c294:	dcc00317 	ldw	r19,12(sp)
  80c298:	dc800217 	ldw	r18,8(sp)
  80c29c:	dc400117 	ldw	r17,4(sp)
  80c2a0:	dc000017 	ldw	r16,0(sp)
  80c2a4:	dec00604 	addi	sp,sp,24
  80c2a8:	f800283a 	ret

0080c2ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80c2ac:	01402074 	movhi	r5,129
  80c2b0:	2974cf04 	addi	r5,r5,-11460
  80c2b4:	0007883a 	mov	r3,zero
  80c2b8:	01c00804 	movi	r7,32
  80c2bc:	280d883a 	mov	r6,r5
  80c2c0:	00000306 	br	80c2d0 <alt_get_fd+0x24>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c2c4:	18c00044 	addi	r3,r3,1
  80c2c8:	31800304 	addi	r6,r6,12
  80c2cc:	19c00d26 	beq	r3,r7,80c304 <alt_get_fd+0x58>
  {
    if (!alt_fd_list[i].dev)
  80c2d0:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c2d4:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
  80c2d8:	103ffa1e 	bne	r2,zero,80c2c4 <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  80c2dc:	01402074 	movhi	r5,129
  80c2e0:	29795104 	addi	r5,r5,-6844
  80c2e4:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  80c2e8:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
  80c2ec:	10c0030e 	bge	r2,r3,80c2fc <alt_get_fd+0x50>
      {
        alt_max_fd = i;
  80c2f0:	1805883a 	mov	r2,r3
  80c2f4:	28c00015 	stw	r3,0(r5)
  80c2f8:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  80c2fc:	1805883a 	mov	r2,r3
  80c300:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c304:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  80c308:	f800283a 	ret

0080c30c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
  80c30c:	00880004 	movi	r2,8192
  80c310:	2007883a 	mov	r3,r4
  80c314:	1140012e 	bgeu	r2,r5,80c31c <alt_icache_flush+0x10>
  80c318:	100b883a 	mov	r5,r2
  80c31c:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80c320:	1940032e 	bgeu	r3,r5,80c330 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80c324:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80c328:	18c00804 	addi	r3,r3,32
  80c32c:	197ffd36 	bltu	r3,r5,80c324 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80c330:	208007cc 	andi	r2,r4,31
  80c334:	10000126 	beq	r2,zero,80c33c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80c338:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80c33c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80c340:	f800283a 	ret

0080c344 <atexit>:
  80c344:	200b883a 	mov	r5,r4
  80c348:	000d883a 	mov	r6,zero
  80c34c:	0009883a 	mov	r4,zero
  80c350:	000f883a 	mov	r7,zero
  80c354:	080c4941 	jmpi	80c494 <__register_exitproc>

0080c358 <exit>:
  80c358:	defffe04 	addi	sp,sp,-8
  80c35c:	000b883a 	mov	r5,zero
  80c360:	dc000015 	stw	r16,0(sp)
  80c364:	dfc00115 	stw	ra,4(sp)
  80c368:	2021883a 	mov	r16,r4
  80c36c:	080c5cc0 	call	80c5cc <__call_exitprocs>
  80c370:	00802074 	movhi	r2,129
  80c374:	10b94804 	addi	r2,r2,-6880
  80c378:	11000017 	ldw	r4,0(r2)
  80c37c:	20800f17 	ldw	r2,60(r4)
  80c380:	10000126 	beq	r2,zero,80c388 <exit+0x30>
  80c384:	103ee83a 	callr	r2
  80c388:	8009883a 	mov	r4,r16
  80c38c:	080c77c0 	call	80c77c <_exit>

0080c390 <_fputs_r>:
  80c390:	defff804 	addi	sp,sp,-32
  80c394:	dc000515 	stw	r16,20(sp)
  80c398:	2021883a 	mov	r16,r4
  80c39c:	2809883a 	mov	r4,r5
  80c3a0:	dc400615 	stw	r17,24(sp)
  80c3a4:	dfc00715 	stw	ra,28(sp)
  80c3a8:	3023883a 	mov	r17,r6
  80c3ac:	d9400015 	stw	r5,0(sp)
  80c3b0:	08016800 	call	801680 <strlen>
  80c3b4:	00c00044 	movi	r3,1
  80c3b8:	d8800115 	stw	r2,4(sp)
  80c3bc:	d8c00315 	stw	r3,12(sp)
  80c3c0:	d8800415 	stw	r2,16(sp)
  80c3c4:	dec00215 	stw	sp,8(sp)
  80c3c8:	80000326 	beq	r16,zero,80c3d8 <_fputs_r+0x48>
  80c3cc:	80800e17 	ldw	r2,56(r16)
  80c3d0:	8009883a 	mov	r4,r16
  80c3d4:	10000926 	beq	r2,zero,80c3fc <_fputs_r+0x6c>
  80c3d8:	8009883a 	mov	r4,r16
  80c3dc:	880b883a 	mov	r5,r17
  80c3e0:	d9800204 	addi	r6,sp,8
  80c3e4:	080630c0 	call	80630c <__sfvwrite_r>
  80c3e8:	dfc00717 	ldw	ra,28(sp)
  80c3ec:	dc400617 	ldw	r17,24(sp)
  80c3f0:	dc000517 	ldw	r16,20(sp)
  80c3f4:	dec00804 	addi	sp,sp,32
  80c3f8:	f800283a 	ret
  80c3fc:	0805c740 	call	805c74 <__sinit>
  80c400:	003ff506 	br	80c3d8 <_fputs_r+0x48>

0080c404 <fputs>:
  80c404:	01802074 	movhi	r6,129
  80c408:	31b94704 	addi	r6,r6,-6884
  80c40c:	2007883a 	mov	r3,r4
  80c410:	31000017 	ldw	r4,0(r6)
  80c414:	280d883a 	mov	r6,r5
  80c418:	180b883a 	mov	r5,r3
  80c41c:	080c3901 	jmpi	80c390 <_fputs_r>

0080c420 <memcmp>:
  80c420:	00c000c4 	movi	r3,3
  80c424:	1980032e 	bgeu	r3,r6,80c434 <memcmp+0x14>
  80c428:	2144b03a 	or	r2,r4,r5
  80c42c:	10c4703a 	and	r2,r2,r3
  80c430:	10000f26 	beq	r2,zero,80c470 <memcmp+0x50>
  80c434:	31ffffc4 	addi	r7,r6,-1
  80c438:	3000061e 	bne	r6,zero,80c454 <memcmp+0x34>
  80c43c:	00000a06 	br	80c468 <memcmp+0x48>
  80c440:	39ffffc4 	addi	r7,r7,-1
  80c444:	00bfffc4 	movi	r2,-1
  80c448:	21000044 	addi	r4,r4,1
  80c44c:	29400044 	addi	r5,r5,1
  80c450:	38800526 	beq	r7,r2,80c468 <memcmp+0x48>
  80c454:	20c00003 	ldbu	r3,0(r4)
  80c458:	28800003 	ldbu	r2,0(r5)
  80c45c:	18bff826 	beq	r3,r2,80c440 <memcmp+0x20>
  80c460:	1885c83a 	sub	r2,r3,r2
  80c464:	f800283a 	ret
  80c468:	0005883a 	mov	r2,zero
  80c46c:	f800283a 	ret
  80c470:	180f883a 	mov	r7,r3
  80c474:	20c00017 	ldw	r3,0(r4)
  80c478:	28800017 	ldw	r2,0(r5)
  80c47c:	18bfed1e 	bne	r3,r2,80c434 <memcmp+0x14>
  80c480:	31bfff04 	addi	r6,r6,-4
  80c484:	21000104 	addi	r4,r4,4
  80c488:	29400104 	addi	r5,r5,4
  80c48c:	39bff936 	bltu	r7,r6,80c474 <memcmp+0x54>
  80c490:	003fe806 	br	80c434 <memcmp+0x14>

0080c494 <__register_exitproc>:
  80c494:	defffa04 	addi	sp,sp,-24
  80c498:	00802074 	movhi	r2,129
  80c49c:	10b94804 	addi	r2,r2,-6880
  80c4a0:	dc000015 	stw	r16,0(sp)
  80c4a4:	14000017 	ldw	r16,0(r2)
  80c4a8:	dd000415 	stw	r20,16(sp)
  80c4ac:	2829883a 	mov	r20,r5
  80c4b0:	81405217 	ldw	r5,328(r16)
  80c4b4:	dcc00315 	stw	r19,12(sp)
  80c4b8:	dc800215 	stw	r18,8(sp)
  80c4bc:	dc400115 	stw	r17,4(sp)
  80c4c0:	dfc00515 	stw	ra,20(sp)
  80c4c4:	2023883a 	mov	r17,r4
  80c4c8:	3027883a 	mov	r19,r6
  80c4cc:	3825883a 	mov	r18,r7
  80c4d0:	28002526 	beq	r5,zero,80c568 <__register_exitproc+0xd4>
  80c4d4:	29000117 	ldw	r4,4(r5)
  80c4d8:	008007c4 	movi	r2,31
  80c4dc:	11002716 	blt	r2,r4,80c57c <__register_exitproc+0xe8>
  80c4e0:	8800101e 	bne	r17,zero,80c524 <__register_exitproc+0x90>
  80c4e4:	2105883a 	add	r2,r4,r4
  80c4e8:	1085883a 	add	r2,r2,r2
  80c4ec:	20c00044 	addi	r3,r4,1
  80c4f0:	1145883a 	add	r2,r2,r5
  80c4f4:	0009883a 	mov	r4,zero
  80c4f8:	15000215 	stw	r20,8(r2)
  80c4fc:	28c00115 	stw	r3,4(r5)
  80c500:	2005883a 	mov	r2,r4
  80c504:	dfc00517 	ldw	ra,20(sp)
  80c508:	dd000417 	ldw	r20,16(sp)
  80c50c:	dcc00317 	ldw	r19,12(sp)
  80c510:	dc800217 	ldw	r18,8(sp)
  80c514:	dc400117 	ldw	r17,4(sp)
  80c518:	dc000017 	ldw	r16,0(sp)
  80c51c:	dec00604 	addi	sp,sp,24
  80c520:	f800283a 	ret
  80c524:	29802204 	addi	r6,r5,136
  80c528:	00800044 	movi	r2,1
  80c52c:	110e983a 	sll	r7,r2,r4
  80c530:	30c04017 	ldw	r3,256(r6)
  80c534:	2105883a 	add	r2,r4,r4
  80c538:	1085883a 	add	r2,r2,r2
  80c53c:	1185883a 	add	r2,r2,r6
  80c540:	19c6b03a 	or	r3,r3,r7
  80c544:	14802015 	stw	r18,128(r2)
  80c548:	14c00015 	stw	r19,0(r2)
  80c54c:	00800084 	movi	r2,2
  80c550:	30c04015 	stw	r3,256(r6)
  80c554:	88bfe31e 	bne	r17,r2,80c4e4 <__register_exitproc+0x50>
  80c558:	30804117 	ldw	r2,260(r6)
  80c55c:	11c4b03a 	or	r2,r2,r7
  80c560:	30804115 	stw	r2,260(r6)
  80c564:	003fdf06 	br	80c4e4 <__register_exitproc+0x50>
  80c568:	00802074 	movhi	r2,129
  80c56c:	10804504 	addi	r2,r2,276
  80c570:	100b883a 	mov	r5,r2
  80c574:	80805215 	stw	r2,328(r16)
  80c578:	003fd606 	br	80c4d4 <__register_exitproc+0x40>
  80c57c:	00800034 	movhi	r2,0
  80c580:	10800004 	addi	r2,r2,0
  80c584:	1000021e 	bne	r2,zero,80c590 <__register_exitproc+0xfc>
  80c588:	013fffc4 	movi	r4,-1
  80c58c:	003fdc06 	br	80c500 <__register_exitproc+0x6c>
  80c590:	01006404 	movi	r4,400
  80c594:	103ee83a 	callr	r2
  80c598:	1007883a 	mov	r3,r2
  80c59c:	103ffa26 	beq	r2,zero,80c588 <__register_exitproc+0xf4>
  80c5a0:	80805217 	ldw	r2,328(r16)
  80c5a4:	180b883a 	mov	r5,r3
  80c5a8:	18000115 	stw	zero,4(r3)
  80c5ac:	18800015 	stw	r2,0(r3)
  80c5b0:	80c05215 	stw	r3,328(r16)
  80c5b4:	18006215 	stw	zero,392(r3)
  80c5b8:	18006315 	stw	zero,396(r3)
  80c5bc:	0009883a 	mov	r4,zero
  80c5c0:	883fc826 	beq	r17,zero,80c4e4 <__register_exitproc+0x50>
  80c5c4:	003fd706 	br	80c524 <__register_exitproc+0x90>

0080c5c8 <register_fini>:
  80c5c8:	f800283a 	ret

0080c5cc <__call_exitprocs>:
  80c5cc:	00802074 	movhi	r2,129
  80c5d0:	10b94804 	addi	r2,r2,-6880
  80c5d4:	10800017 	ldw	r2,0(r2)
  80c5d8:	defff304 	addi	sp,sp,-52
  80c5dc:	df000b15 	stw	fp,44(sp)
  80c5e0:	d8800115 	stw	r2,4(sp)
  80c5e4:	00800034 	movhi	r2,0
  80c5e8:	10800004 	addi	r2,r2,0
  80c5ec:	1005003a 	cmpeq	r2,r2,zero
  80c5f0:	d8800215 	stw	r2,8(sp)
  80c5f4:	d8800117 	ldw	r2,4(sp)
  80c5f8:	dd400815 	stw	r21,32(sp)
  80c5fc:	dd000715 	stw	r20,28(sp)
  80c600:	10805204 	addi	r2,r2,328
  80c604:	dfc00c15 	stw	ra,48(sp)
  80c608:	ddc00a15 	stw	r23,40(sp)
  80c60c:	dd800915 	stw	r22,36(sp)
  80c610:	dcc00615 	stw	r19,24(sp)
  80c614:	dc800515 	stw	r18,20(sp)
  80c618:	dc400415 	stw	r17,16(sp)
  80c61c:	dc000315 	stw	r16,12(sp)
  80c620:	282b883a 	mov	r21,r5
  80c624:	2039883a 	mov	fp,r4
  80c628:	d8800015 	stw	r2,0(sp)
  80c62c:	2829003a 	cmpeq	r20,r5,zero
  80c630:	d8800117 	ldw	r2,4(sp)
  80c634:	14405217 	ldw	r17,328(r2)
  80c638:	88001026 	beq	r17,zero,80c67c <__call_exitprocs+0xb0>
  80c63c:	ddc00017 	ldw	r23,0(sp)
  80c640:	88800117 	ldw	r2,4(r17)
  80c644:	8c802204 	addi	r18,r17,136
  80c648:	143fffc4 	addi	r16,r2,-1
  80c64c:	80000916 	blt	r16,zero,80c674 <__call_exitprocs+0xa8>
  80c650:	05bfffc4 	movi	r22,-1
  80c654:	a000151e 	bne	r20,zero,80c6ac <__call_exitprocs+0xe0>
  80c658:	8409883a 	add	r4,r16,r16
  80c65c:	2105883a 	add	r2,r4,r4
  80c660:	1485883a 	add	r2,r2,r18
  80c664:	10c02017 	ldw	r3,128(r2)
  80c668:	a8c01126 	beq	r21,r3,80c6b0 <__call_exitprocs+0xe4>
  80c66c:	843fffc4 	addi	r16,r16,-1
  80c670:	85bff81e 	bne	r16,r22,80c654 <__call_exitprocs+0x88>
  80c674:	d8800217 	ldw	r2,8(sp)
  80c678:	10003126 	beq	r2,zero,80c740 <__call_exitprocs+0x174>
  80c67c:	dfc00c17 	ldw	ra,48(sp)
  80c680:	df000b17 	ldw	fp,44(sp)
  80c684:	ddc00a17 	ldw	r23,40(sp)
  80c688:	dd800917 	ldw	r22,36(sp)
  80c68c:	dd400817 	ldw	r21,32(sp)
  80c690:	dd000717 	ldw	r20,28(sp)
  80c694:	dcc00617 	ldw	r19,24(sp)
  80c698:	dc800517 	ldw	r18,20(sp)
  80c69c:	dc400417 	ldw	r17,16(sp)
  80c6a0:	dc000317 	ldw	r16,12(sp)
  80c6a4:	dec00d04 	addi	sp,sp,52
  80c6a8:	f800283a 	ret
  80c6ac:	8409883a 	add	r4,r16,r16
  80c6b0:	88c00117 	ldw	r3,4(r17)
  80c6b4:	2105883a 	add	r2,r4,r4
  80c6b8:	1445883a 	add	r2,r2,r17
  80c6bc:	18ffffc4 	addi	r3,r3,-1
  80c6c0:	11800217 	ldw	r6,8(r2)
  80c6c4:	1c001526 	beq	r3,r16,80c71c <__call_exitprocs+0x150>
  80c6c8:	10000215 	stw	zero,8(r2)
  80c6cc:	303fe726 	beq	r6,zero,80c66c <__call_exitprocs+0xa0>
  80c6d0:	00c00044 	movi	r3,1
  80c6d4:	1c06983a 	sll	r3,r3,r16
  80c6d8:	90804017 	ldw	r2,256(r18)
  80c6dc:	8cc00117 	ldw	r19,4(r17)
  80c6e0:	1884703a 	and	r2,r3,r2
  80c6e4:	10001426 	beq	r2,zero,80c738 <__call_exitprocs+0x16c>
  80c6e8:	90804117 	ldw	r2,260(r18)
  80c6ec:	1884703a 	and	r2,r3,r2
  80c6f0:	10000c1e 	bne	r2,zero,80c724 <__call_exitprocs+0x158>
  80c6f4:	2105883a 	add	r2,r4,r4
  80c6f8:	1485883a 	add	r2,r2,r18
  80c6fc:	11400017 	ldw	r5,0(r2)
  80c700:	e009883a 	mov	r4,fp
  80c704:	303ee83a 	callr	r6
  80c708:	88800117 	ldw	r2,4(r17)
  80c70c:	98bfc81e 	bne	r19,r2,80c630 <__call_exitprocs+0x64>
  80c710:	b8800017 	ldw	r2,0(r23)
  80c714:	147fd526 	beq	r2,r17,80c66c <__call_exitprocs+0xa0>
  80c718:	003fc506 	br	80c630 <__call_exitprocs+0x64>
  80c71c:	8c000115 	stw	r16,4(r17)
  80c720:	003fea06 	br	80c6cc <__call_exitprocs+0x100>
  80c724:	2105883a 	add	r2,r4,r4
  80c728:	1485883a 	add	r2,r2,r18
  80c72c:	11000017 	ldw	r4,0(r2)
  80c730:	303ee83a 	callr	r6
  80c734:	003ff406 	br	80c708 <__call_exitprocs+0x13c>
  80c738:	303ee83a 	callr	r6
  80c73c:	003ff206 	br	80c708 <__call_exitprocs+0x13c>
  80c740:	88800117 	ldw	r2,4(r17)
  80c744:	1000081e 	bne	r2,zero,80c768 <__call_exitprocs+0x19c>
  80c748:	89000017 	ldw	r4,0(r17)
  80c74c:	20000726 	beq	r4,zero,80c76c <__call_exitprocs+0x1a0>
  80c750:	b9000015 	stw	r4,0(r23)
  80c754:	8809883a 	mov	r4,r17
  80c758:	00000000 	call	0 <__reset-0x800000>
  80c75c:	bc400017 	ldw	r17,0(r23)
  80c760:	883fb71e 	bne	r17,zero,80c640 <__call_exitprocs+0x74>
  80c764:	003fc506 	br	80c67c <__call_exitprocs+0xb0>
  80c768:	89000017 	ldw	r4,0(r17)
  80c76c:	882f883a 	mov	r23,r17
  80c770:	2023883a 	mov	r17,r4
  80c774:	883fb21e 	bne	r17,zero,80c640 <__call_exitprocs+0x74>
  80c778:	003fc006 	br	80c67c <__call_exitprocs+0xb0>

0080c77c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80c77c:	20000226 	beq	r4,zero,80c788 <_exit+0xc>
    ALT_SIM_FAIL();
  80c780:	002af070 	cmpltui	zero,zero,43969
  80c784:	003fff06 	br	80c784 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
  80c788:	002af0b0 	cmpltui	zero,zero,43970
  80c78c:	003ffd06 	br	80c784 <_exit+0x8>
  80c790:	0080c5c8 	cmpgei	r2,zero,791
