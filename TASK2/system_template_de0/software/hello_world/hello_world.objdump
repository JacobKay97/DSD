
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000091c0 memsz 0x000091c0 flags r-x
    LOAD off    0x0000a1e0 vaddr 0x000191e0 paddr 0x000198d4 align 2**12
         filesz 0x000006f4 memsz 0x000006f4 flags rw-
    LOAD off    0x0000afc8 vaddr 0x00019fc8 paddr 0x00019fc8 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008d5c  000101b4  000101b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d0  00018f10  00018f10  00009f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000006f4  000191e0  000198d4  0000a1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00019fc8  00019fc8  0000afc8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000a8d4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a98  00000000  00000000  0000a900  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000f7b  00000000  00000000  0000b398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015a3f  00000000  00000000  0000c313  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000062c4  00000000  00000000  00021d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000eeb2  00000000  00000000  00028016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001428  00000000  00000000  00036ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001773  00000000  00000000  000382f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000087d4  00000000  00000000  00039a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00042238  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000660  00000000  00000000  00042258  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00044f7d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00044f80  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00044f83  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00044f84  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00044f85  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00044f89  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00044f8d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00044f91  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00044f9a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00044fa3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00044fac  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00044fbe  2**0
                  CONTENTS, READONLY
 29 .jdi          00004fae  00000000  00000000  00044fdf  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00034e32  00000000  00000000  00049f8d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b4 l    d  .text	00000000 .text
00018f10 l    d  .rodata	00000000 .rodata
000191e0 l    d  .rwdata	00000000 .rwdata
00019fc8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
000104ac l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 impure.c
000191e0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 ecvtbuf.c
000117b0 l     F .text	00000204 print_e
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 mprec.c
00019180 l     O .rodata	0000000c p05.2496
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
00013bc8 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00016118 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00017078 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_load.c
00017444 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000198ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
000176dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00017860 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000196c8 l     O .rwdata	0000002c jtag_uart
0001793c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00017bcc l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00017dcc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00017e48 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00017f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00018284 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000183d4 l     F .text	000000f8 alt_file_locked
00018658 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00018cec l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00018eac l     F .text	00000040 alt_sim_halt
0001271c g     F .text	00000094 _mprec_log10
00012808 g     F .text	00000088 __any_on
00019158 g     O .rodata	00000028 __mprec_tinytens
000174b0 g     F .text	0000005c alt_main
00013a68 g     F .text	00000020 strcpy
000116ec g     F .text	00000090 _puts_r
0001a018 g     O .bss	00000100 alt_irq
000198d4 g       *ABS*	00000000 __flash_rwdata_start
00016c38 g     F .text	00000088 __eqdf2
0001a118 g       *ABS*	00000000 __alt_heap_start
000120d4 g     F .text	000001a8 fcvtbuf
0001752c g     F .text	00000020 __malloc_unlock
00010944 g     F .text	00000174 __divsf3
00015fd4 g     F .text	00000060 memmove
00012908 g     F .text	000000f0 _Balloc
00010ab8 g     F .text	00000094 __fixsfsi
0001754c g     F .text	00000040 alt_putstr
00016d48 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00017648 g     F .text	00000094 times
00010020 g       *ABS*	00000000 __flash_exceptions_start
00019fc8 g     O .bss	00000004 errno
00017040 g     F .text	00000038 __make_dp
00019fdc g     O .bss	00000004 alt_argv
0002189c g       *ABS*	00000000 _gp
00010690 g     F .text	00000070 __subsf3
0001971c g     O .rwdata	00000180 alt_fd_list
000188f4 g     F .text	00000094 alt_find_dev
00015fa8 g     F .text	0000002c memcpy
00010b4c g     F .text	000000f8 __floatsidf
0001835c g     F .text	00000078 alt_io_redirect
00016e58 g     F .text	00000088 __ltdf2
0001177c g     F .text	00000014 puts
0001266c g     F .text	000000b0 __ratio
00017a24 g     F .text	00000104 altera_avalon_jtag_uart_read
00015854 g     F .text	00000014 malloc
000171b4 g     F .text	00000008 __udivsi3
00019068 g     O .rodata	000000c8 __mprec_tens
000115bc g     F .text	00000040 gcvtf
00018b78 g     F .text	00000090 alt_icache_flush
00019fcc g     O .bss	00000004 __malloc_top_pad
000130a0 g     F .text	0000003c __i2b
00016054 g     F .text	00000070 _sbrk_r
000198c0 g     O .rwdata	00000004 alt_max_fd
000171c4 g     F .text	00000138 __unpack_d
00019fd0 g     O .bss	00000004 __malloc_max_sbrked_mem
000160c4 g     F .text	00000054 __extendsfdf2
000165a8 g     F .text	00000074 __adddf3
0001254c g     F .text	00000120 __b2d
000198a0 g     O .rwdata	00000004 _global_impure_ptr
00013474 g     F .text	000005f4 _realloc_r
0001a118 g       *ABS*	00000000 __bss_end
0001818c g     F .text	000000f8 alt_iic_isr_register
000187c8 g     F .text	0000010c alt_tick
00019130 g     O .rodata	00000028 __mprec_bigtens
00013354 g     F .text	00000120 __s2b
00010c44 g     F .text	00000194 __floatunsidf
0001246c g     F .text	00000060 __mcmp
00018144 g     F .text	00000048 alt_ic_irq_enabled
00018730 g     F .text	00000098 alt_alarm_stop
00019fe4 g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000100ec g     F .exceptions	000000c8 alt_irq_handler
000196f4 g     O .rwdata	00000028 alt_dev_null
000110dc g     F .text	000000c8 __unpack_f
00017e2c g     F .text	0000001c alt_dcache_flush_all
00012338 g     F .text	00000070 __hi0bits
00016f68 g     F .text	000000d8 __fixdfsi
000198d4 g       *ABS*	00000000 __ram_rwdata_end
000198b8 g     O .rwdata	00000008 alt_dev_list
0001773c g     F .text	00000124 write
000191e0 g       *ABS*	00000000 __ram_rodata_end
00016ee0 g     F .text	00000088 __ledf2
00013208 g     F .text	0000014c __pow5mult
000171bc g     F .text	00000008 __umodsi3
0001a118 g       *ABS*	00000000 end
00010f7c g     F .text	00000160 __pack_f
0001acb4 g       *ABS*	00000000 __alt_stack_pointer
00011c94 g     F .text	000002f8 _dcvt
00017c3c g     F .text	00000090 alt_avalon_timer_sc_init
00010efc g     F .text	00000080 __clzsi2
00017b28 g     F .text	000000a4 altera_avalon_jtag_uart_write
0001552c g     F .text	00000314 _free_r
00018cf0 g     F .text	000001bc __call_exitprocs
000198a8 g     O .rwdata	00000004 __malloc_sbrk_base
000101b4 g     F .text	0000003c _start
00019fe8 g     O .bss	00000004 _alt_tick_rate
000119b4 g     F .text	000002e0 _gcvt
00012d00 g     F .text	0000014c __lshift
00019fec g     O .bss	00000004 _alt_nticks
000178f4 g     F .text	00000048 alt_sys_init
00012e4c g     F .text	00000254 __multiply
000114b8 g     F .text	00000038 __mulsi3
000191e0 g       *ABS*	00000000 __ram_rwdata_start
00018f10 g       *ABS*	00000000 __ram_rodata_start
00019ff0 g     O .bss	00000028 __malloc_current_mallinfo
000129f8 g     F .text	0000017c __d2b
00017974 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00018aa8 g     F .text	000000d0 alt_get_fd
000172fc g     F .text	000000c8 __fpcmp_parts_d
000101f0 g     F .text	000000a4 generateVector
00018cb0 g     F .text	0000003c memcmp
0001a118 g       *ABS*	00000000 __alt_stack_base
000169e0 g     F .text	00000258 __divdf3
000127b0 g     F .text	00000058 __copybits
000192c0 g     O .rwdata	00000408 __malloc_av_
0001661c g     F .text	000003c4 __muldf3
00018f54 g     O .rodata	00000010 __thenan_sf
00018988 g     F .text	00000120 alt_find_file
00017e74 g     F .text	000000b4 alt_dev_llist_insert
0001750c g     F .text	00000020 __malloc_lock
0001758c g     F .text	000000bc sbrk
00013b00 g     F .text	000000c8 _calloc_r
0001227c g     F .text	000000bc __sfvwrite_small_dev
00019fc8 g       *ABS*	00000000 __bss_start
00016034 g     F .text	00000020 memset
0001036c g     F .text	00000140 main
00011674 g     F .text	00000024 fcvt
00019fe0 g     O .bss	00000004 alt_envp
00019fd4 g     O .bss	00000004 __malloc_max_total_mem
000179cc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00011f8c g     F .text	00000148 ecvtbuf
0001acb4 g       *ABS*	00000000 __alt_heap_limit
00013e0c g     F .text	000015f4 _dtoa_r
00015868 g     F .text	00000740 _malloc_r
000198c4 g     O .rwdata	00000004 alt_errno
00011620 g     F .text	00000054 ecvtf
000170f4 g     F .text	00000060 __divsi3
000191a0 g     O .rodata	00000014 __thenan_df
00015400 g     F .text	0000012c _malloc_trim_r
00010764 g     F .text	000001e0 __mulsf3
00018f10 g       *ABS*	00000000 __flash_rodata_start
00016cc0 g     F .text	00000088 __nedf2
000178c0 g     F .text	00000034 alt_irq_init
000186b8 g     F .text	00000078 alt_release_fd
00018f64 g     O .rodata	00000100 __clz_tab
00010294 g     F .text	000000d8 sumVector
00013a88 g     F .text	00000078 _write_r
0001989c g     O .rwdata	00000004 _impure_ptr
00019fd8 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000124cc g     F .text	00000080 __ulp
000115fc g     F .text	00000024 ecvt
000198b0 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00017fb8 g     F .text	00000050 alt_ic_isr_register
000198d4 g       *ABS*	00000000 _edata
0001a118 g       *ABS*	00000000 _end
000101b4 g       *ABS*	00000000 __ram_exceptions_end
000180a4 g     F .text	000000a0 alt_ic_irq_disable
000198a4 g     O .rwdata	00000004 __malloc_trim_threshold
00011698 g     F .text	00000054 fcvtf
000188d4 g     F .text	00000020 altera_nios2_qsys_irq_init
00018c08 g     F .text	00000020 exit
00012b74 g     F .text	0000018c __mdiff
00017154 g     F .text	00000060 __modsi3
0001acb4 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000114f0 g     F .text	000000cc gcvt
00018eec g     F .text	00000020 _exit
00010dd8 g     F .text	00000124 __muldi3
00011790 g     F .text	00000020 strlen
000184cc g     F .text	0000018c open
00016dd0 g     F .text	00000088 __gedf2
00017f88 g     F .text	00000030 alt_icache_flush_all
00018c28 g     F .text	00000088 fputs
000198c8 g     O .rwdata	00000004 alt_priority_mask
00018008 g     F .text	0000009c alt_ic_irq_enable
00016528 g     F .text	00000080 __subdf3
000123a8 g     F .text	000000c4 __lo0bits
000198cc g     O .rwdata	00000008 alt_alarm_list
00017ccc g     F .text	00000100 close
00010700 g     F .text	00000064 __addsf3
000173c4 g     F .text	00000080 alt_load
000111a4 g     F .text	00000314 __pack_d
00015840 g     F .text	00000014 free
000130dc g     F .text	0000012c __multadd
00012890 g     F .text	00000078 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406d14 	ori	at,at,436
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100fc:	0005313a 	rdctl	r2,ipending
   10100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   1010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10110:	00800044 	movi	r2,1
   10114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10118:	e0ffff17 	ldw	r3,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	1884703a 	and	r2,r3,r2
   10124:	1005003a 	cmpeq	r2,r2,zero
   10128:	1000161e 	bne	r2,zero,10184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	e0bffd17 	ldw	r2,-12(fp)
   10130:	00c000b4 	movhi	r3,2
   10134:	18e80604 	addi	r3,r3,-24552
   10138:	100490fa 	slli	r2,r2,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	11400017 	ldw	r5,0(r2)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	00c000b4 	movhi	r3,2
   1014c:	18e80604 	addi	r3,r3,-24552
   10150:	100490fa 	slli	r2,r2,3
   10154:	10c5883a 	add	r2,r2,r3
   10158:	10800104 	addi	r2,r2,4
   1015c:	11000017 	ldw	r4,0(r2)
   10160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10164:	0005313a 	rdctl	r2,ipending
   10168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	1004c03a 	cmpne	r2,r2,zero
   1017c:	103fe31e 	bne	r2,zero,1010c <alt_irq_handler+0x20>
   10180:	00000706 	br	101a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   1019c:	003fde06 	br	10118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

Disassembly of section .text:

000101b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b4:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101b8:	deeb2d14 	ori	sp,sp,44212

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101bc:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   101c0:	d6862714 	ori	gp,gp,6300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101c8:	10a7f214 	ori	r2,r2,40904

    movhi r3, %hi(__bss_end)
   101cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101d0:	18e84614 	ori	r3,r3,41240

    beq r2, r3, 1f
   101d4:	10c00326 	beq	r2,r3,101e4 <_start+0x30>

0:
    stw zero, (r2)
   101d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e0:	10fffd36 	bltu	r2,r3,101d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e4:	00173c40 	call	173c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101e8:	00174b00 	call	174b0 <alt_main>

000101ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101ec:	003fff06 	br	101ec <alt_after_alt_main>

000101f0 <generateVector>:
//Test case 3
//#define step 0.001
//#define N 255001
// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
   101f0:	defffb04 	addi	sp,sp,-20
   101f4:	dfc00415 	stw	ra,16(sp)
   101f8:	df000315 	stw	fp,12(sp)
   101fc:	dc000215 	stw	r16,8(sp)
   10200:	df000204 	addi	fp,sp,8
   10204:	e13fff15 	stw	r4,-4(fp)
	int i;
	x[0] = 0;
   10208:	e0bfff17 	ldw	r2,-4(fp)
   1020c:	10000015 	stw	zero,0(r2)
	for (i=1; i<N; i++){
   10210:	00800044 	movi	r2,1
   10214:	e0bffe15 	stw	r2,-8(fp)
   10218:	00001506 	br	10270 <generateVector+0x80>
		x[i] = x[i-1] + step;
   1021c:	e0bffe17 	ldw	r2,-8(fp)
   10220:	1085883a 	add	r2,r2,r2
   10224:	1085883a 	add	r2,r2,r2
   10228:	1007883a 	mov	r3,r2
   1022c:	e0bfff17 	ldw	r2,-4(fp)
   10230:	18a1883a 	add	r16,r3,r2
   10234:	e0bffe17 	ldw	r2,-8(fp)
   10238:	1085883a 	add	r2,r2,r2
   1023c:	1085883a 	add	r2,r2,r2
   10240:	1007883a 	mov	r3,r2
   10244:	e0bfff17 	ldw	r2,-4(fp)
   10248:	1885883a 	add	r2,r3,r2
   1024c:	10bfff04 	addi	r2,r2,-4
   10250:	10800017 	ldw	r2,0(r2)
   10254:	1009883a 	mov	r4,r2
   10258:	01502834 	movhi	r5,16544
   1025c:	00107000 	call	10700 <__addsf3>
   10260:	80800015 	stw	r2,0(r16)
// Generates the vector x and stores it in the memory
void generateVector(float x[N])
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++){
   10264:	e0bffe17 	ldw	r2,-8(fp)
   10268:	10800044 	addi	r2,r2,1
   1026c:	e0bffe15 	stw	r2,-8(fp)
   10270:	e0bffe17 	ldw	r2,-8(fp)
   10274:	10800d10 	cmplti	r2,r2,52
   10278:	103fe81e 	bne	r2,zero,1021c <generateVector+0x2c>
		x[i] = x[i-1] + step;
	}
}
   1027c:	e037883a 	mov	sp,fp
   10280:	dfc00217 	ldw	ra,8(sp)
   10284:	df000117 	ldw	fp,4(sp)
   10288:	dc000017 	ldw	r16,0(sp)
   1028c:	dec00304 	addi	sp,sp,12
   10290:	f800283a 	ret

00010294 <sumVector>:
float sumVector(float x[], int M)
{
   10294:	defff904 	addi	sp,sp,-28
   10298:	dfc00615 	stw	ra,24(sp)
   1029c:	df000515 	stw	fp,20(sp)
   102a0:	dc000415 	stw	r16,16(sp)
   102a4:	df000404 	addi	fp,sp,16
   102a8:	e13ffe15 	stw	r4,-8(fp)
   102ac:	e17fff15 	stw	r5,-4(fp)
	float sum = 0.00;
   102b0:	e03ffd15 	stw	zero,-12(fp)
	int i;
	for(i = 0; i<M; i++){
   102b4:	e03ffc15 	stw	zero,-16(fp)
   102b8:	00002206 	br	10344 <sumVector+0xb0>
		sum = sum + x[i] +(x[i]*x[i]);
   102bc:	e0bffc17 	ldw	r2,-16(fp)
   102c0:	1085883a 	add	r2,r2,r2
   102c4:	1085883a 	add	r2,r2,r2
   102c8:	1007883a 	mov	r3,r2
   102cc:	e0bffe17 	ldw	r2,-8(fp)
   102d0:	1885883a 	add	r2,r3,r2
   102d4:	10800017 	ldw	r2,0(r2)
   102d8:	1009883a 	mov	r4,r2
   102dc:	e17ffd17 	ldw	r5,-12(fp)
   102e0:	00107000 	call	10700 <__addsf3>
   102e4:	1021883a 	mov	r16,r2
   102e8:	e0bffc17 	ldw	r2,-16(fp)
   102ec:	1085883a 	add	r2,r2,r2
   102f0:	1085883a 	add	r2,r2,r2
   102f4:	1007883a 	mov	r3,r2
   102f8:	e0bffe17 	ldw	r2,-8(fp)
   102fc:	1885883a 	add	r2,r3,r2
   10300:	11000017 	ldw	r4,0(r2)
   10304:	e0bffc17 	ldw	r2,-16(fp)
   10308:	1085883a 	add	r2,r2,r2
   1030c:	1085883a 	add	r2,r2,r2
   10310:	1007883a 	mov	r3,r2
   10314:	e0bffe17 	ldw	r2,-8(fp)
   10318:	1885883a 	add	r2,r3,r2
   1031c:	10800017 	ldw	r2,0(r2)
   10320:	100b883a 	mov	r5,r2
   10324:	00107640 	call	10764 <__mulsf3>
   10328:	8009883a 	mov	r4,r16
   1032c:	100b883a 	mov	r5,r2
   10330:	00107000 	call	10700 <__addsf3>
   10334:	e0bffd15 	stw	r2,-12(fp)
}
float sumVector(float x[], int M)
{
	float sum = 0.00;
	int i;
	for(i = 0; i<M; i++){
   10338:	e0bffc17 	ldw	r2,-16(fp)
   1033c:	10800044 	addi	r2,r2,1
   10340:	e0bffc15 	stw	r2,-16(fp)
   10344:	e0fffc17 	ldw	r3,-16(fp)
   10348:	e0bfff17 	ldw	r2,-4(fp)
   1034c:	18bfdb16 	blt	r3,r2,102bc <sumVector+0x28>
		sum = sum + x[i] +(x[i]*x[i]);
	}

	return sum;
   10350:	e0bffd17 	ldw	r2,-12(fp)
}
   10354:	e037883a 	mov	sp,fp
   10358:	dfc00217 	ldw	ra,8(sp)
   1035c:	df000117 	ldw	fp,4(sp)
   10360:	dc000017 	ldw	r16,0(sp)
   10364:	dec00304 	addi	sp,sp,12
   10368:	f800283a 	ret

0001036c <main>:
int main()
{
   1036c:	deffb904 	addi	sp,sp,-284
   10370:	dfc04615 	stw	ra,280(sp)
   10374:	df004515 	stw	fp,276(sp)
   10378:	df004504 	addi	fp,sp,276
	printf("Task 2!\n");
   1037c:	010000b4 	movhi	r4,2
   10380:	2123c404 	addi	r4,r4,-28912
   10384:	001177c0 	call	1177c <puts>

	float x[N];

	// Returned result
	float y;
	generateVector(x);
   10388:	e13fbf04 	addi	r4,fp,-260
   1038c:	00101f00 	call	101f0 <generateVector>
	// The following is used for timing
	char buf[50];
	clock_t exec_t1, exec_t2;

	exec_t1 = times(NULL); // get system time before starting the process
   10390:	0009883a 	mov	r4,zero
   10394:	00176480 	call	17648 <times>
   10398:	e0bfbd15 	stw	r2,-268(fp)
	// The code that you want to time goes here
	int i;
	for (i=0; i<10000;i++){
   1039c:	e03fbb15 	stw	zero,-276(fp)
   103a0:	00000706 	br	103c0 <main+0x54>
		y = sumVector(x, N);
   103a4:	e13fbf04 	addi	r4,fp,-260
   103a8:	01400d04 	movi	r5,52
   103ac:	00102940 	call	10294 <sumVector>
   103b0:	e0bfbe15 	stw	r2,-264(fp)
	clock_t exec_t1, exec_t2;

	exec_t1 = times(NULL); // get system time before starting the process
	// The code that you want to time goes here
	int i;
	for (i=0; i<10000;i++){
   103b4:	e0bfbb17 	ldw	r2,-276(fp)
   103b8:	10800044 	addi	r2,r2,1
   103bc:	e0bfbb15 	stw	r2,-276(fp)
   103c0:	e0bfbb17 	ldw	r2,-276(fp)
   103c4:	1089c410 	cmplti	r2,r2,10000
   103c8:	103ff61e 	bne	r2,zero,103a4 <main+0x38>
		y = sumVector(x, N);
	}
	// till here
	exec_t2 = times(NULL); // get system time after finishing the process
   103cc:	0009883a 	mov	r4,zero
   103d0:	00176480 	call	17648 <times>
   103d4:	e0bfbc15 	stw	r2,-272(fp)
	gcvt((exec_t2 - exec_t1), 10, buf);
   103d8:	e0ffbc17 	ldw	r3,-272(fp)
   103dc:	e0bfbd17 	ldw	r2,-268(fp)
   103e0:	1889c83a 	sub	r4,r3,r2
   103e4:	0010c440 	call	10c44 <__floatunsidf>
   103e8:	100b883a 	mov	r5,r2
   103ec:	180d883a 	mov	r6,r3
   103f0:	e1fff304 	addi	r7,fp,-52
   103f4:	2809883a 	mov	r4,r5
   103f8:	300b883a 	mov	r5,r6
   103fc:	01800284 	movi	r6,10
   10400:	00114f00 	call	114f0 <gcvt>
	alt_putstr(" proc time = ");
   10404:	010000b4 	movhi	r4,2
   10408:	2123c604 	addi	r4,r4,-28904
   1040c:	001754c0 	call	1754c <alt_putstr>
	alt_putstr(buf);
   10410:	e13ff304 	addi	r4,fp,-52
   10414:	001754c0 	call	1754c <alt_putstr>
	alt_putstr(" ticks \n");
   10418:	010000b4 	movhi	r4,2
   1041c:	2123ca04 	addi	r4,r4,-28888
   10420:	001754c0 	call	1754c <alt_putstr>
	// printf could be used if there was enough memory
//	int i;
	for (i=0; i<10; i++){
   10424:	e03fbb15 	stw	zero,-276(fp)
   10428:	00000706 	br	10448 <main+0xdc>
		y = y/2.0;
   1042c:	e13fbe17 	ldw	r4,-264(fp)
   10430:	01500034 	movhi	r5,16384
   10434:	00109440 	call	10944 <__divsf3>
   10438:	e0bfbe15 	stw	r2,-264(fp)
	alt_putstr(" proc time = ");
	alt_putstr(buf);
	alt_putstr(" ticks \n");
	// printf could be used if there was enough memory
//	int i;
	for (i=0; i<10; i++){
   1043c:	e0bfbb17 	ldw	r2,-276(fp)
   10440:	10800044 	addi	r2,r2,1
   10444:	e0bfbb15 	stw	r2,-276(fp)
   10448:	e0bfbb17 	ldw	r2,-276(fp)
   1044c:	10800290 	cmplti	r2,r2,10
   10450:	103ff61e 	bne	r2,zero,1042c <main+0xc0>
		y = y/2.0;
	}

	gcvt((int) y, 10, buf);
   10454:	e13fbe17 	ldw	r4,-264(fp)
   10458:	0010ab80 	call	10ab8 <__fixsfsi>
   1045c:	1009883a 	mov	r4,r2
   10460:	0010b4c0 	call	10b4c <__floatsidf>
   10464:	100b883a 	mov	r5,r2
   10468:	180d883a 	mov	r6,r3
   1046c:	e1fff304 	addi	r7,fp,-52
   10470:	2809883a 	mov	r4,r5
   10474:	300b883a 	mov	r5,r6
   10478:	01800284 	movi	r6,10
   1047c:	00114f00 	call	114f0 <gcvt>
	alt_putstr(" Result (divided by 1024) = ");
   10480:	010000b4 	movhi	r4,2
   10484:	2123cd04 	addi	r4,r4,-28876
   10488:	001754c0 	call	1754c <alt_putstr>
	alt_putstr(buf);
   1048c:	e13ff304 	addi	r4,fp,-52
   10490:	001754c0 	call	1754c <alt_putstr>
	// printf could be used if there was enough memory
	return 0;
   10494:	0005883a 	mov	r2,zero
}
   10498:	e037883a 	mov	sp,fp
   1049c:	dfc00117 	ldw	ra,4(sp)
   104a0:	df000017 	ldw	fp,0(sp)
   104a4:	dec00204 	addi	sp,sp,8
   104a8:	f800283a 	ret

000104ac <_fpadd_parts>:
   104ac:	21c00017 	ldw	r7,0(r4)
   104b0:	02000044 	movi	r8,1
   104b4:	41c0332e 	bgeu	r8,r7,10584 <_fpadd_parts+0xd8>
   104b8:	28800017 	ldw	r2,0(r5)
   104bc:	4080462e 	bgeu	r8,r2,105d8 <_fpadd_parts+0x12c>
   104c0:	00c00104 	movi	r3,4
   104c4:	38c06b26 	beq	r7,r3,10674 <_fpadd_parts+0x1c8>
   104c8:	10c04326 	beq	r2,r3,105d8 <_fpadd_parts+0x12c>
   104cc:	00c00084 	movi	r3,2
   104d0:	10c02e26 	beq	r2,r3,1058c <_fpadd_parts+0xe0>
   104d4:	38c04026 	beq	r7,r3,105d8 <_fpadd_parts+0x12c>
   104d8:	22800217 	ldw	r10,8(r4)
   104dc:	28c00217 	ldw	r3,8(r5)
   104e0:	23000317 	ldw	r12,12(r4)
   104e4:	2a400317 	ldw	r9,12(r5)
   104e8:	50cfc83a 	sub	r7,r10,r3
   104ec:	3817883a 	mov	r11,r7
   104f0:	38004f16 	blt	r7,zero,10630 <_fpadd_parts+0x184>
   104f4:	008007c4 	movi	r2,31
   104f8:	11c03316 	blt	r2,r7,105c8 <_fpadd_parts+0x11c>
   104fc:	02c0540e 	bge	zero,r11,10650 <_fpadd_parts+0x1a4>
   10500:	41c4983a 	sll	r2,r8,r7
   10504:	49c6d83a 	srl	r3,r9,r7
   10508:	10bfffc4 	addi	r2,r2,-1
   1050c:	4884703a 	and	r2,r9,r2
   10510:	1004c03a 	cmpne	r2,r2,zero
   10514:	1892b03a 	or	r9,r3,r2
   10518:	20c00117 	ldw	r3,4(r4)
   1051c:	28800117 	ldw	r2,4(r5)
   10520:	18803c26 	beq	r3,r2,10614 <_fpadd_parts+0x168>
   10524:	18002f26 	beq	r3,zero,105e4 <_fpadd_parts+0x138>
   10528:	4b05c83a 	sub	r2,r9,r12
   1052c:	10004216 	blt	r2,zero,10638 <_fpadd_parts+0x18c>
   10530:	32800215 	stw	r10,8(r6)
   10534:	30800315 	stw	r2,12(r6)
   10538:	30000115 	stw	zero,4(r6)
   1053c:	31000317 	ldw	r4,12(r6)
   10540:	01d00034 	movhi	r7,16384
   10544:	39ffff84 	addi	r7,r7,-2
   10548:	20bfffc4 	addi	r2,r4,-1
   1054c:	2007883a 	mov	r3,r4
   10550:	38800836 	bltu	r7,r2,10574 <_fpadd_parts+0xc8>
   10554:	31400217 	ldw	r5,8(r6)
   10558:	18c9883a 	add	r4,r3,r3
   1055c:	20bfffc4 	addi	r2,r4,-1
   10560:	297fffc4 	addi	r5,r5,-1
   10564:	2007883a 	mov	r3,r4
   10568:	38bffb2e 	bgeu	r7,r2,10558 <_fpadd_parts+0xac>
   1056c:	31400215 	stw	r5,8(r6)
   10570:	31000315 	stw	r4,12(r6)
   10574:	008000c4 	movi	r2,3
   10578:	30800015 	stw	r2,0(r6)
   1057c:	20001b16 	blt	r4,zero,105ec <_fpadd_parts+0x140>
   10580:	3009883a 	mov	r4,r6
   10584:	2005883a 	mov	r2,r4
   10588:	f800283a 	ret
   1058c:	38fffd1e 	bne	r7,r3,10584 <_fpadd_parts+0xd8>
   10590:	31c00015 	stw	r7,0(r6)
   10594:	20800117 	ldw	r2,4(r4)
   10598:	30800115 	stw	r2,4(r6)
   1059c:	20c00217 	ldw	r3,8(r4)
   105a0:	30c00215 	stw	r3,8(r6)
   105a4:	20800317 	ldw	r2,12(r4)
   105a8:	30800315 	stw	r2,12(r6)
   105ac:	20c00117 	ldw	r3,4(r4)
   105b0:	28800117 	ldw	r2,4(r5)
   105b4:	3009883a 	mov	r4,r6
   105b8:	1886703a 	and	r3,r3,r2
   105bc:	2005883a 	mov	r2,r4
   105c0:	30c00115 	stw	r3,4(r6)
   105c4:	f800283a 	ret
   105c8:	1a801716 	blt	r3,r10,10628 <_fpadd_parts+0x17c>
   105cc:	1815883a 	mov	r10,r3
   105d0:	0019883a 	mov	r12,zero
   105d4:	003fd006 	br	10518 <_fpadd_parts+0x6c>
   105d8:	2809883a 	mov	r4,r5
   105dc:	2005883a 	mov	r2,r4
   105e0:	f800283a 	ret
   105e4:	6245c83a 	sub	r2,r12,r9
   105e8:	003fd006 	br	1052c <_fpadd_parts+0x80>
   105ec:	30800217 	ldw	r2,8(r6)
   105f0:	2006d07a 	srli	r3,r4,1
   105f4:	2100004c 	andi	r4,r4,1
   105f8:	10800044 	addi	r2,r2,1
   105fc:	1906b03a 	or	r3,r3,r4
   10600:	3009883a 	mov	r4,r6
   10604:	30800215 	stw	r2,8(r6)
   10608:	2005883a 	mov	r2,r4
   1060c:	30c00315 	stw	r3,12(r6)
   10610:	f800283a 	ret
   10614:	4b09883a 	add	r4,r9,r12
   10618:	30c00115 	stw	r3,4(r6)
   1061c:	32800215 	stw	r10,8(r6)
   10620:	31000315 	stw	r4,12(r6)
   10624:	003fd306 	br	10574 <_fpadd_parts+0xc8>
   10628:	0013883a 	mov	r9,zero
   1062c:	003fba06 	br	10518 <_fpadd_parts+0x6c>
   10630:	01cfc83a 	sub	r7,zero,r7
   10634:	003faf06 	br	104f4 <_fpadd_parts+0x48>
   10638:	0089c83a 	sub	r4,zero,r2
   1063c:	00800044 	movi	r2,1
   10640:	30800115 	stw	r2,4(r6)
   10644:	32800215 	stw	r10,8(r6)
   10648:	31000315 	stw	r4,12(r6)
   1064c:	003fbb06 	br	1053c <_fpadd_parts+0x90>
   10650:	583fb126 	beq	r11,zero,10518 <_fpadd_parts+0x6c>
   10654:	41c4983a 	sll	r2,r8,r7
   10658:	61c6d83a 	srl	r3,r12,r7
   1065c:	51d5883a 	add	r10,r10,r7
   10660:	10bfffc4 	addi	r2,r2,-1
   10664:	6084703a 	and	r2,r12,r2
   10668:	1004c03a 	cmpne	r2,r2,zero
   1066c:	1898b03a 	or	r12,r3,r2
   10670:	003fa906 	br	10518 <_fpadd_parts+0x6c>
   10674:	11ffc31e 	bne	r2,r7,10584 <_fpadd_parts+0xd8>
   10678:	28c00117 	ldw	r3,4(r5)
   1067c:	20800117 	ldw	r2,4(r4)
   10680:	10ffc026 	beq	r2,r3,10584 <_fpadd_parts+0xd8>
   10684:	010000b4 	movhi	r4,2
   10688:	2123d504 	addi	r4,r4,-28844
   1068c:	003fbd06 	br	10584 <_fpadd_parts+0xd8>

00010690 <__subsf3>:
   10690:	deffef04 	addi	sp,sp,-68
   10694:	dcc00f15 	stw	r19,60(sp)
   10698:	dcc00204 	addi	r19,sp,8
   1069c:	dc400e15 	stw	r17,56(sp)
   106a0:	d9000015 	stw	r4,0(sp)
   106a4:	d9400115 	stw	r5,4(sp)
   106a8:	d809883a 	mov	r4,sp
   106ac:	980b883a 	mov	r5,r19
   106b0:	dc400604 	addi	r17,sp,24
   106b4:	dfc01015 	stw	ra,64(sp)
   106b8:	00110dc0 	call	110dc <__unpack_f>
   106bc:	d9000104 	addi	r4,sp,4
   106c0:	880b883a 	mov	r5,r17
   106c4:	00110dc0 	call	110dc <__unpack_f>
   106c8:	d8800717 	ldw	r2,28(sp)
   106cc:	9809883a 	mov	r4,r19
   106d0:	880b883a 	mov	r5,r17
   106d4:	d9800a04 	addi	r6,sp,40
   106d8:	1080005c 	xori	r2,r2,1
   106dc:	d8800715 	stw	r2,28(sp)
   106e0:	00104ac0 	call	104ac <_fpadd_parts>
   106e4:	1009883a 	mov	r4,r2
   106e8:	0010f7c0 	call	10f7c <__pack_f>
   106ec:	dfc01017 	ldw	ra,64(sp)
   106f0:	dcc00f17 	ldw	r19,60(sp)
   106f4:	dc400e17 	ldw	r17,56(sp)
   106f8:	dec01104 	addi	sp,sp,68
   106fc:	f800283a 	ret

00010700 <__addsf3>:
   10700:	deffef04 	addi	sp,sp,-68
   10704:	dcc00f15 	stw	r19,60(sp)
   10708:	dcc00204 	addi	r19,sp,8
   1070c:	dc400e15 	stw	r17,56(sp)
   10710:	d9000015 	stw	r4,0(sp)
   10714:	d9400115 	stw	r5,4(sp)
   10718:	d809883a 	mov	r4,sp
   1071c:	980b883a 	mov	r5,r19
   10720:	dc400604 	addi	r17,sp,24
   10724:	dfc01015 	stw	ra,64(sp)
   10728:	00110dc0 	call	110dc <__unpack_f>
   1072c:	d9000104 	addi	r4,sp,4
   10730:	880b883a 	mov	r5,r17
   10734:	00110dc0 	call	110dc <__unpack_f>
   10738:	d9800a04 	addi	r6,sp,40
   1073c:	9809883a 	mov	r4,r19
   10740:	880b883a 	mov	r5,r17
   10744:	00104ac0 	call	104ac <_fpadd_parts>
   10748:	1009883a 	mov	r4,r2
   1074c:	0010f7c0 	call	10f7c <__pack_f>
   10750:	dfc01017 	ldw	ra,64(sp)
   10754:	dcc00f17 	ldw	r19,60(sp)
   10758:	dc400e17 	ldw	r17,56(sp)
   1075c:	dec01104 	addi	sp,sp,68
   10760:	f800283a 	ret

00010764 <__mulsf3>:
   10764:	deffef04 	addi	sp,sp,-68
   10768:	dc400f15 	stw	r17,60(sp)
   1076c:	dc400204 	addi	r17,sp,8
   10770:	dc000e15 	stw	r16,56(sp)
   10774:	d9000015 	stw	r4,0(sp)
   10778:	d9400115 	stw	r5,4(sp)
   1077c:	d809883a 	mov	r4,sp
   10780:	880b883a 	mov	r5,r17
   10784:	dc000604 	addi	r16,sp,24
   10788:	dfc01015 	stw	ra,64(sp)
   1078c:	00110dc0 	call	110dc <__unpack_f>
   10790:	d9000104 	addi	r4,sp,4
   10794:	800b883a 	mov	r5,r16
   10798:	00110dc0 	call	110dc <__unpack_f>
   1079c:	d9000217 	ldw	r4,8(sp)
   107a0:	00800044 	movi	r2,1
   107a4:	01400104 	movi	r5,4
   107a8:	1100142e 	bgeu	r2,r4,107fc <__mulsf3+0x98>
   107ac:	d8c00617 	ldw	r3,24(sp)
   107b0:	10c0052e 	bgeu	r2,r3,107c8 <__mulsf3+0x64>
   107b4:	21400f26 	beq	r4,r5,107f4 <__mulsf3+0x90>
   107b8:	19405d26 	beq	r3,r5,10930 <__mulsf3+0x1cc>
   107bc:	00800084 	movi	r2,2
   107c0:	20800e26 	beq	r4,r2,107fc <__mulsf3+0x98>
   107c4:	1880181e 	bne	r3,r2,10828 <__mulsf3+0xc4>
   107c8:	d8c00717 	ldw	r3,28(sp)
   107cc:	d8800317 	ldw	r2,12(sp)
   107d0:	8009883a 	mov	r4,r16
   107d4:	10c4c03a 	cmpne	r2,r2,r3
   107d8:	d8800715 	stw	r2,28(sp)
   107dc:	0010f7c0 	call	10f7c <__pack_f>
   107e0:	dfc01017 	ldw	ra,64(sp)
   107e4:	dc400f17 	ldw	r17,60(sp)
   107e8:	dc000e17 	ldw	r16,56(sp)
   107ec:	dec01104 	addi	sp,sp,68
   107f0:	f800283a 	ret
   107f4:	00800084 	movi	r2,2
   107f8:	18804f26 	beq	r3,r2,10938 <__mulsf3+0x1d4>
   107fc:	d8800317 	ldw	r2,12(sp)
   10800:	d8c00717 	ldw	r3,28(sp)
   10804:	8809883a 	mov	r4,r17
   10808:	10c4c03a 	cmpne	r2,r2,r3
   1080c:	d8800315 	stw	r2,12(sp)
   10810:	0010f7c0 	call	10f7c <__pack_f>
   10814:	dfc01017 	ldw	ra,64(sp)
   10818:	dc400f17 	ldw	r17,60(sp)
   1081c:	dc000e17 	ldw	r16,56(sp)
   10820:	dec01104 	addi	sp,sp,68
   10824:	f800283a 	ret
   10828:	d8800517 	ldw	r2,20(sp)
   1082c:	da000917 	ldw	r8,36(sp)
   10830:	0013883a 	mov	r9,zero
   10834:	0007883a 	mov	r3,zero
   10838:	480f883a 	mov	r7,r9
   1083c:	180b883a 	mov	r5,r3
   10840:	400d883a 	mov	r6,r8
   10844:	1009883a 	mov	r4,r2
   10848:	0010dd80 	call	10dd8 <__muldi3>
   1084c:	da800417 	ldw	r10,16(sp)
   10850:	d9800817 	ldw	r6,32(sp)
   10854:	da400317 	ldw	r9,12(sp)
   10858:	52800084 	addi	r10,r10,2
   1085c:	3295883a 	add	r10,r6,r10
   10860:	d9800717 	ldw	r6,28(sp)
   10864:	180b883a 	mov	r5,r3
   10868:	180f883a 	mov	r7,r3
   1086c:	4992c03a 	cmpne	r9,r9,r6
   10870:	da400b15 	stw	r9,44(sp)
   10874:	1007883a 	mov	r3,r2
   10878:	da800c15 	stw	r10,48(sp)
   1087c:	2800070e 	bge	r5,zero,1089c <__mulsf3+0x138>
   10880:	2880004c 	andi	r2,r5,1
   10884:	1005003a 	cmpeq	r2,r2,zero
   10888:	500d883a 	mov	r6,r10
   1088c:	10001e26 	beq	r2,zero,10908 <__mulsf3+0x1a4>
   10890:	380ed07a 	srli	r7,r7,1
   10894:	31800044 	addi	r6,r6,1
   10898:	d9800c15 	stw	r6,48(sp)
   1089c:	01100034 	movhi	r4,16384
   108a0:	213fffc4 	addi	r4,r4,-1
   108a4:	21c00b36 	bltu	r4,r7,108d4 <__mulsf3+0x170>
   108a8:	d8800c17 	ldw	r2,48(sp)
   108ac:	00000206 	br	108b8 <__mulsf3+0x154>
   108b0:	18c7883a 	add	r3,r3,r3
   108b4:	21c00636 	bltu	r4,r7,108d0 <__mulsf3+0x16c>
   108b8:	10bfffc4 	addi	r2,r2,-1
   108bc:	39cf883a 	add	r7,r7,r7
   108c0:	183ffb0e 	bge	r3,zero,108b0 <__mulsf3+0x14c>
   108c4:	39c00054 	ori	r7,r7,1
   108c8:	18c7883a 	add	r3,r3,r3
   108cc:	21fffa2e 	bgeu	r4,r7,108b8 <__mulsf3+0x154>
   108d0:	d8800c15 	stw	r2,48(sp)
   108d4:	39001fcc 	andi	r4,r7,127
   108d8:	00801004 	movi	r2,64
   108dc:	20800d26 	beq	r4,r2,10914 <__mulsf3+0x1b0>
   108e0:	008000c4 	movi	r2,3
   108e4:	d9000a04 	addi	r4,sp,40
   108e8:	d9c00d15 	stw	r7,52(sp)
   108ec:	d8800a15 	stw	r2,40(sp)
   108f0:	0010f7c0 	call	10f7c <__pack_f>
   108f4:	dfc01017 	ldw	ra,64(sp)
   108f8:	dc400f17 	ldw	r17,60(sp)
   108fc:	dc000e17 	ldw	r16,56(sp)
   10900:	dec01104 	addi	sp,sp,68
   10904:	f800283a 	ret
   10908:	1804d07a 	srli	r2,r3,1
   1090c:	10e00034 	orhi	r3,r2,32768
   10910:	003fdf06 	br	10890 <__mulsf3+0x12c>
   10914:	3880200c 	andi	r2,r7,128
   10918:	103ff11e 	bne	r2,zero,108e0 <__mulsf3+0x17c>
   1091c:	183ff026 	beq	r3,zero,108e0 <__mulsf3+0x17c>
   10920:	3907883a 	add	r3,r7,r4
   10924:	00bfe004 	movi	r2,-128
   10928:	188e703a 	and	r7,r3,r2
   1092c:	003fec06 	br	108e0 <__mulsf3+0x17c>
   10930:	00800084 	movi	r2,2
   10934:	20bfa41e 	bne	r4,r2,107c8 <__mulsf3+0x64>
   10938:	010000b4 	movhi	r4,2
   1093c:	2123d504 	addi	r4,r4,-28844
   10940:	003fb306 	br	10810 <__mulsf3+0xac>

00010944 <__divsf3>:
   10944:	defff304 	addi	sp,sp,-52
   10948:	dc400b15 	stw	r17,44(sp)
   1094c:	dc400204 	addi	r17,sp,8
   10950:	dc000a15 	stw	r16,40(sp)
   10954:	d9000015 	stw	r4,0(sp)
   10958:	d9400115 	stw	r5,4(sp)
   1095c:	d809883a 	mov	r4,sp
   10960:	880b883a 	mov	r5,r17
   10964:	dc000604 	addi	r16,sp,24
   10968:	dfc00c15 	stw	ra,48(sp)
   1096c:	00110dc0 	call	110dc <__unpack_f>
   10970:	d9000104 	addi	r4,sp,4
   10974:	800b883a 	mov	r5,r16
   10978:	00110dc0 	call	110dc <__unpack_f>
   1097c:	d9000217 	ldw	r4,8(sp)
   10980:	00800044 	movi	r2,1
   10984:	01800104 	movi	r6,4
   10988:	11000a2e 	bgeu	r2,r4,109b4 <__divsf3+0x70>
   1098c:	d9400617 	ldw	r5,24(sp)
   10990:	1140432e 	bgeu	r2,r5,10aa0 <__divsf3+0x15c>
   10994:	d8800317 	ldw	r2,12(sp)
   10998:	d8c00717 	ldw	r3,28(sp)
   1099c:	10c4f03a 	xor	r2,r2,r3
   109a0:	d8800315 	stw	r2,12(sp)
   109a4:	21800226 	beq	r4,r6,109b0 <__divsf3+0x6c>
   109a8:	00800084 	movi	r2,2
   109ac:	2080101e 	bne	r4,r2,109f0 <__divsf3+0xac>
   109b0:	29000726 	beq	r5,r4,109d0 <__divsf3+0x8c>
   109b4:	8809883a 	mov	r4,r17
   109b8:	0010f7c0 	call	10f7c <__pack_f>
   109bc:	dfc00c17 	ldw	ra,48(sp)
   109c0:	dc400b17 	ldw	r17,44(sp)
   109c4:	dc000a17 	ldw	r16,40(sp)
   109c8:	dec00d04 	addi	sp,sp,52
   109cc:	f800283a 	ret
   109d0:	010000b4 	movhi	r4,2
   109d4:	2123d504 	addi	r4,r4,-28844
   109d8:	0010f7c0 	call	10f7c <__pack_f>
   109dc:	dfc00c17 	ldw	ra,48(sp)
   109e0:	dc400b17 	ldw	r17,44(sp)
   109e4:	dc000a17 	ldw	r16,40(sp)
   109e8:	dec00d04 	addi	sp,sp,52
   109ec:	f800283a 	ret
   109f0:	29802d26 	beq	r5,r6,10aa8 <__divsf3+0x164>
   109f4:	28801a26 	beq	r5,r2,10a60 <__divsf3+0x11c>
   109f8:	d8c00417 	ldw	r3,16(sp)
   109fc:	d8800817 	ldw	r2,32(sp)
   10a00:	d9000517 	ldw	r4,20(sp)
   10a04:	d9800917 	ldw	r6,36(sp)
   10a08:	1885c83a 	sub	r2,r3,r2
   10a0c:	d8800415 	stw	r2,16(sp)
   10a10:	2180032e 	bgeu	r4,r6,10a20 <__divsf3+0xdc>
   10a14:	10bfffc4 	addi	r2,r2,-1
   10a18:	d8800415 	stw	r2,16(sp)
   10a1c:	2109883a 	add	r4,r4,r4
   10a20:	01500034 	movhi	r5,16384
   10a24:	0007883a 	mov	r3,zero
   10a28:	0005883a 	mov	r2,zero
   10a2c:	01c007c4 	movi	r7,31
   10a30:	10800044 	addi	r2,r2,1
   10a34:	21800236 	bltu	r4,r6,10a40 <__divsf3+0xfc>
   10a38:	1946b03a 	or	r3,r3,r5
   10a3c:	2189c83a 	sub	r4,r4,r6
   10a40:	280ad07a 	srli	r5,r5,1
   10a44:	2109883a 	add	r4,r4,r4
   10a48:	11fff91e 	bne	r2,r7,10a30 <__divsf3+0xec>
   10a4c:	19401fcc 	andi	r5,r3,127
   10a50:	00801004 	movi	r2,64
   10a54:	28800a26 	beq	r5,r2,10a80 <__divsf3+0x13c>
   10a58:	d8c00515 	stw	r3,20(sp)
   10a5c:	003fd506 	br	109b4 <__divsf3+0x70>
   10a60:	8809883a 	mov	r4,r17
   10a64:	d9800215 	stw	r6,8(sp)
   10a68:	0010f7c0 	call	10f7c <__pack_f>
   10a6c:	dfc00c17 	ldw	ra,48(sp)
   10a70:	dc400b17 	ldw	r17,44(sp)
   10a74:	dc000a17 	ldw	r16,40(sp)
   10a78:	dec00d04 	addi	sp,sp,52
   10a7c:	f800283a 	ret
   10a80:	1880200c 	andi	r2,r3,128
   10a84:	103ff41e 	bne	r2,zero,10a58 <__divsf3+0x114>
   10a88:	203ff326 	beq	r4,zero,10a58 <__divsf3+0x114>
   10a8c:	1947883a 	add	r3,r3,r5
   10a90:	00bfe004 	movi	r2,-128
   10a94:	1886703a 	and	r3,r3,r2
   10a98:	d8c00515 	stw	r3,20(sp)
   10a9c:	003fc506 	br	109b4 <__divsf3+0x70>
   10aa0:	8009883a 	mov	r4,r16
   10aa4:	003fc406 	br	109b8 <__divsf3+0x74>
   10aa8:	8809883a 	mov	r4,r17
   10aac:	d8000515 	stw	zero,20(sp)
   10ab0:	d8000415 	stw	zero,16(sp)
   10ab4:	003fc006 	br	109b8 <__divsf3+0x74>

00010ab8 <__fixsfsi>:
   10ab8:	defffa04 	addi	sp,sp,-24
   10abc:	d9000015 	stw	r4,0(sp)
   10ac0:	d9400104 	addi	r5,sp,4
   10ac4:	d809883a 	mov	r4,sp
   10ac8:	dfc00515 	stw	ra,20(sp)
   10acc:	00110dc0 	call	110dc <__unpack_f>
   10ad0:	d8c00117 	ldw	r3,4(sp)
   10ad4:	00800084 	movi	r2,2
   10ad8:	1880041e 	bne	r3,r2,10aec <__fixsfsi+0x34>
   10adc:	0005883a 	mov	r2,zero
   10ae0:	dfc00517 	ldw	ra,20(sp)
   10ae4:	dec00604 	addi	sp,sp,24
   10ae8:	f800283a 	ret
   10aec:	00800044 	movi	r2,1
   10af0:	10fffa2e 	bgeu	r2,r3,10adc <__fixsfsi+0x24>
   10af4:	00800104 	movi	r2,4
   10af8:	18800426 	beq	r3,r2,10b0c <__fixsfsi+0x54>
   10afc:	d8800317 	ldw	r2,12(sp)
   10b00:	103ff616 	blt	r2,zero,10adc <__fixsfsi+0x24>
   10b04:	00c00784 	movi	r3,30
   10b08:	1880070e 	bge	r3,r2,10b28 <__fixsfsi+0x70>
   10b0c:	d8800217 	ldw	r2,8(sp)
   10b10:	10000c1e 	bne	r2,zero,10b44 <__fixsfsi+0x8c>
   10b14:	00a00034 	movhi	r2,32768
   10b18:	10bfffc4 	addi	r2,r2,-1
   10b1c:	dfc00517 	ldw	ra,20(sp)
   10b20:	dec00604 	addi	sp,sp,24
   10b24:	f800283a 	ret
   10b28:	1885c83a 	sub	r2,r3,r2
   10b2c:	d9000217 	ldw	r4,8(sp)
   10b30:	d8c00417 	ldw	r3,16(sp)
   10b34:	1884d83a 	srl	r2,r3,r2
   10b38:	203fe926 	beq	r4,zero,10ae0 <__fixsfsi+0x28>
   10b3c:	0085c83a 	sub	r2,zero,r2
   10b40:	003fe706 	br	10ae0 <__fixsfsi+0x28>
   10b44:	00a00034 	movhi	r2,32768
   10b48:	003fe506 	br	10ae0 <__fixsfsi+0x28>

00010b4c <__floatsidf>:
   10b4c:	2006d7fa 	srli	r3,r4,31
   10b50:	defff604 	addi	sp,sp,-40
   10b54:	008000c4 	movi	r2,3
   10b58:	dfc00915 	stw	ra,36(sp)
   10b5c:	dcc00815 	stw	r19,32(sp)
   10b60:	dc800715 	stw	r18,28(sp)
   10b64:	dc400615 	stw	r17,24(sp)
   10b68:	dc000515 	stw	r16,20(sp)
   10b6c:	d8800015 	stw	r2,0(sp)
   10b70:	d8c00115 	stw	r3,4(sp)
   10b74:	20000f1e 	bne	r4,zero,10bb4 <__floatsidf+0x68>
   10b78:	00800084 	movi	r2,2
   10b7c:	d8800015 	stw	r2,0(sp)
   10b80:	d809883a 	mov	r4,sp
   10b84:	00111a40 	call	111a4 <__pack_d>
   10b88:	1009883a 	mov	r4,r2
   10b8c:	180b883a 	mov	r5,r3
   10b90:	2005883a 	mov	r2,r4
   10b94:	2807883a 	mov	r3,r5
   10b98:	dfc00917 	ldw	ra,36(sp)
   10b9c:	dcc00817 	ldw	r19,32(sp)
   10ba0:	dc800717 	ldw	r18,28(sp)
   10ba4:	dc400617 	ldw	r17,24(sp)
   10ba8:	dc000517 	ldw	r16,20(sp)
   10bac:	dec00a04 	addi	sp,sp,40
   10bb0:	f800283a 	ret
   10bb4:	00800f04 	movi	r2,60
   10bb8:	1807003a 	cmpeq	r3,r3,zero
   10bbc:	d8800215 	stw	r2,8(sp)
   10bc0:	18001126 	beq	r3,zero,10c08 <__floatsidf+0xbc>
   10bc4:	0027883a 	mov	r19,zero
   10bc8:	2025883a 	mov	r18,r4
   10bcc:	d9000315 	stw	r4,12(sp)
   10bd0:	dcc00415 	stw	r19,16(sp)
   10bd4:	0010efc0 	call	10efc <__clzsi2>
   10bd8:	11000744 	addi	r4,r2,29
   10bdc:	013fe80e 	bge	zero,r4,10b80 <__floatsidf+0x34>
   10be0:	10bfff44 	addi	r2,r2,-3
   10be4:	10000c16 	blt	r2,zero,10c18 <__floatsidf+0xcc>
   10be8:	90a2983a 	sll	r17,r18,r2
   10bec:	0021883a 	mov	r16,zero
   10bf0:	d8800217 	ldw	r2,8(sp)
   10bf4:	dc400415 	stw	r17,16(sp)
   10bf8:	dc000315 	stw	r16,12(sp)
   10bfc:	1105c83a 	sub	r2,r2,r4
   10c00:	d8800215 	stw	r2,8(sp)
   10c04:	003fde06 	br	10b80 <__floatsidf+0x34>
   10c08:	00a00034 	movhi	r2,32768
   10c0c:	20800a26 	beq	r4,r2,10c38 <__floatsidf+0xec>
   10c10:	0109c83a 	sub	r4,zero,r4
   10c14:	003feb06 	br	10bc4 <__floatsidf+0x78>
   10c18:	9006d07a 	srli	r3,r18,1
   10c1c:	008007c4 	movi	r2,31
   10c20:	1105c83a 	sub	r2,r2,r4
   10c24:	1886d83a 	srl	r3,r3,r2
   10c28:	9922983a 	sll	r17,r19,r4
   10c2c:	9120983a 	sll	r16,r18,r4
   10c30:	1c62b03a 	or	r17,r3,r17
   10c34:	003fee06 	br	10bf0 <__floatsidf+0xa4>
   10c38:	0009883a 	mov	r4,zero
   10c3c:	01707834 	movhi	r5,49632
   10c40:	003fd306 	br	10b90 <__floatsidf+0x44>

00010c44 <__floatunsidf>:
   10c44:	defff204 	addi	sp,sp,-56
   10c48:	dfc00d15 	stw	ra,52(sp)
   10c4c:	ddc00c15 	stw	r23,48(sp)
   10c50:	dd800b15 	stw	r22,44(sp)
   10c54:	dd400a15 	stw	r21,40(sp)
   10c58:	dd000915 	stw	r20,36(sp)
   10c5c:	dcc00815 	stw	r19,32(sp)
   10c60:	dc800715 	stw	r18,28(sp)
   10c64:	dc400615 	stw	r17,24(sp)
   10c68:	dc000515 	stw	r16,20(sp)
   10c6c:	d8000115 	stw	zero,4(sp)
   10c70:	20000f1e 	bne	r4,zero,10cb0 <__floatunsidf+0x6c>
   10c74:	00800084 	movi	r2,2
   10c78:	d8800015 	stw	r2,0(sp)
   10c7c:	d809883a 	mov	r4,sp
   10c80:	00111a40 	call	111a4 <__pack_d>
   10c84:	dfc00d17 	ldw	ra,52(sp)
   10c88:	ddc00c17 	ldw	r23,48(sp)
   10c8c:	dd800b17 	ldw	r22,44(sp)
   10c90:	dd400a17 	ldw	r21,40(sp)
   10c94:	dd000917 	ldw	r20,36(sp)
   10c98:	dcc00817 	ldw	r19,32(sp)
   10c9c:	dc800717 	ldw	r18,28(sp)
   10ca0:	dc400617 	ldw	r17,24(sp)
   10ca4:	dc000517 	ldw	r16,20(sp)
   10ca8:	dec00e04 	addi	sp,sp,56
   10cac:	f800283a 	ret
   10cb0:	008000c4 	movi	r2,3
   10cb4:	00c00f04 	movi	r3,60
   10cb8:	002f883a 	mov	r23,zero
   10cbc:	202d883a 	mov	r22,r4
   10cc0:	d8800015 	stw	r2,0(sp)
   10cc4:	d8c00215 	stw	r3,8(sp)
   10cc8:	d9000315 	stw	r4,12(sp)
   10ccc:	ddc00415 	stw	r23,16(sp)
   10cd0:	0010efc0 	call	10efc <__clzsi2>
   10cd4:	12400744 	addi	r9,r2,29
   10cd8:	48000b16 	blt	r9,zero,10d08 <__floatunsidf+0xc4>
   10cdc:	483fe726 	beq	r9,zero,10c7c <__floatunsidf+0x38>
   10ce0:	10bfff44 	addi	r2,r2,-3
   10ce4:	10002e16 	blt	r2,zero,10da0 <__floatunsidf+0x15c>
   10ce8:	b0a2983a 	sll	r17,r22,r2
   10cec:	0021883a 	mov	r16,zero
   10cf0:	d8800217 	ldw	r2,8(sp)
   10cf4:	dc400415 	stw	r17,16(sp)
   10cf8:	dc000315 	stw	r16,12(sp)
   10cfc:	1245c83a 	sub	r2,r2,r9
   10d00:	d8800215 	stw	r2,8(sp)
   10d04:	003fdd06 	br	10c7c <__floatunsidf+0x38>
   10d08:	0255c83a 	sub	r10,zero,r9
   10d0c:	51bff804 	addi	r6,r10,-32
   10d10:	30001b16 	blt	r6,zero,10d80 <__floatunsidf+0x13c>
   10d14:	b9a8d83a 	srl	r20,r23,r6
   10d18:	002b883a 	mov	r21,zero
   10d1c:	000f883a 	mov	r7,zero
   10d20:	01000044 	movi	r4,1
   10d24:	0011883a 	mov	r8,zero
   10d28:	30002516 	blt	r6,zero,10dc0 <__floatunsidf+0x17c>
   10d2c:	21a6983a 	sll	r19,r4,r6
   10d30:	0025883a 	mov	r18,zero
   10d34:	00bfffc4 	movi	r2,-1
   10d38:	9089883a 	add	r4,r18,r2
   10d3c:	988b883a 	add	r5,r19,r2
   10d40:	248d803a 	cmpltu	r6,r4,r18
   10d44:	314b883a 	add	r5,r6,r5
   10d48:	b104703a 	and	r2,r22,r4
   10d4c:	b946703a 	and	r3,r23,r5
   10d50:	10c4b03a 	or	r2,r2,r3
   10d54:	10000226 	beq	r2,zero,10d60 <__floatunsidf+0x11c>
   10d58:	01c00044 	movi	r7,1
   10d5c:	0011883a 	mov	r8,zero
   10d60:	d9000217 	ldw	r4,8(sp)
   10d64:	a1c4b03a 	or	r2,r20,r7
   10d68:	aa06b03a 	or	r3,r21,r8
   10d6c:	2249c83a 	sub	r4,r4,r9
   10d70:	d8c00415 	stw	r3,16(sp)
   10d74:	d9000215 	stw	r4,8(sp)
   10d78:	d8800315 	stw	r2,12(sp)
   10d7c:	003fbf06 	br	10c7c <__floatunsidf+0x38>
   10d80:	bdc7883a 	add	r3,r23,r23
   10d84:	008007c4 	movi	r2,31
   10d88:	1285c83a 	sub	r2,r2,r10
   10d8c:	1886983a 	sll	r3,r3,r2
   10d90:	b2a8d83a 	srl	r20,r22,r10
   10d94:	baaad83a 	srl	r21,r23,r10
   10d98:	1d28b03a 	or	r20,r3,r20
   10d9c:	003fdf06 	br	10d1c <__floatunsidf+0xd8>
   10da0:	b006d07a 	srli	r3,r22,1
   10da4:	008007c4 	movi	r2,31
   10da8:	1245c83a 	sub	r2,r2,r9
   10dac:	1886d83a 	srl	r3,r3,r2
   10db0:	ba62983a 	sll	r17,r23,r9
   10db4:	b260983a 	sll	r16,r22,r9
   10db8:	1c62b03a 	or	r17,r3,r17
   10dbc:	003fcc06 	br	10cf0 <__floatunsidf+0xac>
   10dc0:	2006d07a 	srli	r3,r4,1
   10dc4:	008007c4 	movi	r2,31
   10dc8:	1285c83a 	sub	r2,r2,r10
   10dcc:	18a6d83a 	srl	r19,r3,r2
   10dd0:	22a4983a 	sll	r18,r4,r10
   10dd4:	003fd706 	br	10d34 <__floatunsidf+0xf0>

00010dd8 <__muldi3>:
   10dd8:	defff204 	addi	sp,sp,-56
   10ddc:	df000c15 	stw	fp,48(sp)
   10de0:	3038d43a 	srli	fp,r6,16
   10de4:	dd000815 	stw	r20,32(sp)
   10de8:	dc400515 	stw	r17,20(sp)
   10dec:	2028d43a 	srli	r20,r4,16
   10df0:	247fffcc 	andi	r17,r4,65535
   10df4:	dc000415 	stw	r16,16(sp)
   10df8:	343fffcc 	andi	r16,r6,65535
   10dfc:	dcc00715 	stw	r19,28(sp)
   10e00:	d9000015 	stw	r4,0(sp)
   10e04:	2827883a 	mov	r19,r5
   10e08:	8809883a 	mov	r4,r17
   10e0c:	d9400115 	stw	r5,4(sp)
   10e10:	800b883a 	mov	r5,r16
   10e14:	d9800215 	stw	r6,8(sp)
   10e18:	dfc00d15 	stw	ra,52(sp)
   10e1c:	d9c00315 	stw	r7,12(sp)
   10e20:	dd800a15 	stw	r22,40(sp)
   10e24:	dd400915 	stw	r21,36(sp)
   10e28:	302d883a 	mov	r22,r6
   10e2c:	ddc00b15 	stw	r23,44(sp)
   10e30:	dc800615 	stw	r18,24(sp)
   10e34:	00114b80 	call	114b8 <__mulsi3>
   10e38:	8809883a 	mov	r4,r17
   10e3c:	e00b883a 	mov	r5,fp
   10e40:	102b883a 	mov	r21,r2
   10e44:	00114b80 	call	114b8 <__mulsi3>
   10e48:	800b883a 	mov	r5,r16
   10e4c:	a009883a 	mov	r4,r20
   10e50:	1023883a 	mov	r17,r2
   10e54:	00114b80 	call	114b8 <__mulsi3>
   10e58:	a009883a 	mov	r4,r20
   10e5c:	e00b883a 	mov	r5,fp
   10e60:	1021883a 	mov	r16,r2
   10e64:	00114b80 	call	114b8 <__mulsi3>
   10e68:	a8ffffcc 	andi	r3,r21,65535
   10e6c:	a82ad43a 	srli	r21,r21,16
   10e70:	8c23883a 	add	r17,r17,r16
   10e74:	1011883a 	mov	r8,r2
   10e78:	ac6b883a 	add	r21,r21,r17
   10e7c:	a804943a 	slli	r2,r21,16
   10e80:	b009883a 	mov	r4,r22
   10e84:	980b883a 	mov	r5,r19
   10e88:	10c7883a 	add	r3,r2,r3
   10e8c:	a812d43a 	srli	r9,r21,16
   10e90:	180d883a 	mov	r6,r3
   10e94:	ac00022e 	bgeu	r21,r16,10ea0 <__muldi3+0xc8>
   10e98:	00800074 	movhi	r2,1
   10e9c:	4091883a 	add	r8,r8,r2
   10ea0:	4267883a 	add	r19,r8,r9
   10ea4:	302d883a 	mov	r22,r6
   10ea8:	00114b80 	call	114b8 <__mulsi3>
   10eac:	d9400317 	ldw	r5,12(sp)
   10eb0:	d9000017 	ldw	r4,0(sp)
   10eb4:	1023883a 	mov	r17,r2
   10eb8:	00114b80 	call	114b8 <__mulsi3>
   10ebc:	14cb883a 	add	r5,r2,r19
   10ec0:	894b883a 	add	r5,r17,r5
   10ec4:	b005883a 	mov	r2,r22
   10ec8:	2807883a 	mov	r3,r5
   10ecc:	dfc00d17 	ldw	ra,52(sp)
   10ed0:	df000c17 	ldw	fp,48(sp)
   10ed4:	ddc00b17 	ldw	r23,44(sp)
   10ed8:	dd800a17 	ldw	r22,40(sp)
   10edc:	dd400917 	ldw	r21,36(sp)
   10ee0:	dd000817 	ldw	r20,32(sp)
   10ee4:	dcc00717 	ldw	r19,28(sp)
   10ee8:	dc800617 	ldw	r18,24(sp)
   10eec:	dc400517 	ldw	r17,20(sp)
   10ef0:	dc000417 	ldw	r16,16(sp)
   10ef4:	dec00e04 	addi	sp,sp,56
   10ef8:	f800283a 	ret

00010efc <__clzsi2>:
   10efc:	00bfffd4 	movui	r2,65535
   10f00:	11000e36 	bltu	r2,r4,10f3c <__clzsi2+0x40>
   10f04:	00803fc4 	movi	r2,255
   10f08:	01400204 	movi	r5,8
   10f0c:	0007883a 	mov	r3,zero
   10f10:	11001036 	bltu	r2,r4,10f54 <__clzsi2+0x58>
   10f14:	000b883a 	mov	r5,zero
   10f18:	20c6d83a 	srl	r3,r4,r3
   10f1c:	008000b4 	movhi	r2,2
   10f20:	10a3d904 	addi	r2,r2,-28828
   10f24:	1887883a 	add	r3,r3,r2
   10f28:	18800003 	ldbu	r2,0(r3)
   10f2c:	00c00804 	movi	r3,32
   10f30:	2885883a 	add	r2,r5,r2
   10f34:	1885c83a 	sub	r2,r3,r2
   10f38:	f800283a 	ret
   10f3c:	01400404 	movi	r5,16
   10f40:	00804034 	movhi	r2,256
   10f44:	10bfffc4 	addi	r2,r2,-1
   10f48:	2807883a 	mov	r3,r5
   10f4c:	113ff22e 	bgeu	r2,r4,10f18 <__clzsi2+0x1c>
   10f50:	01400604 	movi	r5,24
   10f54:	2807883a 	mov	r3,r5
   10f58:	20c6d83a 	srl	r3,r4,r3
   10f5c:	008000b4 	movhi	r2,2
   10f60:	10a3d904 	addi	r2,r2,-28828
   10f64:	1887883a 	add	r3,r3,r2
   10f68:	18800003 	ldbu	r2,0(r3)
   10f6c:	00c00804 	movi	r3,32
   10f70:	2885883a 	add	r2,r5,r2
   10f74:	1885c83a 	sub	r2,r3,r2
   10f78:	f800283a 	ret

00010f7c <__pack_f>:
   10f7c:	20c00017 	ldw	r3,0(r4)
   10f80:	01c00044 	movi	r7,1
   10f84:	21800317 	ldw	r6,12(r4)
   10f88:	21400117 	ldw	r5,4(r4)
   10f8c:	38c02d2e 	bgeu	r7,r3,11044 <__pack_f+0xc8>
   10f90:	00800104 	movi	r2,4
   10f94:	18802826 	beq	r3,r2,11038 <__pack_f+0xbc>
   10f98:	00800084 	movi	r2,2
   10f9c:	18800126 	beq	r3,r2,10fa4 <__pack_f+0x28>
   10fa0:	3000101e 	bne	r6,zero,10fe4 <__pack_f+0x68>
   10fa4:	000d883a 	mov	r6,zero
   10fa8:	0007883a 	mov	r3,zero
   10fac:	19003fcc 	andi	r4,r3,255
   10fb0:	200895fa 	slli	r4,r4,23
   10fb4:	00c02034 	movhi	r3,128
   10fb8:	18ffffc4 	addi	r3,r3,-1
   10fbc:	30c6703a 	and	r3,r6,r3
   10fc0:	10a0002c 	andhi	r2,r2,32768
   10fc4:	10c4b03a 	or	r2,r2,r3
   10fc8:	280a97fa 	slli	r5,r5,31
   10fcc:	1104b03a 	or	r2,r2,r4
   10fd0:	00e00034 	movhi	r3,32768
   10fd4:	18ffffc4 	addi	r3,r3,-1
   10fd8:	10c4703a 	and	r2,r2,r3
   10fdc:	1144b03a 	or	r2,r2,r5
   10fe0:	f800283a 	ret
   10fe4:	21000217 	ldw	r4,8(r4)
   10fe8:	00bfe084 	movi	r2,-126
   10fec:	20801b16 	blt	r4,r2,1105c <__pack_f+0xe0>
   10ff0:	00801fc4 	movi	r2,127
   10ff4:	11001016 	blt	r2,r4,11038 <__pack_f+0xbc>
   10ff8:	308e703a 	and	r7,r6,r2
   10ffc:	2087883a 	add	r3,r4,r2
   11000:	00801004 	movi	r2,64
   11004:	38800526 	beq	r7,r2,1101c <__pack_f+0xa0>
   11008:	31800fc4 	addi	r6,r6,63
   1100c:	30000716 	blt	r6,zero,1102c <__pack_f+0xb0>
   11010:	300490ba 	slli	r2,r6,2
   11014:	100cd27a 	srli	r6,r2,9
   11018:	003fe406 	br	10fac <__pack_f+0x30>
   1101c:	3080200c 	andi	r2,r6,128
   11020:	103ffa26 	beq	r2,zero,1100c <__pack_f+0x90>
   11024:	31cd883a 	add	r6,r6,r7
   11028:	003ff806 	br	1100c <__pack_f+0x90>
   1102c:	300cd07a 	srli	r6,r6,1
   11030:	18c00044 	addi	r3,r3,1
   11034:	003ff606 	br	11010 <__pack_f+0x94>
   11038:	000d883a 	mov	r6,zero
   1103c:	00ffffc4 	movi	r3,-1
   11040:	003fda06 	br	10fac <__pack_f+0x30>
   11044:	31800434 	orhi	r6,r6,16
   11048:	00802034 	movhi	r2,128
   1104c:	10bfffc4 	addi	r2,r2,-1
   11050:	308c703a 	and	r6,r6,r2
   11054:	00ffffc4 	movi	r3,-1
   11058:	003fd406 	br	10fac <__pack_f+0x30>
   1105c:	1109c83a 	sub	r4,r2,r4
   11060:	00800644 	movi	r2,25
   11064:	11001216 	blt	r2,r4,110b0 <__pack_f+0x134>
   11068:	3904983a 	sll	r2,r7,r4
   1106c:	3106d83a 	srl	r3,r6,r4
   11070:	10bfffc4 	addi	r2,r2,-1
   11074:	3084703a 	and	r2,r6,r2
   11078:	1004c03a 	cmpne	r2,r2,zero
   1107c:	1886b03a 	or	r3,r3,r2
   11080:	19001fcc 	andi	r4,r3,127
   11084:	00801004 	movi	r2,64
   11088:	20800c26 	beq	r4,r2,110bc <__pack_f+0x140>
   1108c:	18c00fc4 	addi	r3,r3,63
   11090:	00900034 	movhi	r2,16384
   11094:	10bfffc4 	addi	r2,r2,-1
   11098:	180cd1fa 	srli	r6,r3,7
   1109c:	10c7803a 	cmpltu	r3,r2,r3
   110a0:	00802034 	movhi	r2,128
   110a4:	10bfffc4 	addi	r2,r2,-1
   110a8:	308c703a 	and	r6,r6,r2
   110ac:	003fbf06 	br	10fac <__pack_f+0x30>
   110b0:	0007883a 	mov	r3,zero
   110b4:	000d883a 	mov	r6,zero
   110b8:	003ff906 	br	110a0 <__pack_f+0x124>
   110bc:	1880200c 	andi	r2,r3,128
   110c0:	10000126 	beq	r2,zero,110c8 <__pack_f+0x14c>
   110c4:	1907883a 	add	r3,r3,r4
   110c8:	180cd1fa 	srli	r6,r3,7
   110cc:	00900034 	movhi	r2,16384
   110d0:	10bfffc4 	addi	r2,r2,-1
   110d4:	10c7803a 	cmpltu	r3,r2,r3
   110d8:	003ff106 	br	110a0 <__pack_f+0x124>

000110dc <__unpack_f>:
   110dc:	21800017 	ldw	r6,0(r4)
   110e0:	00c02034 	movhi	r3,128
   110e4:	18ffffc4 	addi	r3,r3,-1
   110e8:	3004d5fa 	srli	r2,r6,23
   110ec:	3008d7fa 	srli	r4,r6,31
   110f0:	30ce703a 	and	r7,r6,r3
   110f4:	10c03fcc 	andi	r3,r2,255
   110f8:	29000115 	stw	r4,4(r5)
   110fc:	1800131e 	bne	r3,zero,1114c <__unpack_f+0x70>
   11100:	38000f26 	beq	r7,zero,11140 <__unpack_f+0x64>
   11104:	380691fa 	slli	r3,r7,7
   11108:	01bfe084 	movi	r6,-126
   1110c:	008000c4 	movi	r2,3
   11110:	01100034 	movhi	r4,16384
   11114:	213fffc4 	addi	r4,r4,-1
   11118:	28800015 	stw	r2,0(r5)
   1111c:	29800215 	stw	r6,8(r5)
   11120:	20c00536 	bltu	r4,r3,11138 <__unpack_f+0x5c>
   11124:	3005883a 	mov	r2,r6
   11128:	18c7883a 	add	r3,r3,r3
   1112c:	10bfffc4 	addi	r2,r2,-1
   11130:	20fffd2e 	bgeu	r4,r3,11128 <__unpack_f+0x4c>
   11134:	28800215 	stw	r2,8(r5)
   11138:	28c00315 	stw	r3,12(r5)
   1113c:	f800283a 	ret
   11140:	00800084 	movi	r2,2
   11144:	28800015 	stw	r2,0(r5)
   11148:	f800283a 	ret
   1114c:	00803fc4 	movi	r2,255
   11150:	18800826 	beq	r3,r2,11174 <__unpack_f+0x98>
   11154:	380491fa 	slli	r2,r7,7
   11158:	18ffe044 	addi	r3,r3,-127
   1115c:	28c00215 	stw	r3,8(r5)
   11160:	10900034 	orhi	r2,r2,16384
   11164:	28800315 	stw	r2,12(r5)
   11168:	008000c4 	movi	r2,3
   1116c:	28800015 	stw	r2,0(r5)
   11170:	f800283a 	ret
   11174:	3800031e 	bne	r7,zero,11184 <__unpack_f+0xa8>
   11178:	00800104 	movi	r2,4
   1117c:	28800015 	stw	r2,0(r5)
   11180:	f800283a 	ret
   11184:	3080042c 	andhi	r2,r6,16
   11188:	10000426 	beq	r2,zero,1119c <__unpack_f+0xc0>
   1118c:	00800044 	movi	r2,1
   11190:	28800015 	stw	r2,0(r5)
   11194:	29c00315 	stw	r7,12(r5)
   11198:	f800283a 	ret
   1119c:	28000015 	stw	zero,0(r5)
   111a0:	003ffc06 	br	11194 <__unpack_f+0xb8>

000111a4 <__pack_d>:
   111a4:	20c00017 	ldw	r3,0(r4)
   111a8:	defffd04 	addi	sp,sp,-12
   111ac:	dc000015 	stw	r16,0(sp)
   111b0:	dc800215 	stw	r18,8(sp)
   111b4:	dc400115 	stw	r17,4(sp)
   111b8:	00800044 	movi	r2,1
   111bc:	22000317 	ldw	r8,12(r4)
   111c0:	001f883a 	mov	r15,zero
   111c4:	22400417 	ldw	r9,16(r4)
   111c8:	24000117 	ldw	r16,4(r4)
   111cc:	10c0552e 	bgeu	r2,r3,11324 <__pack_d+0x180>
   111d0:	00800104 	movi	r2,4
   111d4:	18804f26 	beq	r3,r2,11314 <__pack_d+0x170>
   111d8:	00800084 	movi	r2,2
   111dc:	18800226 	beq	r3,r2,111e8 <__pack_d+0x44>
   111e0:	4244b03a 	or	r2,r8,r9
   111e4:	10001a1e 	bne	r2,zero,11250 <__pack_d+0xac>
   111e8:	000d883a 	mov	r6,zero
   111ec:	000f883a 	mov	r7,zero
   111f0:	0011883a 	mov	r8,zero
   111f4:	00800434 	movhi	r2,16
   111f8:	10bfffc4 	addi	r2,r2,-1
   111fc:	301d883a 	mov	r14,r6
   11200:	3884703a 	and	r2,r7,r2
   11204:	400a953a 	slli	r5,r8,20
   11208:	79bffc2c 	andhi	r6,r15,65520
   1120c:	308cb03a 	or	r6,r6,r2
   11210:	00e00434 	movhi	r3,32784
   11214:	18ffffc4 	addi	r3,r3,-1
   11218:	800497fa 	slli	r2,r16,31
   1121c:	30c6703a 	and	r3,r6,r3
   11220:	1946b03a 	or	r3,r3,r5
   11224:	01600034 	movhi	r5,32768
   11228:	297fffc4 	addi	r5,r5,-1
   1122c:	194a703a 	and	r5,r3,r5
   11230:	288ab03a 	or	r5,r5,r2
   11234:	2807883a 	mov	r3,r5
   11238:	7005883a 	mov	r2,r14
   1123c:	dc800217 	ldw	r18,8(sp)
   11240:	dc400117 	ldw	r17,4(sp)
   11244:	dc000017 	ldw	r16,0(sp)
   11248:	dec00304 	addi	sp,sp,12
   1124c:	f800283a 	ret
   11250:	21000217 	ldw	r4,8(r4)
   11254:	00bf0084 	movi	r2,-1022
   11258:	20803f16 	blt	r4,r2,11358 <__pack_d+0x1b4>
   1125c:	0080ffc4 	movi	r2,1023
   11260:	11002c16 	blt	r2,r4,11314 <__pack_d+0x170>
   11264:	00803fc4 	movi	r2,255
   11268:	408c703a 	and	r6,r8,r2
   1126c:	00802004 	movi	r2,128
   11270:	0007883a 	mov	r3,zero
   11274:	000f883a 	mov	r7,zero
   11278:	2280ffc4 	addi	r10,r4,1023
   1127c:	30801e26 	beq	r6,r2,112f8 <__pack_d+0x154>
   11280:	00801fc4 	movi	r2,127
   11284:	4089883a 	add	r4,r8,r2
   11288:	220d803a 	cmpltu	r6,r4,r8
   1128c:	324d883a 	add	r6,r6,r9
   11290:	2011883a 	mov	r8,r4
   11294:	3013883a 	mov	r9,r6
   11298:	00880034 	movhi	r2,8192
   1129c:	10bfffc4 	addi	r2,r2,-1
   112a0:	12400d36 	bltu	r2,r9,112d8 <__pack_d+0x134>
   112a4:	4804963a 	slli	r2,r9,24
   112a8:	400cd23a 	srli	r6,r8,8
   112ac:	480ed23a 	srli	r7,r9,8
   112b0:	013fffc4 	movi	r4,-1
   112b4:	118cb03a 	or	r6,r2,r6
   112b8:	01400434 	movhi	r5,16
   112bc:	297fffc4 	addi	r5,r5,-1
   112c0:	3104703a 	and	r2,r6,r4
   112c4:	3946703a 	and	r3,r7,r5
   112c8:	5201ffcc 	andi	r8,r10,2047
   112cc:	100d883a 	mov	r6,r2
   112d0:	180f883a 	mov	r7,r3
   112d4:	003fc706 	br	111f4 <__pack_d+0x50>
   112d8:	480897fa 	slli	r4,r9,31
   112dc:	4004d07a 	srli	r2,r8,1
   112e0:	4806d07a 	srli	r3,r9,1
   112e4:	52800044 	addi	r10,r10,1
   112e8:	2084b03a 	or	r2,r4,r2
   112ec:	1011883a 	mov	r8,r2
   112f0:	1813883a 	mov	r9,r3
   112f4:	003feb06 	br	112a4 <__pack_d+0x100>
   112f8:	383fe11e 	bne	r7,zero,11280 <__pack_d+0xdc>
   112fc:	01004004 	movi	r4,256
   11300:	4104703a 	and	r2,r8,r4
   11304:	10c4b03a 	or	r2,r2,r3
   11308:	103fe326 	beq	r2,zero,11298 <__pack_d+0xf4>
   1130c:	3005883a 	mov	r2,r6
   11310:	003fdc06 	br	11284 <__pack_d+0xe0>
   11314:	000d883a 	mov	r6,zero
   11318:	000f883a 	mov	r7,zero
   1131c:	0201ffc4 	movi	r8,2047
   11320:	003fb406 	br	111f4 <__pack_d+0x50>
   11324:	0005883a 	mov	r2,zero
   11328:	00c00234 	movhi	r3,8
   1132c:	408cb03a 	or	r6,r8,r2
   11330:	48ceb03a 	or	r7,r9,r3
   11334:	013fffc4 	movi	r4,-1
   11338:	01400434 	movhi	r5,16
   1133c:	297fffc4 	addi	r5,r5,-1
   11340:	3104703a 	and	r2,r6,r4
   11344:	3946703a 	and	r3,r7,r5
   11348:	100d883a 	mov	r6,r2
   1134c:	180f883a 	mov	r7,r3
   11350:	0201ffc4 	movi	r8,2047
   11354:	003fa706 	br	111f4 <__pack_d+0x50>
   11358:	1109c83a 	sub	r4,r2,r4
   1135c:	00800e04 	movi	r2,56
   11360:	11004316 	blt	r2,r4,11470 <__pack_d+0x2cc>
   11364:	21fff804 	addi	r7,r4,-32
   11368:	38004516 	blt	r7,zero,11480 <__pack_d+0x2dc>
   1136c:	49d8d83a 	srl	r12,r9,r7
   11370:	001b883a 	mov	r13,zero
   11374:	0023883a 	mov	r17,zero
   11378:	01400044 	movi	r5,1
   1137c:	0025883a 	mov	r18,zero
   11380:	38004716 	blt	r7,zero,114a0 <__pack_d+0x2fc>
   11384:	29d6983a 	sll	r11,r5,r7
   11388:	0015883a 	mov	r10,zero
   1138c:	00bfffc4 	movi	r2,-1
   11390:	5089883a 	add	r4,r10,r2
   11394:	588b883a 	add	r5,r11,r2
   11398:	228d803a 	cmpltu	r6,r4,r10
   1139c:	314b883a 	add	r5,r6,r5
   113a0:	4104703a 	and	r2,r8,r4
   113a4:	4946703a 	and	r3,r9,r5
   113a8:	10c4b03a 	or	r2,r2,r3
   113ac:	10000226 	beq	r2,zero,113b8 <__pack_d+0x214>
   113b0:	04400044 	movi	r17,1
   113b4:	0025883a 	mov	r18,zero
   113b8:	00803fc4 	movi	r2,255
   113bc:	644eb03a 	or	r7,r12,r17
   113c0:	3892703a 	and	r9,r7,r2
   113c4:	00802004 	movi	r2,128
   113c8:	6c90b03a 	or	r8,r13,r18
   113cc:	0015883a 	mov	r10,zero
   113d0:	48801626 	beq	r9,r2,1142c <__pack_d+0x288>
   113d4:	01001fc4 	movi	r4,127
   113d8:	3905883a 	add	r2,r7,r4
   113dc:	11cd803a 	cmpltu	r6,r2,r7
   113e0:	320d883a 	add	r6,r6,r8
   113e4:	100f883a 	mov	r7,r2
   113e8:	00840034 	movhi	r2,4096
   113ec:	10bfffc4 	addi	r2,r2,-1
   113f0:	3011883a 	mov	r8,r6
   113f4:	0007883a 	mov	r3,zero
   113f8:	11801b36 	bltu	r2,r6,11468 <__pack_d+0x2c4>
   113fc:	4004963a 	slli	r2,r8,24
   11400:	3808d23a 	srli	r4,r7,8
   11404:	400ad23a 	srli	r5,r8,8
   11408:	1813883a 	mov	r9,r3
   1140c:	1108b03a 	or	r4,r2,r4
   11410:	00bfffc4 	movi	r2,-1
   11414:	00c00434 	movhi	r3,16
   11418:	18ffffc4 	addi	r3,r3,-1
   1141c:	208c703a 	and	r6,r4,r2
   11420:	28ce703a 	and	r7,r5,r3
   11424:	4a01ffcc 	andi	r8,r9,2047
   11428:	003f7206 	br	111f4 <__pack_d+0x50>
   1142c:	503fe91e 	bne	r10,zero,113d4 <__pack_d+0x230>
   11430:	01004004 	movi	r4,256
   11434:	3904703a 	and	r2,r7,r4
   11438:	0007883a 	mov	r3,zero
   1143c:	10c4b03a 	or	r2,r2,r3
   11440:	10000626 	beq	r2,zero,1145c <__pack_d+0x2b8>
   11444:	3a45883a 	add	r2,r7,r9
   11448:	11cd803a 	cmpltu	r6,r2,r7
   1144c:	320d883a 	add	r6,r6,r8
   11450:	100f883a 	mov	r7,r2
   11454:	3011883a 	mov	r8,r6
   11458:	0007883a 	mov	r3,zero
   1145c:	00840034 	movhi	r2,4096
   11460:	10bfffc4 	addi	r2,r2,-1
   11464:	123fe52e 	bgeu	r2,r8,113fc <__pack_d+0x258>
   11468:	00c00044 	movi	r3,1
   1146c:	003fe306 	br	113fc <__pack_d+0x258>
   11470:	0009883a 	mov	r4,zero
   11474:	0013883a 	mov	r9,zero
   11478:	000b883a 	mov	r5,zero
   1147c:	003fe406 	br	11410 <__pack_d+0x26c>
   11480:	4a47883a 	add	r3,r9,r9
   11484:	008007c4 	movi	r2,31
   11488:	1105c83a 	sub	r2,r2,r4
   1148c:	1886983a 	sll	r3,r3,r2
   11490:	4118d83a 	srl	r12,r8,r4
   11494:	491ad83a 	srl	r13,r9,r4
   11498:	1b18b03a 	or	r12,r3,r12
   1149c:	003fb506 	br	11374 <__pack_d+0x1d0>
   114a0:	2806d07a 	srli	r3,r5,1
   114a4:	008007c4 	movi	r2,31
   114a8:	1105c83a 	sub	r2,r2,r4
   114ac:	1896d83a 	srl	r11,r3,r2
   114b0:	2914983a 	sll	r10,r5,r4
   114b4:	003fb506 	br	1138c <__pack_d+0x1e8>

000114b8 <__mulsi3>:
   114b8:	20000a26 	beq	r4,zero,114e4 <__mulsi3+0x2c>
   114bc:	0007883a 	mov	r3,zero
   114c0:	2080004c 	andi	r2,r4,1
   114c4:	1005003a 	cmpeq	r2,r2,zero
   114c8:	2008d07a 	srli	r4,r4,1
   114cc:	1000011e 	bne	r2,zero,114d4 <__mulsi3+0x1c>
   114d0:	1947883a 	add	r3,r3,r5
   114d4:	294b883a 	add	r5,r5,r5
   114d8:	203ff91e 	bne	r4,zero,114c0 <__mulsi3+0x8>
   114dc:	1805883a 	mov	r2,r3
   114e0:	f800283a 	ret
   114e4:	0007883a 	mov	r3,zero
   114e8:	1805883a 	mov	r2,r3
   114ec:	f800283a 	ret

000114f0 <gcvt>:
   114f0:	defff804 	addi	sp,sp,-32
   114f4:	0005883a 	mov	r2,zero
   114f8:	dcc00615 	stw	r19,24(sp)
   114fc:	dc800515 	stw	r18,20(sp)
   11500:	3027883a 	mov	r19,r6
   11504:	3825883a 	mov	r18,r7
   11508:	100d883a 	mov	r6,r2
   1150c:	000f883a 	mov	r7,zero
   11510:	dc400415 	stw	r17,16(sp)
   11514:	dc000315 	stw	r16,12(sp)
   11518:	dfc00715 	stw	ra,28(sp)
   1151c:	2021883a 	mov	r16,r4
   11520:	2823883a 	mov	r17,r5
   11524:	0016e580 	call	16e58 <__ltdf2>
   11528:	9007883a 	mov	r3,r18
   1152c:	10001516 	blt	r2,zero,11584 <gcvt+0x94>
   11530:	008000b4 	movhi	r2,2
   11534:	10a62704 	addi	r2,r2,-26468
   11538:	11000017 	ldw	r4,0(r2)
   1153c:	980f883a 	mov	r7,r19
   11540:	008019c4 	movi	r2,103
   11544:	880d883a 	mov	r6,r17
   11548:	800b883a 	mov	r5,r16
   1154c:	d8c00015 	stw	r3,0(sp)
   11550:	d8800115 	stw	r2,4(sp)
   11554:	d8000215 	stw	zero,8(sp)
   11558:	00119b40 	call	119b4 <_gcvt>
   1155c:	900f883a 	mov	r7,r18
   11560:	10000d26 	beq	r2,zero,11598 <gcvt+0xa8>
   11564:	3805883a 	mov	r2,r7
   11568:	dfc00717 	ldw	ra,28(sp)
   1156c:	dcc00617 	ldw	r19,24(sp)
   11570:	dc800517 	ldw	r18,20(sp)
   11574:	dc400417 	ldw	r17,16(sp)
   11578:	dc000317 	ldw	r16,12(sp)
   1157c:	dec00804 	addi	sp,sp,32
   11580:	f800283a 	ret
   11584:	00800b44 	movi	r2,45
   11588:	9cffffc4 	addi	r19,r19,-1
   1158c:	90c00044 	addi	r3,r18,1
   11590:	90800005 	stb	r2,0(r18)
   11594:	003fe606 	br	11530 <gcvt+0x40>
   11598:	000f883a 	mov	r7,zero
   1159c:	3805883a 	mov	r2,r7
   115a0:	dfc00717 	ldw	ra,28(sp)
   115a4:	dcc00617 	ldw	r19,24(sp)
   115a8:	dc800517 	ldw	r18,20(sp)
   115ac:	dc400417 	ldw	r17,16(sp)
   115b0:	dc000317 	ldw	r16,12(sp)
   115b4:	dec00804 	addi	sp,sp,32
   115b8:	f800283a 	ret

000115bc <gcvtf>:
   115bc:	defffd04 	addi	sp,sp,-12
   115c0:	dcc00115 	stw	r19,4(sp)
   115c4:	dc400015 	stw	r17,0(sp)
   115c8:	3027883a 	mov	r19,r6
   115cc:	2823883a 	mov	r17,r5
   115d0:	dfc00215 	stw	ra,8(sp)
   115d4:	00160c40 	call	160c4 <__extendsfdf2>
   115d8:	180b883a 	mov	r5,r3
   115dc:	880d883a 	mov	r6,r17
   115e0:	980f883a 	mov	r7,r19
   115e4:	1009883a 	mov	r4,r2
   115e8:	dfc00217 	ldw	ra,8(sp)
   115ec:	dcc00117 	ldw	r19,4(sp)
   115f0:	dc400017 	ldw	r17,0(sp)
   115f4:	dec00304 	addi	sp,sp,12
   115f8:	00114f01 	jmpi	114f0 <gcvt>

000115fc <ecvt>:
   115fc:	defffd04 	addi	sp,sp,-12
   11600:	da000317 	ldw	r8,12(sp)
   11604:	dfc00215 	stw	ra,8(sp)
   11608:	d8000115 	stw	zero,4(sp)
   1160c:	da000015 	stw	r8,0(sp)
   11610:	0011f8c0 	call	11f8c <ecvtbuf>
   11614:	dfc00217 	ldw	ra,8(sp)
   11618:	dec00304 	addi	sp,sp,12
   1161c:	f800283a 	ret

00011620 <ecvtf>:
   11620:	defffb04 	addi	sp,sp,-20
   11624:	dfc00415 	stw	ra,16(sp)
   11628:	dd400315 	stw	r21,12(sp)
   1162c:	dcc00215 	stw	r19,8(sp)
   11630:	382b883a 	mov	r21,r7
   11634:	3027883a 	mov	r19,r6
   11638:	dc400115 	stw	r17,4(sp)
   1163c:	2823883a 	mov	r17,r5
   11640:	00160c40 	call	160c4 <__extendsfdf2>
   11644:	180b883a 	mov	r5,r3
   11648:	880d883a 	mov	r6,r17
   1164c:	980f883a 	mov	r7,r19
   11650:	1009883a 	mov	r4,r2
   11654:	dd400015 	stw	r21,0(sp)
   11658:	00115fc0 	call	115fc <ecvt>
   1165c:	dfc00417 	ldw	ra,16(sp)
   11660:	dd400317 	ldw	r21,12(sp)
   11664:	dcc00217 	ldw	r19,8(sp)
   11668:	dc400117 	ldw	r17,4(sp)
   1166c:	dec00504 	addi	sp,sp,20
   11670:	f800283a 	ret

00011674 <fcvt>:
   11674:	defffd04 	addi	sp,sp,-12
   11678:	da000317 	ldw	r8,12(sp)
   1167c:	dfc00215 	stw	ra,8(sp)
   11680:	d8000115 	stw	zero,4(sp)
   11684:	da000015 	stw	r8,0(sp)
   11688:	00120d40 	call	120d4 <fcvtbuf>
   1168c:	dfc00217 	ldw	ra,8(sp)
   11690:	dec00304 	addi	sp,sp,12
   11694:	f800283a 	ret

00011698 <fcvtf>:
   11698:	defffb04 	addi	sp,sp,-20
   1169c:	dfc00415 	stw	ra,16(sp)
   116a0:	dd400315 	stw	r21,12(sp)
   116a4:	dcc00215 	stw	r19,8(sp)
   116a8:	382b883a 	mov	r21,r7
   116ac:	3027883a 	mov	r19,r6
   116b0:	dc400115 	stw	r17,4(sp)
   116b4:	2823883a 	mov	r17,r5
   116b8:	00160c40 	call	160c4 <__extendsfdf2>
   116bc:	180b883a 	mov	r5,r3
   116c0:	880d883a 	mov	r6,r17
   116c4:	980f883a 	mov	r7,r19
   116c8:	1009883a 	mov	r4,r2
   116cc:	dd400015 	stw	r21,0(sp)
   116d0:	00116740 	call	11674 <fcvt>
   116d4:	dfc00417 	ldw	ra,16(sp)
   116d8:	dd400317 	ldw	r21,12(sp)
   116dc:	dcc00217 	ldw	r19,8(sp)
   116e0:	dc400117 	ldw	r17,4(sp)
   116e4:	dec00504 	addi	sp,sp,20
   116e8:	f800283a 	ret

000116ec <_puts_r>:
   116ec:	defffd04 	addi	sp,sp,-12
   116f0:	dc000015 	stw	r16,0(sp)
   116f4:	2021883a 	mov	r16,r4
   116f8:	2809883a 	mov	r4,r5
   116fc:	dfc00215 	stw	ra,8(sp)
   11700:	dc400115 	stw	r17,4(sp)
   11704:	2823883a 	mov	r17,r5
   11708:	00117900 	call	11790 <strlen>
   1170c:	80c00217 	ldw	r3,8(r16)
   11710:	02000074 	movhi	r8,1
   11714:	42089f04 	addi	r8,r8,8828
   11718:	880d883a 	mov	r6,r17
   1171c:	100f883a 	mov	r7,r2
   11720:	8009883a 	mov	r4,r16
   11724:	180b883a 	mov	r5,r3
   11728:	1a000115 	stw	r8,4(r3)
   1172c:	403ee83a 	callr	r8
   11730:	047fffc4 	movi	r17,-1
   11734:	8009883a 	mov	r4,r16
   11738:	018000b4 	movhi	r6,2
   1173c:	31a41904 	addi	r6,r6,-28572
   11740:	01c00044 	movi	r7,1
   11744:	1440071e 	bne	r2,r17,11764 <_puts_r+0x78>
   11748:	00ffffc4 	movi	r3,-1
   1174c:	1805883a 	mov	r2,r3
   11750:	dfc00217 	ldw	ra,8(sp)
   11754:	dc400117 	ldw	r17,4(sp)
   11758:	dc000017 	ldw	r16,0(sp)
   1175c:	dec00304 	addi	sp,sp,12
   11760:	f800283a 	ret
   11764:	81400217 	ldw	r5,8(r16)
   11768:	28c00117 	ldw	r3,4(r5)
   1176c:	183ee83a 	callr	r3
   11770:	0007883a 	mov	r3,zero
   11774:	147ff51e 	bne	r2,r17,1174c <_puts_r+0x60>
   11778:	003ff306 	br	11748 <_puts_r+0x5c>

0001177c <puts>:
   1177c:	008000b4 	movhi	r2,2
   11780:	10a62704 	addi	r2,r2,-26468
   11784:	200b883a 	mov	r5,r4
   11788:	11000017 	ldw	r4,0(r2)
   1178c:	00116ec1 	jmpi	116ec <_puts_r>

00011790 <strlen>:
   11790:	20800007 	ldb	r2,0(r4)
   11794:	10000526 	beq	r2,zero,117ac <strlen+0x1c>
   11798:	2007883a 	mov	r3,r4
   1179c:	18c00044 	addi	r3,r3,1
   117a0:	18800007 	ldb	r2,0(r3)
   117a4:	103ffd1e 	bne	r2,zero,1179c <strlen+0xc>
   117a8:	1905c83a 	sub	r2,r3,r4
   117ac:	f800283a 	ret

000117b0 <print_e>:
   117b0:	defff404 	addi	sp,sp,-48
   117b4:	dcc00a15 	stw	r19,40(sp)
   117b8:	dcc00c17 	ldw	r19,48(sp)
   117bc:	3005883a 	mov	r2,r6
   117c0:	dc400815 	stw	r17,32(sp)
   117c4:	2823883a 	mov	r17,r5
   117c8:	100b883a 	mov	r5,r2
   117cc:	d8800604 	addi	r2,sp,24
   117d0:	380d883a 	mov	r6,r7
   117d4:	9a000044 	addi	r8,r19,1
   117d8:	d8800115 	stw	r2,4(sp)
   117dc:	d8c00504 	addi	r3,sp,20
   117e0:	d8800404 	addi	r2,sp,16
   117e4:	01c00084 	movi	r7,2
   117e8:	dc800915 	stw	r18,36(sp)
   117ec:	dc000715 	stw	r16,28(sp)
   117f0:	dfc00b15 	stw	ra,44(sp)
   117f4:	da000015 	stw	r8,0(sp)
   117f8:	d8c00315 	stw	r3,12(sp)
   117fc:	d8800215 	stw	r2,8(sp)
   11800:	dc800d03 	ldbu	r18,52(sp)
   11804:	0013e0c0 	call	13e0c <_dtoa_r>
   11808:	dc000617 	ldw	r16,24(sp)
   1180c:	100b883a 	mov	r5,r2
   11810:	0089c3c4 	movi	r2,9999
   11814:	80805e26 	beq	r16,r2,11990 <print_e+0x1e0>
   11818:	28c00003 	ldbu	r3,0(r5)
   1181c:	89000044 	addi	r4,r17,1
   11820:	29400044 	addi	r5,r5,1
   11824:	88c00005 	stb	r3,0(r17)
   11828:	d8800e17 	ldw	r2,56(sp)
   1182c:	10004826 	beq	r2,zero,11950 <print_e+0x1a0>
   11830:	00800b84 	movi	r2,46
   11834:	20800005 	stb	r2,0(r4)
   11838:	9811883a 	mov	r8,r19
   1183c:	21000044 	addi	r4,r4,1
   11840:	28800003 	ldbu	r2,0(r5)
   11844:	10000926 	beq	r2,zero,1186c <print_e+0xbc>
   11848:	02000216 	blt	zero,r8,11854 <print_e+0xa4>
   1184c:	00000706 	br	1186c <print_e+0xbc>
   11850:	40000626 	beq	r8,zero,1186c <print_e+0xbc>
   11854:	20800005 	stb	r2,0(r4)
   11858:	29400044 	addi	r5,r5,1
   1185c:	28800003 	ldbu	r2,0(r5)
   11860:	423fffc4 	addi	r8,r8,-1
   11864:	21000044 	addi	r4,r4,1
   11868:	103ff91e 	bne	r2,zero,11850 <print_e+0xa0>
   1186c:	90c03fcc 	andi	r3,r18,255
   11870:	18c0201c 	xori	r3,r3,128
   11874:	18ffe004 	addi	r3,r3,-128
   11878:	008019c4 	movi	r2,103
   1187c:	18803726 	beq	r3,r2,1195c <print_e+0x1ac>
   11880:	008011c4 	movi	r2,71
   11884:	18804026 	beq	r3,r2,11988 <print_e+0x1d8>
   11888:	0200080e 	bge	zero,r8,118ac <print_e+0xfc>
   1188c:	4007883a 	mov	r3,r8
   11890:	2005883a 	mov	r2,r4
   11894:	01400c04 	movi	r5,48
   11898:	18ffffc4 	addi	r3,r3,-1
   1189c:	11400005 	stb	r5,0(r2)
   118a0:	10800044 	addi	r2,r2,1
   118a4:	183ffc1e 	bne	r3,zero,11898 <print_e+0xe8>
   118a8:	2209883a 	add	r4,r4,r8
   118ac:	843fffc4 	addi	r16,r16,-1
   118b0:	24800005 	stb	r18,0(r4)
   118b4:	dc000615 	stw	r16,24(sp)
   118b8:	80002d16 	blt	r16,zero,11970 <print_e+0x1c0>
   118bc:	00800ac4 	movi	r2,43
   118c0:	20800045 	stb	r2,1(r4)
   118c4:	24400084 	addi	r17,r4,2
   118c8:	008018c4 	movi	r2,99
   118cc:	14000b0e 	bge	r2,r16,118fc <print_e+0x14c>
   118d0:	8009883a 	mov	r4,r16
   118d4:	01401904 	movi	r5,100
   118d8:	00170f40 	call	170f4 <__divsi3>
   118dc:	1009883a 	mov	r4,r2
   118e0:	10800c04 	addi	r2,r2,48
   118e4:	88800005 	stb	r2,0(r17)
   118e8:	01401904 	movi	r5,100
   118ec:	00114b80 	call	114b8 <__mulsi3>
   118f0:	80a1c83a 	sub	r16,r16,r2
   118f4:	8c400044 	addi	r17,r17,1
   118f8:	dc000615 	stw	r16,24(sp)
   118fc:	8009883a 	mov	r4,r16
   11900:	01400284 	movi	r5,10
   11904:	00170f40 	call	170f4 <__divsi3>
   11908:	1009883a 	mov	r4,r2
   1190c:	10800c04 	addi	r2,r2,48
   11910:	88800005 	stb	r2,0(r17)
   11914:	01400284 	movi	r5,10
   11918:	00114b80 	call	114b8 <__mulsi3>
   1191c:	8085c83a 	sub	r2,r16,r2
   11920:	10c00c04 	addi	r3,r2,48
   11924:	88c00045 	stb	r3,1(r17)
   11928:	89000044 	addi	r4,r17,1
   1192c:	20000045 	stb	zero,1(r4)
   11930:	d8800615 	stw	r2,24(sp)
   11934:	dfc00b17 	ldw	ra,44(sp)
   11938:	dcc00a17 	ldw	r19,40(sp)
   1193c:	dc800917 	ldw	r18,36(sp)
   11940:	dc400817 	ldw	r17,32(sp)
   11944:	dc000717 	ldw	r16,28(sp)
   11948:	dec00c04 	addi	sp,sp,48
   1194c:	f800283a 	ret
   11950:	983fb71e 	bne	r19,zero,11830 <print_e+0x80>
   11954:	0011883a 	mov	r8,zero
   11958:	003fb906 	br	11840 <print_e+0x90>
   1195c:	04801944 	movi	r18,101
   11960:	843fffc4 	addi	r16,r16,-1
   11964:	24800005 	stb	r18,0(r4)
   11968:	dc000615 	stw	r16,24(sp)
   1196c:	803fd30e 	bge	r16,zero,118bc <print_e+0x10c>
   11970:	00800b44 	movi	r2,45
   11974:	0421c83a 	sub	r16,zero,r16
   11978:	20800045 	stb	r2,1(r4)
   1197c:	24400084 	addi	r17,r4,2
   11980:	dc000615 	stw	r16,24(sp)
   11984:	003fd006 	br	118c8 <print_e+0x118>
   11988:	04801144 	movi	r18,69
   1198c:	003fc706 	br	118ac <print_e+0xfc>
   11990:	8809883a 	mov	r4,r17
   11994:	0013a680 	call	13a68 <strcpy>
   11998:	dfc00b17 	ldw	ra,44(sp)
   1199c:	dcc00a17 	ldw	r19,40(sp)
   119a0:	dc800917 	ldw	r18,36(sp)
   119a4:	dc400817 	ldw	r17,32(sp)
   119a8:	dc000717 	ldw	r16,28(sp)
   119ac:	dec00c04 	addi	sp,sp,48
   119b0:	f800283a 	ret

000119b4 <_gcvt>:
   119b4:	defff104 	addi	sp,sp,-60
   119b8:	dc400815 	stw	r17,32(sp)
   119bc:	0005883a 	mov	r2,zero
   119c0:	3023883a 	mov	r17,r6
   119c4:	dcc00a15 	stw	r19,40(sp)
   119c8:	dc800915 	stw	r18,36(sp)
   119cc:	dc000715 	stw	r16,28(sp)
   119d0:	2027883a 	mov	r19,r4
   119d4:	2821883a 	mov	r16,r5
   119d8:	3825883a 	mov	r18,r7
   119dc:	2809883a 	mov	r4,r5
   119e0:	100d883a 	mov	r6,r2
   119e4:	880b883a 	mov	r5,r17
   119e8:	000f883a 	mov	r7,zero
   119ec:	dd800d15 	stw	r22,52(sp)
   119f0:	dd400c15 	stw	r21,48(sp)
   119f4:	dd000b15 	stw	r20,44(sp)
   119f8:	dfc00e15 	stw	ra,56(sp)
   119fc:	dd400f17 	ldw	r21,60(sp)
   11a00:	dd801117 	ldw	r22,68(sp)
   11a04:	dd001003 	ldbu	r20,64(sp)
   11a08:	0016e580 	call	16e58 <__ltdf2>
   11a0c:	10008e16 	blt	r2,zero,11c48 <_gcvt+0x294>
   11a10:	000d883a 	mov	r6,zero
   11a14:	000f883a 	mov	r7,zero
   11a18:	8009883a 	mov	r4,r16
   11a1c:	880b883a 	mov	r5,r17
   11a20:	0016c380 	call	16c38 <__eqdf2>
   11a24:	10000e1e 	bne	r2,zero,11a60 <_gcvt+0xac>
   11a28:	00800c04 	movi	r2,48
   11a2c:	a8800005 	stb	r2,0(r21)
   11a30:	a8000045 	stb	zero,1(r21)
   11a34:	a805883a 	mov	r2,r21
   11a38:	dfc00e17 	ldw	ra,56(sp)
   11a3c:	dd800d17 	ldw	r22,52(sp)
   11a40:	dd400c17 	ldw	r21,48(sp)
   11a44:	dd000b17 	ldw	r20,44(sp)
   11a48:	dcc00a17 	ldw	r19,40(sp)
   11a4c:	dc800917 	ldw	r18,36(sp)
   11a50:	dc400817 	ldw	r17,32(sp)
   11a54:	dc000717 	ldw	r16,28(sp)
   11a58:	dec00f04 	addi	sp,sp,60
   11a5c:	f800283a 	ret
   11a60:	00bac734 	movhi	r2,60188
   11a64:	1090cb44 	addi	r2,r2,17197
   11a68:	00cfc6b4 	movhi	r3,16154
   11a6c:	18cdb884 	addi	r3,r3,14050
   11a70:	180f883a 	mov	r7,r3
   11a74:	8009883a 	mov	r4,r16
   11a78:	880b883a 	mov	r5,r17
   11a7c:	100d883a 	mov	r6,r2
   11a80:	0016ee00 	call	16ee0 <__ledf2>
   11a84:	00800d16 	blt	zero,r2,11abc <_gcvt+0x108>
   11a88:	a0c03fcc 	andi	r3,r20,255
   11a8c:	18c0201c 	xori	r3,r3,128
   11a90:	90bfffc4 	addi	r2,r18,-1
   11a94:	18ffe004 	addi	r3,r3,-128
   11a98:	9809883a 	mov	r4,r19
   11a9c:	880f883a 	mov	r7,r17
   11aa0:	a80b883a 	mov	r5,r21
   11aa4:	800d883a 	mov	r6,r16
   11aa8:	d8800015 	stw	r2,0(sp)
   11aac:	d8c00115 	stw	r3,4(sp)
   11ab0:	dd800215 	stw	r22,8(sp)
   11ab4:	00117b00 	call	117b0 <print_e>
   11ab8:	003fde06 	br	11a34 <_gcvt+0x80>
   11abc:	9009883a 	mov	r4,r18
   11ac0:	001271c0 	call	1271c <_mprec_log10>
   11ac4:	180f883a 	mov	r7,r3
   11ac8:	8009883a 	mov	r4,r16
   11acc:	880b883a 	mov	r5,r17
   11ad0:	100d883a 	mov	r6,r2
   11ad4:	0016dd00 	call	16dd0 <__gedf2>
   11ad8:	103feb0e 	bge	r2,zero,11a88 <_gcvt+0xd4>
   11adc:	0005883a 	mov	r2,zero
   11ae0:	00cffc34 	movhi	r3,16368
   11ae4:	180f883a 	mov	r7,r3
   11ae8:	8009883a 	mov	r4,r16
   11aec:	880b883a 	mov	r5,r17
   11af0:	100d883a 	mov	r6,r2
   11af4:	0016e580 	call	16e58 <__ltdf2>
   11af8:	10005616 	blt	r2,zero,11c54 <_gcvt+0x2a0>
   11afc:	9809883a 	mov	r4,r19
   11b00:	880d883a 	mov	r6,r17
   11b04:	800b883a 	mov	r5,r16
   11b08:	01c00084 	movi	r7,2
   11b0c:	d8800504 	addi	r2,sp,20
   11b10:	d8800215 	stw	r2,8(sp)
   11b14:	d8c00604 	addi	r3,sp,24
   11b18:	d8800404 	addi	r2,sp,16
   11b1c:	d8c00315 	stw	r3,12(sp)
   11b20:	dc800015 	stw	r18,0(sp)
   11b24:	d8800115 	stw	r2,4(sp)
   11b28:	0013e0c0 	call	13e0c <_dtoa_r>
   11b2c:	d9000417 	ldw	r4,16(sp)
   11b30:	100b883a 	mov	r5,r2
   11b34:	0089c3c4 	movi	r2,9999
   11b38:	20804b26 	beq	r4,r2,11c68 <_gcvt+0x2b4>
   11b3c:	28800003 	ldbu	r2,0(r5)
   11b40:	10005026 	beq	r2,zero,11c84 <_gcvt+0x2d0>
   11b44:	0100510e 	bge	zero,r4,11c8c <_gcvt+0x2d8>
   11b48:	a807883a 	mov	r3,r21
   11b4c:	00000106 	br	11b54 <_gcvt+0x1a0>
   11b50:	0100130e 	bge	zero,r4,11ba0 <_gcvt+0x1ec>
   11b54:	18800005 	stb	r2,0(r3)
   11b58:	213fffc4 	addi	r4,r4,-1
   11b5c:	d9000415 	stw	r4,16(sp)
   11b60:	29400044 	addi	r5,r5,1
   11b64:	28800003 	ldbu	r2,0(r5)
   11b68:	18c00044 	addi	r3,r3,1
   11b6c:	94bfffc4 	addi	r18,r18,-1
   11b70:	103ff71e 	bne	r2,zero,11b50 <_gcvt+0x19c>
   11b74:	01000a0e 	bge	zero,r4,11ba0 <_gcvt+0x1ec>
   11b78:	0480090e 	bge	zero,r18,11ba0 <_gcvt+0x1ec>
   11b7c:	00800c04 	movi	r2,48
   11b80:	00000106 	br	11b88 <_gcvt+0x1d4>
   11b84:	90000526 	beq	r18,zero,11b9c <_gcvt+0x1e8>
   11b88:	213fffc4 	addi	r4,r4,-1
   11b8c:	18800005 	stb	r2,0(r3)
   11b90:	94bfffc4 	addi	r18,r18,-1
   11b94:	18c00044 	addi	r3,r3,1
   11b98:	013ffa16 	blt	zero,r4,11b84 <_gcvt+0x1d0>
   11b9c:	d9000415 	stw	r4,16(sp)
   11ba0:	b000021e 	bne	r22,zero,11bac <_gcvt+0x1f8>
   11ba4:	28800007 	ldb	r2,0(r5)
   11ba8:	10002526 	beq	r2,zero,11c40 <_gcvt+0x28c>
   11bac:	a8c03126 	beq	r21,r3,11c74 <_gcvt+0x2c0>
   11bb0:	00800b84 	movi	r2,46
   11bb4:	18800005 	stb	r2,0(r3)
   11bb8:	18c00044 	addi	r3,r3,1
   11bbc:	20000b0e 	bge	r4,zero,11bec <_gcvt+0x238>
   11bc0:	04800a0e 	bge	zero,r18,11bec <_gcvt+0x238>
   11bc4:	01800c04 	movi	r6,48
   11bc8:	00000106 	br	11bd0 <_gcvt+0x21c>
   11bcc:	90000626 	beq	r18,zero,11be8 <_gcvt+0x234>
   11bd0:	20800044 	addi	r2,r4,1
   11bd4:	19800005 	stb	r6,0(r3)
   11bd8:	94bfffc4 	addi	r18,r18,-1
   11bdc:	18c00044 	addi	r3,r3,1
   11be0:	1009883a 	mov	r4,r2
   11be4:	103ff916 	blt	r2,zero,11bcc <_gcvt+0x218>
   11be8:	d8800415 	stw	r2,16(sp)
   11bec:	28800003 	ldbu	r2,0(r5)
   11bf0:	10000926 	beq	r2,zero,11c18 <_gcvt+0x264>
   11bf4:	04800216 	blt	zero,r18,11c00 <_gcvt+0x24c>
   11bf8:	00000706 	br	11c18 <_gcvt+0x264>
   11bfc:	90000626 	beq	r18,zero,11c18 <_gcvt+0x264>
   11c00:	18800005 	stb	r2,0(r3)
   11c04:	29400044 	addi	r5,r5,1
   11c08:	28800003 	ldbu	r2,0(r5)
   11c0c:	94bfffc4 	addi	r18,r18,-1
   11c10:	18c00044 	addi	r3,r3,1
   11c14:	103ff91e 	bne	r2,zero,11bfc <_gcvt+0x248>
   11c18:	b0000926 	beq	r22,zero,11c40 <_gcvt+0x28c>
   11c1c:	0480080e 	bge	zero,r18,11c40 <_gcvt+0x28c>
   11c20:	9009883a 	mov	r4,r18
   11c24:	1805883a 	mov	r2,r3
   11c28:	01400c04 	movi	r5,48
   11c2c:	213fffc4 	addi	r4,r4,-1
   11c30:	11400005 	stb	r5,0(r2)
   11c34:	10800044 	addi	r2,r2,1
   11c38:	203ffc1e 	bne	r4,zero,11c2c <_gcvt+0x278>
   11c3c:	1c87883a 	add	r3,r3,r18
   11c40:	18000005 	stb	zero,0(r3)
   11c44:	003f7b06 	br	11a34 <_gcvt+0x80>
   11c48:	88e0003c 	xorhi	r3,r17,32768
   11c4c:	1823883a 	mov	r17,r3
   11c50:	003f6f06 	br	11a10 <_gcvt+0x5c>
   11c54:	9809883a 	mov	r4,r19
   11c58:	880d883a 	mov	r6,r17
   11c5c:	800b883a 	mov	r5,r16
   11c60:	01c000c4 	movi	r7,3
   11c64:	003fa906 	br	11b0c <_gcvt+0x158>
   11c68:	a809883a 	mov	r4,r21
   11c6c:	0013a680 	call	13a68 <strcpy>
   11c70:	003f7006 	br	11a34 <_gcvt+0x80>
   11c74:	00800c04 	movi	r2,48
   11c78:	a8c00044 	addi	r3,r21,1
   11c7c:	a8800005 	stb	r2,0(r21)
   11c80:	003fcb06 	br	11bb0 <_gcvt+0x1fc>
   11c84:	a807883a 	mov	r3,r21
   11c88:	003fba06 	br	11b74 <_gcvt+0x1c0>
   11c8c:	a807883a 	mov	r3,r21
   11c90:	003fc306 	br	11ba0 <_gcvt+0x1ec>

00011c94 <_dcvt>:
   11c94:	defff504 	addi	sp,sp,-44
   11c98:	d8800d17 	ldw	r2,52(sp)
   11c9c:	3011883a 	mov	r8,r6
   11ca0:	dc800915 	stw	r18,36(sp)
   11ca4:	10ffeec4 	addi	r3,r2,-69
   11ca8:	12c03fcc 	andi	r11,r2,255
   11cac:	19803fcc 	andi	r6,r3,255
   11cb0:	5ac0201c 	xori	r11,r11,128
   11cb4:	00c00884 	movi	r3,34
   11cb8:	dc400815 	stw	r17,32(sp)
   11cbc:	dc000715 	stw	r16,28(sp)
   11cc0:	dfc00a15 	stw	ra,40(sp)
   11cc4:	2015883a 	mov	r10,r4
   11cc8:	2823883a 	mov	r17,r5
   11ccc:	3813883a 	mov	r9,r7
   11cd0:	dc000b17 	ldw	r16,44(sp)
   11cd4:	dc800e17 	ldw	r18,56(sp)
   11cd8:	5affe004 	addi	r11,r11,-128
   11cdc:	19803436 	bltu	r3,r6,11db0 <_dcvt+0x11c>
   11ce0:	3185883a 	add	r2,r6,r6
   11ce4:	1085883a 	add	r2,r2,r2
   11ce8:	00c00074 	movhi	r3,1
   11cec:	18c73f04 	addi	r3,r3,7420
   11cf0:	10c5883a 	add	r2,r2,r3
   11cf4:	11000017 	ldw	r4,0(r2)
   11cf8:	2000683a 	jmp	r4
   11cfc:	00011dcc 	andi	zero,zero,1143
   11d00:	00011e00 	call	11e0 <__alt_mem_onchip_mem-0xee20>
   11d04:	00011d88 	cmpgei	zero,zero,1142
   11d08:	00011db0 	cmpltui	zero,zero,1142
   11d0c:	00011db0 	cmpltui	zero,zero,1142
   11d10:	00011db0 	cmpltui	zero,zero,1142
   11d14:	00011db0 	cmpltui	zero,zero,1142
   11d18:	00011db0 	cmpltui	zero,zero,1142
   11d1c:	00011db0 	cmpltui	zero,zero,1142
   11d20:	00011db0 	cmpltui	zero,zero,1142
   11d24:	00011db0 	cmpltui	zero,zero,1142
   11d28:	00011db0 	cmpltui	zero,zero,1142
   11d2c:	00011db0 	cmpltui	zero,zero,1142
   11d30:	00011db0 	cmpltui	zero,zero,1142
   11d34:	00011db0 	cmpltui	zero,zero,1142
   11d38:	00011db0 	cmpltui	zero,zero,1142
   11d3c:	00011db0 	cmpltui	zero,zero,1142
   11d40:	00011db0 	cmpltui	zero,zero,1142
   11d44:	00011db0 	cmpltui	zero,zero,1142
   11d48:	00011db0 	cmpltui	zero,zero,1142
   11d4c:	00011db0 	cmpltui	zero,zero,1142
   11d50:	00011db0 	cmpltui	zero,zero,1142
   11d54:	00011db0 	cmpltui	zero,zero,1142
   11d58:	00011db0 	cmpltui	zero,zero,1142
   11d5c:	00011db0 	cmpltui	zero,zero,1142
   11d60:	00011db0 	cmpltui	zero,zero,1142
   11d64:	00011db0 	cmpltui	zero,zero,1142
   11d68:	00011db0 	cmpltui	zero,zero,1142
   11d6c:	00011db0 	cmpltui	zero,zero,1142
   11d70:	00011db0 	cmpltui	zero,zero,1142
   11d74:	00011db0 	cmpltui	zero,zero,1142
   11d78:	00011db0 	cmpltui	zero,zero,1142
   11d7c:	00011dcc 	andi	zero,zero,1143
   11d80:	00011e00 	call	11e0 <__alt_mem_onchip_mem-0xee20>
   11d84:	00011d88 	cmpgei	zero,zero,1142
   11d88:	8000011e 	bne	r16,zero,11d90 <_dcvt+0xfc>
   11d8c:	04000044 	movi	r16,1
   11d90:	5009883a 	mov	r4,r10
   11d94:	480d883a 	mov	r6,r9
   11d98:	800f883a 	mov	r7,r16
   11d9c:	400b883a 	mov	r5,r8
   11da0:	dac00115 	stw	r11,4(sp)
   11da4:	dc800215 	stw	r18,8(sp)
   11da8:	dc400015 	stw	r17,0(sp)
   11dac:	00119b40 	call	119b4 <_gcvt>
   11db0:	8805883a 	mov	r2,r17
   11db4:	dfc00a17 	ldw	ra,40(sp)
   11db8:	dc800917 	ldw	r18,36(sp)
   11dbc:	dc400817 	ldw	r17,32(sp)
   11dc0:	dc000717 	ldw	r16,28(sp)
   11dc4:	dec00b04 	addi	sp,sp,44
   11dc8:	f800283a 	ret
   11dcc:	5009883a 	mov	r4,r10
   11dd0:	400d883a 	mov	r6,r8
   11dd4:	dc000015 	stw	r16,0(sp)
   11dd8:	dac00115 	stw	r11,4(sp)
   11ddc:	dc800215 	stw	r18,8(sp)
   11de0:	00117b00 	call	117b0 <print_e>
   11de4:	8805883a 	mov	r2,r17
   11de8:	dfc00a17 	ldw	ra,40(sp)
   11dec:	dc800917 	ldw	r18,36(sp)
   11df0:	dc400817 	ldw	r17,32(sp)
   11df4:	dc000717 	ldw	r16,28(sp)
   11df8:	dec00b04 	addi	sp,sp,44
   11dfc:	f800283a 	ret
   11e00:	80000126 	beq	r16,zero,11e08 <_dcvt+0x174>
   11e04:	04800044 	movi	r18,1
   11e08:	d8800504 	addi	r2,sp,20
   11e0c:	d8c00604 	addi	r3,sp,24
   11e10:	400b883a 	mov	r5,r8
   11e14:	d8800215 	stw	r2,8(sp)
   11e18:	5009883a 	mov	r4,r10
   11e1c:	d8800404 	addi	r2,sp,16
   11e20:	480d883a 	mov	r6,r9
   11e24:	01c000c4 	movi	r7,3
   11e28:	d8c00315 	stw	r3,12(sp)
   11e2c:	dc000015 	stw	r16,0(sp)
   11e30:	d8800115 	stw	r2,4(sp)
   11e34:	0013e0c0 	call	13e0c <_dtoa_r>
   11e38:	d9400417 	ldw	r5,16(sp)
   11e3c:	1007883a 	mov	r3,r2
   11e40:	0089c3c4 	movi	r2,9999
   11e44:	28804626 	beq	r5,r2,11f60 <_dcvt+0x2cc>
   11e48:	18800003 	ldbu	r2,0(r3)
   11e4c:	10004c26 	beq	r2,zero,11f80 <_dcvt+0x2ec>
   11e50:	0140120e 	bge	zero,r5,11e9c <_dcvt+0x208>
   11e54:	8809883a 	mov	r4,r17
   11e58:	180d883a 	mov	r6,r3
   11e5c:	00000106 	br	11e64 <_dcvt+0x1d0>
   11e60:	0140100e 	bge	zero,r5,11ea4 <_dcvt+0x210>
   11e64:	20800005 	stb	r2,0(r4)
   11e68:	297fffc4 	addi	r5,r5,-1
   11e6c:	31800044 	addi	r6,r6,1
   11e70:	d9400415 	stw	r5,16(sp)
   11e74:	30800003 	ldbu	r2,0(r6)
   11e78:	21000044 	addi	r4,r4,1
   11e7c:	103ff81e 	bne	r2,zero,11e60 <_dcvt+0x1cc>
   11e80:	0140080e 	bge	zero,r5,11ea4 <_dcvt+0x210>
   11e84:	00800c04 	movi	r2,48
   11e88:	20800005 	stb	r2,0(r4)
   11e8c:	297fffc4 	addi	r5,r5,-1
   11e90:	21000044 	addi	r4,r4,1
   11e94:	d9400415 	stw	r5,16(sp)
   11e98:	003ff906 	br	11e80 <_dcvt+0x1ec>
   11e9c:	8809883a 	mov	r4,r17
   11ea0:	180d883a 	mov	r6,r3
   11ea4:	9000021e 	bne	r18,zero,11eb0 <_dcvt+0x21c>
   11ea8:	30800007 	ldb	r2,0(r6)
   11eac:	10002426 	beq	r2,zero,11f40 <_dcvt+0x2ac>
   11eb0:	19802f26 	beq	r3,r6,11f70 <_dcvt+0x2dc>
   11eb4:	00800b84 	movi	r2,46
   11eb8:	20800005 	stb	r2,0(r4)
   11ebc:	21000044 	addi	r4,r4,1
   11ec0:	28000b0e 	bge	r5,zero,11ef0 <_dcvt+0x25c>
   11ec4:	04000216 	blt	zero,r16,11ed0 <_dcvt+0x23c>
   11ec8:	00000906 	br	11ef0 <_dcvt+0x25c>
   11ecc:	80000826 	beq	r16,zero,11ef0 <_dcvt+0x25c>
   11ed0:	00800c04 	movi	r2,48
   11ed4:	28c00044 	addi	r3,r5,1
   11ed8:	20800005 	stb	r2,0(r4)
   11edc:	d8c00415 	stw	r3,16(sp)
   11ee0:	21000044 	addi	r4,r4,1
   11ee4:	843fffc4 	addi	r16,r16,-1
   11ee8:	180b883a 	mov	r5,r3
   11eec:	183ff716 	blt	r3,zero,11ecc <_dcvt+0x238>
   11ef0:	30800003 	ldbu	r2,0(r6)
   11ef4:	10000926 	beq	r2,zero,11f1c <_dcvt+0x288>
   11ef8:	04000216 	blt	zero,r16,11f04 <_dcvt+0x270>
   11efc:	00001006 	br	11f40 <_dcvt+0x2ac>
   11f00:	80000f26 	beq	r16,zero,11f40 <_dcvt+0x2ac>
   11f04:	20800005 	stb	r2,0(r4)
   11f08:	31800044 	addi	r6,r6,1
   11f0c:	30800003 	ldbu	r2,0(r6)
   11f10:	21000044 	addi	r4,r4,1
   11f14:	843fffc4 	addi	r16,r16,-1
   11f18:	103ff91e 	bne	r2,zero,11f00 <_dcvt+0x26c>
   11f1c:	0400080e 	bge	zero,r16,11f40 <_dcvt+0x2ac>
   11f20:	2007883a 	mov	r3,r4
   11f24:	8005883a 	mov	r2,r16
   11f28:	01400c04 	movi	r5,48
   11f2c:	10bfffc4 	addi	r2,r2,-1
   11f30:	19400005 	stb	r5,0(r3)
   11f34:	18c00044 	addi	r3,r3,1
   11f38:	103ffc1e 	bne	r2,zero,11f2c <_dcvt+0x298>
   11f3c:	2409883a 	add	r4,r4,r16
   11f40:	8805883a 	mov	r2,r17
   11f44:	20000005 	stb	zero,0(r4)
   11f48:	dfc00a17 	ldw	ra,40(sp)
   11f4c:	dc800917 	ldw	r18,36(sp)
   11f50:	dc400817 	ldw	r17,32(sp)
   11f54:	dc000717 	ldw	r16,28(sp)
   11f58:	dec00b04 	addi	sp,sp,44
   11f5c:	f800283a 	ret
   11f60:	180b883a 	mov	r5,r3
   11f64:	8809883a 	mov	r4,r17
   11f68:	0013a680 	call	13a68 <strcpy>
   11f6c:	003f9006 	br	11db0 <_dcvt+0x11c>
   11f70:	00800c04 	movi	r2,48
   11f74:	20800005 	stb	r2,0(r4)
   11f78:	21000044 	addi	r4,r4,1
   11f7c:	003fcd06 	br	11eb4 <_dcvt+0x220>
   11f80:	8809883a 	mov	r4,r17
   11f84:	180d883a 	mov	r6,r3
   11f88:	003fbd06 	br	11e80 <_dcvt+0x1ec>

00011f8c <ecvtbuf>:
   11f8c:	defff404 	addi	sp,sp,-48
   11f90:	dc800715 	stw	r18,28(sp)
   11f94:	dc800d17 	ldw	r18,52(sp)
   11f98:	dd000915 	stw	r20,36(sp)
   11f9c:	dcc00815 	stw	r19,32(sp)
   11fa0:	dc400615 	stw	r17,24(sp)
   11fa4:	dc000515 	stw	r16,20(sp)
   11fa8:	dfc00b15 	stw	ra,44(sp)
   11fac:	dd400a15 	stw	r21,40(sp)
   11fb0:	2021883a 	mov	r16,r4
   11fb4:	2823883a 	mov	r17,r5
   11fb8:	3027883a 	mov	r19,r6
   11fbc:	3829883a 	mov	r20,r7
   11fc0:	90002d26 	beq	r18,zero,12078 <ecvtbuf+0xec>
   11fc4:	054000b4 	movhi	r21,2
   11fc8:	ad662704 	addi	r21,r21,-26468
   11fcc:	d8800c17 	ldw	r2,48(sp)
   11fd0:	a9000017 	ldw	r4,0(r21)
   11fd4:	880d883a 	mov	r6,r17
   11fd8:	d8800215 	stw	r2,8(sp)
   11fdc:	800b883a 	mov	r5,r16
   11fe0:	d8800404 	addi	r2,sp,16
   11fe4:	01c00084 	movi	r7,2
   11fe8:	dd000115 	stw	r20,4(sp)
   11fec:	dcc00015 	stw	r19,0(sp)
   11ff0:	d8800315 	stw	r2,12(sp)
   11ff4:	0013e0c0 	call	13e0c <_dtoa_r>
   11ff8:	1007883a 	mov	r3,r2
   11ffc:	d8800417 	ldw	r2,16(sp)
   12000:	1880252e 	bgeu	r3,r2,12098 <ecvtbuf+0x10c>
   12004:	9009883a 	mov	r4,r18
   12008:	000d883a 	mov	r6,zero
   1200c:	18800003 	ldbu	r2,0(r3)
   12010:	18c00044 	addi	r3,r3,1
   12014:	31800044 	addi	r6,r6,1
   12018:	20800005 	stb	r2,0(r4)
   1201c:	d8800417 	ldw	r2,16(sp)
   12020:	21000044 	addi	r4,r4,1
   12024:	18bff936 	bltu	r3,r2,1200c <ecvtbuf+0x80>
   12028:	34c0080e 	bge	r6,r19,1204c <ecvtbuf+0xc0>
   1202c:	9985c83a 	sub	r2,r19,r6
   12030:	2007883a 	mov	r3,r4
   12034:	1105883a 	add	r2,r2,r4
   12038:	01000c04 	movi	r4,48
   1203c:	19000005 	stb	r4,0(r3)
   12040:	18c00044 	addi	r3,r3,1
   12044:	18bffd1e 	bne	r3,r2,1203c <ecvtbuf+0xb0>
   12048:	1809883a 	mov	r4,r3
   1204c:	20000005 	stb	zero,0(r4)
   12050:	9005883a 	mov	r2,r18
   12054:	dfc00b17 	ldw	ra,44(sp)
   12058:	dd400a17 	ldw	r21,40(sp)
   1205c:	dd000917 	ldw	r20,36(sp)
   12060:	dcc00817 	ldw	r19,32(sp)
   12064:	dc800717 	ldw	r18,28(sp)
   12068:	dc400617 	ldw	r17,24(sp)
   1206c:	dc000517 	ldw	r16,20(sp)
   12070:	dec00c04 	addi	sp,sp,48
   12074:	f800283a 	ret
   12078:	054000b4 	movhi	r21,2
   1207c:	ad662704 	addi	r21,r21,-26468
   12080:	a9000017 	ldw	r4,0(r21)
   12084:	20800617 	ldw	r2,24(r4)
   12088:	3080060e 	bge	r6,r2,120a4 <ecvtbuf+0x118>
   1208c:	a8800017 	ldw	r2,0(r21)
   12090:	14800717 	ldw	r18,28(r2)
   12094:	003fcd06 	br	11fcc <ecvtbuf+0x40>
   12098:	9009883a 	mov	r4,r18
   1209c:	000d883a 	mov	r6,zero
   120a0:	003fe106 	br	12028 <ecvtbuf+0x9c>
   120a4:	21400717 	ldw	r5,28(r4)
   120a8:	34800044 	addi	r18,r6,1
   120ac:	900d883a 	mov	r6,r18
   120b0:	00134740 	call	13474 <_realloc_r>
   120b4:	1007883a 	mov	r3,r2
   120b8:	10000426 	beq	r2,zero,120cc <ecvtbuf+0x140>
   120bc:	a8800017 	ldw	r2,0(r21)
   120c0:	10c00715 	stw	r3,28(r2)
   120c4:	14800615 	stw	r18,24(r2)
   120c8:	003ff006 	br	1208c <ecvtbuf+0x100>
   120cc:	0005883a 	mov	r2,zero
   120d0:	003fe006 	br	12054 <ecvtbuf+0xc8>

000120d4 <fcvtbuf>:
   120d4:	defff304 	addi	sp,sp,-52
   120d8:	dc800715 	stw	r18,28(sp)
   120dc:	dc800e17 	ldw	r18,56(sp)
   120e0:	dd800b15 	stw	r22,44(sp)
   120e4:	dd000915 	stw	r20,36(sp)
   120e8:	dcc00815 	stw	r19,32(sp)
   120ec:	dc400615 	stw	r17,24(sp)
   120f0:	dc000515 	stw	r16,20(sp)
   120f4:	dfc00c15 	stw	ra,48(sp)
   120f8:	dd400a15 	stw	r21,40(sp)
   120fc:	2021883a 	mov	r16,r4
   12100:	2823883a 	mov	r17,r5
   12104:	3027883a 	mov	r19,r6
   12108:	3829883a 	mov	r20,r7
   1210c:	dd800d17 	ldw	r22,52(sp)
   12110:	90004326 	beq	r18,zero,12220 <fcvtbuf+0x14c>
   12114:	054000b4 	movhi	r21,2
   12118:	ad662704 	addi	r21,r21,-26468
   1211c:	0005883a 	mov	r2,zero
   12120:	00cffc34 	movhi	r3,16368
   12124:	180f883a 	mov	r7,r3
   12128:	8009883a 	mov	r4,r16
   1212c:	880b883a 	mov	r5,r17
   12130:	100d883a 	mov	r6,r2
   12134:	0016e580 	call	16e58 <__ltdf2>
   12138:	1000080e 	bge	r2,zero,1215c <fcvtbuf+0x88>
   1213c:	0005883a 	mov	r2,zero
   12140:	00effc34 	movhi	r3,49136
   12144:	180f883a 	mov	r7,r3
   12148:	8009883a 	mov	r4,r16
   1214c:	880b883a 	mov	r5,r17
   12150:	100d883a 	mov	r6,r2
   12154:	0016d480 	call	16d48 <__gtdf2>
   12158:	00802c16 	blt	zero,r2,1220c <fcvtbuf+0x138>
   1215c:	a9000017 	ldw	r4,0(r21)
   12160:	880d883a 	mov	r6,r17
   12164:	800b883a 	mov	r5,r16
   12168:	01c000c4 	movi	r7,3
   1216c:	d8800404 	addi	r2,sp,16
   12170:	dd800215 	stw	r22,8(sp)
   12174:	dcc00015 	stw	r19,0(sp)
   12178:	dd000115 	stw	r20,4(sp)
   1217c:	d8800315 	stw	r2,12(sp)
   12180:	0013e0c0 	call	13e0c <_dtoa_r>
   12184:	1009883a 	mov	r4,r2
   12188:	d8c00417 	ldw	r3,16(sp)
   1218c:	a0800017 	ldw	r2,0(r20)
   12190:	008dc83a 	sub	r6,zero,r2
   12194:	20c02b2e 	bgeu	r4,r3,12244 <fcvtbuf+0x170>
   12198:	9007883a 	mov	r3,r18
   1219c:	20800003 	ldbu	r2,0(r4)
   121a0:	21000044 	addi	r4,r4,1
   121a4:	31800044 	addi	r6,r6,1
   121a8:	18800005 	stb	r2,0(r3)
   121ac:	d8800417 	ldw	r2,16(sp)
   121b0:	18c00044 	addi	r3,r3,1
   121b4:	20bff936 	bltu	r4,r2,1219c <fcvtbuf+0xc8>
   121b8:	34c0080e 	bge	r6,r19,121dc <fcvtbuf+0x108>
   121bc:	9985c83a 	sub	r2,r19,r6
   121c0:	1809883a 	mov	r4,r3
   121c4:	10c5883a 	add	r2,r2,r3
   121c8:	00c00c04 	movi	r3,48
   121cc:	20c00005 	stb	r3,0(r4)
   121d0:	21000044 	addi	r4,r4,1
   121d4:	113ffd1e 	bne	r2,r4,121cc <fcvtbuf+0xf8>
   121d8:	1007883a 	mov	r3,r2
   121dc:	18000005 	stb	zero,0(r3)
   121e0:	9005883a 	mov	r2,r18
   121e4:	dfc00c17 	ldw	ra,48(sp)
   121e8:	dd800b17 	ldw	r22,44(sp)
   121ec:	dd400a17 	ldw	r21,40(sp)
   121f0:	dd000917 	ldw	r20,36(sp)
   121f4:	dcc00817 	ldw	r19,32(sp)
   121f8:	dc800717 	ldw	r18,28(sp)
   121fc:	dc400617 	ldw	r17,24(sp)
   12200:	dc000517 	ldw	r16,20(sp)
   12204:	dec00d04 	addi	sp,sp,52
   12208:	f800283a 	ret
   1220c:	a9000017 	ldw	r4,0(r21)
   12210:	880d883a 	mov	r6,r17
   12214:	800b883a 	mov	r5,r16
   12218:	01c00084 	movi	r7,2
   1221c:	003fd306 	br	1216c <fcvtbuf+0x98>
   12220:	054000b4 	movhi	r21,2
   12224:	ad662704 	addi	r21,r21,-26468
   12228:	a9000017 	ldw	r4,0(r21)
   1222c:	30c008c4 	addi	r3,r6,35
   12230:	20800617 	ldw	r2,24(r4)
   12234:	1880050e 	bge	r3,r2,1224c <fcvtbuf+0x178>
   12238:	a8800017 	ldw	r2,0(r21)
   1223c:	14800717 	ldw	r18,28(r2)
   12240:	003fb606 	br	1211c <fcvtbuf+0x48>
   12244:	9007883a 	mov	r3,r18
   12248:	003fdb06 	br	121b8 <fcvtbuf+0xe4>
   1224c:	21400717 	ldw	r5,28(r4)
   12250:	34800904 	addi	r18,r6,36
   12254:	900d883a 	mov	r6,r18
   12258:	00134740 	call	13474 <_realloc_r>
   1225c:	1007883a 	mov	r3,r2
   12260:	10000426 	beq	r2,zero,12274 <fcvtbuf+0x1a0>
   12264:	a8800017 	ldw	r2,0(r21)
   12268:	10c00715 	stw	r3,28(r2)
   1226c:	14800615 	stw	r18,24(r2)
   12270:	003ff106 	br	12238 <fcvtbuf+0x164>
   12274:	0005883a 	mov	r2,zero
   12278:	003fda06 	br	121e4 <fcvtbuf+0x110>

0001227c <__sfvwrite_small_dev>:
   1227c:	2880000b 	ldhu	r2,0(r5)
   12280:	defffa04 	addi	sp,sp,-24
   12284:	dcc00315 	stw	r19,12(sp)
   12288:	1080020c 	andi	r2,r2,8
   1228c:	dc800215 	stw	r18,8(sp)
   12290:	dc400115 	stw	r17,4(sp)
   12294:	dfc00515 	stw	ra,20(sp)
   12298:	dd000415 	stw	r20,16(sp)
   1229c:	dc000015 	stw	r16,0(sp)
   122a0:	2825883a 	mov	r18,r5
   122a4:	2027883a 	mov	r19,r4
   122a8:	3023883a 	mov	r17,r6
   122ac:	10002026 	beq	r2,zero,12330 <__sfvwrite_small_dev+0xb4>
   122b0:	2940008f 	ldh	r5,2(r5)
   122b4:	28000f16 	blt	r5,zero,122f4 <__sfvwrite_small_dev+0x78>
   122b8:	01c01b0e 	bge	zero,r7,12328 <__sfvwrite_small_dev+0xac>
   122bc:	3821883a 	mov	r16,r7
   122c0:	05010004 	movi	r20,1024
   122c4:	00000206 	br	122d0 <__sfvwrite_small_dev+0x54>
   122c8:	0400170e 	bge	zero,r16,12328 <__sfvwrite_small_dev+0xac>
   122cc:	9140008f 	ldh	r5,2(r18)
   122d0:	880d883a 	mov	r6,r17
   122d4:	9809883a 	mov	r4,r19
   122d8:	800f883a 	mov	r7,r16
   122dc:	a400010e 	bge	r20,r16,122e4 <__sfvwrite_small_dev+0x68>
   122e0:	01c10004 	movi	r7,1024
   122e4:	0013a880 	call	13a88 <_write_r>
   122e8:	88a3883a 	add	r17,r17,r2
   122ec:	80a1c83a 	sub	r16,r16,r2
   122f0:	00bff516 	blt	zero,r2,122c8 <__sfvwrite_small_dev+0x4c>
   122f4:	9080000b 	ldhu	r2,0(r18)
   122f8:	00ffffc4 	movi	r3,-1
   122fc:	10801014 	ori	r2,r2,64
   12300:	9080000d 	sth	r2,0(r18)
   12304:	1805883a 	mov	r2,r3
   12308:	dfc00517 	ldw	ra,20(sp)
   1230c:	dd000417 	ldw	r20,16(sp)
   12310:	dcc00317 	ldw	r19,12(sp)
   12314:	dc800217 	ldw	r18,8(sp)
   12318:	dc400117 	ldw	r17,4(sp)
   1231c:	dc000017 	ldw	r16,0(sp)
   12320:	dec00604 	addi	sp,sp,24
   12324:	f800283a 	ret
   12328:	0007883a 	mov	r3,zero
   1232c:	003ff506 	br	12304 <__sfvwrite_small_dev+0x88>
   12330:	00ffffc4 	movi	r3,-1
   12334:	003ff306 	br	12304 <__sfvwrite_small_dev+0x88>

00012338 <__hi0bits>:
   12338:	20bfffec 	andhi	r2,r4,65535
   1233c:	10001426 	beq	r2,zero,12390 <__hi0bits+0x58>
   12340:	0007883a 	mov	r3,zero
   12344:	20bfc02c 	andhi	r2,r4,65280
   12348:	1000021e 	bne	r2,zero,12354 <__hi0bits+0x1c>
   1234c:	2008923a 	slli	r4,r4,8
   12350:	18c00204 	addi	r3,r3,8
   12354:	20bc002c 	andhi	r2,r4,61440
   12358:	1000021e 	bne	r2,zero,12364 <__hi0bits+0x2c>
   1235c:	2008913a 	slli	r4,r4,4
   12360:	18c00104 	addi	r3,r3,4
   12364:	20b0002c 	andhi	r2,r4,49152
   12368:	1000031e 	bne	r2,zero,12378 <__hi0bits+0x40>
   1236c:	2105883a 	add	r2,r4,r4
   12370:	18c00084 	addi	r3,r3,2
   12374:	1089883a 	add	r4,r2,r2
   12378:	20000316 	blt	r4,zero,12388 <__hi0bits+0x50>
   1237c:	2090002c 	andhi	r2,r4,16384
   12380:	10000626 	beq	r2,zero,1239c <__hi0bits+0x64>
   12384:	18c00044 	addi	r3,r3,1
   12388:	1805883a 	mov	r2,r3
   1238c:	f800283a 	ret
   12390:	2008943a 	slli	r4,r4,16
   12394:	00c00404 	movi	r3,16
   12398:	003fea06 	br	12344 <__hi0bits+0xc>
   1239c:	00c00804 	movi	r3,32
   123a0:	1805883a 	mov	r2,r3
   123a4:	f800283a 	ret

000123a8 <__lo0bits>:
   123a8:	20c00017 	ldw	r3,0(r4)
   123ac:	188001cc 	andi	r2,r3,7
   123b0:	10000a26 	beq	r2,zero,123dc <__lo0bits+0x34>
   123b4:	1880004c 	andi	r2,r3,1
   123b8:	1005003a 	cmpeq	r2,r2,zero
   123bc:	10002126 	beq	r2,zero,12444 <__lo0bits+0x9c>
   123c0:	1880008c 	andi	r2,r3,2
   123c4:	1000251e 	bne	r2,zero,1245c <__lo0bits+0xb4>
   123c8:	1804d0ba 	srli	r2,r3,2
   123cc:	01400084 	movi	r5,2
   123d0:	20800015 	stw	r2,0(r4)
   123d4:	2805883a 	mov	r2,r5
   123d8:	f800283a 	ret
   123dc:	18bfffcc 	andi	r2,r3,65535
   123e0:	10001526 	beq	r2,zero,12438 <__lo0bits+0x90>
   123e4:	000b883a 	mov	r5,zero
   123e8:	18803fcc 	andi	r2,r3,255
   123ec:	1000021e 	bne	r2,zero,123f8 <__lo0bits+0x50>
   123f0:	1806d23a 	srli	r3,r3,8
   123f4:	29400204 	addi	r5,r5,8
   123f8:	188003cc 	andi	r2,r3,15
   123fc:	1000021e 	bne	r2,zero,12408 <__lo0bits+0x60>
   12400:	1806d13a 	srli	r3,r3,4
   12404:	29400104 	addi	r5,r5,4
   12408:	188000cc 	andi	r2,r3,3
   1240c:	1000021e 	bne	r2,zero,12418 <__lo0bits+0x70>
   12410:	1806d0ba 	srli	r3,r3,2
   12414:	29400084 	addi	r5,r5,2
   12418:	1880004c 	andi	r2,r3,1
   1241c:	1000031e 	bne	r2,zero,1242c <__lo0bits+0x84>
   12420:	1806d07a 	srli	r3,r3,1
   12424:	18000a26 	beq	r3,zero,12450 <__lo0bits+0xa8>
   12428:	29400044 	addi	r5,r5,1
   1242c:	2805883a 	mov	r2,r5
   12430:	20c00015 	stw	r3,0(r4)
   12434:	f800283a 	ret
   12438:	1806d43a 	srli	r3,r3,16
   1243c:	01400404 	movi	r5,16
   12440:	003fe906 	br	123e8 <__lo0bits+0x40>
   12444:	000b883a 	mov	r5,zero
   12448:	2805883a 	mov	r2,r5
   1244c:	f800283a 	ret
   12450:	01400804 	movi	r5,32
   12454:	2805883a 	mov	r2,r5
   12458:	f800283a 	ret
   1245c:	1804d07a 	srli	r2,r3,1
   12460:	01400044 	movi	r5,1
   12464:	20800015 	stw	r2,0(r4)
   12468:	003fda06 	br	123d4 <__lo0bits+0x2c>

0001246c <__mcmp>:
   1246c:	20800417 	ldw	r2,16(r4)
   12470:	28c00417 	ldw	r3,16(r5)
   12474:	10cfc83a 	sub	r7,r2,r3
   12478:	38000c1e 	bne	r7,zero,124ac <__mcmp+0x40>
   1247c:	18c5883a 	add	r2,r3,r3
   12480:	1085883a 	add	r2,r2,r2
   12484:	10c00504 	addi	r3,r2,20
   12488:	21000504 	addi	r4,r4,20
   1248c:	28cb883a 	add	r5,r5,r3
   12490:	2085883a 	add	r2,r4,r2
   12494:	10bfff04 	addi	r2,r2,-4
   12498:	297fff04 	addi	r5,r5,-4
   1249c:	11800017 	ldw	r6,0(r2)
   124a0:	28c00017 	ldw	r3,0(r5)
   124a4:	30c0031e 	bne	r6,r3,124b4 <__mcmp+0x48>
   124a8:	20bffa36 	bltu	r4,r2,12494 <__mcmp+0x28>
   124ac:	3805883a 	mov	r2,r7
   124b0:	f800283a 	ret
   124b4:	30c00336 	bltu	r6,r3,124c4 <__mcmp+0x58>
   124b8:	01c00044 	movi	r7,1
   124bc:	3805883a 	mov	r2,r7
   124c0:	f800283a 	ret
   124c4:	01ffffc4 	movi	r7,-1
   124c8:	003ff806 	br	124ac <__mcmp+0x40>

000124cc <__ulp>:
   124cc:	295ffc2c 	andhi	r5,r5,32752
   124d0:	013f3034 	movhi	r4,64704
   124d4:	290b883a 	add	r5,r5,r4
   124d8:	0145c83a 	sub	r2,zero,r5
   124dc:	1007d53a 	srai	r3,r2,20
   124e0:	000d883a 	mov	r6,zero
   124e4:	0140040e 	bge	zero,r5,124f8 <__ulp+0x2c>
   124e8:	280f883a 	mov	r7,r5
   124ec:	3807883a 	mov	r3,r7
   124f0:	3005883a 	mov	r2,r6
   124f4:	f800283a 	ret
   124f8:	008004c4 	movi	r2,19
   124fc:	193ffb04 	addi	r4,r3,-20
   12500:	10c00c0e 	bge	r2,r3,12534 <__ulp+0x68>
   12504:	008007c4 	movi	r2,31
   12508:	1107c83a 	sub	r3,r2,r4
   1250c:	00800784 	movi	r2,30
   12510:	01400044 	movi	r5,1
   12514:	11000216 	blt	r2,r4,12520 <__ulp+0x54>
   12518:	00800044 	movi	r2,1
   1251c:	10ca983a 	sll	r5,r2,r3
   12520:	000f883a 	mov	r7,zero
   12524:	280d883a 	mov	r6,r5
   12528:	3807883a 	mov	r3,r7
   1252c:	3005883a 	mov	r2,r6
   12530:	f800283a 	ret
   12534:	00800234 	movhi	r2,8
   12538:	10cfd83a 	sra	r7,r2,r3
   1253c:	000d883a 	mov	r6,zero
   12540:	3005883a 	mov	r2,r6
   12544:	3807883a 	mov	r3,r7
   12548:	f800283a 	ret

0001254c <__b2d>:
   1254c:	20800417 	ldw	r2,16(r4)
   12550:	defff904 	addi	sp,sp,-28
   12554:	dd000415 	stw	r20,16(sp)
   12558:	1085883a 	add	r2,r2,r2
   1255c:	25000504 	addi	r20,r4,20
   12560:	1085883a 	add	r2,r2,r2
   12564:	dc000015 	stw	r16,0(sp)
   12568:	a0a1883a 	add	r16,r20,r2
   1256c:	dd400515 	stw	r21,20(sp)
   12570:	857fff17 	ldw	r21,-4(r16)
   12574:	dc400115 	stw	r17,4(sp)
   12578:	dfc00615 	stw	ra,24(sp)
   1257c:	a809883a 	mov	r4,r21
   12580:	2823883a 	mov	r17,r5
   12584:	dcc00315 	stw	r19,12(sp)
   12588:	dc800215 	stw	r18,8(sp)
   1258c:	00123380 	call	12338 <__hi0bits>
   12590:	100b883a 	mov	r5,r2
   12594:	00800804 	movi	r2,32
   12598:	1145c83a 	sub	r2,r2,r5
   1259c:	88800015 	stw	r2,0(r17)
   125a0:	00800284 	movi	r2,10
   125a4:	80ffff04 	addi	r3,r16,-4
   125a8:	11401416 	blt	r2,r5,125fc <__b2d+0xb0>
   125ac:	008002c4 	movi	r2,11
   125b0:	1149c83a 	sub	r4,r2,r5
   125b4:	a0c02736 	bltu	r20,r3,12654 <__b2d+0x108>
   125b8:	000d883a 	mov	r6,zero
   125bc:	28800544 	addi	r2,r5,21
   125c0:	a906d83a 	srl	r3,r21,r4
   125c4:	a884983a 	sll	r2,r21,r2
   125c8:	1ccffc34 	orhi	r19,r3,16368
   125cc:	11a4b03a 	or	r18,r2,r6
   125d0:	9005883a 	mov	r2,r18
   125d4:	9807883a 	mov	r3,r19
   125d8:	dfc00617 	ldw	ra,24(sp)
   125dc:	dd400517 	ldw	r21,20(sp)
   125e0:	dd000417 	ldw	r20,16(sp)
   125e4:	dcc00317 	ldw	r19,12(sp)
   125e8:	dc800217 	ldw	r18,8(sp)
   125ec:	dc400117 	ldw	r17,4(sp)
   125f0:	dc000017 	ldw	r16,0(sp)
   125f4:	dec00704 	addi	sp,sp,28
   125f8:	f800283a 	ret
   125fc:	a0c00e36 	bltu	r20,r3,12638 <__b2d+0xec>
   12600:	293ffd44 	addi	r4,r5,-11
   12604:	000d883a 	mov	r6,zero
   12608:	20000f26 	beq	r4,zero,12648 <__b2d+0xfc>
   1260c:	00800804 	movi	r2,32
   12610:	110bc83a 	sub	r5,r2,r4
   12614:	a0c01236 	bltu	r20,r3,12660 <__b2d+0x114>
   12618:	000f883a 	mov	r7,zero
   1261c:	a904983a 	sll	r2,r21,r4
   12620:	3146d83a 	srl	r3,r6,r5
   12624:	3108983a 	sll	r4,r6,r4
   12628:	108ffc34 	orhi	r2,r2,16368
   1262c:	18a6b03a 	or	r19,r3,r2
   12630:	3924b03a 	or	r18,r7,r4
   12634:	003fe606 	br	125d0 <__b2d+0x84>
   12638:	293ffd44 	addi	r4,r5,-11
   1263c:	81bffe17 	ldw	r6,-8(r16)
   12640:	80fffe04 	addi	r3,r16,-8
   12644:	203ff11e 	bne	r4,zero,1260c <__b2d+0xc0>
   12648:	accffc34 	orhi	r19,r21,16368
   1264c:	3025883a 	mov	r18,r6
   12650:	003fdf06 	br	125d0 <__b2d+0x84>
   12654:	18bfff17 	ldw	r2,-4(r3)
   12658:	110cd83a 	srl	r6,r2,r4
   1265c:	003fd706 	br	125bc <__b2d+0x70>
   12660:	18bfff17 	ldw	r2,-4(r3)
   12664:	114ed83a 	srl	r7,r2,r5
   12668:	003fec06 	br	1261c <__b2d+0xd0>

0001266c <__ratio>:
   1266c:	defff904 	addi	sp,sp,-28
   12670:	dc400215 	stw	r17,8(sp)
   12674:	2823883a 	mov	r17,r5
   12678:	d80b883a 	mov	r5,sp
   1267c:	dfc00615 	stw	ra,24(sp)
   12680:	dd000515 	stw	r20,20(sp)
   12684:	dcc00415 	stw	r19,16(sp)
   12688:	dc800315 	stw	r18,12(sp)
   1268c:	2025883a 	mov	r18,r4
   12690:	001254c0 	call	1254c <__b2d>
   12694:	8809883a 	mov	r4,r17
   12698:	d9400104 	addi	r5,sp,4
   1269c:	1027883a 	mov	r19,r2
   126a0:	1829883a 	mov	r20,r3
   126a4:	001254c0 	call	1254c <__b2d>
   126a8:	89000417 	ldw	r4,16(r17)
   126ac:	91c00417 	ldw	r7,16(r18)
   126b0:	d9800117 	ldw	r6,4(sp)
   126b4:	180b883a 	mov	r5,r3
   126b8:	390fc83a 	sub	r7,r7,r4
   126bc:	1009883a 	mov	r4,r2
   126c0:	d8800017 	ldw	r2,0(sp)
   126c4:	380e917a 	slli	r7,r7,5
   126c8:	2011883a 	mov	r8,r4
   126cc:	1185c83a 	sub	r2,r2,r6
   126d0:	11c5883a 	add	r2,r2,r7
   126d4:	1006953a 	slli	r3,r2,20
   126d8:	2813883a 	mov	r9,r5
   126dc:	00800d0e 	bge	zero,r2,12714 <__ratio+0xa8>
   126e0:	1d29883a 	add	r20,r3,r20
   126e4:	a00b883a 	mov	r5,r20
   126e8:	480f883a 	mov	r7,r9
   126ec:	9809883a 	mov	r4,r19
   126f0:	400d883a 	mov	r6,r8
   126f4:	00169e00 	call	169e0 <__divdf3>
   126f8:	dfc00617 	ldw	ra,24(sp)
   126fc:	dd000517 	ldw	r20,20(sp)
   12700:	dcc00417 	ldw	r19,16(sp)
   12704:	dc800317 	ldw	r18,12(sp)
   12708:	dc400217 	ldw	r17,8(sp)
   1270c:	dec00704 	addi	sp,sp,28
   12710:	f800283a 	ret
   12714:	28d3c83a 	sub	r9,r5,r3
   12718:	003ff206 	br	126e4 <__ratio+0x78>

0001271c <_mprec_log10>:
   1271c:	defffe04 	addi	sp,sp,-8
   12720:	008005c4 	movi	r2,23
   12724:	dc000015 	stw	r16,0(sp)
   12728:	dfc00115 	stw	ra,4(sp)
   1272c:	2021883a 	mov	r16,r4
   12730:	11000c16 	blt	r2,r4,12764 <_mprec_log10+0x48>
   12734:	200490fa 	slli	r2,r4,3
   12738:	00c000b4 	movhi	r3,2
   1273c:	18e41a04 	addi	r3,r3,-28568
   12740:	10c5883a 	add	r2,r2,r3
   12744:	12400117 	ldw	r9,4(r2)
   12748:	12000017 	ldw	r8,0(r2)
   1274c:	4807883a 	mov	r3,r9
   12750:	4005883a 	mov	r2,r8
   12754:	dfc00117 	ldw	ra,4(sp)
   12758:	dc000017 	ldw	r16,0(sp)
   1275c:	dec00204 	addi	sp,sp,8
   12760:	f800283a 	ret
   12764:	0011883a 	mov	r8,zero
   12768:	024ffc34 	movhi	r9,16368
   1276c:	0005883a 	mov	r2,zero
   12770:	00d00934 	movhi	r3,16420
   12774:	480b883a 	mov	r5,r9
   12778:	4009883a 	mov	r4,r8
   1277c:	180f883a 	mov	r7,r3
   12780:	100d883a 	mov	r6,r2
   12784:	001661c0 	call	1661c <__muldf3>
   12788:	843fffc4 	addi	r16,r16,-1
   1278c:	1011883a 	mov	r8,r2
   12790:	1813883a 	mov	r9,r3
   12794:	803ff51e 	bne	r16,zero,1276c <_mprec_log10+0x50>
   12798:	4005883a 	mov	r2,r8
   1279c:	4807883a 	mov	r3,r9
   127a0:	dfc00117 	ldw	ra,4(sp)
   127a4:	dc000017 	ldw	r16,0(sp)
   127a8:	dec00204 	addi	sp,sp,8
   127ac:	f800283a 	ret

000127b0 <__copybits>:
   127b0:	297fffc4 	addi	r5,r5,-1
   127b4:	30800417 	ldw	r2,16(r6)
   127b8:	280bd17a 	srai	r5,r5,5
   127bc:	31800504 	addi	r6,r6,20
   127c0:	1085883a 	add	r2,r2,r2
   127c4:	294b883a 	add	r5,r5,r5
   127c8:	294b883a 	add	r5,r5,r5
   127cc:	1085883a 	add	r2,r2,r2
   127d0:	290b883a 	add	r5,r5,r4
   127d4:	3087883a 	add	r3,r6,r2
   127d8:	29400104 	addi	r5,r5,4
   127dc:	30c0052e 	bgeu	r6,r3,127f4 <__copybits+0x44>
   127e0:	30800017 	ldw	r2,0(r6)
   127e4:	31800104 	addi	r6,r6,4
   127e8:	20800015 	stw	r2,0(r4)
   127ec:	21000104 	addi	r4,r4,4
   127f0:	30fffb36 	bltu	r6,r3,127e0 <__copybits+0x30>
   127f4:	2140032e 	bgeu	r4,r5,12804 <__copybits+0x54>
   127f8:	20000015 	stw	zero,0(r4)
   127fc:	21000104 	addi	r4,r4,4
   12800:	217ffd36 	bltu	r4,r5,127f8 <__copybits+0x48>
   12804:	f800283a 	ret

00012808 <__any_on>:
   12808:	20800417 	ldw	r2,16(r4)
   1280c:	2807d17a 	srai	r3,r5,5
   12810:	21000504 	addi	r4,r4,20
   12814:	10c00d0e 	bge	r2,r3,1284c <__any_on+0x44>
   12818:	1085883a 	add	r2,r2,r2
   1281c:	1085883a 	add	r2,r2,r2
   12820:	208d883a 	add	r6,r4,r2
   12824:	2180182e 	bgeu	r4,r6,12888 <__any_on+0x80>
   12828:	30bfff17 	ldw	r2,-4(r6)
   1282c:	30ffff04 	addi	r3,r6,-4
   12830:	1000041e 	bne	r2,zero,12844 <__any_on+0x3c>
   12834:	20c0142e 	bgeu	r4,r3,12888 <__any_on+0x80>
   12838:	18ffff04 	addi	r3,r3,-4
   1283c:	18800017 	ldw	r2,0(r3)
   12840:	103ffc26 	beq	r2,zero,12834 <__any_on+0x2c>
   12844:	00800044 	movi	r2,1
   12848:	f800283a 	ret
   1284c:	18800a0e 	bge	r3,r2,12878 <__any_on+0x70>
   12850:	294007cc 	andi	r5,r5,31
   12854:	28000826 	beq	r5,zero,12878 <__any_on+0x70>
   12858:	18c5883a 	add	r2,r3,r3
   1285c:	1085883a 	add	r2,r2,r2
   12860:	208d883a 	add	r6,r4,r2
   12864:	30c00017 	ldw	r3,0(r6)
   12868:	1944d83a 	srl	r2,r3,r5
   1286c:	1144983a 	sll	r2,r2,r5
   12870:	18bff41e 	bne	r3,r2,12844 <__any_on+0x3c>
   12874:	003feb06 	br	12824 <__any_on+0x1c>
   12878:	18c5883a 	add	r2,r3,r3
   1287c:	1085883a 	add	r2,r2,r2
   12880:	208d883a 	add	r6,r4,r2
   12884:	003fe706 	br	12824 <__any_on+0x1c>
   12888:	0005883a 	mov	r2,zero
   1288c:	f800283a 	ret

00012890 <_Bfree>:
   12890:	20800417 	ldw	r2,16(r4)
   12894:	defffd04 	addi	sp,sp,-12
   12898:	dc000115 	stw	r16,4(sp)
   1289c:	dfc00215 	stw	ra,8(sp)
   128a0:	2021883a 	mov	r16,r4
   128a4:	01000404 	movi	r4,16
   128a8:	10000e26 	beq	r2,zero,128e4 <_Bfree+0x54>
   128ac:	28000926 	beq	r5,zero,128d4 <_Bfree+0x44>
   128b0:	80c00417 	ldw	r3,16(r16)
   128b4:	28800117 	ldw	r2,4(r5)
   128b8:	19000317 	ldw	r4,12(r3)
   128bc:	1085883a 	add	r2,r2,r2
   128c0:	1085883a 	add	r2,r2,r2
   128c4:	1105883a 	add	r2,r2,r4
   128c8:	10c00017 	ldw	r3,0(r2)
   128cc:	28c00015 	stw	r3,0(r5)
   128d0:	11400015 	stw	r5,0(r2)
   128d4:	dfc00217 	ldw	ra,8(sp)
   128d8:	dc000117 	ldw	r16,4(sp)
   128dc:	dec00304 	addi	sp,sp,12
   128e0:	f800283a 	ret
   128e4:	d9400015 	stw	r5,0(sp)
   128e8:	00158540 	call	15854 <malloc>
   128ec:	d9400017 	ldw	r5,0(sp)
   128f0:	10000315 	stw	zero,12(r2)
   128f4:	10000215 	stw	zero,8(r2)
   128f8:	10000015 	stw	zero,0(r2)
   128fc:	80800415 	stw	r2,16(r16)
   12900:	10000115 	stw	zero,4(r2)
   12904:	003fe906 	br	128ac <_Bfree+0x1c>

00012908 <_Balloc>:
   12908:	defffb04 	addi	sp,sp,-20
   1290c:	dc000015 	stw	r16,0(sp)
   12910:	24000417 	ldw	r16,16(r4)
   12914:	dc800215 	stw	r18,8(sp)
   12918:	dc400115 	stw	r17,4(sp)
   1291c:	dfc00415 	stw	ra,16(sp)
   12920:	dcc00315 	stw	r19,12(sp)
   12924:	2025883a 	mov	r18,r4
   12928:	2823883a 	mov	r17,r5
   1292c:	80001426 	beq	r16,zero,12980 <_Balloc+0x78>
   12930:	80800317 	ldw	r2,12(r16)
   12934:	10001a26 	beq	r2,zero,129a0 <_Balloc+0x98>
   12938:	80c00317 	ldw	r3,12(r16)
   1293c:	8c45883a 	add	r2,r17,r17
   12940:	1085883a 	add	r2,r2,r2
   12944:	10c7883a 	add	r3,r2,r3
   12948:	1c000017 	ldw	r16,0(r3)
   1294c:	80001e26 	beq	r16,zero,129c8 <_Balloc+0xc0>
   12950:	80800017 	ldw	r2,0(r16)
   12954:	18800015 	stw	r2,0(r3)
   12958:	80000415 	stw	zero,16(r16)
   1295c:	80000315 	stw	zero,12(r16)
   12960:	8005883a 	mov	r2,r16
   12964:	dfc00417 	ldw	ra,16(sp)
   12968:	dcc00317 	ldw	r19,12(sp)
   1296c:	dc800217 	ldw	r18,8(sp)
   12970:	dc400117 	ldw	r17,4(sp)
   12974:	dc000017 	ldw	r16,0(sp)
   12978:	dec00504 	addi	sp,sp,20
   1297c:	f800283a 	ret
   12980:	01000404 	movi	r4,16
   12984:	00158540 	call	15854 <malloc>
   12988:	1021883a 	mov	r16,r2
   1298c:	90800415 	stw	r2,16(r18)
   12990:	10000115 	stw	zero,4(r2)
   12994:	10000215 	stw	zero,8(r2)
   12998:	10000015 	stw	zero,0(r2)
   1299c:	10000315 	stw	zero,12(r2)
   129a0:	9009883a 	mov	r4,r18
   129a4:	01400104 	movi	r5,4
   129a8:	01800404 	movi	r6,16
   129ac:	0013b000 	call	13b00 <_calloc_r>
   129b0:	80800315 	stw	r2,12(r16)
   129b4:	94000417 	ldw	r16,16(r18)
   129b8:	80800317 	ldw	r2,12(r16)
   129bc:	103fde1e 	bne	r2,zero,12938 <_Balloc+0x30>
   129c0:	0021883a 	mov	r16,zero
   129c4:	003fe606 	br	12960 <_Balloc+0x58>
   129c8:	01400044 	movi	r5,1
   129cc:	2c66983a 	sll	r19,r5,r17
   129d0:	9009883a 	mov	r4,r18
   129d4:	9ccd883a 	add	r6,r19,r19
   129d8:	318d883a 	add	r6,r6,r6
   129dc:	31800504 	addi	r6,r6,20
   129e0:	0013b000 	call	13b00 <_calloc_r>
   129e4:	103fde26 	beq	r2,zero,12960 <_Balloc+0x58>
   129e8:	1021883a 	mov	r16,r2
   129ec:	14400115 	stw	r17,4(r2)
   129f0:	14c00215 	stw	r19,8(r2)
   129f4:	003fd806 	br	12958 <_Balloc+0x50>

000129f8 <__d2b>:
   129f8:	defff504 	addi	sp,sp,-44
   129fc:	dcc00515 	stw	r19,20(sp)
   12a00:	04c00044 	movi	r19,1
   12a04:	dc000215 	stw	r16,8(sp)
   12a08:	2821883a 	mov	r16,r5
   12a0c:	980b883a 	mov	r5,r19
   12a10:	ddc00915 	stw	r23,36(sp)
   12a14:	dd800815 	stw	r22,32(sp)
   12a18:	dd400715 	stw	r21,28(sp)
   12a1c:	dd000615 	stw	r20,24(sp)
   12a20:	dc800415 	stw	r18,16(sp)
   12a24:	dc400315 	stw	r17,12(sp)
   12a28:	dfc00a15 	stw	ra,40(sp)
   12a2c:	3023883a 	mov	r17,r6
   12a30:	382d883a 	mov	r22,r7
   12a34:	ddc00b17 	ldw	r23,44(sp)
   12a38:	00129080 	call	12908 <_Balloc>
   12a3c:	1025883a 	mov	r18,r2
   12a40:	00a00034 	movhi	r2,32768
   12a44:	10bfffc4 	addi	r2,r2,-1
   12a48:	8888703a 	and	r4,r17,r2
   12a4c:	202ad53a 	srli	r21,r4,20
   12a50:	00800434 	movhi	r2,16
   12a54:	10bfffc4 	addi	r2,r2,-1
   12a58:	8886703a 	and	r3,r17,r2
   12a5c:	a829003a 	cmpeq	r20,r21,zero
   12a60:	800b883a 	mov	r5,r16
   12a64:	d8c00115 	stw	r3,4(sp)
   12a68:	94000504 	addi	r16,r18,20
   12a6c:	a000021e 	bne	r20,zero,12a78 <__d2b+0x80>
   12a70:	18c00434 	orhi	r3,r3,16
   12a74:	d8c00115 	stw	r3,4(sp)
   12a78:	28002726 	beq	r5,zero,12b18 <__d2b+0x120>
   12a7c:	d809883a 	mov	r4,sp
   12a80:	d9400015 	stw	r5,0(sp)
   12a84:	00123a80 	call	123a8 <__lo0bits>
   12a88:	100d883a 	mov	r6,r2
   12a8c:	10003526 	beq	r2,zero,12b64 <__d2b+0x16c>
   12a90:	d8c00117 	ldw	r3,4(sp)
   12a94:	00800804 	movi	r2,32
   12a98:	1185c83a 	sub	r2,r2,r6
   12a9c:	d9000017 	ldw	r4,0(sp)
   12aa0:	1886983a 	sll	r3,r3,r2
   12aa4:	1906b03a 	or	r3,r3,r4
   12aa8:	90c00515 	stw	r3,20(r18)
   12aac:	d8c00117 	ldw	r3,4(sp)
   12ab0:	1986d83a 	srl	r3,r3,r6
   12ab4:	d8c00115 	stw	r3,4(sp)
   12ab8:	180b003a 	cmpeq	r5,r3,zero
   12abc:	00800084 	movi	r2,2
   12ac0:	114bc83a 	sub	r5,r2,r5
   12ac4:	80c00115 	stw	r3,4(r16)
   12ac8:	91400415 	stw	r5,16(r18)
   12acc:	a0001a1e 	bne	r20,zero,12b38 <__d2b+0x140>
   12ad0:	3545883a 	add	r2,r6,r21
   12ad4:	10bef344 	addi	r2,r2,-1075
   12ad8:	00c00d44 	movi	r3,53
   12adc:	b0800015 	stw	r2,0(r22)
   12ae0:	1987c83a 	sub	r3,r3,r6
   12ae4:	b8c00015 	stw	r3,0(r23)
   12ae8:	9005883a 	mov	r2,r18
   12aec:	dfc00a17 	ldw	ra,40(sp)
   12af0:	ddc00917 	ldw	r23,36(sp)
   12af4:	dd800817 	ldw	r22,32(sp)
   12af8:	dd400717 	ldw	r21,28(sp)
   12afc:	dd000617 	ldw	r20,24(sp)
   12b00:	dcc00517 	ldw	r19,20(sp)
   12b04:	dc800417 	ldw	r18,16(sp)
   12b08:	dc400317 	ldw	r17,12(sp)
   12b0c:	dc000217 	ldw	r16,8(sp)
   12b10:	dec00b04 	addi	sp,sp,44
   12b14:	f800283a 	ret
   12b18:	d9000104 	addi	r4,sp,4
   12b1c:	00123a80 	call	123a8 <__lo0bits>
   12b20:	11800804 	addi	r6,r2,32
   12b24:	d8800117 	ldw	r2,4(sp)
   12b28:	94c00415 	stw	r19,16(r18)
   12b2c:	980b883a 	mov	r5,r19
   12b30:	90800515 	stw	r2,20(r18)
   12b34:	a03fe626 	beq	r20,zero,12ad0 <__d2b+0xd8>
   12b38:	2945883a 	add	r2,r5,r5
   12b3c:	1085883a 	add	r2,r2,r2
   12b40:	1405883a 	add	r2,r2,r16
   12b44:	113fff17 	ldw	r4,-4(r2)
   12b48:	30fef384 	addi	r3,r6,-1074
   12b4c:	2820917a 	slli	r16,r5,5
   12b50:	b0c00015 	stw	r3,0(r22)
   12b54:	00123380 	call	12338 <__hi0bits>
   12b58:	80a1c83a 	sub	r16,r16,r2
   12b5c:	bc000015 	stw	r16,0(r23)
   12b60:	003fe106 	br	12ae8 <__d2b+0xf0>
   12b64:	d8800017 	ldw	r2,0(sp)
   12b68:	90800515 	stw	r2,20(r18)
   12b6c:	d8c00117 	ldw	r3,4(sp)
   12b70:	003fd106 	br	12ab8 <__d2b+0xc0>

00012b74 <__mdiff>:
   12b74:	defffb04 	addi	sp,sp,-20
   12b78:	dc000015 	stw	r16,0(sp)
   12b7c:	2821883a 	mov	r16,r5
   12b80:	dc800215 	stw	r18,8(sp)
   12b84:	300b883a 	mov	r5,r6
   12b88:	2025883a 	mov	r18,r4
   12b8c:	8009883a 	mov	r4,r16
   12b90:	dc400115 	stw	r17,4(sp)
   12b94:	dfc00415 	stw	ra,16(sp)
   12b98:	dcc00315 	stw	r19,12(sp)
   12b9c:	3023883a 	mov	r17,r6
   12ba0:	001246c0 	call	1246c <__mcmp>
   12ba4:	10004226 	beq	r2,zero,12cb0 <__mdiff+0x13c>
   12ba8:	10005016 	blt	r2,zero,12cec <__mdiff+0x178>
   12bac:	0027883a 	mov	r19,zero
   12bb0:	81400117 	ldw	r5,4(r16)
   12bb4:	9009883a 	mov	r4,r18
   12bb8:	00129080 	call	12908 <_Balloc>
   12bbc:	1019883a 	mov	r12,r2
   12bc0:	82800417 	ldw	r10,16(r16)
   12bc4:	88800417 	ldw	r2,16(r17)
   12bc8:	81800504 	addi	r6,r16,20
   12bcc:	5287883a 	add	r3,r10,r10
   12bd0:	1085883a 	add	r2,r2,r2
   12bd4:	18c7883a 	add	r3,r3,r3
   12bd8:	1085883a 	add	r2,r2,r2
   12bdc:	8a000504 	addi	r8,r17,20
   12be0:	64c00315 	stw	r19,12(r12)
   12be4:	30db883a 	add	r13,r6,r3
   12be8:	4097883a 	add	r11,r8,r2
   12bec:	61c00504 	addi	r7,r12,20
   12bf0:	0013883a 	mov	r9,zero
   12bf4:	31000017 	ldw	r4,0(r6)
   12bf8:	41400017 	ldw	r5,0(r8)
   12bfc:	42000104 	addi	r8,r8,4
   12c00:	20bfffcc 	andi	r2,r4,65535
   12c04:	28ffffcc 	andi	r3,r5,65535
   12c08:	10c5c83a 	sub	r2,r2,r3
   12c0c:	1245883a 	add	r2,r2,r9
   12c10:	2008d43a 	srli	r4,r4,16
   12c14:	280ad43a 	srli	r5,r5,16
   12c18:	1007d43a 	srai	r3,r2,16
   12c1c:	3880000d 	sth	r2,0(r7)
   12c20:	2149c83a 	sub	r4,r4,r5
   12c24:	20c9883a 	add	r4,r4,r3
   12c28:	3900008d 	sth	r4,2(r7)
   12c2c:	31800104 	addi	r6,r6,4
   12c30:	39c00104 	addi	r7,r7,4
   12c34:	2013d43a 	srai	r9,r4,16
   12c38:	42ffee36 	bltu	r8,r11,12bf4 <__mdiff+0x80>
   12c3c:	33400c2e 	bgeu	r6,r13,12c70 <__mdiff+0xfc>
   12c40:	30800017 	ldw	r2,0(r6)
   12c44:	31800104 	addi	r6,r6,4
   12c48:	10ffffcc 	andi	r3,r2,65535
   12c4c:	1a47883a 	add	r3,r3,r9
   12c50:	1004d43a 	srli	r2,r2,16
   12c54:	1809d43a 	srai	r4,r3,16
   12c58:	38c0000d 	sth	r3,0(r7)
   12c5c:	1105883a 	add	r2,r2,r4
   12c60:	3880008d 	sth	r2,2(r7)
   12c64:	1013d43a 	srai	r9,r2,16
   12c68:	39c00104 	addi	r7,r7,4
   12c6c:	337ff436 	bltu	r6,r13,12c40 <__mdiff+0xcc>
   12c70:	38bfff17 	ldw	r2,-4(r7)
   12c74:	38ffff04 	addi	r3,r7,-4
   12c78:	1000041e 	bne	r2,zero,12c8c <__mdiff+0x118>
   12c7c:	18ffff04 	addi	r3,r3,-4
   12c80:	18800017 	ldw	r2,0(r3)
   12c84:	52bfffc4 	addi	r10,r10,-1
   12c88:	103ffc26 	beq	r2,zero,12c7c <__mdiff+0x108>
   12c8c:	6005883a 	mov	r2,r12
   12c90:	62800415 	stw	r10,16(r12)
   12c94:	dfc00417 	ldw	ra,16(sp)
   12c98:	dcc00317 	ldw	r19,12(sp)
   12c9c:	dc800217 	ldw	r18,8(sp)
   12ca0:	dc400117 	ldw	r17,4(sp)
   12ca4:	dc000017 	ldw	r16,0(sp)
   12ca8:	dec00504 	addi	sp,sp,20
   12cac:	f800283a 	ret
   12cb0:	9009883a 	mov	r4,r18
   12cb4:	000b883a 	mov	r5,zero
   12cb8:	00129080 	call	12908 <_Balloc>
   12cbc:	1019883a 	mov	r12,r2
   12cc0:	00800044 	movi	r2,1
   12cc4:	60800415 	stw	r2,16(r12)
   12cc8:	6005883a 	mov	r2,r12
   12ccc:	60000515 	stw	zero,20(r12)
   12cd0:	dfc00417 	ldw	ra,16(sp)
   12cd4:	dcc00317 	ldw	r19,12(sp)
   12cd8:	dc800217 	ldw	r18,8(sp)
   12cdc:	dc400117 	ldw	r17,4(sp)
   12ce0:	dc000017 	ldw	r16,0(sp)
   12ce4:	dec00504 	addi	sp,sp,20
   12ce8:	f800283a 	ret
   12cec:	880d883a 	mov	r6,r17
   12cf0:	04c00044 	movi	r19,1
   12cf4:	8023883a 	mov	r17,r16
   12cf8:	3021883a 	mov	r16,r6
   12cfc:	003fac06 	br	12bb0 <__mdiff+0x3c>

00012d00 <__lshift>:
   12d00:	defff904 	addi	sp,sp,-28
   12d04:	28800417 	ldw	r2,16(r5)
   12d08:	dc000015 	stw	r16,0(sp)
   12d0c:	3021d17a 	srai	r16,r6,5
   12d10:	28c00217 	ldw	r3,8(r5)
   12d14:	10800044 	addi	r2,r2,1
   12d18:	dc400115 	stw	r17,4(sp)
   12d1c:	80a3883a 	add	r17,r16,r2
   12d20:	dd400515 	stw	r21,20(sp)
   12d24:	dd000415 	stw	r20,16(sp)
   12d28:	dc800215 	stw	r18,8(sp)
   12d2c:	dfc00615 	stw	ra,24(sp)
   12d30:	2825883a 	mov	r18,r5
   12d34:	dcc00315 	stw	r19,12(sp)
   12d38:	3029883a 	mov	r20,r6
   12d3c:	202b883a 	mov	r21,r4
   12d40:	29400117 	ldw	r5,4(r5)
   12d44:	1c40030e 	bge	r3,r17,12d54 <__lshift+0x54>
   12d48:	18c7883a 	add	r3,r3,r3
   12d4c:	29400044 	addi	r5,r5,1
   12d50:	1c7ffd16 	blt	r3,r17,12d48 <__lshift+0x48>
   12d54:	a809883a 	mov	r4,r21
   12d58:	00129080 	call	12908 <_Balloc>
   12d5c:	1027883a 	mov	r19,r2
   12d60:	11400504 	addi	r5,r2,20
   12d64:	0400090e 	bge	zero,r16,12d8c <__lshift+0x8c>
   12d68:	2805883a 	mov	r2,r5
   12d6c:	0007883a 	mov	r3,zero
   12d70:	18c00044 	addi	r3,r3,1
   12d74:	10000015 	stw	zero,0(r2)
   12d78:	10800104 	addi	r2,r2,4
   12d7c:	80fffc1e 	bne	r16,r3,12d70 <__lshift+0x70>
   12d80:	8405883a 	add	r2,r16,r16
   12d84:	1085883a 	add	r2,r2,r2
   12d88:	288b883a 	add	r5,r5,r2
   12d8c:	90800417 	ldw	r2,16(r18)
   12d90:	91000504 	addi	r4,r18,20
   12d94:	a18007cc 	andi	r6,r20,31
   12d98:	1085883a 	add	r2,r2,r2
   12d9c:	1085883a 	add	r2,r2,r2
   12da0:	208f883a 	add	r7,r4,r2
   12da4:	30001e26 	beq	r6,zero,12e20 <__lshift+0x120>
   12da8:	00800804 	movi	r2,32
   12dac:	1191c83a 	sub	r8,r2,r6
   12db0:	0007883a 	mov	r3,zero
   12db4:	20800017 	ldw	r2,0(r4)
   12db8:	1184983a 	sll	r2,r2,r6
   12dbc:	1884b03a 	or	r2,r3,r2
   12dc0:	28800015 	stw	r2,0(r5)
   12dc4:	20c00017 	ldw	r3,0(r4)
   12dc8:	21000104 	addi	r4,r4,4
   12dcc:	29400104 	addi	r5,r5,4
   12dd0:	1a06d83a 	srl	r3,r3,r8
   12dd4:	21fff736 	bltu	r4,r7,12db4 <__lshift+0xb4>
   12dd8:	28c00015 	stw	r3,0(r5)
   12ddc:	18000126 	beq	r3,zero,12de4 <__lshift+0xe4>
   12de0:	8c400044 	addi	r17,r17,1
   12de4:	88bfffc4 	addi	r2,r17,-1
   12de8:	98800415 	stw	r2,16(r19)
   12dec:	a809883a 	mov	r4,r21
   12df0:	900b883a 	mov	r5,r18
   12df4:	00128900 	call	12890 <_Bfree>
   12df8:	9805883a 	mov	r2,r19
   12dfc:	dfc00617 	ldw	ra,24(sp)
   12e00:	dd400517 	ldw	r21,20(sp)
   12e04:	dd000417 	ldw	r20,16(sp)
   12e08:	dcc00317 	ldw	r19,12(sp)
   12e0c:	dc800217 	ldw	r18,8(sp)
   12e10:	dc400117 	ldw	r17,4(sp)
   12e14:	dc000017 	ldw	r16,0(sp)
   12e18:	dec00704 	addi	sp,sp,28
   12e1c:	f800283a 	ret
   12e20:	20800017 	ldw	r2,0(r4)
   12e24:	21000104 	addi	r4,r4,4
   12e28:	28800015 	stw	r2,0(r5)
   12e2c:	29400104 	addi	r5,r5,4
   12e30:	21ffec2e 	bgeu	r4,r7,12de4 <__lshift+0xe4>
   12e34:	20800017 	ldw	r2,0(r4)
   12e38:	21000104 	addi	r4,r4,4
   12e3c:	28800015 	stw	r2,0(r5)
   12e40:	29400104 	addi	r5,r5,4
   12e44:	21fff636 	bltu	r4,r7,12e20 <__lshift+0x120>
   12e48:	003fe606 	br	12de4 <__lshift+0xe4>

00012e4c <__multiply>:
   12e4c:	defff004 	addi	sp,sp,-64
   12e50:	dc800815 	stw	r18,32(sp)
   12e54:	dc400715 	stw	r17,28(sp)
   12e58:	2c800417 	ldw	r18,16(r5)
   12e5c:	34400417 	ldw	r17,16(r6)
   12e60:	dcc00915 	stw	r19,36(sp)
   12e64:	dc000615 	stw	r16,24(sp)
   12e68:	dfc00f15 	stw	ra,60(sp)
   12e6c:	df000e15 	stw	fp,56(sp)
   12e70:	ddc00d15 	stw	r23,52(sp)
   12e74:	dd800c15 	stw	r22,48(sp)
   12e78:	dd400b15 	stw	r21,44(sp)
   12e7c:	dd000a15 	stw	r20,40(sp)
   12e80:	2821883a 	mov	r16,r5
   12e84:	3027883a 	mov	r19,r6
   12e88:	9440040e 	bge	r18,r17,12e9c <__multiply+0x50>
   12e8c:	8825883a 	mov	r18,r17
   12e90:	2c400417 	ldw	r17,16(r5)
   12e94:	2827883a 	mov	r19,r5
   12e98:	3021883a 	mov	r16,r6
   12e9c:	80800217 	ldw	r2,8(r16)
   12ea0:	9447883a 	add	r3,r18,r17
   12ea4:	d8c00415 	stw	r3,16(sp)
   12ea8:	81400117 	ldw	r5,4(r16)
   12eac:	10c0010e 	bge	r2,r3,12eb4 <__multiply+0x68>
   12eb0:	29400044 	addi	r5,r5,1
   12eb4:	00129080 	call	12908 <_Balloc>
   12eb8:	d8800515 	stw	r2,20(sp)
   12ebc:	d9000417 	ldw	r4,16(sp)
   12ec0:	d8c00517 	ldw	r3,20(sp)
   12ec4:	2105883a 	add	r2,r4,r4
   12ec8:	1085883a 	add	r2,r2,r2
   12ecc:	19000504 	addi	r4,r3,20
   12ed0:	2085883a 	add	r2,r4,r2
   12ed4:	d8800315 	stw	r2,12(sp)
   12ed8:	2080052e 	bgeu	r4,r2,12ef0 <__multiply+0xa4>
   12edc:	2005883a 	mov	r2,r4
   12ee0:	d8c00317 	ldw	r3,12(sp)
   12ee4:	10000015 	stw	zero,0(r2)
   12ee8:	10800104 	addi	r2,r2,4
   12eec:	10fffc36 	bltu	r2,r3,12ee0 <__multiply+0x94>
   12ef0:	8c45883a 	add	r2,r17,r17
   12ef4:	9487883a 	add	r3,r18,r18
   12ef8:	9dc00504 	addi	r23,r19,20
   12efc:	1085883a 	add	r2,r2,r2
   12f00:	84000504 	addi	r16,r16,20
   12f04:	18c7883a 	add	r3,r3,r3
   12f08:	b885883a 	add	r2,r23,r2
   12f0c:	dc000015 	stw	r16,0(sp)
   12f10:	d8800215 	stw	r2,8(sp)
   12f14:	80f9883a 	add	fp,r16,r3
   12f18:	b880432e 	bgeu	r23,r2,13028 <__multiply+0x1dc>
   12f1c:	d9000115 	stw	r4,4(sp)
   12f20:	b9000017 	ldw	r4,0(r23)
   12f24:	253fffcc 	andi	r20,r4,65535
   12f28:	a0001a26 	beq	r20,zero,12f94 <__multiply+0x148>
   12f2c:	dcc00017 	ldw	r19,0(sp)
   12f30:	dc800117 	ldw	r18,4(sp)
   12f34:	002b883a 	mov	r21,zero
   12f38:	9c400017 	ldw	r17,0(r19)
   12f3c:	94000017 	ldw	r16,0(r18)
   12f40:	a009883a 	mov	r4,r20
   12f44:	897fffcc 	andi	r5,r17,65535
   12f48:	00114b80 	call	114b8 <__mulsi3>
   12f4c:	880ad43a 	srli	r5,r17,16
   12f50:	80ffffcc 	andi	r3,r16,65535
   12f54:	a8c7883a 	add	r3,r21,r3
   12f58:	a009883a 	mov	r4,r20
   12f5c:	10e3883a 	add	r17,r2,r3
   12f60:	8020d43a 	srli	r16,r16,16
   12f64:	00114b80 	call	114b8 <__mulsi3>
   12f68:	8806d43a 	srli	r3,r17,16
   12f6c:	1405883a 	add	r2,r2,r16
   12f70:	9cc00104 	addi	r19,r19,4
   12f74:	1887883a 	add	r3,r3,r2
   12f78:	90c0008d 	sth	r3,2(r18)
   12f7c:	9440000d 	sth	r17,0(r18)
   12f80:	182ad43a 	srli	r21,r3,16
   12f84:	94800104 	addi	r18,r18,4
   12f88:	9f3feb36 	bltu	r19,fp,12f38 <__multiply+0xec>
   12f8c:	95400015 	stw	r21,0(r18)
   12f90:	b9000017 	ldw	r4,0(r23)
   12f94:	202ad43a 	srli	r21,r4,16
   12f98:	a8001c26 	beq	r21,zero,1300c <__multiply+0x1c0>
   12f9c:	d9000117 	ldw	r4,4(sp)
   12fa0:	dd000017 	ldw	r20,0(sp)
   12fa4:	002d883a 	mov	r22,zero
   12fa8:	24c00017 	ldw	r19,0(r4)
   12fac:	2025883a 	mov	r18,r4
   12fb0:	9823883a 	mov	r17,r19
   12fb4:	a4000017 	ldw	r16,0(r20)
   12fb8:	a809883a 	mov	r4,r21
   12fbc:	a5000104 	addi	r20,r20,4
   12fc0:	817fffcc 	andi	r5,r16,65535
   12fc4:	00114b80 	call	114b8 <__mulsi3>
   12fc8:	8806d43a 	srli	r3,r17,16
   12fcc:	800ad43a 	srli	r5,r16,16
   12fd0:	94c0000d 	sth	r19,0(r18)
   12fd4:	b0c7883a 	add	r3,r22,r3
   12fd8:	10e1883a 	add	r16,r2,r3
   12fdc:	9400008d 	sth	r16,2(r18)
   12fe0:	a809883a 	mov	r4,r21
   12fe4:	94800104 	addi	r18,r18,4
   12fe8:	00114b80 	call	114b8 <__mulsi3>
   12fec:	94400017 	ldw	r17,0(r18)
   12ff0:	8020d43a 	srli	r16,r16,16
   12ff4:	88ffffcc 	andi	r3,r17,65535
   12ff8:	10c5883a 	add	r2,r2,r3
   12ffc:	80a7883a 	add	r19,r16,r2
   13000:	982cd43a 	srli	r22,r19,16
   13004:	a73feb36 	bltu	r20,fp,12fb4 <__multiply+0x168>
   13008:	94c00015 	stw	r19,0(r18)
   1300c:	d8800217 	ldw	r2,8(sp)
   13010:	bdc00104 	addi	r23,r23,4
   13014:	b880042e 	bgeu	r23,r2,13028 <__multiply+0x1dc>
   13018:	d8c00117 	ldw	r3,4(sp)
   1301c:	18c00104 	addi	r3,r3,4
   13020:	d8c00115 	stw	r3,4(sp)
   13024:	003fbe06 	br	12f20 <__multiply+0xd4>
   13028:	d9000417 	ldw	r4,16(sp)
   1302c:	01000c0e 	bge	zero,r4,13060 <__multiply+0x214>
   13030:	d8c00317 	ldw	r3,12(sp)
   13034:	18bfff17 	ldw	r2,-4(r3)
   13038:	18ffff04 	addi	r3,r3,-4
   1303c:	10000326 	beq	r2,zero,1304c <__multiply+0x200>
   13040:	00000706 	br	13060 <__multiply+0x214>
   13044:	18800017 	ldw	r2,0(r3)
   13048:	1000051e 	bne	r2,zero,13060 <__multiply+0x214>
   1304c:	d9000417 	ldw	r4,16(sp)
   13050:	18ffff04 	addi	r3,r3,-4
   13054:	213fffc4 	addi	r4,r4,-1
   13058:	d9000415 	stw	r4,16(sp)
   1305c:	203ff91e 	bne	r4,zero,13044 <__multiply+0x1f8>
   13060:	d8800417 	ldw	r2,16(sp)
   13064:	d8c00517 	ldw	r3,20(sp)
   13068:	18800415 	stw	r2,16(r3)
   1306c:	1805883a 	mov	r2,r3
   13070:	dfc00f17 	ldw	ra,60(sp)
   13074:	df000e17 	ldw	fp,56(sp)
   13078:	ddc00d17 	ldw	r23,52(sp)
   1307c:	dd800c17 	ldw	r22,48(sp)
   13080:	dd400b17 	ldw	r21,44(sp)
   13084:	dd000a17 	ldw	r20,40(sp)
   13088:	dcc00917 	ldw	r19,36(sp)
   1308c:	dc800817 	ldw	r18,32(sp)
   13090:	dc400717 	ldw	r17,28(sp)
   13094:	dc000617 	ldw	r16,24(sp)
   13098:	dec01004 	addi	sp,sp,64
   1309c:	f800283a 	ret

000130a0 <__i2b>:
   130a0:	defffd04 	addi	sp,sp,-12
   130a4:	dc000015 	stw	r16,0(sp)
   130a8:	04000044 	movi	r16,1
   130ac:	dc800115 	stw	r18,4(sp)
   130b0:	2825883a 	mov	r18,r5
   130b4:	800b883a 	mov	r5,r16
   130b8:	dfc00215 	stw	ra,8(sp)
   130bc:	00129080 	call	12908 <_Balloc>
   130c0:	14000415 	stw	r16,16(r2)
   130c4:	14800515 	stw	r18,20(r2)
   130c8:	dfc00217 	ldw	ra,8(sp)
   130cc:	dc800117 	ldw	r18,4(sp)
   130d0:	dc000017 	ldw	r16,0(sp)
   130d4:	dec00304 	addi	sp,sp,12
   130d8:	f800283a 	ret

000130dc <__multadd>:
   130dc:	defff604 	addi	sp,sp,-40
   130e0:	dd800615 	stw	r22,24(sp)
   130e4:	2d800417 	ldw	r22,16(r5)
   130e8:	df000815 	stw	fp,32(sp)
   130ec:	ddc00715 	stw	r23,28(sp)
   130f0:	dd400515 	stw	r21,20(sp)
   130f4:	dd000415 	stw	r20,16(sp)
   130f8:	dcc00315 	stw	r19,12(sp)
   130fc:	dc800215 	stw	r18,8(sp)
   13100:	dfc00915 	stw	ra,36(sp)
   13104:	dc400115 	stw	r17,4(sp)
   13108:	dc000015 	stw	r16,0(sp)
   1310c:	282f883a 	mov	r23,r5
   13110:	2039883a 	mov	fp,r4
   13114:	302b883a 	mov	r21,r6
   13118:	3829883a 	mov	r20,r7
   1311c:	2c800504 	addi	r18,r5,20
   13120:	0027883a 	mov	r19,zero
   13124:	94400017 	ldw	r17,0(r18)
   13128:	a80b883a 	mov	r5,r21
   1312c:	9cc00044 	addi	r19,r19,1
   13130:	893fffcc 	andi	r4,r17,65535
   13134:	00114b80 	call	114b8 <__mulsi3>
   13138:	8808d43a 	srli	r4,r17,16
   1313c:	1521883a 	add	r16,r2,r20
   13140:	a80b883a 	mov	r5,r21
   13144:	00114b80 	call	114b8 <__mulsi3>
   13148:	8008d43a 	srli	r4,r16,16
   1314c:	843fffcc 	andi	r16,r16,65535
   13150:	1105883a 	add	r2,r2,r4
   13154:	1006943a 	slli	r3,r2,16
   13158:	1028d43a 	srli	r20,r2,16
   1315c:	1c07883a 	add	r3,r3,r16
   13160:	90c00015 	stw	r3,0(r18)
   13164:	94800104 	addi	r18,r18,4
   13168:	9dbfee16 	blt	r19,r22,13124 <__multadd+0x48>
   1316c:	a0000826 	beq	r20,zero,13190 <__multadd+0xb4>
   13170:	b8800217 	ldw	r2,8(r23)
   13174:	b080130e 	bge	r22,r2,131c4 <__multadd+0xe8>
   13178:	b585883a 	add	r2,r22,r22
   1317c:	1085883a 	add	r2,r2,r2
   13180:	15c5883a 	add	r2,r2,r23
   13184:	b0c00044 	addi	r3,r22,1
   13188:	15000515 	stw	r20,20(r2)
   1318c:	b8c00415 	stw	r3,16(r23)
   13190:	b805883a 	mov	r2,r23
   13194:	dfc00917 	ldw	ra,36(sp)
   13198:	df000817 	ldw	fp,32(sp)
   1319c:	ddc00717 	ldw	r23,28(sp)
   131a0:	dd800617 	ldw	r22,24(sp)
   131a4:	dd400517 	ldw	r21,20(sp)
   131a8:	dd000417 	ldw	r20,16(sp)
   131ac:	dcc00317 	ldw	r19,12(sp)
   131b0:	dc800217 	ldw	r18,8(sp)
   131b4:	dc400117 	ldw	r17,4(sp)
   131b8:	dc000017 	ldw	r16,0(sp)
   131bc:	dec00a04 	addi	sp,sp,40
   131c0:	f800283a 	ret
   131c4:	b9400117 	ldw	r5,4(r23)
   131c8:	e009883a 	mov	r4,fp
   131cc:	29400044 	addi	r5,r5,1
   131d0:	00129080 	call	12908 <_Balloc>
   131d4:	b9800417 	ldw	r6,16(r23)
   131d8:	b9400304 	addi	r5,r23,12
   131dc:	11000304 	addi	r4,r2,12
   131e0:	318d883a 	add	r6,r6,r6
   131e4:	318d883a 	add	r6,r6,r6
   131e8:	31800204 	addi	r6,r6,8
   131ec:	1023883a 	mov	r17,r2
   131f0:	0015fa80 	call	15fa8 <memcpy>
   131f4:	b80b883a 	mov	r5,r23
   131f8:	e009883a 	mov	r4,fp
   131fc:	00128900 	call	12890 <_Bfree>
   13200:	882f883a 	mov	r23,r17
   13204:	003fdc06 	br	13178 <__multadd+0x9c>

00013208 <__pow5mult>:
   13208:	defffa04 	addi	sp,sp,-24
   1320c:	308000cc 	andi	r2,r6,3
   13210:	dd000415 	stw	r20,16(sp)
   13214:	dcc00315 	stw	r19,12(sp)
   13218:	dc000015 	stw	r16,0(sp)
   1321c:	dfc00515 	stw	ra,20(sp)
   13220:	dc800215 	stw	r18,8(sp)
   13224:	dc400115 	stw	r17,4(sp)
   13228:	3021883a 	mov	r16,r6
   1322c:	2027883a 	mov	r19,r4
   13230:	2829883a 	mov	r20,r5
   13234:	10002d1e 	bne	r2,zero,132ec <__pow5mult+0xe4>
   13238:	8025d0ba 	srai	r18,r16,2
   1323c:	90001d26 	beq	r18,zero,132b4 <__pow5mult+0xac>
   13240:	9c400417 	ldw	r17,16(r19)
   13244:	88003a26 	beq	r17,zero,13330 <__pow5mult+0x128>
   13248:	8c000217 	ldw	r16,8(r17)
   1324c:	8000081e 	bne	r16,zero,13270 <__pow5mult+0x68>
   13250:	00003006 	br	13314 <__pow5mult+0x10c>
   13254:	800b883a 	mov	r5,r16
   13258:	800d883a 	mov	r6,r16
   1325c:	9809883a 	mov	r4,r19
   13260:	90001426 	beq	r18,zero,132b4 <__pow5mult+0xac>
   13264:	80800017 	ldw	r2,0(r16)
   13268:	10001b26 	beq	r2,zero,132d8 <__pow5mult+0xd0>
   1326c:	1021883a 	mov	r16,r2
   13270:	9080004c 	andi	r2,r18,1
   13274:	1005003a 	cmpeq	r2,r2,zero
   13278:	9025d07a 	srai	r18,r18,1
   1327c:	800d883a 	mov	r6,r16
   13280:	9809883a 	mov	r4,r19
   13284:	a00b883a 	mov	r5,r20
   13288:	103ff21e 	bne	r2,zero,13254 <__pow5mult+0x4c>
   1328c:	0012e4c0 	call	12e4c <__multiply>
   13290:	a00b883a 	mov	r5,r20
   13294:	9809883a 	mov	r4,r19
   13298:	1023883a 	mov	r17,r2
   1329c:	00128900 	call	12890 <_Bfree>
   132a0:	8829883a 	mov	r20,r17
   132a4:	800b883a 	mov	r5,r16
   132a8:	800d883a 	mov	r6,r16
   132ac:	9809883a 	mov	r4,r19
   132b0:	903fec1e 	bne	r18,zero,13264 <__pow5mult+0x5c>
   132b4:	a005883a 	mov	r2,r20
   132b8:	dfc00517 	ldw	ra,20(sp)
   132bc:	dd000417 	ldw	r20,16(sp)
   132c0:	dcc00317 	ldw	r19,12(sp)
   132c4:	dc800217 	ldw	r18,8(sp)
   132c8:	dc400117 	ldw	r17,4(sp)
   132cc:	dc000017 	ldw	r16,0(sp)
   132d0:	dec00604 	addi	sp,sp,24
   132d4:	f800283a 	ret
   132d8:	0012e4c0 	call	12e4c <__multiply>
   132dc:	80800015 	stw	r2,0(r16)
   132e0:	1021883a 	mov	r16,r2
   132e4:	10000015 	stw	zero,0(r2)
   132e8:	003fe106 	br	13270 <__pow5mult+0x68>
   132ec:	1085883a 	add	r2,r2,r2
   132f0:	00c000b4 	movhi	r3,2
   132f4:	18e46004 	addi	r3,r3,-28288
   132f8:	1085883a 	add	r2,r2,r2
   132fc:	10c5883a 	add	r2,r2,r3
   13300:	11bfff17 	ldw	r6,-4(r2)
   13304:	000f883a 	mov	r7,zero
   13308:	00130dc0 	call	130dc <__multadd>
   1330c:	1029883a 	mov	r20,r2
   13310:	003fc906 	br	13238 <__pow5mult+0x30>
   13314:	9809883a 	mov	r4,r19
   13318:	01409c44 	movi	r5,625
   1331c:	00130a00 	call	130a0 <__i2b>
   13320:	88800215 	stw	r2,8(r17)
   13324:	1021883a 	mov	r16,r2
   13328:	10000015 	stw	zero,0(r2)
   1332c:	003fd006 	br	13270 <__pow5mult+0x68>
   13330:	01000404 	movi	r4,16
   13334:	00158540 	call	15854 <malloc>
   13338:	1023883a 	mov	r17,r2
   1333c:	98800415 	stw	r2,16(r19)
   13340:	10000115 	stw	zero,4(r2)
   13344:	10000215 	stw	zero,8(r2)
   13348:	10000015 	stw	zero,0(r2)
   1334c:	10000315 	stw	zero,12(r2)
   13350:	003fbd06 	br	13248 <__pow5mult+0x40>

00013354 <__s2b>:
   13354:	defff904 	addi	sp,sp,-28
   13358:	dcc00315 	stw	r19,12(sp)
   1335c:	dc800215 	stw	r18,8(sp)
   13360:	2827883a 	mov	r19,r5
   13364:	2025883a 	mov	r18,r4
   13368:	01400244 	movi	r5,9
   1336c:	39000204 	addi	r4,r7,8
   13370:	dd000415 	stw	r20,16(sp)
   13374:	dc400115 	stw	r17,4(sp)
   13378:	dfc00615 	stw	ra,24(sp)
   1337c:	dd400515 	stw	r21,20(sp)
   13380:	dc000015 	stw	r16,0(sp)
   13384:	3829883a 	mov	r20,r7
   13388:	3023883a 	mov	r17,r6
   1338c:	00170f40 	call	170f4 <__divsi3>
   13390:	00c00044 	movi	r3,1
   13394:	1880350e 	bge	r3,r2,1346c <__s2b+0x118>
   13398:	000b883a 	mov	r5,zero
   1339c:	18c7883a 	add	r3,r3,r3
   133a0:	29400044 	addi	r5,r5,1
   133a4:	18bffd16 	blt	r3,r2,1339c <__s2b+0x48>
   133a8:	9009883a 	mov	r4,r18
   133ac:	00129080 	call	12908 <_Balloc>
   133b0:	1011883a 	mov	r8,r2
   133b4:	d8800717 	ldw	r2,28(sp)
   133b8:	00c00044 	movi	r3,1
   133bc:	01800244 	movi	r6,9
   133c0:	40800515 	stw	r2,20(r8)
   133c4:	40c00415 	stw	r3,16(r8)
   133c8:	3440260e 	bge	r6,r17,13464 <__s2b+0x110>
   133cc:	3021883a 	mov	r16,r6
   133d0:	99ab883a 	add	r21,r19,r6
   133d4:	9c05883a 	add	r2,r19,r16
   133d8:	11c00007 	ldb	r7,0(r2)
   133dc:	400b883a 	mov	r5,r8
   133e0:	9009883a 	mov	r4,r18
   133e4:	39fff404 	addi	r7,r7,-48
   133e8:	01800284 	movi	r6,10
   133ec:	00130dc0 	call	130dc <__multadd>
   133f0:	84000044 	addi	r16,r16,1
   133f4:	1011883a 	mov	r8,r2
   133f8:	8c3ff61e 	bne	r17,r16,133d4 <__s2b+0x80>
   133fc:	ac45883a 	add	r2,r21,r17
   13400:	117ffe04 	addi	r5,r2,-8
   13404:	880d883a 	mov	r6,r17
   13408:	35000c0e 	bge	r6,r20,1343c <__s2b+0xe8>
   1340c:	a185c83a 	sub	r2,r20,r6
   13410:	2821883a 	mov	r16,r5
   13414:	28a3883a 	add	r17,r5,r2
   13418:	81c00007 	ldb	r7,0(r16)
   1341c:	400b883a 	mov	r5,r8
   13420:	9009883a 	mov	r4,r18
   13424:	39fff404 	addi	r7,r7,-48
   13428:	01800284 	movi	r6,10
   1342c:	00130dc0 	call	130dc <__multadd>
   13430:	84000044 	addi	r16,r16,1
   13434:	1011883a 	mov	r8,r2
   13438:	847ff71e 	bne	r16,r17,13418 <__s2b+0xc4>
   1343c:	4005883a 	mov	r2,r8
   13440:	dfc00617 	ldw	ra,24(sp)
   13444:	dd400517 	ldw	r21,20(sp)
   13448:	dd000417 	ldw	r20,16(sp)
   1344c:	dcc00317 	ldw	r19,12(sp)
   13450:	dc800217 	ldw	r18,8(sp)
   13454:	dc400117 	ldw	r17,4(sp)
   13458:	dc000017 	ldw	r16,0(sp)
   1345c:	dec00704 	addi	sp,sp,28
   13460:	f800283a 	ret
   13464:	99400284 	addi	r5,r19,10
   13468:	003fe706 	br	13408 <__s2b+0xb4>
   1346c:	000b883a 	mov	r5,zero
   13470:	003fcd06 	br	133a8 <__s2b+0x54>

00013474 <_realloc_r>:
   13474:	defff404 	addi	sp,sp,-48
   13478:	dd800815 	stw	r22,32(sp)
   1347c:	dc800415 	stw	r18,16(sp)
   13480:	dc400315 	stw	r17,12(sp)
   13484:	dfc00b15 	stw	ra,44(sp)
   13488:	df000a15 	stw	fp,40(sp)
   1348c:	ddc00915 	stw	r23,36(sp)
   13490:	dd400715 	stw	r21,28(sp)
   13494:	dd000615 	stw	r20,24(sp)
   13498:	dcc00515 	stw	r19,20(sp)
   1349c:	dc000215 	stw	r16,8(sp)
   134a0:	2825883a 	mov	r18,r5
   134a4:	3023883a 	mov	r17,r6
   134a8:	202d883a 	mov	r22,r4
   134ac:	2800c926 	beq	r5,zero,137d4 <_realloc_r+0x360>
   134b0:	001750c0 	call	1750c <__malloc_lock>
   134b4:	943ffe04 	addi	r16,r18,-8
   134b8:	88c002c4 	addi	r3,r17,11
   134bc:	00800584 	movi	r2,22
   134c0:	82000117 	ldw	r8,4(r16)
   134c4:	10c01b2e 	bgeu	r2,r3,13534 <_realloc_r+0xc0>
   134c8:	00bffe04 	movi	r2,-8
   134cc:	188e703a 	and	r7,r3,r2
   134d0:	3839883a 	mov	fp,r7
   134d4:	38001a16 	blt	r7,zero,13540 <_realloc_r+0xcc>
   134d8:	e4401936 	bltu	fp,r17,13540 <_realloc_r+0xcc>
   134dc:	013fff04 	movi	r4,-4
   134e0:	4126703a 	and	r19,r8,r4
   134e4:	99c02616 	blt	r19,r7,13580 <_realloc_r+0x10c>
   134e8:	802b883a 	mov	r21,r16
   134ec:	9829883a 	mov	r20,r19
   134f0:	84000204 	addi	r16,r16,8
   134f4:	a80f883a 	mov	r7,r21
   134f8:	a70dc83a 	sub	r6,r20,fp
   134fc:	008003c4 	movi	r2,15
   13500:	1180c136 	bltu	r2,r6,13808 <_realloc_r+0x394>
   13504:	38800117 	ldw	r2,4(r7)
   13508:	a549883a 	add	r4,r20,r21
   1350c:	1080004c 	andi	r2,r2,1
   13510:	a084b03a 	or	r2,r20,r2
   13514:	38800115 	stw	r2,4(r7)
   13518:	20c00117 	ldw	r3,4(r4)
   1351c:	18c00054 	ori	r3,r3,1
   13520:	20c00115 	stw	r3,4(r4)
   13524:	b009883a 	mov	r4,r22
   13528:	001752c0 	call	1752c <__malloc_unlock>
   1352c:	8023883a 	mov	r17,r16
   13530:	00000606 	br	1354c <_realloc_r+0xd8>
   13534:	01c00404 	movi	r7,16
   13538:	3839883a 	mov	fp,r7
   1353c:	e47fe72e 	bgeu	fp,r17,134dc <_realloc_r+0x68>
   13540:	00800304 	movi	r2,12
   13544:	0023883a 	mov	r17,zero
   13548:	b0800015 	stw	r2,0(r22)
   1354c:	8805883a 	mov	r2,r17
   13550:	dfc00b17 	ldw	ra,44(sp)
   13554:	df000a17 	ldw	fp,40(sp)
   13558:	ddc00917 	ldw	r23,36(sp)
   1355c:	dd800817 	ldw	r22,32(sp)
   13560:	dd400717 	ldw	r21,28(sp)
   13564:	dd000617 	ldw	r20,24(sp)
   13568:	dcc00517 	ldw	r19,20(sp)
   1356c:	dc800417 	ldw	r18,16(sp)
   13570:	dc400317 	ldw	r17,12(sp)
   13574:	dc000217 	ldw	r16,8(sp)
   13578:	dec00c04 	addi	sp,sp,48
   1357c:	f800283a 	ret
   13580:	008000b4 	movhi	r2,2
   13584:	10a4b004 	addi	r2,r2,-27968
   13588:	12400217 	ldw	r9,8(r2)
   1358c:	84cd883a 	add	r6,r16,r19
   13590:	802b883a 	mov	r21,r16
   13594:	3240b926 	beq	r6,r9,1387c <_realloc_r+0x408>
   13598:	31400117 	ldw	r5,4(r6)
   1359c:	00bfff84 	movi	r2,-2
   135a0:	2884703a 	and	r2,r5,r2
   135a4:	1185883a 	add	r2,r2,r6
   135a8:	10c00117 	ldw	r3,4(r2)
   135ac:	18c0004c 	andi	r3,r3,1
   135b0:	1807003a 	cmpeq	r3,r3,zero
   135b4:	1800a326 	beq	r3,zero,13844 <_realloc_r+0x3d0>
   135b8:	2908703a 	and	r4,r5,r4
   135bc:	9929883a 	add	r20,r19,r4
   135c0:	a1c0a30e 	bge	r20,r7,13850 <_realloc_r+0x3dc>
   135c4:	4080004c 	andi	r2,r8,1
   135c8:	1000551e 	bne	r2,zero,13720 <_realloc_r+0x2ac>
   135cc:	80800017 	ldw	r2,0(r16)
   135d0:	80afc83a 	sub	r23,r16,r2
   135d4:	b8c00117 	ldw	r3,4(r23)
   135d8:	00bfff04 	movi	r2,-4
   135dc:	1884703a 	and	r2,r3,r2
   135e0:	30002e26 	beq	r6,zero,1369c <_realloc_r+0x228>
   135e4:	3240b926 	beq	r6,r9,138cc <_realloc_r+0x458>
   135e8:	98a9883a 	add	r20,r19,r2
   135ec:	2509883a 	add	r4,r4,r20
   135f0:	d9000015 	stw	r4,0(sp)
   135f4:	21c02a16 	blt	r4,r7,136a0 <_realloc_r+0x22c>
   135f8:	30800317 	ldw	r2,12(r6)
   135fc:	30c00217 	ldw	r3,8(r6)
   13600:	01400904 	movi	r5,36
   13604:	99bfff04 	addi	r6,r19,-4
   13608:	18800315 	stw	r2,12(r3)
   1360c:	10c00215 	stw	r3,8(r2)
   13610:	b9000317 	ldw	r4,12(r23)
   13614:	b8800217 	ldw	r2,8(r23)
   13618:	b82b883a 	mov	r21,r23
   1361c:	bc000204 	addi	r16,r23,8
   13620:	20800215 	stw	r2,8(r4)
   13624:	11000315 	stw	r4,12(r2)
   13628:	2980e436 	bltu	r5,r6,139bc <_realloc_r+0x548>
   1362c:	008004c4 	movi	r2,19
   13630:	9009883a 	mov	r4,r18
   13634:	8011883a 	mov	r8,r16
   13638:	11800f2e 	bgeu	r2,r6,13678 <_realloc_r+0x204>
   1363c:	90800017 	ldw	r2,0(r18)
   13640:	ba000404 	addi	r8,r23,16
   13644:	91000204 	addi	r4,r18,8
   13648:	b8800215 	stw	r2,8(r23)
   1364c:	90c00117 	ldw	r3,4(r18)
   13650:	008006c4 	movi	r2,27
   13654:	b8c00315 	stw	r3,12(r23)
   13658:	1180072e 	bgeu	r2,r6,13678 <_realloc_r+0x204>
   1365c:	90c00217 	ldw	r3,8(r18)
   13660:	ba000604 	addi	r8,r23,24
   13664:	91000404 	addi	r4,r18,16
   13668:	b8c00415 	stw	r3,16(r23)
   1366c:	90800317 	ldw	r2,12(r18)
   13670:	b8800515 	stw	r2,20(r23)
   13674:	3140e726 	beq	r6,r5,13a14 <_realloc_r+0x5a0>
   13678:	20800017 	ldw	r2,0(r4)
   1367c:	dd000017 	ldw	r20,0(sp)
   13680:	b80f883a 	mov	r7,r23
   13684:	40800015 	stw	r2,0(r8)
   13688:	20c00117 	ldw	r3,4(r4)
   1368c:	40c00115 	stw	r3,4(r8)
   13690:	20800217 	ldw	r2,8(r4)
   13694:	40800215 	stw	r2,8(r8)
   13698:	003f9706 	br	134f8 <_realloc_r+0x84>
   1369c:	98a9883a 	add	r20,r19,r2
   136a0:	a1c01f16 	blt	r20,r7,13720 <_realloc_r+0x2ac>
   136a4:	b8c00317 	ldw	r3,12(r23)
   136a8:	b8800217 	ldw	r2,8(r23)
   136ac:	99bfff04 	addi	r6,r19,-4
   136b0:	01400904 	movi	r5,36
   136b4:	b82b883a 	mov	r21,r23
   136b8:	18800215 	stw	r2,8(r3)
   136bc:	10c00315 	stw	r3,12(r2)
   136c0:	bc000204 	addi	r16,r23,8
   136c4:	2980c336 	bltu	r5,r6,139d4 <_realloc_r+0x560>
   136c8:	008004c4 	movi	r2,19
   136cc:	9009883a 	mov	r4,r18
   136d0:	8011883a 	mov	r8,r16
   136d4:	11800f2e 	bgeu	r2,r6,13714 <_realloc_r+0x2a0>
   136d8:	90800017 	ldw	r2,0(r18)
   136dc:	ba000404 	addi	r8,r23,16
   136e0:	91000204 	addi	r4,r18,8
   136e4:	b8800215 	stw	r2,8(r23)
   136e8:	90c00117 	ldw	r3,4(r18)
   136ec:	008006c4 	movi	r2,27
   136f0:	b8c00315 	stw	r3,12(r23)
   136f4:	1180072e 	bgeu	r2,r6,13714 <_realloc_r+0x2a0>
   136f8:	90c00217 	ldw	r3,8(r18)
   136fc:	ba000604 	addi	r8,r23,24
   13700:	91000404 	addi	r4,r18,16
   13704:	b8c00415 	stw	r3,16(r23)
   13708:	90800317 	ldw	r2,12(r18)
   1370c:	b8800515 	stw	r2,20(r23)
   13710:	3140c726 	beq	r6,r5,13a30 <_realloc_r+0x5bc>
   13714:	20800017 	ldw	r2,0(r4)
   13718:	b80f883a 	mov	r7,r23
   1371c:	003fd906 	br	13684 <_realloc_r+0x210>
   13720:	880b883a 	mov	r5,r17
   13724:	b009883a 	mov	r4,r22
   13728:	00158680 	call	15868 <_malloc_r>
   1372c:	1023883a 	mov	r17,r2
   13730:	10002526 	beq	r2,zero,137c8 <_realloc_r+0x354>
   13734:	80800117 	ldw	r2,4(r16)
   13738:	00ffff84 	movi	r3,-2
   1373c:	893ffe04 	addi	r4,r17,-8
   13740:	10c4703a 	and	r2,r2,r3
   13744:	8085883a 	add	r2,r16,r2
   13748:	20809526 	beq	r4,r2,139a0 <_realloc_r+0x52c>
   1374c:	99bfff04 	addi	r6,r19,-4
   13750:	01c00904 	movi	r7,36
   13754:	39804536 	bltu	r7,r6,1386c <_realloc_r+0x3f8>
   13758:	008004c4 	movi	r2,19
   1375c:	9009883a 	mov	r4,r18
   13760:	880b883a 	mov	r5,r17
   13764:	11800f2e 	bgeu	r2,r6,137a4 <_realloc_r+0x330>
   13768:	90800017 	ldw	r2,0(r18)
   1376c:	89400204 	addi	r5,r17,8
   13770:	91000204 	addi	r4,r18,8
   13774:	88800015 	stw	r2,0(r17)
   13778:	90c00117 	ldw	r3,4(r18)
   1377c:	008006c4 	movi	r2,27
   13780:	88c00115 	stw	r3,4(r17)
   13784:	1180072e 	bgeu	r2,r6,137a4 <_realloc_r+0x330>
   13788:	90c00217 	ldw	r3,8(r18)
   1378c:	89400404 	addi	r5,r17,16
   13790:	91000404 	addi	r4,r18,16
   13794:	88c00215 	stw	r3,8(r17)
   13798:	90800317 	ldw	r2,12(r18)
   1379c:	88800315 	stw	r2,12(r17)
   137a0:	31c09126 	beq	r6,r7,139e8 <_realloc_r+0x574>
   137a4:	20800017 	ldw	r2,0(r4)
   137a8:	28800015 	stw	r2,0(r5)
   137ac:	20c00117 	ldw	r3,4(r4)
   137b0:	28c00115 	stw	r3,4(r5)
   137b4:	20800217 	ldw	r2,8(r4)
   137b8:	28800215 	stw	r2,8(r5)
   137bc:	900b883a 	mov	r5,r18
   137c0:	b009883a 	mov	r4,r22
   137c4:	001552c0 	call	1552c <_free_r>
   137c8:	b009883a 	mov	r4,r22
   137cc:	001752c0 	call	1752c <__malloc_unlock>
   137d0:	003f5e06 	br	1354c <_realloc_r+0xd8>
   137d4:	300b883a 	mov	r5,r6
   137d8:	dfc00b17 	ldw	ra,44(sp)
   137dc:	df000a17 	ldw	fp,40(sp)
   137e0:	ddc00917 	ldw	r23,36(sp)
   137e4:	dd800817 	ldw	r22,32(sp)
   137e8:	dd400717 	ldw	r21,28(sp)
   137ec:	dd000617 	ldw	r20,24(sp)
   137f0:	dcc00517 	ldw	r19,20(sp)
   137f4:	dc800417 	ldw	r18,16(sp)
   137f8:	dc400317 	ldw	r17,12(sp)
   137fc:	dc000217 	ldw	r16,8(sp)
   13800:	dec00c04 	addi	sp,sp,48
   13804:	00158681 	jmpi	15868 <_malloc_r>
   13808:	38800117 	ldw	r2,4(r7)
   1380c:	e54b883a 	add	r5,fp,r21
   13810:	31000054 	ori	r4,r6,1
   13814:	1080004c 	andi	r2,r2,1
   13818:	1704b03a 	or	r2,r2,fp
   1381c:	38800115 	stw	r2,4(r7)
   13820:	29000115 	stw	r4,4(r5)
   13824:	2987883a 	add	r3,r5,r6
   13828:	18800117 	ldw	r2,4(r3)
   1382c:	29400204 	addi	r5,r5,8
   13830:	b009883a 	mov	r4,r22
   13834:	10800054 	ori	r2,r2,1
   13838:	18800115 	stw	r2,4(r3)
   1383c:	001552c0 	call	1552c <_free_r>
   13840:	003f3806 	br	13524 <_realloc_r+0xb0>
   13844:	000d883a 	mov	r6,zero
   13848:	0009883a 	mov	r4,zero
   1384c:	003f5d06 	br	135c4 <_realloc_r+0x150>
   13850:	30c00217 	ldw	r3,8(r6)
   13854:	30800317 	ldw	r2,12(r6)
   13858:	800f883a 	mov	r7,r16
   1385c:	84000204 	addi	r16,r16,8
   13860:	10c00215 	stw	r3,8(r2)
   13864:	18800315 	stw	r2,12(r3)
   13868:	003f2306 	br	134f8 <_realloc_r+0x84>
   1386c:	8809883a 	mov	r4,r17
   13870:	900b883a 	mov	r5,r18
   13874:	0015fd40 	call	15fd4 <memmove>
   13878:	003fd006 	br	137bc <_realloc_r+0x348>
   1387c:	30800117 	ldw	r2,4(r6)
   13880:	e0c00404 	addi	r3,fp,16
   13884:	1108703a 	and	r4,r2,r4
   13888:	9905883a 	add	r2,r19,r4
   1388c:	10ff4d16 	blt	r2,r3,135c4 <_realloc_r+0x150>
   13890:	1705c83a 	sub	r2,r2,fp
   13894:	870b883a 	add	r5,r16,fp
   13898:	10800054 	ori	r2,r2,1
   1389c:	28800115 	stw	r2,4(r5)
   138a0:	80c00117 	ldw	r3,4(r16)
   138a4:	008000b4 	movhi	r2,2
   138a8:	10a4b004 	addi	r2,r2,-27968
   138ac:	b009883a 	mov	r4,r22
   138b0:	18c0004c 	andi	r3,r3,1
   138b4:	e0c6b03a 	or	r3,fp,r3
   138b8:	11400215 	stw	r5,8(r2)
   138bc:	80c00115 	stw	r3,4(r16)
   138c0:	001752c0 	call	1752c <__malloc_unlock>
   138c4:	84400204 	addi	r17,r16,8
   138c8:	003f2006 	br	1354c <_realloc_r+0xd8>
   138cc:	98a9883a 	add	r20,r19,r2
   138d0:	2509883a 	add	r4,r4,r20
   138d4:	e0800404 	addi	r2,fp,16
   138d8:	d9000115 	stw	r4,4(sp)
   138dc:	20bf7016 	blt	r4,r2,136a0 <_realloc_r+0x22c>
   138e0:	b8c00317 	ldw	r3,12(r23)
   138e4:	b8800217 	ldw	r2,8(r23)
   138e8:	99bfff04 	addi	r6,r19,-4
   138ec:	01400904 	movi	r5,36
   138f0:	18800215 	stw	r2,8(r3)
   138f4:	10c00315 	stw	r3,12(r2)
   138f8:	bc400204 	addi	r17,r23,8
   138fc:	29804136 	bltu	r5,r6,13a04 <_realloc_r+0x590>
   13900:	008004c4 	movi	r2,19
   13904:	9009883a 	mov	r4,r18
   13908:	880f883a 	mov	r7,r17
   1390c:	11800f2e 	bgeu	r2,r6,1394c <_realloc_r+0x4d8>
   13910:	90800017 	ldw	r2,0(r18)
   13914:	b9c00404 	addi	r7,r23,16
   13918:	91000204 	addi	r4,r18,8
   1391c:	b8800215 	stw	r2,8(r23)
   13920:	90c00117 	ldw	r3,4(r18)
   13924:	008006c4 	movi	r2,27
   13928:	b8c00315 	stw	r3,12(r23)
   1392c:	1180072e 	bgeu	r2,r6,1394c <_realloc_r+0x4d8>
   13930:	90c00217 	ldw	r3,8(r18)
   13934:	b9c00604 	addi	r7,r23,24
   13938:	91000404 	addi	r4,r18,16
   1393c:	b8c00415 	stw	r3,16(r23)
   13940:	90800317 	ldw	r2,12(r18)
   13944:	b8800515 	stw	r2,20(r23)
   13948:	31404026 	beq	r6,r5,13a4c <_realloc_r+0x5d8>
   1394c:	20800017 	ldw	r2,0(r4)
   13950:	38800015 	stw	r2,0(r7)
   13954:	20c00117 	ldw	r3,4(r4)
   13958:	38c00115 	stw	r3,4(r7)
   1395c:	20800217 	ldw	r2,8(r4)
   13960:	38800215 	stw	r2,8(r7)
   13964:	d8c00117 	ldw	r3,4(sp)
   13968:	bf0b883a 	add	r5,r23,fp
   1396c:	b009883a 	mov	r4,r22
   13970:	1f05c83a 	sub	r2,r3,fp
   13974:	10800054 	ori	r2,r2,1
   13978:	28800115 	stw	r2,4(r5)
   1397c:	b8c00117 	ldw	r3,4(r23)
   13980:	008000b4 	movhi	r2,2
   13984:	10a4b004 	addi	r2,r2,-27968
   13988:	11400215 	stw	r5,8(r2)
   1398c:	18c0004c 	andi	r3,r3,1
   13990:	e0c6b03a 	or	r3,fp,r3
   13994:	b8c00115 	stw	r3,4(r23)
   13998:	001752c0 	call	1752c <__malloc_unlock>
   1399c:	003eeb06 	br	1354c <_realloc_r+0xd8>
   139a0:	20800117 	ldw	r2,4(r4)
   139a4:	00ffff04 	movi	r3,-4
   139a8:	800f883a 	mov	r7,r16
   139ac:	10c4703a 	and	r2,r2,r3
   139b0:	98a9883a 	add	r20,r19,r2
   139b4:	84000204 	addi	r16,r16,8
   139b8:	003ecf06 	br	134f8 <_realloc_r+0x84>
   139bc:	900b883a 	mov	r5,r18
   139c0:	8009883a 	mov	r4,r16
   139c4:	0015fd40 	call	15fd4 <memmove>
   139c8:	dd000017 	ldw	r20,0(sp)
   139cc:	b80f883a 	mov	r7,r23
   139d0:	003ec906 	br	134f8 <_realloc_r+0x84>
   139d4:	900b883a 	mov	r5,r18
   139d8:	8009883a 	mov	r4,r16
   139dc:	0015fd40 	call	15fd4 <memmove>
   139e0:	b80f883a 	mov	r7,r23
   139e4:	003ec406 	br	134f8 <_realloc_r+0x84>
   139e8:	90c00417 	ldw	r3,16(r18)
   139ec:	89400604 	addi	r5,r17,24
   139f0:	91000604 	addi	r4,r18,24
   139f4:	88c00415 	stw	r3,16(r17)
   139f8:	90800517 	ldw	r2,20(r18)
   139fc:	88800515 	stw	r2,20(r17)
   13a00:	003f6806 	br	137a4 <_realloc_r+0x330>
   13a04:	900b883a 	mov	r5,r18
   13a08:	8809883a 	mov	r4,r17
   13a0c:	0015fd40 	call	15fd4 <memmove>
   13a10:	003fd406 	br	13964 <_realloc_r+0x4f0>
   13a14:	90c00417 	ldw	r3,16(r18)
   13a18:	91000604 	addi	r4,r18,24
   13a1c:	ba000804 	addi	r8,r23,32
   13a20:	b8c00615 	stw	r3,24(r23)
   13a24:	90800517 	ldw	r2,20(r18)
   13a28:	b8800715 	stw	r2,28(r23)
   13a2c:	003f1206 	br	13678 <_realloc_r+0x204>
   13a30:	90c00417 	ldw	r3,16(r18)
   13a34:	91000604 	addi	r4,r18,24
   13a38:	ba000804 	addi	r8,r23,32
   13a3c:	b8c00615 	stw	r3,24(r23)
   13a40:	90800517 	ldw	r2,20(r18)
   13a44:	b8800715 	stw	r2,28(r23)
   13a48:	003f3206 	br	13714 <_realloc_r+0x2a0>
   13a4c:	90c00417 	ldw	r3,16(r18)
   13a50:	91000604 	addi	r4,r18,24
   13a54:	b9c00804 	addi	r7,r23,32
   13a58:	b8c00615 	stw	r3,24(r23)
   13a5c:	90800517 	ldw	r2,20(r18)
   13a60:	b8800715 	stw	r2,28(r23)
   13a64:	003fb906 	br	1394c <_realloc_r+0x4d8>

00013a68 <strcpy>:
   13a68:	2007883a 	mov	r3,r4
   13a6c:	28800003 	ldbu	r2,0(r5)
   13a70:	29400044 	addi	r5,r5,1
   13a74:	18800005 	stb	r2,0(r3)
   13a78:	18c00044 	addi	r3,r3,1
   13a7c:	103ffb1e 	bne	r2,zero,13a6c <strcpy+0x4>
   13a80:	2005883a 	mov	r2,r4
   13a84:	f800283a 	ret

00013a88 <_write_r>:
   13a88:	defffd04 	addi	sp,sp,-12
   13a8c:	dc000015 	stw	r16,0(sp)
   13a90:	040000b4 	movhi	r16,2
   13a94:	8427f204 	addi	r16,r16,-24632
   13a98:	dc400115 	stw	r17,4(sp)
   13a9c:	80000015 	stw	zero,0(r16)
   13aa0:	2023883a 	mov	r17,r4
   13aa4:	2809883a 	mov	r4,r5
   13aa8:	300b883a 	mov	r5,r6
   13aac:	380d883a 	mov	r6,r7
   13ab0:	dfc00215 	stw	ra,8(sp)
   13ab4:	001773c0 	call	1773c <write>
   13ab8:	1007883a 	mov	r3,r2
   13abc:	00bfffc4 	movi	r2,-1
   13ac0:	18800626 	beq	r3,r2,13adc <_write_r+0x54>
   13ac4:	1805883a 	mov	r2,r3
   13ac8:	dfc00217 	ldw	ra,8(sp)
   13acc:	dc400117 	ldw	r17,4(sp)
   13ad0:	dc000017 	ldw	r16,0(sp)
   13ad4:	dec00304 	addi	sp,sp,12
   13ad8:	f800283a 	ret
   13adc:	80800017 	ldw	r2,0(r16)
   13ae0:	103ff826 	beq	r2,zero,13ac4 <_write_r+0x3c>
   13ae4:	88800015 	stw	r2,0(r17)
   13ae8:	1805883a 	mov	r2,r3
   13aec:	dfc00217 	ldw	ra,8(sp)
   13af0:	dc400117 	ldw	r17,4(sp)
   13af4:	dc000017 	ldw	r16,0(sp)
   13af8:	dec00304 	addi	sp,sp,12
   13afc:	f800283a 	ret

00013b00 <_calloc_r>:
   13b00:	defffe04 	addi	sp,sp,-8
   13b04:	dc400015 	stw	r17,0(sp)
   13b08:	2023883a 	mov	r17,r4
   13b0c:	2809883a 	mov	r4,r5
   13b10:	300b883a 	mov	r5,r6
   13b14:	dfc00115 	stw	ra,4(sp)
   13b18:	00114b80 	call	114b8 <__mulsi3>
   13b1c:	100b883a 	mov	r5,r2
   13b20:	8809883a 	mov	r4,r17
   13b24:	00158680 	call	15868 <_malloc_r>
   13b28:	1023883a 	mov	r17,r2
   13b2c:	01c00904 	movi	r7,36
   13b30:	10000d26 	beq	r2,zero,13b68 <_calloc_r+0x68>
   13b34:	10ffff17 	ldw	r3,-4(r2)
   13b38:	1009883a 	mov	r4,r2
   13b3c:	00bfff04 	movi	r2,-4
   13b40:	1886703a 	and	r3,r3,r2
   13b44:	1887883a 	add	r3,r3,r2
   13b48:	180d883a 	mov	r6,r3
   13b4c:	000b883a 	mov	r5,zero
   13b50:	38c01736 	bltu	r7,r3,13bb0 <_calloc_r+0xb0>
   13b54:	008004c4 	movi	r2,19
   13b58:	10c00836 	bltu	r2,r3,13b7c <_calloc_r+0x7c>
   13b5c:	20000215 	stw	zero,8(r4)
   13b60:	20000015 	stw	zero,0(r4)
   13b64:	20000115 	stw	zero,4(r4)
   13b68:	8805883a 	mov	r2,r17
   13b6c:	dfc00117 	ldw	ra,4(sp)
   13b70:	dc400017 	ldw	r17,0(sp)
   13b74:	dec00204 	addi	sp,sp,8
   13b78:	f800283a 	ret
   13b7c:	008006c4 	movi	r2,27
   13b80:	88000015 	stw	zero,0(r17)
   13b84:	88000115 	stw	zero,4(r17)
   13b88:	89000204 	addi	r4,r17,8
   13b8c:	10fff32e 	bgeu	r2,r3,13b5c <_calloc_r+0x5c>
   13b90:	88000215 	stw	zero,8(r17)
   13b94:	88000315 	stw	zero,12(r17)
   13b98:	89000404 	addi	r4,r17,16
   13b9c:	19ffef1e 	bne	r3,r7,13b5c <_calloc_r+0x5c>
   13ba0:	89000604 	addi	r4,r17,24
   13ba4:	88000415 	stw	zero,16(r17)
   13ba8:	88000515 	stw	zero,20(r17)
   13bac:	003feb06 	br	13b5c <_calloc_r+0x5c>
   13bb0:	00160340 	call	16034 <memset>
   13bb4:	8805883a 	mov	r2,r17
   13bb8:	dfc00117 	ldw	ra,4(sp)
   13bbc:	dc400017 	ldw	r17,0(sp)
   13bc0:	dec00204 	addi	sp,sp,8
   13bc4:	f800283a 	ret

00013bc8 <quorem>:
   13bc8:	28c00417 	ldw	r3,16(r5)
   13bcc:	20800417 	ldw	r2,16(r4)
   13bd0:	defff104 	addi	sp,sp,-60
   13bd4:	dfc00e15 	stw	ra,56(sp)
   13bd8:	df000d15 	stw	fp,52(sp)
   13bdc:	ddc00c15 	stw	r23,48(sp)
   13be0:	dd800b15 	stw	r22,44(sp)
   13be4:	dd400a15 	stw	r21,40(sp)
   13be8:	dd000915 	stw	r20,36(sp)
   13bec:	dcc00815 	stw	r19,32(sp)
   13bf0:	dc800715 	stw	r18,28(sp)
   13bf4:	dc400615 	stw	r17,24(sp)
   13bf8:	dc000515 	stw	r16,20(sp)
   13bfc:	d9000315 	stw	r4,12(sp)
   13c00:	d9400415 	stw	r5,16(sp)
   13c04:	10c07f16 	blt	r2,r3,13e04 <quorem+0x23c>
   13c08:	1d3fffc4 	addi	r20,r3,-1
   13c0c:	d8c00417 	ldw	r3,16(sp)
   13c10:	d9000317 	ldw	r4,12(sp)
   13c14:	a505883a 	add	r2,r20,r20
   13c18:	1085883a 	add	r2,r2,r2
   13c1c:	1cc00504 	addi	r19,r3,20
   13c20:	25c00504 	addi	r23,r4,20
   13c24:	98ad883a 	add	r22,r19,r2
   13c28:	15c7883a 	add	r3,r2,r23
   13c2c:	b1400017 	ldw	r5,0(r22)
   13c30:	19000017 	ldw	r4,0(r3)
   13c34:	d8c00015 	stw	r3,0(sp)
   13c38:	29400044 	addi	r5,r5,1
   13c3c:	d9000215 	stw	r4,8(sp)
   13c40:	00171b40 	call	171b4 <__udivsi3>
   13c44:	1039883a 	mov	fp,r2
   13c48:	10003d1e 	bne	r2,zero,13d40 <quorem+0x178>
   13c4c:	d9400417 	ldw	r5,16(sp)
   13c50:	d9000317 	ldw	r4,12(sp)
   13c54:	001246c0 	call	1246c <__mcmp>
   13c58:	10002c16 	blt	r2,zero,13d0c <quorem+0x144>
   13c5c:	e7000044 	addi	fp,fp,1
   13c60:	b80f883a 	mov	r7,r23
   13c64:	0011883a 	mov	r8,zero
   13c68:	0009883a 	mov	r4,zero
   13c6c:	99400017 	ldw	r5,0(r19)
   13c70:	38c00017 	ldw	r3,0(r7)
   13c74:	9cc00104 	addi	r19,r19,4
   13c78:	28bfffcc 	andi	r2,r5,65535
   13c7c:	2085883a 	add	r2,r4,r2
   13c80:	11bfffcc 	andi	r6,r2,65535
   13c84:	193fffcc 	andi	r4,r3,65535
   13c88:	1004d43a 	srli	r2,r2,16
   13c8c:	280ad43a 	srli	r5,r5,16
   13c90:	2189c83a 	sub	r4,r4,r6
   13c94:	2209883a 	add	r4,r4,r8
   13c98:	1806d43a 	srli	r3,r3,16
   13c9c:	288b883a 	add	r5,r5,r2
   13ca0:	200dd43a 	srai	r6,r4,16
   13ca4:	28bfffcc 	andi	r2,r5,65535
   13ca8:	1887c83a 	sub	r3,r3,r2
   13cac:	1987883a 	add	r3,r3,r6
   13cb0:	3900000d 	sth	r4,0(r7)
   13cb4:	38c0008d 	sth	r3,2(r7)
   13cb8:	2808d43a 	srli	r4,r5,16
   13cbc:	39c00104 	addi	r7,r7,4
   13cc0:	1811d43a 	srai	r8,r3,16
   13cc4:	b4ffe92e 	bgeu	r22,r19,13c6c <quorem+0xa4>
   13cc8:	a505883a 	add	r2,r20,r20
   13ccc:	1085883a 	add	r2,r2,r2
   13cd0:	b885883a 	add	r2,r23,r2
   13cd4:	10c00017 	ldw	r3,0(r2)
   13cd8:	18000c1e 	bne	r3,zero,13d0c <quorem+0x144>
   13cdc:	113fff04 	addi	r4,r2,-4
   13ce0:	b900082e 	bgeu	r23,r4,13d04 <quorem+0x13c>
   13ce4:	10bfff17 	ldw	r2,-4(r2)
   13ce8:	10000326 	beq	r2,zero,13cf8 <quorem+0x130>
   13cec:	00000506 	br	13d04 <quorem+0x13c>
   13cf0:	20800017 	ldw	r2,0(r4)
   13cf4:	1000031e 	bne	r2,zero,13d04 <quorem+0x13c>
   13cf8:	213fff04 	addi	r4,r4,-4
   13cfc:	a53fffc4 	addi	r20,r20,-1
   13d00:	b93ffb36 	bltu	r23,r4,13cf0 <quorem+0x128>
   13d04:	d9000317 	ldw	r4,12(sp)
   13d08:	25000415 	stw	r20,16(r4)
   13d0c:	e005883a 	mov	r2,fp
   13d10:	dfc00e17 	ldw	ra,56(sp)
   13d14:	df000d17 	ldw	fp,52(sp)
   13d18:	ddc00c17 	ldw	r23,48(sp)
   13d1c:	dd800b17 	ldw	r22,44(sp)
   13d20:	dd400a17 	ldw	r21,40(sp)
   13d24:	dd000917 	ldw	r20,36(sp)
   13d28:	dcc00817 	ldw	r19,32(sp)
   13d2c:	dc800717 	ldw	r18,28(sp)
   13d30:	dc400617 	ldw	r17,24(sp)
   13d34:	dc000517 	ldw	r16,20(sp)
   13d38:	dec00f04 	addi	sp,sp,60
   13d3c:	f800283a 	ret
   13d40:	b823883a 	mov	r17,r23
   13d44:	9825883a 	mov	r18,r19
   13d48:	d8000115 	stw	zero,4(sp)
   13d4c:	002b883a 	mov	r21,zero
   13d50:	94000017 	ldw	r16,0(r18)
   13d54:	e009883a 	mov	r4,fp
   13d58:	94800104 	addi	r18,r18,4
   13d5c:	817fffcc 	andi	r5,r16,65535
   13d60:	00114b80 	call	114b8 <__mulsi3>
   13d64:	800ad43a 	srli	r5,r16,16
   13d68:	e009883a 	mov	r4,fp
   13d6c:	a8a1883a 	add	r16,r21,r2
   13d70:	00114b80 	call	114b8 <__mulsi3>
   13d74:	89000017 	ldw	r4,0(r17)
   13d78:	80ffffcc 	andi	r3,r16,65535
   13d7c:	8020d43a 	srli	r16,r16,16
   13d80:	217fffcc 	andi	r5,r4,65535
   13d84:	28cbc83a 	sub	r5,r5,r3
   13d88:	d8c00117 	ldw	r3,4(sp)
   13d8c:	2008d43a 	srli	r4,r4,16
   13d90:	1405883a 	add	r2,r2,r16
   13d94:	28cb883a 	add	r5,r5,r3
   13d98:	280dd43a 	srai	r6,r5,16
   13d9c:	10ffffcc 	andi	r3,r2,65535
   13da0:	20c9c83a 	sub	r4,r4,r3
   13da4:	2189883a 	add	r4,r4,r6
   13da8:	8900008d 	sth	r4,2(r17)
   13dac:	2009d43a 	srai	r4,r4,16
   13db0:	8940000d 	sth	r5,0(r17)
   13db4:	102ad43a 	srli	r21,r2,16
   13db8:	8c400104 	addi	r17,r17,4
   13dbc:	d9000115 	stw	r4,4(sp)
   13dc0:	b4bfe32e 	bgeu	r22,r18,13d50 <quorem+0x188>
   13dc4:	d9000217 	ldw	r4,8(sp)
   13dc8:	203fa01e 	bne	r4,zero,13c4c <quorem+0x84>
   13dcc:	d8800017 	ldw	r2,0(sp)
   13dd0:	10ffff04 	addi	r3,r2,-4
   13dd4:	b8c0082e 	bgeu	r23,r3,13df8 <quorem+0x230>
   13dd8:	10bfff17 	ldw	r2,-4(r2)
   13ddc:	10000326 	beq	r2,zero,13dec <quorem+0x224>
   13de0:	00000506 	br	13df8 <quorem+0x230>
   13de4:	18800017 	ldw	r2,0(r3)
   13de8:	1000031e 	bne	r2,zero,13df8 <quorem+0x230>
   13dec:	18ffff04 	addi	r3,r3,-4
   13df0:	a53fffc4 	addi	r20,r20,-1
   13df4:	b8fffb36 	bltu	r23,r3,13de4 <quorem+0x21c>
   13df8:	d8c00317 	ldw	r3,12(sp)
   13dfc:	1d000415 	stw	r20,16(r3)
   13e00:	003f9206 	br	13c4c <quorem+0x84>
   13e04:	0005883a 	mov	r2,zero
   13e08:	003fc106 	br	13d10 <quorem+0x148>

00013e0c <_dtoa_r>:
   13e0c:	deffda04 	addi	sp,sp,-152
   13e10:	dc801e15 	stw	r18,120(sp)
   13e14:	24800417 	ldw	r18,16(r4)
   13e18:	dd402115 	stw	r21,132(sp)
   13e1c:	dd002015 	stw	r20,128(sp)
   13e20:	dcc01f15 	stw	r19,124(sp)
   13e24:	dc401d15 	stw	r17,116(sp)
   13e28:	dfc02515 	stw	ra,148(sp)
   13e2c:	df002415 	stw	fp,144(sp)
   13e30:	ddc02315 	stw	r23,140(sp)
   13e34:	dd802215 	stw	r22,136(sp)
   13e38:	dc001c15 	stw	r16,112(sp)
   13e3c:	d9001615 	stw	r4,88(sp)
   13e40:	3023883a 	mov	r17,r6
   13e44:	2829883a 	mov	r20,r5
   13e48:	d9c01715 	stw	r7,92(sp)
   13e4c:	dcc02817 	ldw	r19,160(sp)
   13e50:	302b883a 	mov	r21,r6
   13e54:	90028326 	beq	r18,zero,14864 <_dtoa_r+0xa58>
   13e58:	91800017 	ldw	r6,0(r18)
   13e5c:	30000c26 	beq	r6,zero,13e90 <_dtoa_r+0x84>
   13e60:	90800117 	ldw	r2,4(r18)
   13e64:	d9001617 	ldw	r4,88(sp)
   13e68:	300b883a 	mov	r5,r6
   13e6c:	30800115 	stw	r2,4(r6)
   13e70:	90c00117 	ldw	r3,4(r18)
   13e74:	00800044 	movi	r2,1
   13e78:	10c4983a 	sll	r2,r2,r3
   13e7c:	30800215 	stw	r2,8(r6)
   13e80:	00128900 	call	12890 <_Bfree>
   13e84:	d8c01617 	ldw	r3,88(sp)
   13e88:	18800417 	ldw	r2,16(r3)
   13e8c:	10000015 	stw	zero,0(r2)
   13e90:	8800a316 	blt	r17,zero,14120 <_dtoa_r+0x314>
   13e94:	98000015 	stw	zero,0(r19)
   13e98:	a8dffc2c 	andhi	r3,r21,32752
   13e9c:	009ffc34 	movhi	r2,32752
   13ea0:	18809126 	beq	r3,r2,140e8 <_dtoa_r+0x2dc>
   13ea4:	000d883a 	mov	r6,zero
   13ea8:	000f883a 	mov	r7,zero
   13eac:	a009883a 	mov	r4,r20
   13eb0:	a80b883a 	mov	r5,r21
   13eb4:	dd001215 	stw	r20,72(sp)
   13eb8:	dd401315 	stw	r21,76(sp)
   13ebc:	0016cc00 	call	16cc0 <__nedf2>
   13ec0:	1000171e 	bne	r2,zero,13f20 <_dtoa_r+0x114>
   13ec4:	d9802717 	ldw	r6,156(sp)
   13ec8:	00800044 	movi	r2,1
   13ecc:	30800015 	stw	r2,0(r6)
   13ed0:	d8802917 	ldw	r2,164(sp)
   13ed4:	1002a726 	beq	r2,zero,14974 <_dtoa_r+0xb68>
   13ed8:	d9002917 	ldw	r4,164(sp)
   13edc:	008000b4 	movhi	r2,2
   13ee0:	10a46744 	addi	r2,r2,-28259
   13ee4:	10ffffc4 	addi	r3,r2,-1
   13ee8:	20800015 	stw	r2,0(r4)
   13eec:	1805883a 	mov	r2,r3
   13ef0:	dfc02517 	ldw	ra,148(sp)
   13ef4:	df002417 	ldw	fp,144(sp)
   13ef8:	ddc02317 	ldw	r23,140(sp)
   13efc:	dd802217 	ldw	r22,136(sp)
   13f00:	dd402117 	ldw	r21,132(sp)
   13f04:	dd002017 	ldw	r20,128(sp)
   13f08:	dcc01f17 	ldw	r19,124(sp)
   13f0c:	dc801e17 	ldw	r18,120(sp)
   13f10:	dc401d17 	ldw	r17,116(sp)
   13f14:	dc001c17 	ldw	r16,112(sp)
   13f18:	dec02604 	addi	sp,sp,152
   13f1c:	f800283a 	ret
   13f20:	d9001617 	ldw	r4,88(sp)
   13f24:	d9401217 	ldw	r5,72(sp)
   13f28:	d8800104 	addi	r2,sp,4
   13f2c:	a80d883a 	mov	r6,r21
   13f30:	d9c00204 	addi	r7,sp,8
   13f34:	d8800015 	stw	r2,0(sp)
   13f38:	00129f80 	call	129f8 <__d2b>
   13f3c:	d8800715 	stw	r2,28(sp)
   13f40:	a804d53a 	srli	r2,r21,20
   13f44:	1101ffcc 	andi	r4,r2,2047
   13f48:	20008626 	beq	r4,zero,14164 <_dtoa_r+0x358>
   13f4c:	d8c01217 	ldw	r3,72(sp)
   13f50:	00800434 	movhi	r2,16
   13f54:	10bfffc4 	addi	r2,r2,-1
   13f58:	ddc00117 	ldw	r23,4(sp)
   13f5c:	a884703a 	and	r2,r21,r2
   13f60:	1811883a 	mov	r8,r3
   13f64:	124ffc34 	orhi	r9,r2,16368
   13f68:	25bf0044 	addi	r22,r4,-1023
   13f6c:	d8000815 	stw	zero,32(sp)
   13f70:	0005883a 	mov	r2,zero
   13f74:	00cffe34 	movhi	r3,16376
   13f78:	480b883a 	mov	r5,r9
   13f7c:	4009883a 	mov	r4,r8
   13f80:	180f883a 	mov	r7,r3
   13f84:	100d883a 	mov	r6,r2
   13f88:	00165280 	call	16528 <__subdf3>
   13f8c:	0218dbf4 	movhi	r8,25455
   13f90:	4210d844 	addi	r8,r8,17249
   13f94:	024ff4f4 	movhi	r9,16339
   13f98:	4a61e9c4 	addi	r9,r9,-30809
   13f9c:	480f883a 	mov	r7,r9
   13fa0:	400d883a 	mov	r6,r8
   13fa4:	180b883a 	mov	r5,r3
   13fa8:	1009883a 	mov	r4,r2
   13fac:	001661c0 	call	1661c <__muldf3>
   13fb0:	0222d874 	movhi	r8,35681
   13fb4:	42322cc4 	addi	r8,r8,-14157
   13fb8:	024ff1f4 	movhi	r9,16327
   13fbc:	4a628a04 	addi	r9,r9,-30168
   13fc0:	480f883a 	mov	r7,r9
   13fc4:	400d883a 	mov	r6,r8
   13fc8:	180b883a 	mov	r5,r3
   13fcc:	1009883a 	mov	r4,r2
   13fd0:	00165a80 	call	165a8 <__adddf3>
   13fd4:	b009883a 	mov	r4,r22
   13fd8:	1021883a 	mov	r16,r2
   13fdc:	1823883a 	mov	r17,r3
   13fe0:	0010b4c0 	call	10b4c <__floatsidf>
   13fe4:	021427f4 	movhi	r8,20639
   13fe8:	421e7ec4 	addi	r8,r8,31227
   13fec:	024ff4f4 	movhi	r9,16339
   13ff0:	4a5104c4 	addi	r9,r9,17427
   13ff4:	480f883a 	mov	r7,r9
   13ff8:	400d883a 	mov	r6,r8
   13ffc:	180b883a 	mov	r5,r3
   14000:	1009883a 	mov	r4,r2
   14004:	001661c0 	call	1661c <__muldf3>
   14008:	180f883a 	mov	r7,r3
   1400c:	880b883a 	mov	r5,r17
   14010:	100d883a 	mov	r6,r2
   14014:	8009883a 	mov	r4,r16
   14018:	00165a80 	call	165a8 <__adddf3>
   1401c:	1009883a 	mov	r4,r2
   14020:	180b883a 	mov	r5,r3
   14024:	1021883a 	mov	r16,r2
   14028:	1823883a 	mov	r17,r3
   1402c:	0016f680 	call	16f68 <__fixdfsi>
   14030:	000d883a 	mov	r6,zero
   14034:	000f883a 	mov	r7,zero
   14038:	8009883a 	mov	r4,r16
   1403c:	880b883a 	mov	r5,r17
   14040:	d8800d15 	stw	r2,52(sp)
   14044:	0016e580 	call	16e58 <__ltdf2>
   14048:	10032316 	blt	r2,zero,14cd8 <_dtoa_r+0xecc>
   1404c:	d8c00d17 	ldw	r3,52(sp)
   14050:	00800584 	movi	r2,22
   14054:	10c14a2e 	bgeu	r2,r3,14580 <_dtoa_r+0x774>
   14058:	01000044 	movi	r4,1
   1405c:	d9000c15 	stw	r4,48(sp)
   14060:	bd85c83a 	sub	r2,r23,r22
   14064:	11bfffc4 	addi	r6,r2,-1
   14068:	30031716 	blt	r6,zero,14cc8 <_dtoa_r+0xebc>
   1406c:	d9800a15 	stw	r6,40(sp)
   14070:	d8001115 	stw	zero,68(sp)
   14074:	d8c00d17 	ldw	r3,52(sp)
   14078:	18030b16 	blt	r3,zero,14ca8 <_dtoa_r+0xe9c>
   1407c:	d9000a17 	ldw	r4,40(sp)
   14080:	d8c00915 	stw	r3,36(sp)
   14084:	d8001015 	stw	zero,64(sp)
   14088:	20c9883a 	add	r4,r4,r3
   1408c:	d9000a15 	stw	r4,40(sp)
   14090:	d9001717 	ldw	r4,92(sp)
   14094:	00800244 	movi	r2,9
   14098:	11004636 	bltu	r2,r4,141b4 <_dtoa_r+0x3a8>
   1409c:	00800144 	movi	r2,5
   140a0:	11020d16 	blt	r2,r4,148d8 <_dtoa_r+0xacc>
   140a4:	04400044 	movi	r17,1
   140a8:	d8c01717 	ldw	r3,92(sp)
   140ac:	00800144 	movi	r2,5
   140b0:	10c1f636 	bltu	r2,r3,1488c <_dtoa_r+0xa80>
   140b4:	18c5883a 	add	r2,r3,r3
   140b8:	1085883a 	add	r2,r2,r2
   140bc:	00c00074 	movhi	r3,1
   140c0:	18d03404 	addi	r3,r3,16592
   140c4:	10c5883a 	add	r2,r2,r3
   140c8:	11000017 	ldw	r4,0(r2)
   140cc:	2000683a 	jmp	r4
   140d0:	000141bc 	xorhi	zero,zero,1286
   140d4:	000141bc 	xorhi	zero,zero,1286
   140d8:	00014bec 	andhi	zero,zero,1327
   140dc:	00014bc4 	movi	zero,1327
   140e0:	00014c08 	cmpgei	zero,zero,1328
   140e4:	00014c14 	movui	zero,1328
   140e8:	d9002717 	ldw	r4,156(sp)
   140ec:	0089c3c4 	movi	r2,9999
   140f0:	20800015 	stw	r2,0(r4)
   140f4:	a0001026 	beq	r20,zero,14138 <_dtoa_r+0x32c>
   140f8:	00c000b4 	movhi	r3,2
   140fc:	18e46604 	addi	r3,r3,-28264
   14100:	d9802917 	ldw	r6,164(sp)
   14104:	303f7926 	beq	r6,zero,13eec <_dtoa_r+0xe0>
   14108:	188000c7 	ldb	r2,3(r3)
   1410c:	190000c4 	addi	r4,r3,3
   14110:	1000101e 	bne	r2,zero,14154 <_dtoa_r+0x348>
   14114:	d8802917 	ldw	r2,164(sp)
   14118:	11000015 	stw	r4,0(r2)
   1411c:	003f7306 	br	13eec <_dtoa_r+0xe0>
   14120:	00a00034 	movhi	r2,32768
   14124:	10bfffc4 	addi	r2,r2,-1
   14128:	00c00044 	movi	r3,1
   1412c:	88aa703a 	and	r21,r17,r2
   14130:	98c00015 	stw	r3,0(r19)
   14134:	003f5806 	br	13e98 <_dtoa_r+0x8c>
   14138:	00800434 	movhi	r2,16
   1413c:	10bfffc4 	addi	r2,r2,-1
   14140:	a884703a 	and	r2,r21,r2
   14144:	103fec1e 	bne	r2,zero,140f8 <_dtoa_r+0x2ec>
   14148:	00c000b4 	movhi	r3,2
   1414c:	18e46304 	addi	r3,r3,-28276
   14150:	003feb06 	br	14100 <_dtoa_r+0x2f4>
   14154:	d8802917 	ldw	r2,164(sp)
   14158:	19000204 	addi	r4,r3,8
   1415c:	11000015 	stw	r4,0(r2)
   14160:	003f6206 	br	13eec <_dtoa_r+0xe0>
   14164:	ddc00117 	ldw	r23,4(sp)
   14168:	d8800217 	ldw	r2,8(sp)
   1416c:	01000804 	movi	r4,32
   14170:	b8c10c84 	addi	r3,r23,1074
   14174:	18a3883a 	add	r17,r3,r2
   14178:	2441dc0e 	bge	r4,r17,148ec <_dtoa_r+0xae0>
   1417c:	00c01004 	movi	r3,64
   14180:	1c47c83a 	sub	r3,r3,r17
   14184:	88bff804 	addi	r2,r17,-32
   14188:	a8c6983a 	sll	r3,r21,r3
   1418c:	a084d83a 	srl	r2,r20,r2
   14190:	1888b03a 	or	r4,r3,r2
   14194:	0010c440 	call	10c44 <__floatunsidf>
   14198:	1011883a 	mov	r8,r2
   1419c:	00bf8434 	movhi	r2,65040
   141a0:	01000044 	movi	r4,1
   141a4:	10d3883a 	add	r9,r2,r3
   141a8:	8dbef344 	addi	r22,r17,-1075
   141ac:	d9000815 	stw	r4,32(sp)
   141b0:	003f6f06 	br	13f70 <_dtoa_r+0x164>
   141b4:	d8001715 	stw	zero,92(sp)
   141b8:	04400044 	movi	r17,1
   141bc:	00bfffc4 	movi	r2,-1
   141c0:	00c00044 	movi	r3,1
   141c4:	d8800e15 	stw	r2,56(sp)
   141c8:	d8002615 	stw	zero,152(sp)
   141cc:	d8800f15 	stw	r2,60(sp)
   141d0:	d8c00b15 	stw	r3,44(sp)
   141d4:	1021883a 	mov	r16,r2
   141d8:	d8801617 	ldw	r2,88(sp)
   141dc:	14800417 	ldw	r18,16(r2)
   141e0:	90000115 	stw	zero,4(r18)
   141e4:	d9001617 	ldw	r4,88(sp)
   141e8:	91400117 	ldw	r5,4(r18)
   141ec:	00129080 	call	12908 <_Balloc>
   141f0:	d9001617 	ldw	r4,88(sp)
   141f4:	90800015 	stw	r2,0(r18)
   141f8:	00800384 	movi	r2,14
   141fc:	20c00417 	ldw	r3,16(r4)
   14200:	18c00017 	ldw	r3,0(r3)
   14204:	d8c00515 	stw	r3,20(sp)
   14208:	14006836 	bltu	r2,r16,143ac <_dtoa_r+0x5a0>
   1420c:	8805003a 	cmpeq	r2,r17,zero
   14210:	1000661e 	bne	r2,zero,143ac <_dtoa_r+0x5a0>
   14214:	d9800d17 	ldw	r6,52(sp)
   14218:	01823a0e 	bge	zero,r6,14b04 <_dtoa_r+0xcf8>
   1421c:	308003cc 	andi	r2,r6,15
   14220:	100490fa 	slli	r2,r2,3
   14224:	3025d13a 	srai	r18,r6,4
   14228:	00c000b4 	movhi	r3,2
   1422c:	18e41a04 	addi	r3,r3,-28568
   14230:	10c5883a 	add	r2,r2,r3
   14234:	90c0040c 	andi	r3,r18,16
   14238:	14000017 	ldw	r16,0(r2)
   1423c:	14400117 	ldw	r17,4(r2)
   14240:	1803741e 	bne	r3,zero,15014 <_dtoa_r+0x1208>
   14244:	05800084 	movi	r22,2
   14248:	90001026 	beq	r18,zero,1428c <_dtoa_r+0x480>
   1424c:	04c000b4 	movhi	r19,2
   14250:	9ce44c04 	addi	r19,r19,-28368
   14254:	9080004c 	andi	r2,r18,1
   14258:	1005003a 	cmpeq	r2,r2,zero
   1425c:	1000081e 	bne	r2,zero,14280 <_dtoa_r+0x474>
   14260:	99800017 	ldw	r6,0(r19)
   14264:	99c00117 	ldw	r7,4(r19)
   14268:	880b883a 	mov	r5,r17
   1426c:	8009883a 	mov	r4,r16
   14270:	001661c0 	call	1661c <__muldf3>
   14274:	1021883a 	mov	r16,r2
   14278:	b5800044 	addi	r22,r22,1
   1427c:	1823883a 	mov	r17,r3
   14280:	9025d07a 	srai	r18,r18,1
   14284:	9cc00204 	addi	r19,r19,8
   14288:	903ff21e 	bne	r18,zero,14254 <_dtoa_r+0x448>
   1428c:	a80b883a 	mov	r5,r21
   14290:	a009883a 	mov	r4,r20
   14294:	880f883a 	mov	r7,r17
   14298:	800d883a 	mov	r6,r16
   1429c:	00169e00 	call	169e0 <__divdf3>
   142a0:	1029883a 	mov	r20,r2
   142a4:	182b883a 	mov	r21,r3
   142a8:	d8c00c17 	ldw	r3,48(sp)
   142ac:	1805003a 	cmpeq	r2,r3,zero
   142b0:	1000081e 	bne	r2,zero,142d4 <_dtoa_r+0x4c8>
   142b4:	0005883a 	mov	r2,zero
   142b8:	00cffc34 	movhi	r3,16368
   142bc:	180f883a 	mov	r7,r3
   142c0:	a009883a 	mov	r4,r20
   142c4:	a80b883a 	mov	r5,r21
   142c8:	100d883a 	mov	r6,r2
   142cc:	0016e580 	call	16e58 <__ltdf2>
   142d0:	10040816 	blt	r2,zero,152f4 <_dtoa_r+0x14e8>
   142d4:	b009883a 	mov	r4,r22
   142d8:	0010b4c0 	call	10b4c <__floatsidf>
   142dc:	180b883a 	mov	r5,r3
   142e0:	1009883a 	mov	r4,r2
   142e4:	a00d883a 	mov	r6,r20
   142e8:	a80f883a 	mov	r7,r21
   142ec:	001661c0 	call	1661c <__muldf3>
   142f0:	0011883a 	mov	r8,zero
   142f4:	02500734 	movhi	r9,16412
   142f8:	1009883a 	mov	r4,r2
   142fc:	180b883a 	mov	r5,r3
   14300:	480f883a 	mov	r7,r9
   14304:	400d883a 	mov	r6,r8
   14308:	00165a80 	call	165a8 <__adddf3>
   1430c:	d9000f17 	ldw	r4,60(sp)
   14310:	102d883a 	mov	r22,r2
   14314:	00bf3034 	movhi	r2,64704
   14318:	18b9883a 	add	fp,r3,r2
   1431c:	e02f883a 	mov	r23,fp
   14320:	2002991e 	bne	r4,zero,14d88 <_dtoa_r+0xf7c>
   14324:	0005883a 	mov	r2,zero
   14328:	00d00534 	movhi	r3,16404
   1432c:	a009883a 	mov	r4,r20
   14330:	a80b883a 	mov	r5,r21
   14334:	180f883a 	mov	r7,r3
   14338:	100d883a 	mov	r6,r2
   1433c:	00165280 	call	16528 <__subdf3>
   14340:	1009883a 	mov	r4,r2
   14344:	e00f883a 	mov	r7,fp
   14348:	180b883a 	mov	r5,r3
   1434c:	b00d883a 	mov	r6,r22
   14350:	1025883a 	mov	r18,r2
   14354:	1827883a 	mov	r19,r3
   14358:	0016d480 	call	16d48 <__gtdf2>
   1435c:	00835916 	blt	zero,r2,150c4 <_dtoa_r+0x12b8>
   14360:	e0e0003c 	xorhi	r3,fp,32768
   14364:	9009883a 	mov	r4,r18
   14368:	980b883a 	mov	r5,r19
   1436c:	180f883a 	mov	r7,r3
   14370:	b00d883a 	mov	r6,r22
   14374:	0016e580 	call	16e58 <__ltdf2>
   14378:	1000080e 	bge	r2,zero,1439c <_dtoa_r+0x590>
   1437c:	0027883a 	mov	r19,zero
   14380:	0025883a 	mov	r18,zero
   14384:	d8802617 	ldw	r2,152(sp)
   14388:	df000517 	ldw	fp,20(sp)
   1438c:	d8000615 	stw	zero,24(sp)
   14390:	0084303a 	nor	r2,zero,r2
   14394:	d8800d15 	stw	r2,52(sp)
   14398:	0001a506 	br	14a30 <_dtoa_r+0xc24>
   1439c:	d9801217 	ldw	r6,72(sp)
   143a0:	d8801317 	ldw	r2,76(sp)
   143a4:	3029883a 	mov	r20,r6
   143a8:	102b883a 	mov	r21,r2
   143ac:	d8c00217 	ldw	r3,8(sp)
   143b0:	18008516 	blt	r3,zero,145c8 <_dtoa_r+0x7bc>
   143b4:	d9000d17 	ldw	r4,52(sp)
   143b8:	00800384 	movi	r2,14
   143bc:	11008216 	blt	r2,r4,145c8 <_dtoa_r+0x7bc>
   143c0:	200490fa 	slli	r2,r4,3
   143c4:	d9802617 	ldw	r6,152(sp)
   143c8:	00c000b4 	movhi	r3,2
   143cc:	18e41a04 	addi	r3,r3,-28568
   143d0:	10c5883a 	add	r2,r2,r3
   143d4:	14800017 	ldw	r18,0(r2)
   143d8:	14c00117 	ldw	r19,4(r2)
   143dc:	30032816 	blt	r6,zero,15080 <_dtoa_r+0x1274>
   143e0:	d9000517 	ldw	r4,20(sp)
   143e4:	d8c00f17 	ldw	r3,60(sp)
   143e8:	a823883a 	mov	r17,r21
   143ec:	a021883a 	mov	r16,r20
   143f0:	192b883a 	add	r21,r3,r4
   143f4:	2039883a 	mov	fp,r4
   143f8:	00000f06 	br	14438 <_dtoa_r+0x62c>
   143fc:	0005883a 	mov	r2,zero
   14400:	00d00934 	movhi	r3,16420
   14404:	5009883a 	mov	r4,r10
   14408:	580b883a 	mov	r5,r11
   1440c:	180f883a 	mov	r7,r3
   14410:	100d883a 	mov	r6,r2
   14414:	001661c0 	call	1661c <__muldf3>
   14418:	180b883a 	mov	r5,r3
   1441c:	000d883a 	mov	r6,zero
   14420:	000f883a 	mov	r7,zero
   14424:	1009883a 	mov	r4,r2
   14428:	1021883a 	mov	r16,r2
   1442c:	1823883a 	mov	r17,r3
   14430:	0016cc00 	call	16cc0 <__nedf2>
   14434:	10004526 	beq	r2,zero,1454c <_dtoa_r+0x740>
   14438:	900d883a 	mov	r6,r18
   1443c:	980f883a 	mov	r7,r19
   14440:	8009883a 	mov	r4,r16
   14444:	880b883a 	mov	r5,r17
   14448:	00169e00 	call	169e0 <__divdf3>
   1444c:	180b883a 	mov	r5,r3
   14450:	1009883a 	mov	r4,r2
   14454:	0016f680 	call	16f68 <__fixdfsi>
   14458:	1009883a 	mov	r4,r2
   1445c:	1029883a 	mov	r20,r2
   14460:	0010b4c0 	call	10b4c <__floatsidf>
   14464:	180f883a 	mov	r7,r3
   14468:	9009883a 	mov	r4,r18
   1446c:	980b883a 	mov	r5,r19
   14470:	100d883a 	mov	r6,r2
   14474:	001661c0 	call	1661c <__muldf3>
   14478:	180f883a 	mov	r7,r3
   1447c:	880b883a 	mov	r5,r17
   14480:	8009883a 	mov	r4,r16
   14484:	100d883a 	mov	r6,r2
   14488:	00165280 	call	16528 <__subdf3>
   1448c:	1015883a 	mov	r10,r2
   14490:	a0800c04 	addi	r2,r20,48
   14494:	e0800005 	stb	r2,0(fp)
   14498:	e7000044 	addi	fp,fp,1
   1449c:	1817883a 	mov	r11,r3
   144a0:	e57fd61e 	bne	fp,r21,143fc <_dtoa_r+0x5f0>
   144a4:	500d883a 	mov	r6,r10
   144a8:	180f883a 	mov	r7,r3
   144ac:	5009883a 	mov	r4,r10
   144b0:	180b883a 	mov	r5,r3
   144b4:	00165a80 	call	165a8 <__adddf3>
   144b8:	100d883a 	mov	r6,r2
   144bc:	9009883a 	mov	r4,r18
   144c0:	980b883a 	mov	r5,r19
   144c4:	180f883a 	mov	r7,r3
   144c8:	1021883a 	mov	r16,r2
   144cc:	1823883a 	mov	r17,r3
   144d0:	0016e580 	call	16e58 <__ltdf2>
   144d4:	10000816 	blt	r2,zero,144f8 <_dtoa_r+0x6ec>
   144d8:	980b883a 	mov	r5,r19
   144dc:	800d883a 	mov	r6,r16
   144e0:	880f883a 	mov	r7,r17
   144e4:	9009883a 	mov	r4,r18
   144e8:	0016c380 	call	16c38 <__eqdf2>
   144ec:	1000171e 	bne	r2,zero,1454c <_dtoa_r+0x740>
   144f0:	a080004c 	andi	r2,r20,1
   144f4:	10001526 	beq	r2,zero,1454c <_dtoa_r+0x740>
   144f8:	d8800d17 	ldw	r2,52(sp)
   144fc:	d8800315 	stw	r2,12(sp)
   14500:	e009883a 	mov	r4,fp
   14504:	213fffc4 	addi	r4,r4,-1
   14508:	20c00007 	ldb	r3,0(r4)
   1450c:	00800e44 	movi	r2,57
   14510:	1880081e 	bne	r3,r2,14534 <_dtoa_r+0x728>
   14514:	d8800517 	ldw	r2,20(sp)
   14518:	113ffa1e 	bne	r2,r4,14504 <_dtoa_r+0x6f8>
   1451c:	d8c00317 	ldw	r3,12(sp)
   14520:	d9800517 	ldw	r6,20(sp)
   14524:	00800c04 	movi	r2,48
   14528:	18c00044 	addi	r3,r3,1
   1452c:	d8c00315 	stw	r3,12(sp)
   14530:	30800005 	stb	r2,0(r6)
   14534:	20800003 	ldbu	r2,0(r4)
   14538:	d8c00317 	ldw	r3,12(sp)
   1453c:	27000044 	addi	fp,r4,1
   14540:	10800044 	addi	r2,r2,1
   14544:	d8c00d15 	stw	r3,52(sp)
   14548:	20800005 	stb	r2,0(r4)
   1454c:	d9001617 	ldw	r4,88(sp)
   14550:	d9400717 	ldw	r5,28(sp)
   14554:	00128900 	call	12890 <_Bfree>
   14558:	e0000005 	stb	zero,0(fp)
   1455c:	d9800d17 	ldw	r6,52(sp)
   14560:	d8c02717 	ldw	r3,156(sp)
   14564:	d9002917 	ldw	r4,164(sp)
   14568:	30800044 	addi	r2,r6,1
   1456c:	18800015 	stw	r2,0(r3)
   14570:	2002a626 	beq	r4,zero,1500c <_dtoa_r+0x1200>
   14574:	d8c00517 	ldw	r3,20(sp)
   14578:	27000015 	stw	fp,0(r4)
   1457c:	003e5b06 	br	13eec <_dtoa_r+0xe0>
   14580:	d9800d17 	ldw	r6,52(sp)
   14584:	00c000b4 	movhi	r3,2
   14588:	18e41a04 	addi	r3,r3,-28568
   1458c:	d9001217 	ldw	r4,72(sp)
   14590:	300490fa 	slli	r2,r6,3
   14594:	d9401317 	ldw	r5,76(sp)
   14598:	10c5883a 	add	r2,r2,r3
   1459c:	12000017 	ldw	r8,0(r2)
   145a0:	12400117 	ldw	r9,4(r2)
   145a4:	400d883a 	mov	r6,r8
   145a8:	480f883a 	mov	r7,r9
   145ac:	0016e580 	call	16e58 <__ltdf2>
   145b0:	1000030e 	bge	r2,zero,145c0 <_dtoa_r+0x7b4>
   145b4:	d8800d17 	ldw	r2,52(sp)
   145b8:	10bfffc4 	addi	r2,r2,-1
   145bc:	d8800d15 	stw	r2,52(sp)
   145c0:	d8000c15 	stw	zero,48(sp)
   145c4:	003ea606 	br	14060 <_dtoa_r+0x254>
   145c8:	d9000b17 	ldw	r4,44(sp)
   145cc:	202cc03a 	cmpne	r22,r4,zero
   145d0:	b000d11e 	bne	r22,zero,14918 <_dtoa_r+0xb0c>
   145d4:	dc001117 	ldw	r16,68(sp)
   145d8:	dc801017 	ldw	r18,64(sp)
   145dc:	0027883a 	mov	r19,zero
   145e0:	04000b0e 	bge	zero,r16,14610 <_dtoa_r+0x804>
   145e4:	d8c00a17 	ldw	r3,40(sp)
   145e8:	00c0090e 	bge	zero,r3,14610 <_dtoa_r+0x804>
   145ec:	8005883a 	mov	r2,r16
   145f0:	1c011d16 	blt	r3,r16,14a68 <_dtoa_r+0xc5c>
   145f4:	d9000a17 	ldw	r4,40(sp)
   145f8:	d9801117 	ldw	r6,68(sp)
   145fc:	80a1c83a 	sub	r16,r16,r2
   14600:	2089c83a 	sub	r4,r4,r2
   14604:	308dc83a 	sub	r6,r6,r2
   14608:	d9000a15 	stw	r4,40(sp)
   1460c:	d9801115 	stw	r6,68(sp)
   14610:	d8801017 	ldw	r2,64(sp)
   14614:	0080150e 	bge	zero,r2,1466c <_dtoa_r+0x860>
   14618:	d8c00b17 	ldw	r3,44(sp)
   1461c:	1805003a 	cmpeq	r2,r3,zero
   14620:	1001d31e 	bne	r2,zero,14d70 <_dtoa_r+0xf64>
   14624:	04800e0e 	bge	zero,r18,14660 <_dtoa_r+0x854>
   14628:	d9001617 	ldw	r4,88(sp)
   1462c:	980b883a 	mov	r5,r19
   14630:	900d883a 	mov	r6,r18
   14634:	00132080 	call	13208 <__pow5mult>
   14638:	d9001617 	ldw	r4,88(sp)
   1463c:	d9800717 	ldw	r6,28(sp)
   14640:	100b883a 	mov	r5,r2
   14644:	1027883a 	mov	r19,r2
   14648:	0012e4c0 	call	12e4c <__multiply>
   1464c:	d9001617 	ldw	r4,88(sp)
   14650:	d9400717 	ldw	r5,28(sp)
   14654:	1023883a 	mov	r17,r2
   14658:	00128900 	call	12890 <_Bfree>
   1465c:	dc400715 	stw	r17,28(sp)
   14660:	d9001017 	ldw	r4,64(sp)
   14664:	248dc83a 	sub	r6,r4,r18
   14668:	3001181e 	bne	r6,zero,14acc <_dtoa_r+0xcc0>
   1466c:	d9001617 	ldw	r4,88(sp)
   14670:	04400044 	movi	r17,1
   14674:	880b883a 	mov	r5,r17
   14678:	00130a00 	call	130a0 <__i2b>
   1467c:	d9800917 	ldw	r6,36(sp)
   14680:	1025883a 	mov	r18,r2
   14684:	0180040e 	bge	zero,r6,14698 <_dtoa_r+0x88c>
   14688:	d9001617 	ldw	r4,88(sp)
   1468c:	100b883a 	mov	r5,r2
   14690:	00132080 	call	13208 <__pow5mult>
   14694:	1025883a 	mov	r18,r2
   14698:	d8801717 	ldw	r2,92(sp)
   1469c:	8880fd0e 	bge	r17,r2,14a94 <_dtoa_r+0xc88>
   146a0:	0023883a 	mov	r17,zero
   146a4:	d9800917 	ldw	r6,36(sp)
   146a8:	3001a81e 	bne	r6,zero,14d4c <_dtoa_r+0xf40>
   146ac:	00c00044 	movi	r3,1
   146b0:	d9000a17 	ldw	r4,40(sp)
   146b4:	20c5883a 	add	r2,r4,r3
   146b8:	10c007cc 	andi	r3,r2,31
   146bc:	18008e1e 	bne	r3,zero,148f8 <_dtoa_r+0xaec>
   146c0:	00800704 	movi	r2,28
   146c4:	d9000a17 	ldw	r4,40(sp)
   146c8:	d9801117 	ldw	r6,68(sp)
   146cc:	80a1883a 	add	r16,r16,r2
   146d0:	2089883a 	add	r4,r4,r2
   146d4:	308d883a 	add	r6,r6,r2
   146d8:	d9000a15 	stw	r4,40(sp)
   146dc:	d9801115 	stw	r6,68(sp)
   146e0:	d8801117 	ldw	r2,68(sp)
   146e4:	0080050e 	bge	zero,r2,146fc <_dtoa_r+0x8f0>
   146e8:	d9400717 	ldw	r5,28(sp)
   146ec:	d9001617 	ldw	r4,88(sp)
   146f0:	100d883a 	mov	r6,r2
   146f4:	0012d000 	call	12d00 <__lshift>
   146f8:	d8800715 	stw	r2,28(sp)
   146fc:	d8c00a17 	ldw	r3,40(sp)
   14700:	00c0050e 	bge	zero,r3,14718 <_dtoa_r+0x90c>
   14704:	d9001617 	ldw	r4,88(sp)
   14708:	900b883a 	mov	r5,r18
   1470c:	180d883a 	mov	r6,r3
   14710:	0012d000 	call	12d00 <__lshift>
   14714:	1025883a 	mov	r18,r2
   14718:	d9000c17 	ldw	r4,48(sp)
   1471c:	2005003a 	cmpeq	r2,r4,zero
   14720:	10017926 	beq	r2,zero,14d08 <_dtoa_r+0xefc>
   14724:	d9000f17 	ldw	r4,60(sp)
   14728:	0102210e 	bge	zero,r4,14fb0 <_dtoa_r+0x11a4>
   1472c:	d9800b17 	ldw	r6,44(sp)
   14730:	3005003a 	cmpeq	r2,r6,zero
   14734:	1000921e 	bne	r2,zero,14980 <_dtoa_r+0xb74>
   14738:	0400050e 	bge	zero,r16,14750 <_dtoa_r+0x944>
   1473c:	d9001617 	ldw	r4,88(sp)
   14740:	980b883a 	mov	r5,r19
   14744:	800d883a 	mov	r6,r16
   14748:	0012d000 	call	12d00 <__lshift>
   1474c:	1027883a 	mov	r19,r2
   14750:	8804c03a 	cmpne	r2,r17,zero
   14754:	10025e1e 	bne	r2,zero,150d0 <_dtoa_r+0x12c4>
   14758:	980b883a 	mov	r5,r19
   1475c:	dd800517 	ldw	r22,20(sp)
   14760:	dcc00615 	stw	r19,24(sp)
   14764:	a700004c 	andi	fp,r20,1
   14768:	2827883a 	mov	r19,r5
   1476c:	d9000717 	ldw	r4,28(sp)
   14770:	900b883a 	mov	r5,r18
   14774:	0013bc80 	call	13bc8 <quorem>
   14778:	d9000717 	ldw	r4,28(sp)
   1477c:	d9400617 	ldw	r5,24(sp)
   14780:	1023883a 	mov	r17,r2
   14784:	8dc00c04 	addi	r23,r17,48
   14788:	001246c0 	call	1246c <__mcmp>
   1478c:	d9001617 	ldw	r4,88(sp)
   14790:	900b883a 	mov	r5,r18
   14794:	980d883a 	mov	r6,r19
   14798:	1029883a 	mov	r20,r2
   1479c:	0012b740 	call	12b74 <__mdiff>
   147a0:	102b883a 	mov	r21,r2
   147a4:	10800317 	ldw	r2,12(r2)
   147a8:	1001321e 	bne	r2,zero,14c74 <_dtoa_r+0xe68>
   147ac:	d9000717 	ldw	r4,28(sp)
   147b0:	a80b883a 	mov	r5,r21
   147b4:	001246c0 	call	1246c <__mcmp>
   147b8:	d9001617 	ldw	r4,88(sp)
   147bc:	1021883a 	mov	r16,r2
   147c0:	a80b883a 	mov	r5,r21
   147c4:	00128900 	call	12890 <_Bfree>
   147c8:	8000041e 	bne	r16,zero,147dc <_dtoa_r+0x9d0>
   147cc:	d8801717 	ldw	r2,92(sp)
   147d0:	1000021e 	bne	r2,zero,147dc <_dtoa_r+0x9d0>
   147d4:	e004c03a 	cmpne	r2,fp,zero
   147d8:	10012126 	beq	r2,zero,14c60 <_dtoa_r+0xe54>
   147dc:	a0011016 	blt	r20,zero,14c20 <_dtoa_r+0xe14>
   147e0:	a000041e 	bne	r20,zero,147f4 <_dtoa_r+0x9e8>
   147e4:	d8c01717 	ldw	r3,92(sp)
   147e8:	1800021e 	bne	r3,zero,147f4 <_dtoa_r+0x9e8>
   147ec:	e004c03a 	cmpne	r2,fp,zero
   147f0:	10010b26 	beq	r2,zero,14c20 <_dtoa_r+0xe14>
   147f4:	04024716 	blt	zero,r16,15114 <_dtoa_r+0x1308>
   147f8:	b5c00005 	stb	r23,0(r22)
   147fc:	d9800517 	ldw	r6,20(sp)
   14800:	d9000f17 	ldw	r4,60(sp)
   14804:	b5800044 	addi	r22,r22,1
   14808:	3105883a 	add	r2,r6,r4
   1480c:	b0806f26 	beq	r22,r2,149cc <_dtoa_r+0xbc0>
   14810:	d9400717 	ldw	r5,28(sp)
   14814:	d9001617 	ldw	r4,88(sp)
   14818:	01800284 	movi	r6,10
   1481c:	000f883a 	mov	r7,zero
   14820:	00130dc0 	call	130dc <__multadd>
   14824:	d8800715 	stw	r2,28(sp)
   14828:	d8800617 	ldw	r2,24(sp)
   1482c:	14c11626 	beq	r2,r19,14c88 <_dtoa_r+0xe7c>
   14830:	d9400617 	ldw	r5,24(sp)
   14834:	d9001617 	ldw	r4,88(sp)
   14838:	01800284 	movi	r6,10
   1483c:	000f883a 	mov	r7,zero
   14840:	00130dc0 	call	130dc <__multadd>
   14844:	d9001617 	ldw	r4,88(sp)
   14848:	980b883a 	mov	r5,r19
   1484c:	01800284 	movi	r6,10
   14850:	000f883a 	mov	r7,zero
   14854:	d8800615 	stw	r2,24(sp)
   14858:	00130dc0 	call	130dc <__multadd>
   1485c:	1027883a 	mov	r19,r2
   14860:	003fc206 	br	1476c <_dtoa_r+0x960>
   14864:	01000404 	movi	r4,16
   14868:	00158540 	call	15854 <malloc>
   1486c:	1025883a 	mov	r18,r2
   14870:	d8801617 	ldw	r2,88(sp)
   14874:	90000115 	stw	zero,4(r18)
   14878:	90000215 	stw	zero,8(r18)
   1487c:	14800415 	stw	r18,16(r2)
   14880:	90000015 	stw	zero,0(r18)
   14884:	90000315 	stw	zero,12(r18)
   14888:	003d7306 	br	13e58 <_dtoa_r+0x4c>
   1488c:	01bfffc4 	movi	r6,-1
   14890:	00800044 	movi	r2,1
   14894:	d9800e15 	stw	r6,56(sp)
   14898:	d9800f15 	stw	r6,60(sp)
   1489c:	d8800b15 	stw	r2,44(sp)
   148a0:	d8c01617 	ldw	r3,88(sp)
   148a4:	008005c4 	movi	r2,23
   148a8:	1c800417 	ldw	r18,16(r3)
   148ac:	90000115 	stw	zero,4(r18)
   148b0:	1580072e 	bgeu	r2,r22,148d0 <_dtoa_r+0xac4>
   148b4:	00c00104 	movi	r3,4
   148b8:	0009883a 	mov	r4,zero
   148bc:	18c7883a 	add	r3,r3,r3
   148c0:	18800504 	addi	r2,r3,20
   148c4:	21000044 	addi	r4,r4,1
   148c8:	b0bffc2e 	bgeu	r22,r2,148bc <_dtoa_r+0xab0>
   148cc:	91000115 	stw	r4,4(r18)
   148d0:	dc000f17 	ldw	r16,60(sp)
   148d4:	003e4306 	br	141e4 <_dtoa_r+0x3d8>
   148d8:	d9801717 	ldw	r6,92(sp)
   148dc:	0023883a 	mov	r17,zero
   148e0:	31bfff04 	addi	r6,r6,-4
   148e4:	d9801715 	stw	r6,92(sp)
   148e8:	003def06 	br	140a8 <_dtoa_r+0x29c>
   148ec:	2445c83a 	sub	r2,r4,r17
   148f0:	a088983a 	sll	r4,r20,r2
   148f4:	003e2706 	br	14194 <_dtoa_r+0x388>
   148f8:	00800804 	movi	r2,32
   148fc:	10c9c83a 	sub	r4,r2,r3
   14900:	00c00104 	movi	r3,4
   14904:	19005a16 	blt	r3,r4,14a70 <_dtoa_r+0xc64>
   14908:	008000c4 	movi	r2,3
   1490c:	113f7416 	blt	r2,r4,146e0 <_dtoa_r+0x8d4>
   14910:	20800704 	addi	r2,r4,28
   14914:	003f6b06 	br	146c4 <_dtoa_r+0x8b8>
   14918:	d9801717 	ldw	r6,92(sp)
   1491c:	00800044 	movi	r2,1
   14920:	1180a10e 	bge	r2,r6,14ba8 <_dtoa_r+0xd9c>
   14924:	d9800f17 	ldw	r6,60(sp)
   14928:	d8c01017 	ldw	r3,64(sp)
   1492c:	30bfffc4 	addi	r2,r6,-1
   14930:	1881c616 	blt	r3,r2,1504c <_dtoa_r+0x1240>
   14934:	18a5c83a 	sub	r18,r3,r2
   14938:	d8800f17 	ldw	r2,60(sp)
   1493c:	10026216 	blt	r2,zero,152c8 <_dtoa_r+0x14bc>
   14940:	dc001117 	ldw	r16,68(sp)
   14944:	1007883a 	mov	r3,r2
   14948:	d9800a17 	ldw	r6,40(sp)
   1494c:	d8801117 	ldw	r2,68(sp)
   14950:	d9001617 	ldw	r4,88(sp)
   14954:	30cd883a 	add	r6,r6,r3
   14958:	10c5883a 	add	r2,r2,r3
   1495c:	01400044 	movi	r5,1
   14960:	d9800a15 	stw	r6,40(sp)
   14964:	d8801115 	stw	r2,68(sp)
   14968:	00130a00 	call	130a0 <__i2b>
   1496c:	1027883a 	mov	r19,r2
   14970:	003f1b06 	br	145e0 <_dtoa_r+0x7d4>
   14974:	00c000b4 	movhi	r3,2
   14978:	18e46704 	addi	r3,r3,-28260
   1497c:	003d5b06 	br	13eec <_dtoa_r+0xe0>
   14980:	dd800517 	ldw	r22,20(sp)
   14984:	04000044 	movi	r16,1
   14988:	00000706 	br	149a8 <_dtoa_r+0xb9c>
   1498c:	d9400717 	ldw	r5,28(sp)
   14990:	d9001617 	ldw	r4,88(sp)
   14994:	01800284 	movi	r6,10
   14998:	000f883a 	mov	r7,zero
   1499c:	00130dc0 	call	130dc <__multadd>
   149a0:	d8800715 	stw	r2,28(sp)
   149a4:	84000044 	addi	r16,r16,1
   149a8:	d9000717 	ldw	r4,28(sp)
   149ac:	900b883a 	mov	r5,r18
   149b0:	0013bc80 	call	13bc8 <quorem>
   149b4:	15c00c04 	addi	r23,r2,48
   149b8:	b5c00005 	stb	r23,0(r22)
   149bc:	d8c00f17 	ldw	r3,60(sp)
   149c0:	b5800044 	addi	r22,r22,1
   149c4:	80fff116 	blt	r16,r3,1498c <_dtoa_r+0xb80>
   149c8:	d8000615 	stw	zero,24(sp)
   149cc:	d9400717 	ldw	r5,28(sp)
   149d0:	d9001617 	ldw	r4,88(sp)
   149d4:	01800044 	movi	r6,1
   149d8:	0012d000 	call	12d00 <__lshift>
   149dc:	1009883a 	mov	r4,r2
   149e0:	900b883a 	mov	r5,r18
   149e4:	d8800715 	stw	r2,28(sp)
   149e8:	001246c0 	call	1246c <__mcmp>
   149ec:	00803c0e 	bge	zero,r2,14ae0 <_dtoa_r+0xcd4>
   149f0:	b009883a 	mov	r4,r22
   149f4:	213fffc4 	addi	r4,r4,-1
   149f8:	21400003 	ldbu	r5,0(r4)
   149fc:	00800e44 	movi	r2,57
   14a00:	28c03fcc 	andi	r3,r5,255
   14a04:	18c0201c 	xori	r3,r3,128
   14a08:	18ffe004 	addi	r3,r3,-128
   14a0c:	1881981e 	bne	r3,r2,15070 <_dtoa_r+0x1264>
   14a10:	d9800517 	ldw	r6,20(sp)
   14a14:	21bff71e 	bne	r4,r6,149f4 <_dtoa_r+0xbe8>
   14a18:	d8800d17 	ldw	r2,52(sp)
   14a1c:	37000044 	addi	fp,r6,1
   14a20:	10800044 	addi	r2,r2,1
   14a24:	d8800d15 	stw	r2,52(sp)
   14a28:	00800c44 	movi	r2,49
   14a2c:	30800005 	stb	r2,0(r6)
   14a30:	d9001617 	ldw	r4,88(sp)
   14a34:	900b883a 	mov	r5,r18
   14a38:	00128900 	call	12890 <_Bfree>
   14a3c:	983ec326 	beq	r19,zero,1454c <_dtoa_r+0x740>
   14a40:	d8c00617 	ldw	r3,24(sp)
   14a44:	18000426 	beq	r3,zero,14a58 <_dtoa_r+0xc4c>
   14a48:	1cc00326 	beq	r3,r19,14a58 <_dtoa_r+0xc4c>
   14a4c:	d9001617 	ldw	r4,88(sp)
   14a50:	180b883a 	mov	r5,r3
   14a54:	00128900 	call	12890 <_Bfree>
   14a58:	d9001617 	ldw	r4,88(sp)
   14a5c:	980b883a 	mov	r5,r19
   14a60:	00128900 	call	12890 <_Bfree>
   14a64:	003eb906 	br	1454c <_dtoa_r+0x740>
   14a68:	1805883a 	mov	r2,r3
   14a6c:	003ee106 	br	145f4 <_dtoa_r+0x7e8>
   14a70:	d9800a17 	ldw	r6,40(sp)
   14a74:	d8c01117 	ldw	r3,68(sp)
   14a78:	20bfff04 	addi	r2,r4,-4
   14a7c:	308d883a 	add	r6,r6,r2
   14a80:	1887883a 	add	r3,r3,r2
   14a84:	80a1883a 	add	r16,r16,r2
   14a88:	d9800a15 	stw	r6,40(sp)
   14a8c:	d8c01115 	stw	r3,68(sp)
   14a90:	003f1306 	br	146e0 <_dtoa_r+0x8d4>
   14a94:	a03f021e 	bne	r20,zero,146a0 <_dtoa_r+0x894>
   14a98:	00800434 	movhi	r2,16
   14a9c:	10bfffc4 	addi	r2,r2,-1
   14aa0:	a884703a 	and	r2,r21,r2
   14aa4:	103efe1e 	bne	r2,zero,146a0 <_dtoa_r+0x894>
   14aa8:	a89ffc2c 	andhi	r2,r21,32752
   14aac:	103efc26 	beq	r2,zero,146a0 <_dtoa_r+0x894>
   14ab0:	d8c01117 	ldw	r3,68(sp)
   14ab4:	d9000a17 	ldw	r4,40(sp)
   14ab8:	18c00044 	addi	r3,r3,1
   14abc:	21000044 	addi	r4,r4,1
   14ac0:	d8c01115 	stw	r3,68(sp)
   14ac4:	d9000a15 	stw	r4,40(sp)
   14ac8:	003ef606 	br	146a4 <_dtoa_r+0x898>
   14acc:	d9400717 	ldw	r5,28(sp)
   14ad0:	d9001617 	ldw	r4,88(sp)
   14ad4:	00132080 	call	13208 <__pow5mult>
   14ad8:	d8800715 	stw	r2,28(sp)
   14adc:	003ee306 	br	1466c <_dtoa_r+0x860>
   14ae0:	1000021e 	bne	r2,zero,14aec <_dtoa_r+0xce0>
   14ae4:	b880004c 	andi	r2,r23,1
   14ae8:	103fc11e 	bne	r2,zero,149f0 <_dtoa_r+0xbe4>
   14aec:	b5bfffc4 	addi	r22,r22,-1
   14af0:	b0c00007 	ldb	r3,0(r22)
   14af4:	00800c04 	movi	r2,48
   14af8:	18bffc26 	beq	r3,r2,14aec <_dtoa_r+0xce0>
   14afc:	b7000044 	addi	fp,r22,1
   14b00:	003fcb06 	br	14a30 <_dtoa_r+0xc24>
   14b04:	d8800d17 	ldw	r2,52(sp)
   14b08:	008fc83a 	sub	r7,zero,r2
   14b0c:	3801f726 	beq	r7,zero,152ec <_dtoa_r+0x14e0>
   14b10:	398003cc 	andi	r6,r7,15
   14b14:	300c90fa 	slli	r6,r6,3
   14b18:	014000b4 	movhi	r5,2
   14b1c:	29641a04 	addi	r5,r5,-28568
   14b20:	d9001217 	ldw	r4,72(sp)
   14b24:	314d883a 	add	r6,r6,r5
   14b28:	30c00117 	ldw	r3,4(r6)
   14b2c:	30800017 	ldw	r2,0(r6)
   14b30:	d9401317 	ldw	r5,76(sp)
   14b34:	3821d13a 	srai	r16,r7,4
   14b38:	100d883a 	mov	r6,r2
   14b3c:	180f883a 	mov	r7,r3
   14b40:	001661c0 	call	1661c <__muldf3>
   14b44:	1011883a 	mov	r8,r2
   14b48:	1813883a 	mov	r9,r3
   14b4c:	1029883a 	mov	r20,r2
   14b50:	182b883a 	mov	r21,r3
   14b54:	8001e526 	beq	r16,zero,152ec <_dtoa_r+0x14e0>
   14b58:	05800084 	movi	r22,2
   14b5c:	044000b4 	movhi	r17,2
   14b60:	8c644c04 	addi	r17,r17,-28368
   14b64:	8080004c 	andi	r2,r16,1
   14b68:	1005003a 	cmpeq	r2,r2,zero
   14b6c:	1000081e 	bne	r2,zero,14b90 <_dtoa_r+0xd84>
   14b70:	89800017 	ldw	r6,0(r17)
   14b74:	89c00117 	ldw	r7,4(r17)
   14b78:	480b883a 	mov	r5,r9
   14b7c:	4009883a 	mov	r4,r8
   14b80:	001661c0 	call	1661c <__muldf3>
   14b84:	1011883a 	mov	r8,r2
   14b88:	b5800044 	addi	r22,r22,1
   14b8c:	1813883a 	mov	r9,r3
   14b90:	8021d07a 	srai	r16,r16,1
   14b94:	8c400204 	addi	r17,r17,8
   14b98:	803ff21e 	bne	r16,zero,14b64 <_dtoa_r+0xd58>
   14b9c:	4029883a 	mov	r20,r8
   14ba0:	482b883a 	mov	r21,r9
   14ba4:	003dc006 	br	142a8 <_dtoa_r+0x49c>
   14ba8:	d9000817 	ldw	r4,32(sp)
   14bac:	2005003a 	cmpeq	r2,r4,zero
   14bb0:	1001f61e 	bne	r2,zero,1538c <_dtoa_r+0x1580>
   14bb4:	dc001117 	ldw	r16,68(sp)
   14bb8:	dc801017 	ldw	r18,64(sp)
   14bbc:	18c10cc4 	addi	r3,r3,1075
   14bc0:	003f6106 	br	14948 <_dtoa_r+0xb3c>
   14bc4:	d8000b15 	stw	zero,44(sp)
   14bc8:	d9802617 	ldw	r6,152(sp)
   14bcc:	d8c00d17 	ldw	r3,52(sp)
   14bd0:	30800044 	addi	r2,r6,1
   14bd4:	18ad883a 	add	r22,r3,r2
   14bd8:	b13fffc4 	addi	r4,r22,-1
   14bdc:	d9000e15 	stw	r4,56(sp)
   14be0:	0581f60e 	bge	zero,r22,153bc <_dtoa_r+0x15b0>
   14be4:	dd800f15 	stw	r22,60(sp)
   14be8:	003f2d06 	br	148a0 <_dtoa_r+0xa94>
   14bec:	d8000b15 	stw	zero,44(sp)
   14bf0:	d9002617 	ldw	r4,152(sp)
   14bf4:	0101eb0e 	bge	zero,r4,153a4 <_dtoa_r+0x1598>
   14bf8:	202d883a 	mov	r22,r4
   14bfc:	d9000e15 	stw	r4,56(sp)
   14c00:	d9000f15 	stw	r4,60(sp)
   14c04:	003f2606 	br	148a0 <_dtoa_r+0xa94>
   14c08:	01800044 	movi	r6,1
   14c0c:	d9800b15 	stw	r6,44(sp)
   14c10:	003ff706 	br	14bf0 <_dtoa_r+0xde4>
   14c14:	01000044 	movi	r4,1
   14c18:	d9000b15 	stw	r4,44(sp)
   14c1c:	003fea06 	br	14bc8 <_dtoa_r+0xdbc>
   14c20:	04000c0e 	bge	zero,r16,14c54 <_dtoa_r+0xe48>
   14c24:	d9400717 	ldw	r5,28(sp)
   14c28:	d9001617 	ldw	r4,88(sp)
   14c2c:	01800044 	movi	r6,1
   14c30:	0012d000 	call	12d00 <__lshift>
   14c34:	1009883a 	mov	r4,r2
   14c38:	900b883a 	mov	r5,r18
   14c3c:	d8800715 	stw	r2,28(sp)
   14c40:	001246c0 	call	1246c <__mcmp>
   14c44:	0081e00e 	bge	zero,r2,153c8 <_dtoa_r+0x15bc>
   14c48:	bdc00044 	addi	r23,r23,1
   14c4c:	00800e84 	movi	r2,58
   14c50:	b881a226 	beq	r23,r2,152dc <_dtoa_r+0x14d0>
   14c54:	b7000044 	addi	fp,r22,1
   14c58:	b5c00005 	stb	r23,0(r22)
   14c5c:	003f7406 	br	14a30 <_dtoa_r+0xc24>
   14c60:	00800e44 	movi	r2,57
   14c64:	b8819d26 	beq	r23,r2,152dc <_dtoa_r+0x14d0>
   14c68:	053ffa0e 	bge	zero,r20,14c54 <_dtoa_r+0xe48>
   14c6c:	8dc00c44 	addi	r23,r17,49
   14c70:	003ff806 	br	14c54 <_dtoa_r+0xe48>
   14c74:	d9001617 	ldw	r4,88(sp)
   14c78:	a80b883a 	mov	r5,r21
   14c7c:	04000044 	movi	r16,1
   14c80:	00128900 	call	12890 <_Bfree>
   14c84:	003ed506 	br	147dc <_dtoa_r+0x9d0>
   14c88:	d9001617 	ldw	r4,88(sp)
   14c8c:	980b883a 	mov	r5,r19
   14c90:	01800284 	movi	r6,10
   14c94:	000f883a 	mov	r7,zero
   14c98:	00130dc0 	call	130dc <__multadd>
   14c9c:	1027883a 	mov	r19,r2
   14ca0:	d8800615 	stw	r2,24(sp)
   14ca4:	003eb106 	br	1476c <_dtoa_r+0x960>
   14ca8:	d9801117 	ldw	r6,68(sp)
   14cac:	d8800d17 	ldw	r2,52(sp)
   14cb0:	d8000915 	stw	zero,36(sp)
   14cb4:	308dc83a 	sub	r6,r6,r2
   14cb8:	0087c83a 	sub	r3,zero,r2
   14cbc:	d9801115 	stw	r6,68(sp)
   14cc0:	d8c01015 	stw	r3,64(sp)
   14cc4:	003cf206 	br	14090 <_dtoa_r+0x284>
   14cc8:	018dc83a 	sub	r6,zero,r6
   14ccc:	d9801115 	stw	r6,68(sp)
   14cd0:	d8000a15 	stw	zero,40(sp)
   14cd4:	003ce706 	br	14074 <_dtoa_r+0x268>
   14cd8:	d9000d17 	ldw	r4,52(sp)
   14cdc:	0010b4c0 	call	10b4c <__floatsidf>
   14ce0:	880b883a 	mov	r5,r17
   14ce4:	8009883a 	mov	r4,r16
   14ce8:	180f883a 	mov	r7,r3
   14cec:	100d883a 	mov	r6,r2
   14cf0:	0016cc00 	call	16cc0 <__nedf2>
   14cf4:	103cd526 	beq	r2,zero,1404c <_dtoa_r+0x240>
   14cf8:	d9800d17 	ldw	r6,52(sp)
   14cfc:	31bfffc4 	addi	r6,r6,-1
   14d00:	d9800d15 	stw	r6,52(sp)
   14d04:	003cd106 	br	1404c <_dtoa_r+0x240>
   14d08:	d9000717 	ldw	r4,28(sp)
   14d0c:	900b883a 	mov	r5,r18
   14d10:	001246c0 	call	1246c <__mcmp>
   14d14:	103e830e 	bge	r2,zero,14724 <_dtoa_r+0x918>
   14d18:	d9400717 	ldw	r5,28(sp)
   14d1c:	d9001617 	ldw	r4,88(sp)
   14d20:	01800284 	movi	r6,10
   14d24:	000f883a 	mov	r7,zero
   14d28:	00130dc0 	call	130dc <__multadd>
   14d2c:	d9800d17 	ldw	r6,52(sp)
   14d30:	d8800715 	stw	r2,28(sp)
   14d34:	31bfffc4 	addi	r6,r6,-1
   14d38:	d9800d15 	stw	r6,52(sp)
   14d3c:	b001a71e 	bne	r22,zero,153dc <_dtoa_r+0x15d0>
   14d40:	d8800e17 	ldw	r2,56(sp)
   14d44:	d8800f15 	stw	r2,60(sp)
   14d48:	003e7606 	br	14724 <_dtoa_r+0x918>
   14d4c:	90800417 	ldw	r2,16(r18)
   14d50:	1085883a 	add	r2,r2,r2
   14d54:	1085883a 	add	r2,r2,r2
   14d58:	1485883a 	add	r2,r2,r18
   14d5c:	11000417 	ldw	r4,16(r2)
   14d60:	00123380 	call	12338 <__hi0bits>
   14d64:	00c00804 	movi	r3,32
   14d68:	1887c83a 	sub	r3,r3,r2
   14d6c:	003e5006 	br	146b0 <_dtoa_r+0x8a4>
   14d70:	d9400717 	ldw	r5,28(sp)
   14d74:	d9801017 	ldw	r6,64(sp)
   14d78:	d9001617 	ldw	r4,88(sp)
   14d7c:	00132080 	call	13208 <__pow5mult>
   14d80:	d8800715 	stw	r2,28(sp)
   14d84:	003e3906 	br	1466c <_dtoa_r+0x860>
   14d88:	d9800f17 	ldw	r6,60(sp)
   14d8c:	d8800d17 	ldw	r2,52(sp)
   14d90:	d9800415 	stw	r6,16(sp)
   14d94:	d8800315 	stw	r2,12(sp)
   14d98:	d8c00b17 	ldw	r3,44(sp)
   14d9c:	1805003a 	cmpeq	r2,r3,zero
   14da0:	1000e21e 	bne	r2,zero,1512c <_dtoa_r+0x1320>
   14da4:	d9000417 	ldw	r4,16(sp)
   14da8:	0005883a 	mov	r2,zero
   14dac:	00cff834 	movhi	r3,16352
   14db0:	200c90fa 	slli	r6,r4,3
   14db4:	010000b4 	movhi	r4,2
   14db8:	21241a04 	addi	r4,r4,-28568
   14dbc:	180b883a 	mov	r5,r3
   14dc0:	310d883a 	add	r6,r6,r4
   14dc4:	327fff17 	ldw	r9,-4(r6)
   14dc8:	323ffe17 	ldw	r8,-8(r6)
   14dcc:	1009883a 	mov	r4,r2
   14dd0:	480f883a 	mov	r7,r9
   14dd4:	400d883a 	mov	r6,r8
   14dd8:	00169e00 	call	169e0 <__divdf3>
   14ddc:	180b883a 	mov	r5,r3
   14de0:	b00d883a 	mov	r6,r22
   14de4:	b80f883a 	mov	r7,r23
   14de8:	1009883a 	mov	r4,r2
   14dec:	00165280 	call	16528 <__subdf3>
   14df0:	a80b883a 	mov	r5,r21
   14df4:	a009883a 	mov	r4,r20
   14df8:	d8c01915 	stw	r3,100(sp)
   14dfc:	d8801815 	stw	r2,96(sp)
   14e00:	0016f680 	call	16f68 <__fixdfsi>
   14e04:	1009883a 	mov	r4,r2
   14e08:	1027883a 	mov	r19,r2
   14e0c:	0010b4c0 	call	10b4c <__floatsidf>
   14e10:	a80b883a 	mov	r5,r21
   14e14:	a009883a 	mov	r4,r20
   14e18:	180f883a 	mov	r7,r3
   14e1c:	100d883a 	mov	r6,r2
   14e20:	00165280 	call	16528 <__subdf3>
   14e24:	d9801817 	ldw	r6,96(sp)
   14e28:	1823883a 	mov	r17,r3
   14e2c:	d8801415 	stw	r2,80(sp)
   14e30:	302d883a 	mov	r22,r6
   14e34:	d9800517 	ldw	r6,20(sp)
   14e38:	9cc00c04 	addi	r19,r19,48
   14e3c:	dc401515 	stw	r17,84(sp)
   14e40:	d8c01917 	ldw	r3,100(sp)
   14e44:	34c00005 	stb	r19,0(r6)
   14e48:	d8800517 	ldw	r2,20(sp)
   14e4c:	d9401917 	ldw	r5,100(sp)
   14e50:	d9801417 	ldw	r6,80(sp)
   14e54:	b009883a 	mov	r4,r22
   14e58:	880f883a 	mov	r7,r17
   14e5c:	182f883a 	mov	r23,r3
   14e60:	17000044 	addi	fp,r2,1
   14e64:	0016d480 	call	16d48 <__gtdf2>
   14e68:	00804e16 	blt	zero,r2,14fa4 <_dtoa_r+0x1198>
   14e6c:	d9801417 	ldw	r6,80(sp)
   14e70:	0005883a 	mov	r2,zero
   14e74:	00cffc34 	movhi	r3,16368
   14e78:	180b883a 	mov	r5,r3
   14e7c:	880f883a 	mov	r7,r17
   14e80:	1009883a 	mov	r4,r2
   14e84:	00165280 	call	16528 <__subdf3>
   14e88:	d9401917 	ldw	r5,100(sp)
   14e8c:	180f883a 	mov	r7,r3
   14e90:	b009883a 	mov	r4,r22
   14e94:	100d883a 	mov	r6,r2
   14e98:	0016d480 	call	16d48 <__gtdf2>
   14e9c:	00bd9816 	blt	zero,r2,14500 <_dtoa_r+0x6f4>
   14ea0:	d8c00417 	ldw	r3,16(sp)
   14ea4:	00800044 	movi	r2,1
   14ea8:	10c01216 	blt	r2,r3,14ef4 <_dtoa_r+0x10e8>
   14eac:	003d3b06 	br	1439c <_dtoa_r+0x590>
   14eb0:	d9801417 	ldw	r6,80(sp)
   14eb4:	0005883a 	mov	r2,zero
   14eb8:	00cffc34 	movhi	r3,16368
   14ebc:	180b883a 	mov	r5,r3
   14ec0:	880f883a 	mov	r7,r17
   14ec4:	1009883a 	mov	r4,r2
   14ec8:	00165280 	call	16528 <__subdf3>
   14ecc:	d9c01b17 	ldw	r7,108(sp)
   14ed0:	180b883a 	mov	r5,r3
   14ed4:	1009883a 	mov	r4,r2
   14ed8:	b00d883a 	mov	r6,r22
   14edc:	0016e580 	call	16e58 <__ltdf2>
   14ee0:	103d8716 	blt	r2,zero,14500 <_dtoa_r+0x6f4>
   14ee4:	d9800517 	ldw	r6,20(sp)
   14ee8:	d9000417 	ldw	r4,16(sp)
   14eec:	3105883a 	add	r2,r6,r4
   14ef0:	e0bd2a26 	beq	fp,r2,1439c <_dtoa_r+0x590>
   14ef4:	04500934 	movhi	r17,16420
   14ef8:	0021883a 	mov	r16,zero
   14efc:	b80b883a 	mov	r5,r23
   14f00:	b009883a 	mov	r4,r22
   14f04:	800d883a 	mov	r6,r16
   14f08:	880f883a 	mov	r7,r17
   14f0c:	001661c0 	call	1661c <__muldf3>
   14f10:	d9401517 	ldw	r5,84(sp)
   14f14:	d9001417 	ldw	r4,80(sp)
   14f18:	880f883a 	mov	r7,r17
   14f1c:	000d883a 	mov	r6,zero
   14f20:	d8801a15 	stw	r2,104(sp)
   14f24:	d8c01b15 	stw	r3,108(sp)
   14f28:	001661c0 	call	1661c <__muldf3>
   14f2c:	180b883a 	mov	r5,r3
   14f30:	1009883a 	mov	r4,r2
   14f34:	1823883a 	mov	r17,r3
   14f38:	1021883a 	mov	r16,r2
   14f3c:	0016f680 	call	16f68 <__fixdfsi>
   14f40:	1009883a 	mov	r4,r2
   14f44:	102b883a 	mov	r21,r2
   14f48:	0010b4c0 	call	10b4c <__floatsidf>
   14f4c:	880b883a 	mov	r5,r17
   14f50:	8009883a 	mov	r4,r16
   14f54:	180f883a 	mov	r7,r3
   14f58:	100d883a 	mov	r6,r2
   14f5c:	00165280 	call	16528 <__subdf3>
   14f60:	1021883a 	mov	r16,r2
   14f64:	d9001b17 	ldw	r4,108(sp)
   14f68:	1823883a 	mov	r17,r3
   14f6c:	dc001415 	stw	r16,80(sp)
   14f70:	ad400c04 	addi	r21,r21,48
   14f74:	dc401515 	stw	r17,84(sp)
   14f78:	d8801a17 	ldw	r2,104(sp)
   14f7c:	e5400005 	stb	r21,0(fp)
   14f80:	202f883a 	mov	r23,r4
   14f84:	d9c01b17 	ldw	r7,108(sp)
   14f88:	d9001417 	ldw	r4,80(sp)
   14f8c:	880b883a 	mov	r5,r17
   14f90:	100d883a 	mov	r6,r2
   14f94:	102d883a 	mov	r22,r2
   14f98:	e7000044 	addi	fp,fp,1
   14f9c:	0016e580 	call	16e58 <__ltdf2>
   14fa0:	103fc30e 	bge	r2,zero,14eb0 <_dtoa_r+0x10a4>
   14fa4:	d9000317 	ldw	r4,12(sp)
   14fa8:	d9000d15 	stw	r4,52(sp)
   14fac:	003d6706 	br	1454c <_dtoa_r+0x740>
   14fb0:	d9801717 	ldw	r6,92(sp)
   14fb4:	00800084 	movi	r2,2
   14fb8:	11bddc0e 	bge	r2,r6,1472c <_dtoa_r+0x920>
   14fbc:	203cf11e 	bne	r4,zero,14384 <_dtoa_r+0x578>
   14fc0:	d9001617 	ldw	r4,88(sp)
   14fc4:	900b883a 	mov	r5,r18
   14fc8:	01800144 	movi	r6,5
   14fcc:	000f883a 	mov	r7,zero
   14fd0:	00130dc0 	call	130dc <__multadd>
   14fd4:	d9000717 	ldw	r4,28(sp)
   14fd8:	100b883a 	mov	r5,r2
   14fdc:	1025883a 	mov	r18,r2
   14fe0:	001246c0 	call	1246c <__mcmp>
   14fe4:	00bce70e 	bge	zero,r2,14384 <_dtoa_r+0x578>
   14fe8:	d8c00d17 	ldw	r3,52(sp)
   14fec:	d9000517 	ldw	r4,20(sp)
   14ff0:	d8000615 	stw	zero,24(sp)
   14ff4:	18c00044 	addi	r3,r3,1
   14ff8:	d8c00d15 	stw	r3,52(sp)
   14ffc:	00800c44 	movi	r2,49
   15000:	27000044 	addi	fp,r4,1
   15004:	20800005 	stb	r2,0(r4)
   15008:	003e8906 	br	14a30 <_dtoa_r+0xc24>
   1500c:	d8c00517 	ldw	r3,20(sp)
   15010:	003bb606 	br	13eec <_dtoa_r+0xe0>
   15014:	018000b4 	movhi	r6,2
   15018:	31a44c04 	addi	r6,r6,-28368
   1501c:	30c00917 	ldw	r3,36(r6)
   15020:	30800817 	ldw	r2,32(r6)
   15024:	d9001217 	ldw	r4,72(sp)
   15028:	d9401317 	ldw	r5,76(sp)
   1502c:	180f883a 	mov	r7,r3
   15030:	100d883a 	mov	r6,r2
   15034:	00169e00 	call	169e0 <__divdf3>
   15038:	948003cc 	andi	r18,r18,15
   1503c:	058000c4 	movi	r22,3
   15040:	1029883a 	mov	r20,r2
   15044:	182b883a 	mov	r21,r3
   15048:	003c7f06 	br	14248 <_dtoa_r+0x43c>
   1504c:	d9001017 	ldw	r4,64(sp)
   15050:	d9800917 	ldw	r6,36(sp)
   15054:	0025883a 	mov	r18,zero
   15058:	1105c83a 	sub	r2,r2,r4
   1505c:	2089883a 	add	r4,r4,r2
   15060:	308d883a 	add	r6,r6,r2
   15064:	d9001015 	stw	r4,64(sp)
   15068:	d9800915 	stw	r6,36(sp)
   1506c:	003e3206 	br	14938 <_dtoa_r+0xb2c>
   15070:	28800044 	addi	r2,r5,1
   15074:	27000044 	addi	fp,r4,1
   15078:	20800005 	stb	r2,0(r4)
   1507c:	003e6c06 	br	14a30 <_dtoa_r+0xc24>
   15080:	d8800f17 	ldw	r2,60(sp)
   15084:	00bcd616 	blt	zero,r2,143e0 <_dtoa_r+0x5d4>
   15088:	d9800f17 	ldw	r6,60(sp)
   1508c:	303cbb1e 	bne	r6,zero,1437c <_dtoa_r+0x570>
   15090:	0005883a 	mov	r2,zero
   15094:	00d00534 	movhi	r3,16404
   15098:	980b883a 	mov	r5,r19
   1509c:	180f883a 	mov	r7,r3
   150a0:	9009883a 	mov	r4,r18
   150a4:	100d883a 	mov	r6,r2
   150a8:	001661c0 	call	1661c <__muldf3>
   150ac:	180b883a 	mov	r5,r3
   150b0:	a80f883a 	mov	r7,r21
   150b4:	1009883a 	mov	r4,r2
   150b8:	a00d883a 	mov	r6,r20
   150bc:	0016dd00 	call	16dd0 <__gedf2>
   150c0:	103cae0e 	bge	r2,zero,1437c <_dtoa_r+0x570>
   150c4:	0027883a 	mov	r19,zero
   150c8:	0025883a 	mov	r18,zero
   150cc:	003fc606 	br	14fe8 <_dtoa_r+0x11dc>
   150d0:	99400117 	ldw	r5,4(r19)
   150d4:	d9001617 	ldw	r4,88(sp)
   150d8:	00129080 	call	12908 <_Balloc>
   150dc:	99800417 	ldw	r6,16(r19)
   150e0:	11000304 	addi	r4,r2,12
   150e4:	99400304 	addi	r5,r19,12
   150e8:	318d883a 	add	r6,r6,r6
   150ec:	318d883a 	add	r6,r6,r6
   150f0:	31800204 	addi	r6,r6,8
   150f4:	1023883a 	mov	r17,r2
   150f8:	0015fa80 	call	15fa8 <memcpy>
   150fc:	d9001617 	ldw	r4,88(sp)
   15100:	880b883a 	mov	r5,r17
   15104:	01800044 	movi	r6,1
   15108:	0012d000 	call	12d00 <__lshift>
   1510c:	100b883a 	mov	r5,r2
   15110:	003d9206 	br	1475c <_dtoa_r+0x950>
   15114:	00800e44 	movi	r2,57
   15118:	b8807026 	beq	r23,r2,152dc <_dtoa_r+0x14d0>
   1511c:	b8800044 	addi	r2,r23,1
   15120:	b7000044 	addi	fp,r22,1
   15124:	b0800005 	stb	r2,0(r22)
   15128:	003e4106 	br	14a30 <_dtoa_r+0xc24>
   1512c:	d8800417 	ldw	r2,16(sp)
   15130:	018000b4 	movhi	r6,2
   15134:	31a41a04 	addi	r6,r6,-28568
   15138:	b009883a 	mov	r4,r22
   1513c:	100e90fa 	slli	r7,r2,3
   15140:	b80b883a 	mov	r5,r23
   15144:	398f883a 	add	r7,r7,r6
   15148:	38bffe17 	ldw	r2,-8(r7)
   1514c:	d9800517 	ldw	r6,20(sp)
   15150:	38ffff17 	ldw	r3,-4(r7)
   15154:	37000044 	addi	fp,r6,1
   15158:	180f883a 	mov	r7,r3
   1515c:	100d883a 	mov	r6,r2
   15160:	001661c0 	call	1661c <__muldf3>
   15164:	a80b883a 	mov	r5,r21
   15168:	a009883a 	mov	r4,r20
   1516c:	182f883a 	mov	r23,r3
   15170:	102d883a 	mov	r22,r2
   15174:	0016f680 	call	16f68 <__fixdfsi>
   15178:	1009883a 	mov	r4,r2
   1517c:	1027883a 	mov	r19,r2
   15180:	0010b4c0 	call	10b4c <__floatsidf>
   15184:	a80b883a 	mov	r5,r21
   15188:	a009883a 	mov	r4,r20
   1518c:	180f883a 	mov	r7,r3
   15190:	100d883a 	mov	r6,r2
   15194:	00165280 	call	16528 <__subdf3>
   15198:	180b883a 	mov	r5,r3
   1519c:	d8c00517 	ldw	r3,20(sp)
   151a0:	9cc00c04 	addi	r19,r19,48
   151a4:	1009883a 	mov	r4,r2
   151a8:	1cc00005 	stb	r19,0(r3)
   151ac:	2021883a 	mov	r16,r4
   151b0:	d9000417 	ldw	r4,16(sp)
   151b4:	00800044 	movi	r2,1
   151b8:	2823883a 	mov	r17,r5
   151bc:	20802226 	beq	r4,r2,15248 <_dtoa_r+0x143c>
   151c0:	1029883a 	mov	r20,r2
   151c4:	0005883a 	mov	r2,zero
   151c8:	00d00934 	movhi	r3,16420
   151cc:	180f883a 	mov	r7,r3
   151d0:	100d883a 	mov	r6,r2
   151d4:	880b883a 	mov	r5,r17
   151d8:	8009883a 	mov	r4,r16
   151dc:	001661c0 	call	1661c <__muldf3>
   151e0:	180b883a 	mov	r5,r3
   151e4:	1009883a 	mov	r4,r2
   151e8:	1823883a 	mov	r17,r3
   151ec:	1021883a 	mov	r16,r2
   151f0:	0016f680 	call	16f68 <__fixdfsi>
   151f4:	1009883a 	mov	r4,r2
   151f8:	102b883a 	mov	r21,r2
   151fc:	0010b4c0 	call	10b4c <__floatsidf>
   15200:	880b883a 	mov	r5,r17
   15204:	8009883a 	mov	r4,r16
   15208:	180f883a 	mov	r7,r3
   1520c:	100d883a 	mov	r6,r2
   15210:	00165280 	call	16528 <__subdf3>
   15214:	180b883a 	mov	r5,r3
   15218:	d8c00517 	ldw	r3,20(sp)
   1521c:	1009883a 	mov	r4,r2
   15220:	ad400c04 	addi	r21,r21,48
   15224:	1d05883a 	add	r2,r3,r20
   15228:	15400005 	stb	r21,0(r2)
   1522c:	2021883a 	mov	r16,r4
   15230:	d9000417 	ldw	r4,16(sp)
   15234:	a5000044 	addi	r20,r20,1
   15238:	2823883a 	mov	r17,r5
   1523c:	a13fe11e 	bne	r20,r4,151c4 <_dtoa_r+0x13b8>
   15240:	e505883a 	add	r2,fp,r20
   15244:	173fffc4 	addi	fp,r2,-1
   15248:	0025883a 	mov	r18,zero
   1524c:	04cff834 	movhi	r19,16352
   15250:	b009883a 	mov	r4,r22
   15254:	b80b883a 	mov	r5,r23
   15258:	900d883a 	mov	r6,r18
   1525c:	980f883a 	mov	r7,r19
   15260:	00165a80 	call	165a8 <__adddf3>
   15264:	180b883a 	mov	r5,r3
   15268:	1009883a 	mov	r4,r2
   1526c:	800d883a 	mov	r6,r16
   15270:	880f883a 	mov	r7,r17
   15274:	0016e580 	call	16e58 <__ltdf2>
   15278:	103ca116 	blt	r2,zero,14500 <_dtoa_r+0x6f4>
   1527c:	0009883a 	mov	r4,zero
   15280:	980b883a 	mov	r5,r19
   15284:	b80f883a 	mov	r7,r23
   15288:	b00d883a 	mov	r6,r22
   1528c:	00165280 	call	16528 <__subdf3>
   15290:	180b883a 	mov	r5,r3
   15294:	880f883a 	mov	r7,r17
   15298:	1009883a 	mov	r4,r2
   1529c:	800d883a 	mov	r6,r16
   152a0:	0016d480 	call	16d48 <__gtdf2>
   152a4:	00bc3d0e 	bge	zero,r2,1439c <_dtoa_r+0x590>
   152a8:	00c00c04 	movi	r3,48
   152ac:	e73fffc4 	addi	fp,fp,-1
   152b0:	e0800007 	ldb	r2,0(fp)
   152b4:	10fffd26 	beq	r2,r3,152ac <_dtoa_r+0x14a0>
   152b8:	d9800317 	ldw	r6,12(sp)
   152bc:	e7000044 	addi	fp,fp,1
   152c0:	d9800d15 	stw	r6,52(sp)
   152c4:	003ca106 	br	1454c <_dtoa_r+0x740>
   152c8:	d8c00f17 	ldw	r3,60(sp)
   152cc:	d9001117 	ldw	r4,68(sp)
   152d0:	20e1c83a 	sub	r16,r4,r3
   152d4:	0007883a 	mov	r3,zero
   152d8:	003d9b06 	br	14948 <_dtoa_r+0xb3c>
   152dc:	00800e44 	movi	r2,57
   152e0:	b0800005 	stb	r2,0(r22)
   152e4:	b5800044 	addi	r22,r22,1
   152e8:	003dc106 	br	149f0 <_dtoa_r+0xbe4>
   152ec:	05800084 	movi	r22,2
   152f0:	003bed06 	br	142a8 <_dtoa_r+0x49c>
   152f4:	d9000f17 	ldw	r4,60(sp)
   152f8:	013bf60e 	bge	zero,r4,142d4 <_dtoa_r+0x4c8>
   152fc:	d9800e17 	ldw	r6,56(sp)
   15300:	01bc260e 	bge	zero,r6,1439c <_dtoa_r+0x590>
   15304:	0005883a 	mov	r2,zero
   15308:	00d00934 	movhi	r3,16420
   1530c:	a80b883a 	mov	r5,r21
   15310:	180f883a 	mov	r7,r3
   15314:	a009883a 	mov	r4,r20
   15318:	100d883a 	mov	r6,r2
   1531c:	001661c0 	call	1661c <__muldf3>
   15320:	b1000044 	addi	r4,r22,1
   15324:	1021883a 	mov	r16,r2
   15328:	1823883a 	mov	r17,r3
   1532c:	0010b4c0 	call	10b4c <__floatsidf>
   15330:	880b883a 	mov	r5,r17
   15334:	8009883a 	mov	r4,r16
   15338:	180f883a 	mov	r7,r3
   1533c:	100d883a 	mov	r6,r2
   15340:	001661c0 	call	1661c <__muldf3>
   15344:	0011883a 	mov	r8,zero
   15348:	02500734 	movhi	r9,16412
   1534c:	180b883a 	mov	r5,r3
   15350:	480f883a 	mov	r7,r9
   15354:	1009883a 	mov	r4,r2
   15358:	400d883a 	mov	r6,r8
   1535c:	00165a80 	call	165a8 <__adddf3>
   15360:	102d883a 	mov	r22,r2
   15364:	00bf3034 	movhi	r2,64704
   15368:	10ef883a 	add	r23,r2,r3
   1536c:	d8800d17 	ldw	r2,52(sp)
   15370:	d8c00e17 	ldw	r3,56(sp)
   15374:	8029883a 	mov	r20,r16
   15378:	10bfffc4 	addi	r2,r2,-1
   1537c:	882b883a 	mov	r21,r17
   15380:	d8800315 	stw	r2,12(sp)
   15384:	d8c00415 	stw	r3,16(sp)
   15388:	003e8306 	br	14d98 <_dtoa_r+0xf8c>
   1538c:	d8800117 	ldw	r2,4(sp)
   15390:	dc001117 	ldw	r16,68(sp)
   15394:	dc801017 	ldw	r18,64(sp)
   15398:	00c00d84 	movi	r3,54
   1539c:	1887c83a 	sub	r3,r3,r2
   153a0:	003d6906 	br	14948 <_dtoa_r+0xb3c>
   153a4:	01800044 	movi	r6,1
   153a8:	3021883a 	mov	r16,r6
   153ac:	d9800f15 	stw	r6,60(sp)
   153b0:	d9802615 	stw	r6,152(sp)
   153b4:	d9800e15 	stw	r6,56(sp)
   153b8:	003b8706 	br	141d8 <_dtoa_r+0x3cc>
   153bc:	b021883a 	mov	r16,r22
   153c0:	dd800f15 	stw	r22,60(sp)
   153c4:	003b8406 	br	141d8 <_dtoa_r+0x3cc>
   153c8:	103e221e 	bne	r2,zero,14c54 <_dtoa_r+0xe48>
   153cc:	b880004c 	andi	r2,r23,1
   153d0:	1005003a 	cmpeq	r2,r2,zero
   153d4:	103e1f1e 	bne	r2,zero,14c54 <_dtoa_r+0xe48>
   153d8:	003e1b06 	br	14c48 <_dtoa_r+0xe3c>
   153dc:	d9001617 	ldw	r4,88(sp)
   153e0:	980b883a 	mov	r5,r19
   153e4:	01800284 	movi	r6,10
   153e8:	000f883a 	mov	r7,zero
   153ec:	00130dc0 	call	130dc <__multadd>
   153f0:	d8c00e17 	ldw	r3,56(sp)
   153f4:	1027883a 	mov	r19,r2
   153f8:	d8c00f15 	stw	r3,60(sp)
   153fc:	003cc906 	br	14724 <_dtoa_r+0x918>

00015400 <_malloc_trim_r>:
   15400:	defffb04 	addi	sp,sp,-20
   15404:	dcc00315 	stw	r19,12(sp)
   15408:	04c000b4 	movhi	r19,2
   1540c:	9ce4b004 	addi	r19,r19,-27968
   15410:	dc800215 	stw	r18,8(sp)
   15414:	dc400115 	stw	r17,4(sp)
   15418:	dc000015 	stw	r16,0(sp)
   1541c:	2823883a 	mov	r17,r5
   15420:	2025883a 	mov	r18,r4
   15424:	dfc00415 	stw	ra,16(sp)
   15428:	001750c0 	call	1750c <__malloc_lock>
   1542c:	98800217 	ldw	r2,8(r19)
   15430:	9009883a 	mov	r4,r18
   15434:	000b883a 	mov	r5,zero
   15438:	10c00117 	ldw	r3,4(r2)
   1543c:	00bfff04 	movi	r2,-4
   15440:	18a0703a 	and	r16,r3,r2
   15444:	8463c83a 	sub	r17,r16,r17
   15448:	8c401bc4 	addi	r17,r17,111
   1544c:	8822d1fa 	srli	r17,r17,7
   15450:	00801fc4 	movi	r2,127
   15454:	8c7fffc4 	addi	r17,r17,-1
   15458:	882291fa 	slli	r17,r17,7
   1545c:	1440060e 	bge	r2,r17,15478 <_malloc_trim_r+0x78>
   15460:	00160540 	call	16054 <_sbrk_r>
   15464:	98c00217 	ldw	r3,8(r19)
   15468:	9009883a 	mov	r4,r18
   1546c:	044bc83a 	sub	r5,zero,r17
   15470:	80c7883a 	add	r3,r16,r3
   15474:	10c00926 	beq	r2,r3,1549c <_malloc_trim_r+0x9c>
   15478:	001752c0 	call	1752c <__malloc_unlock>
   1547c:	0005883a 	mov	r2,zero
   15480:	dfc00417 	ldw	ra,16(sp)
   15484:	dcc00317 	ldw	r19,12(sp)
   15488:	dc800217 	ldw	r18,8(sp)
   1548c:	dc400117 	ldw	r17,4(sp)
   15490:	dc000017 	ldw	r16,0(sp)
   15494:	dec00504 	addi	sp,sp,20
   15498:	f800283a 	ret
   1549c:	9009883a 	mov	r4,r18
   154a0:	00160540 	call	16054 <_sbrk_r>
   154a4:	844dc83a 	sub	r6,r16,r17
   154a8:	00ffffc4 	movi	r3,-1
   154ac:	9009883a 	mov	r4,r18
   154b0:	000b883a 	mov	r5,zero
   154b4:	01c000b4 	movhi	r7,2
   154b8:	39e7fc04 	addi	r7,r7,-24592
   154bc:	31800054 	ori	r6,r6,1
   154c0:	10c00926 	beq	r2,r3,154e8 <_malloc_trim_r+0xe8>
   154c4:	38800017 	ldw	r2,0(r7)
   154c8:	98c00217 	ldw	r3,8(r19)
   154cc:	9009883a 	mov	r4,r18
   154d0:	1445c83a 	sub	r2,r2,r17
   154d4:	38800015 	stw	r2,0(r7)
   154d8:	19800115 	stw	r6,4(r3)
   154dc:	001752c0 	call	1752c <__malloc_unlock>
   154e0:	00800044 	movi	r2,1
   154e4:	003fe606 	br	15480 <_malloc_trim_r+0x80>
   154e8:	00160540 	call	16054 <_sbrk_r>
   154ec:	99800217 	ldw	r6,8(r19)
   154f0:	100f883a 	mov	r7,r2
   154f4:	9009883a 	mov	r4,r18
   154f8:	1187c83a 	sub	r3,r2,r6
   154fc:	008003c4 	movi	r2,15
   15500:	19400054 	ori	r5,r3,1
   15504:	10ffdc0e 	bge	r2,r3,15478 <_malloc_trim_r+0x78>
   15508:	008000b4 	movhi	r2,2
   1550c:	10a62a04 	addi	r2,r2,-26456
   15510:	10c00017 	ldw	r3,0(r2)
   15514:	008000b4 	movhi	r2,2
   15518:	10a7fc04 	addi	r2,r2,-24592
   1551c:	31400115 	stw	r5,4(r6)
   15520:	38c7c83a 	sub	r3,r7,r3
   15524:	10c00015 	stw	r3,0(r2)
   15528:	003fd306 	br	15478 <_malloc_trim_r+0x78>

0001552c <_free_r>:
   1552c:	defffd04 	addi	sp,sp,-12
   15530:	dc400115 	stw	r17,4(sp)
   15534:	dc000015 	stw	r16,0(sp)
   15538:	dfc00215 	stw	ra,8(sp)
   1553c:	2821883a 	mov	r16,r5
   15540:	2023883a 	mov	r17,r4
   15544:	28005a26 	beq	r5,zero,156b0 <_free_r+0x184>
   15548:	001750c0 	call	1750c <__malloc_lock>
   1554c:	823ffe04 	addi	r8,r16,-8
   15550:	41400117 	ldw	r5,4(r8)
   15554:	00bfff84 	movi	r2,-2
   15558:	028000b4 	movhi	r10,2
   1555c:	52a4b004 	addi	r10,r10,-27968
   15560:	288e703a 	and	r7,r5,r2
   15564:	41cd883a 	add	r6,r8,r7
   15568:	30c00117 	ldw	r3,4(r6)
   1556c:	51000217 	ldw	r4,8(r10)
   15570:	00bfff04 	movi	r2,-4
   15574:	1892703a 	and	r9,r3,r2
   15578:	5017883a 	mov	r11,r10
   1557c:	31006726 	beq	r6,r4,1571c <_free_r+0x1f0>
   15580:	2880004c 	andi	r2,r5,1
   15584:	1005003a 	cmpeq	r2,r2,zero
   15588:	32400115 	stw	r9,4(r6)
   1558c:	10001a1e 	bne	r2,zero,155f8 <_free_r+0xcc>
   15590:	000b883a 	mov	r5,zero
   15594:	3247883a 	add	r3,r6,r9
   15598:	18800117 	ldw	r2,4(r3)
   1559c:	1080004c 	andi	r2,r2,1
   155a0:	1000231e 	bne	r2,zero,15630 <_free_r+0x104>
   155a4:	280ac03a 	cmpne	r5,r5,zero
   155a8:	3a4f883a 	add	r7,r7,r9
   155ac:	2800451e 	bne	r5,zero,156c4 <_free_r+0x198>
   155b0:	31000217 	ldw	r4,8(r6)
   155b4:	008000b4 	movhi	r2,2
   155b8:	10a4b204 	addi	r2,r2,-27960
   155bc:	20807b26 	beq	r4,r2,157ac <_free_r+0x280>
   155c0:	30800317 	ldw	r2,12(r6)
   155c4:	3a07883a 	add	r3,r7,r8
   155c8:	19c00015 	stw	r7,0(r3)
   155cc:	11000215 	stw	r4,8(r2)
   155d0:	20800315 	stw	r2,12(r4)
   155d4:	38800054 	ori	r2,r7,1
   155d8:	40800115 	stw	r2,4(r8)
   155dc:	28001a26 	beq	r5,zero,15648 <_free_r+0x11c>
   155e0:	8809883a 	mov	r4,r17
   155e4:	dfc00217 	ldw	ra,8(sp)
   155e8:	dc400117 	ldw	r17,4(sp)
   155ec:	dc000017 	ldw	r16,0(sp)
   155f0:	dec00304 	addi	sp,sp,12
   155f4:	001752c1 	jmpi	1752c <__malloc_unlock>
   155f8:	80bffe17 	ldw	r2,-8(r16)
   155fc:	50c00204 	addi	r3,r10,8
   15600:	4091c83a 	sub	r8,r8,r2
   15604:	41000217 	ldw	r4,8(r8)
   15608:	388f883a 	add	r7,r7,r2
   1560c:	20c06126 	beq	r4,r3,15794 <_free_r+0x268>
   15610:	40800317 	ldw	r2,12(r8)
   15614:	3247883a 	add	r3,r6,r9
   15618:	000b883a 	mov	r5,zero
   1561c:	11000215 	stw	r4,8(r2)
   15620:	20800315 	stw	r2,12(r4)
   15624:	18800117 	ldw	r2,4(r3)
   15628:	1080004c 	andi	r2,r2,1
   1562c:	103fdd26 	beq	r2,zero,155a4 <_free_r+0x78>
   15630:	38800054 	ori	r2,r7,1
   15634:	3a07883a 	add	r3,r7,r8
   15638:	280ac03a 	cmpne	r5,r5,zero
   1563c:	40800115 	stw	r2,4(r8)
   15640:	19c00015 	stw	r7,0(r3)
   15644:	283fe61e 	bne	r5,zero,155e0 <_free_r+0xb4>
   15648:	00807fc4 	movi	r2,511
   1564c:	11c01f2e 	bgeu	r2,r7,156cc <_free_r+0x1a0>
   15650:	3806d27a 	srli	r3,r7,9
   15654:	1800481e 	bne	r3,zero,15778 <_free_r+0x24c>
   15658:	3804d0fa 	srli	r2,r7,3
   1565c:	100690fa 	slli	r3,r2,3
   15660:	1acd883a 	add	r6,r3,r11
   15664:	31400217 	ldw	r5,8(r6)
   15668:	31405926 	beq	r6,r5,157d0 <_free_r+0x2a4>
   1566c:	28800117 	ldw	r2,4(r5)
   15670:	00ffff04 	movi	r3,-4
   15674:	10c4703a 	and	r2,r2,r3
   15678:	3880022e 	bgeu	r7,r2,15684 <_free_r+0x158>
   1567c:	29400217 	ldw	r5,8(r5)
   15680:	317ffa1e 	bne	r6,r5,1566c <_free_r+0x140>
   15684:	29800317 	ldw	r6,12(r5)
   15688:	41800315 	stw	r6,12(r8)
   1568c:	41400215 	stw	r5,8(r8)
   15690:	8809883a 	mov	r4,r17
   15694:	2a000315 	stw	r8,12(r5)
   15698:	32000215 	stw	r8,8(r6)
   1569c:	dfc00217 	ldw	ra,8(sp)
   156a0:	dc400117 	ldw	r17,4(sp)
   156a4:	dc000017 	ldw	r16,0(sp)
   156a8:	dec00304 	addi	sp,sp,12
   156ac:	001752c1 	jmpi	1752c <__malloc_unlock>
   156b0:	dfc00217 	ldw	ra,8(sp)
   156b4:	dc400117 	ldw	r17,4(sp)
   156b8:	dc000017 	ldw	r16,0(sp)
   156bc:	dec00304 	addi	sp,sp,12
   156c0:	f800283a 	ret
   156c4:	31000217 	ldw	r4,8(r6)
   156c8:	003fbd06 	br	155c0 <_free_r+0x94>
   156cc:	3806d0fa 	srli	r3,r7,3
   156d0:	00800044 	movi	r2,1
   156d4:	51400117 	ldw	r5,4(r10)
   156d8:	180890fa 	slli	r4,r3,3
   156dc:	1807d0ba 	srai	r3,r3,2
   156e0:	22c9883a 	add	r4,r4,r11
   156e4:	21800217 	ldw	r6,8(r4)
   156e8:	10c4983a 	sll	r2,r2,r3
   156ec:	41000315 	stw	r4,12(r8)
   156f0:	41800215 	stw	r6,8(r8)
   156f4:	288ab03a 	or	r5,r5,r2
   156f8:	22000215 	stw	r8,8(r4)
   156fc:	8809883a 	mov	r4,r17
   15700:	51400115 	stw	r5,4(r10)
   15704:	32000315 	stw	r8,12(r6)
   15708:	dfc00217 	ldw	ra,8(sp)
   1570c:	dc400117 	ldw	r17,4(sp)
   15710:	dc000017 	ldw	r16,0(sp)
   15714:	dec00304 	addi	sp,sp,12
   15718:	001752c1 	jmpi	1752c <__malloc_unlock>
   1571c:	2880004c 	andi	r2,r5,1
   15720:	3a4d883a 	add	r6,r7,r9
   15724:	1000071e 	bne	r2,zero,15744 <_free_r+0x218>
   15728:	80bffe17 	ldw	r2,-8(r16)
   1572c:	4091c83a 	sub	r8,r8,r2
   15730:	41000317 	ldw	r4,12(r8)
   15734:	40c00217 	ldw	r3,8(r8)
   15738:	308d883a 	add	r6,r6,r2
   1573c:	20c00215 	stw	r3,8(r4)
   15740:	19000315 	stw	r4,12(r3)
   15744:	008000b4 	movhi	r2,2
   15748:	10a62904 	addi	r2,r2,-26460
   1574c:	11000017 	ldw	r4,0(r2)
   15750:	30c00054 	ori	r3,r6,1
   15754:	52000215 	stw	r8,8(r10)
   15758:	40c00115 	stw	r3,4(r8)
   1575c:	313fa036 	bltu	r6,r4,155e0 <_free_r+0xb4>
   15760:	008000b4 	movhi	r2,2
   15764:	10a7f304 	addi	r2,r2,-24628
   15768:	11400017 	ldw	r5,0(r2)
   1576c:	8809883a 	mov	r4,r17
   15770:	00154000 	call	15400 <_malloc_trim_r>
   15774:	003f9a06 	br	155e0 <_free_r+0xb4>
   15778:	00800104 	movi	r2,4
   1577c:	10c0072e 	bgeu	r2,r3,1579c <_free_r+0x270>
   15780:	00800504 	movi	r2,20
   15784:	10c01936 	bltu	r2,r3,157ec <_free_r+0x2c0>
   15788:	188016c4 	addi	r2,r3,91
   1578c:	100690fa 	slli	r3,r2,3
   15790:	003fb306 	br	15660 <_free_r+0x134>
   15794:	01400044 	movi	r5,1
   15798:	003f7e06 	br	15594 <_free_r+0x68>
   1579c:	3804d1ba 	srli	r2,r7,6
   157a0:	10800e04 	addi	r2,r2,56
   157a4:	100690fa 	slli	r3,r2,3
   157a8:	003fad06 	br	15660 <_free_r+0x134>
   157ac:	22000315 	stw	r8,12(r4)
   157b0:	22000215 	stw	r8,8(r4)
   157b4:	3a05883a 	add	r2,r7,r8
   157b8:	38c00054 	ori	r3,r7,1
   157bc:	11c00015 	stw	r7,0(r2)
   157c0:	41000215 	stw	r4,8(r8)
   157c4:	40c00115 	stw	r3,4(r8)
   157c8:	41000315 	stw	r4,12(r8)
   157cc:	003f8406 	br	155e0 <_free_r+0xb4>
   157d0:	1005d0ba 	srai	r2,r2,2
   157d4:	00c00044 	movi	r3,1
   157d8:	51000117 	ldw	r4,4(r10)
   157dc:	1886983a 	sll	r3,r3,r2
   157e0:	20c8b03a 	or	r4,r4,r3
   157e4:	51000115 	stw	r4,4(r10)
   157e8:	003fa706 	br	15688 <_free_r+0x15c>
   157ec:	00801504 	movi	r2,84
   157f0:	10c00436 	bltu	r2,r3,15804 <_free_r+0x2d8>
   157f4:	3804d33a 	srli	r2,r7,12
   157f8:	10801b84 	addi	r2,r2,110
   157fc:	100690fa 	slli	r3,r2,3
   15800:	003f9706 	br	15660 <_free_r+0x134>
   15804:	00805504 	movi	r2,340
   15808:	10c00436 	bltu	r2,r3,1581c <_free_r+0x2f0>
   1580c:	3804d3fa 	srli	r2,r7,15
   15810:	10801dc4 	addi	r2,r2,119
   15814:	100690fa 	slli	r3,r2,3
   15818:	003f9106 	br	15660 <_free_r+0x134>
   1581c:	00815504 	movi	r2,1364
   15820:	10c0032e 	bgeu	r2,r3,15830 <_free_r+0x304>
   15824:	00801f84 	movi	r2,126
   15828:	00c0fc04 	movi	r3,1008
   1582c:	003f8c06 	br	15660 <_free_r+0x134>
   15830:	3804d4ba 	srli	r2,r7,18
   15834:	10801f04 	addi	r2,r2,124
   15838:	100690fa 	slli	r3,r2,3
   1583c:	003f8806 	br	15660 <_free_r+0x134>

00015840 <free>:
   15840:	008000b4 	movhi	r2,2
   15844:	10a62704 	addi	r2,r2,-26468
   15848:	200b883a 	mov	r5,r4
   1584c:	11000017 	ldw	r4,0(r2)
   15850:	001552c1 	jmpi	1552c <_free_r>

00015854 <malloc>:
   15854:	008000b4 	movhi	r2,2
   15858:	10a62704 	addi	r2,r2,-26468
   1585c:	200b883a 	mov	r5,r4
   15860:	11000017 	ldw	r4,0(r2)
   15864:	00158681 	jmpi	15868 <_malloc_r>

00015868 <_malloc_r>:
   15868:	defff604 	addi	sp,sp,-40
   1586c:	28c002c4 	addi	r3,r5,11
   15870:	00800584 	movi	r2,22
   15874:	dc800215 	stw	r18,8(sp)
   15878:	dfc00915 	stw	ra,36(sp)
   1587c:	df000815 	stw	fp,32(sp)
   15880:	ddc00715 	stw	r23,28(sp)
   15884:	dd800615 	stw	r22,24(sp)
   15888:	dd400515 	stw	r21,20(sp)
   1588c:	dd000415 	stw	r20,16(sp)
   15890:	dcc00315 	stw	r19,12(sp)
   15894:	dc400115 	stw	r17,4(sp)
   15898:	dc000015 	stw	r16,0(sp)
   1589c:	2025883a 	mov	r18,r4
   158a0:	10c01236 	bltu	r2,r3,158ec <_malloc_r+0x84>
   158a4:	04400404 	movi	r17,16
   158a8:	8940142e 	bgeu	r17,r5,158fc <_malloc_r+0x94>
   158ac:	00800304 	movi	r2,12
   158b0:	0007883a 	mov	r3,zero
   158b4:	90800015 	stw	r2,0(r18)
   158b8:	1805883a 	mov	r2,r3
   158bc:	dfc00917 	ldw	ra,36(sp)
   158c0:	df000817 	ldw	fp,32(sp)
   158c4:	ddc00717 	ldw	r23,28(sp)
   158c8:	dd800617 	ldw	r22,24(sp)
   158cc:	dd400517 	ldw	r21,20(sp)
   158d0:	dd000417 	ldw	r20,16(sp)
   158d4:	dcc00317 	ldw	r19,12(sp)
   158d8:	dc800217 	ldw	r18,8(sp)
   158dc:	dc400117 	ldw	r17,4(sp)
   158e0:	dc000017 	ldw	r16,0(sp)
   158e4:	dec00a04 	addi	sp,sp,40
   158e8:	f800283a 	ret
   158ec:	00bffe04 	movi	r2,-8
   158f0:	18a2703a 	and	r17,r3,r2
   158f4:	883fed16 	blt	r17,zero,158ac <_malloc_r+0x44>
   158f8:	897fec36 	bltu	r17,r5,158ac <_malloc_r+0x44>
   158fc:	9009883a 	mov	r4,r18
   15900:	001750c0 	call	1750c <__malloc_lock>
   15904:	00807dc4 	movi	r2,503
   15908:	14402b2e 	bgeu	r2,r17,159b8 <_malloc_r+0x150>
   1590c:	8806d27a 	srli	r3,r17,9
   15910:	18003f1e 	bne	r3,zero,15a10 <_malloc_r+0x1a8>
   15914:	880cd0fa 	srli	r6,r17,3
   15918:	300490fa 	slli	r2,r6,3
   1591c:	02c000b4 	movhi	r11,2
   15920:	5ae4b004 	addi	r11,r11,-27968
   15924:	12cb883a 	add	r5,r2,r11
   15928:	2c000317 	ldw	r16,12(r5)
   1592c:	580f883a 	mov	r7,r11
   15930:	2c00041e 	bne	r5,r16,15944 <_malloc_r+0xdc>
   15934:	00000a06 	br	15960 <_malloc_r+0xf8>
   15938:	1800860e 	bge	r3,zero,15b54 <_malloc_r+0x2ec>
   1593c:	84000317 	ldw	r16,12(r16)
   15940:	2c000726 	beq	r5,r16,15960 <_malloc_r+0xf8>
   15944:	80800117 	ldw	r2,4(r16)
   15948:	00ffff04 	movi	r3,-4
   1594c:	10c8703a 	and	r4,r2,r3
   15950:	2447c83a 	sub	r3,r4,r17
   15954:	008003c4 	movi	r2,15
   15958:	10fff70e 	bge	r2,r3,15938 <_malloc_r+0xd0>
   1595c:	31bfffc4 	addi	r6,r6,-1
   15960:	32400044 	addi	r9,r6,1
   15964:	028000b4 	movhi	r10,2
   15968:	52a4b204 	addi	r10,r10,-27960
   1596c:	54000217 	ldw	r16,8(r10)
   15970:	8280a026 	beq	r16,r10,15bf4 <_malloc_r+0x38c>
   15974:	80800117 	ldw	r2,4(r16)
   15978:	00ffff04 	movi	r3,-4
   1597c:	10ca703a 	and	r5,r2,r3
   15980:	2c4dc83a 	sub	r6,r5,r17
   15984:	008003c4 	movi	r2,15
   15988:	11808316 	blt	r2,r6,15b98 <_malloc_r+0x330>
   1598c:	52800315 	stw	r10,12(r10)
   15990:	52800215 	stw	r10,8(r10)
   15994:	30002916 	blt	r6,zero,15a3c <_malloc_r+0x1d4>
   15998:	8147883a 	add	r3,r16,r5
   1599c:	18800117 	ldw	r2,4(r3)
   159a0:	9009883a 	mov	r4,r18
   159a4:	10800054 	ori	r2,r2,1
   159a8:	18800115 	stw	r2,4(r3)
   159ac:	001752c0 	call	1752c <__malloc_unlock>
   159b0:	80c00204 	addi	r3,r16,8
   159b4:	003fc006 	br	158b8 <_malloc_r+0x50>
   159b8:	02c000b4 	movhi	r11,2
   159bc:	5ae4b004 	addi	r11,r11,-27968
   159c0:	8ac5883a 	add	r2,r17,r11
   159c4:	14000317 	ldw	r16,12(r2)
   159c8:	580f883a 	mov	r7,r11
   159cc:	8806d0fa 	srli	r3,r17,3
   159d0:	14006c26 	beq	r2,r16,15b84 <_malloc_r+0x31c>
   159d4:	80c00117 	ldw	r3,4(r16)
   159d8:	00bfff04 	movi	r2,-4
   159dc:	81800317 	ldw	r6,12(r16)
   159e0:	1886703a 	and	r3,r3,r2
   159e4:	80c7883a 	add	r3,r16,r3
   159e8:	18800117 	ldw	r2,4(r3)
   159ec:	81400217 	ldw	r5,8(r16)
   159f0:	9009883a 	mov	r4,r18
   159f4:	10800054 	ori	r2,r2,1
   159f8:	18800115 	stw	r2,4(r3)
   159fc:	31400215 	stw	r5,8(r6)
   15a00:	29800315 	stw	r6,12(r5)
   15a04:	001752c0 	call	1752c <__malloc_unlock>
   15a08:	80c00204 	addi	r3,r16,8
   15a0c:	003faa06 	br	158b8 <_malloc_r+0x50>
   15a10:	00800104 	movi	r2,4
   15a14:	10c0052e 	bgeu	r2,r3,15a2c <_malloc_r+0x1c4>
   15a18:	00800504 	movi	r2,20
   15a1c:	10c07836 	bltu	r2,r3,15c00 <_malloc_r+0x398>
   15a20:	198016c4 	addi	r6,r3,91
   15a24:	300490fa 	slli	r2,r6,3
   15a28:	003fbc06 	br	1591c <_malloc_r+0xb4>
   15a2c:	8804d1ba 	srli	r2,r17,6
   15a30:	11800e04 	addi	r6,r2,56
   15a34:	300490fa 	slli	r2,r6,3
   15a38:	003fb806 	br	1591c <_malloc_r+0xb4>
   15a3c:	00807fc4 	movi	r2,511
   15a40:	1140bb36 	bltu	r2,r5,15d30 <_malloc_r+0x4c8>
   15a44:	2806d0fa 	srli	r3,r5,3
   15a48:	573ffe04 	addi	fp,r10,-8
   15a4c:	00800044 	movi	r2,1
   15a50:	180890fa 	slli	r4,r3,3
   15a54:	1807d0ba 	srai	r3,r3,2
   15a58:	e1c00117 	ldw	r7,4(fp)
   15a5c:	5909883a 	add	r4,r11,r4
   15a60:	21400217 	ldw	r5,8(r4)
   15a64:	10c4983a 	sll	r2,r2,r3
   15a68:	81000315 	stw	r4,12(r16)
   15a6c:	81400215 	stw	r5,8(r16)
   15a70:	388eb03a 	or	r7,r7,r2
   15a74:	2c000315 	stw	r16,12(r5)
   15a78:	24000215 	stw	r16,8(r4)
   15a7c:	e1c00115 	stw	r7,4(fp)
   15a80:	4807883a 	mov	r3,r9
   15a84:	4800cd16 	blt	r9,zero,15dbc <_malloc_r+0x554>
   15a88:	1807d0ba 	srai	r3,r3,2
   15a8c:	00800044 	movi	r2,1
   15a90:	10c8983a 	sll	r4,r2,r3
   15a94:	39004436 	bltu	r7,r4,15ba8 <_malloc_r+0x340>
   15a98:	21c4703a 	and	r2,r4,r7
   15a9c:	10000a1e 	bne	r2,zero,15ac8 <_malloc_r+0x260>
   15aa0:	2109883a 	add	r4,r4,r4
   15aa4:	00bfff04 	movi	r2,-4
   15aa8:	4884703a 	and	r2,r9,r2
   15aac:	3906703a 	and	r3,r7,r4
   15ab0:	12400104 	addi	r9,r2,4
   15ab4:	1800041e 	bne	r3,zero,15ac8 <_malloc_r+0x260>
   15ab8:	2109883a 	add	r4,r4,r4
   15abc:	3904703a 	and	r2,r7,r4
   15ac0:	4a400104 	addi	r9,r9,4
   15ac4:	103ffc26 	beq	r2,zero,15ab8 <_malloc_r+0x250>
   15ac8:	480490fa 	slli	r2,r9,3
   15acc:	4819883a 	mov	r12,r9
   15ad0:	023fff04 	movi	r8,-4
   15ad4:	589b883a 	add	r13,r11,r2
   15ad8:	6807883a 	mov	r3,r13
   15adc:	014003c4 	movi	r5,15
   15ae0:	1c000317 	ldw	r16,12(r3)
   15ae4:	1c00041e 	bne	r3,r16,15af8 <_malloc_r+0x290>
   15ae8:	0000a706 	br	15d88 <_malloc_r+0x520>
   15aec:	3000ab0e 	bge	r6,zero,15d9c <_malloc_r+0x534>
   15af0:	84000317 	ldw	r16,12(r16)
   15af4:	1c00a426 	beq	r3,r16,15d88 <_malloc_r+0x520>
   15af8:	80800117 	ldw	r2,4(r16)
   15afc:	1204703a 	and	r2,r2,r8
   15b00:	144dc83a 	sub	r6,r2,r17
   15b04:	29bff90e 	bge	r5,r6,15aec <_malloc_r+0x284>
   15b08:	81000317 	ldw	r4,12(r16)
   15b0c:	80c00217 	ldw	r3,8(r16)
   15b10:	89400054 	ori	r5,r17,1
   15b14:	8445883a 	add	r2,r16,r17
   15b18:	20c00215 	stw	r3,8(r4)
   15b1c:	19000315 	stw	r4,12(r3)
   15b20:	81400115 	stw	r5,4(r16)
   15b24:	1187883a 	add	r3,r2,r6
   15b28:	31000054 	ori	r4,r6,1
   15b2c:	50800315 	stw	r2,12(r10)
   15b30:	50800215 	stw	r2,8(r10)
   15b34:	19800015 	stw	r6,0(r3)
   15b38:	11000115 	stw	r4,4(r2)
   15b3c:	12800215 	stw	r10,8(r2)
   15b40:	12800315 	stw	r10,12(r2)
   15b44:	9009883a 	mov	r4,r18
   15b48:	001752c0 	call	1752c <__malloc_unlock>
   15b4c:	80c00204 	addi	r3,r16,8
   15b50:	003f5906 	br	158b8 <_malloc_r+0x50>
   15b54:	8109883a 	add	r4,r16,r4
   15b58:	20800117 	ldw	r2,4(r4)
   15b5c:	80c00217 	ldw	r3,8(r16)
   15b60:	81400317 	ldw	r5,12(r16)
   15b64:	10800054 	ori	r2,r2,1
   15b68:	20800115 	stw	r2,4(r4)
   15b6c:	28c00215 	stw	r3,8(r5)
   15b70:	19400315 	stw	r5,12(r3)
   15b74:	9009883a 	mov	r4,r18
   15b78:	001752c0 	call	1752c <__malloc_unlock>
   15b7c:	80c00204 	addi	r3,r16,8
   15b80:	003f4d06 	br	158b8 <_malloc_r+0x50>
   15b84:	80800204 	addi	r2,r16,8
   15b88:	14000317 	ldw	r16,12(r2)
   15b8c:	143f911e 	bne	r2,r16,159d4 <_malloc_r+0x16c>
   15b90:	1a400084 	addi	r9,r3,2
   15b94:	003f7306 	br	15964 <_malloc_r+0xfc>
   15b98:	88c00054 	ori	r3,r17,1
   15b9c:	8445883a 	add	r2,r16,r17
   15ba0:	80c00115 	stw	r3,4(r16)
   15ba4:	003fdf06 	br	15b24 <_malloc_r+0x2bc>
   15ba8:	e4000217 	ldw	r16,8(fp)
   15bac:	00bfff04 	movi	r2,-4
   15bb0:	80c00117 	ldw	r3,4(r16)
   15bb4:	802d883a 	mov	r22,r16
   15bb8:	18aa703a 	and	r21,r3,r2
   15bbc:	ac401636 	bltu	r21,r17,15c18 <_malloc_r+0x3b0>
   15bc0:	ac49c83a 	sub	r4,r21,r17
   15bc4:	008003c4 	movi	r2,15
   15bc8:	1100130e 	bge	r2,r4,15c18 <_malloc_r+0x3b0>
   15bcc:	88800054 	ori	r2,r17,1
   15bd0:	8447883a 	add	r3,r16,r17
   15bd4:	80800115 	stw	r2,4(r16)
   15bd8:	20800054 	ori	r2,r4,1
   15bdc:	18800115 	stw	r2,4(r3)
   15be0:	e0c00215 	stw	r3,8(fp)
   15be4:	9009883a 	mov	r4,r18
   15be8:	001752c0 	call	1752c <__malloc_unlock>
   15bec:	80c00204 	addi	r3,r16,8
   15bf0:	003f3106 	br	158b8 <_malloc_r+0x50>
   15bf4:	39c00117 	ldw	r7,4(r7)
   15bf8:	573ffe04 	addi	fp,r10,-8
   15bfc:	003fa006 	br	15a80 <_malloc_r+0x218>
   15c00:	00801504 	movi	r2,84
   15c04:	10c06736 	bltu	r2,r3,15da4 <_malloc_r+0x53c>
   15c08:	8804d33a 	srli	r2,r17,12
   15c0c:	11801b84 	addi	r6,r2,110
   15c10:	300490fa 	slli	r2,r6,3
   15c14:	003f4106 	br	1591c <_malloc_r+0xb4>
   15c18:	d0a1cc17 	ldw	r2,-30928(gp)
   15c1c:	d0e00317 	ldw	r3,-32756(gp)
   15c20:	053fffc4 	movi	r20,-1
   15c24:	10800404 	addi	r2,r2,16
   15c28:	88a7883a 	add	r19,r17,r2
   15c2c:	1d000326 	beq	r3,r20,15c3c <_malloc_r+0x3d4>
   15c30:	98c01fc4 	addi	r3,r19,127
   15c34:	00bfe004 	movi	r2,-128
   15c38:	18a6703a 	and	r19,r3,r2
   15c3c:	9009883a 	mov	r4,r18
   15c40:	980b883a 	mov	r5,r19
   15c44:	00160540 	call	16054 <_sbrk_r>
   15c48:	1009883a 	mov	r4,r2
   15c4c:	15000426 	beq	r2,r20,15c60 <_malloc_r+0x3f8>
   15c50:	854b883a 	add	r5,r16,r21
   15c54:	1029883a 	mov	r20,r2
   15c58:	11405a2e 	bgeu	r2,r5,15dc4 <_malloc_r+0x55c>
   15c5c:	87000c26 	beq	r16,fp,15c90 <_malloc_r+0x428>
   15c60:	e4000217 	ldw	r16,8(fp)
   15c64:	80c00117 	ldw	r3,4(r16)
   15c68:	00bfff04 	movi	r2,-4
   15c6c:	1884703a 	and	r2,r3,r2
   15c70:	14400336 	bltu	r2,r17,15c80 <_malloc_r+0x418>
   15c74:	1449c83a 	sub	r4,r2,r17
   15c78:	008003c4 	movi	r2,15
   15c7c:	113fd316 	blt	r2,r4,15bcc <_malloc_r+0x364>
   15c80:	9009883a 	mov	r4,r18
   15c84:	001752c0 	call	1752c <__malloc_unlock>
   15c88:	0007883a 	mov	r3,zero
   15c8c:	003f0a06 	br	158b8 <_malloc_r+0x50>
   15c90:	05c000b4 	movhi	r23,2
   15c94:	bde7fc04 	addi	r23,r23,-24592
   15c98:	b8800017 	ldw	r2,0(r23)
   15c9c:	988d883a 	add	r6,r19,r2
   15ca0:	b9800015 	stw	r6,0(r23)
   15ca4:	d0e00317 	ldw	r3,-32756(gp)
   15ca8:	00bfffc4 	movi	r2,-1
   15cac:	18808e26 	beq	r3,r2,15ee8 <_malloc_r+0x680>
   15cb0:	2145c83a 	sub	r2,r4,r5
   15cb4:	3085883a 	add	r2,r6,r2
   15cb8:	b8800015 	stw	r2,0(r23)
   15cbc:	20c001cc 	andi	r3,r4,7
   15cc0:	18005f1e 	bne	r3,zero,15e40 <_malloc_r+0x5d8>
   15cc4:	000b883a 	mov	r5,zero
   15cc8:	a4c5883a 	add	r2,r20,r19
   15ccc:	10801fcc 	andi	r2,r2,127
   15cd0:	00c02004 	movi	r3,128
   15cd4:	1887c83a 	sub	r3,r3,r2
   15cd8:	28e7883a 	add	r19,r5,r3
   15cdc:	9009883a 	mov	r4,r18
   15ce0:	980b883a 	mov	r5,r19
   15ce4:	00160540 	call	16054 <_sbrk_r>
   15ce8:	1007883a 	mov	r3,r2
   15cec:	00bfffc4 	movi	r2,-1
   15cf0:	18807a26 	beq	r3,r2,15edc <_malloc_r+0x674>
   15cf4:	1d05c83a 	sub	r2,r3,r20
   15cf8:	9885883a 	add	r2,r19,r2
   15cfc:	10c00054 	ori	r3,r2,1
   15d00:	b8800017 	ldw	r2,0(r23)
   15d04:	a021883a 	mov	r16,r20
   15d08:	a0c00115 	stw	r3,4(r20)
   15d0c:	9885883a 	add	r2,r19,r2
   15d10:	b8800015 	stw	r2,0(r23)
   15d14:	e5000215 	stw	r20,8(fp)
   15d18:	b7003626 	beq	r22,fp,15df4 <_malloc_r+0x58c>
   15d1c:	018003c4 	movi	r6,15
   15d20:	35404b36 	bltu	r6,r21,15e50 <_malloc_r+0x5e8>
   15d24:	00800044 	movi	r2,1
   15d28:	a0800115 	stw	r2,4(r20)
   15d2c:	003fcd06 	br	15c64 <_malloc_r+0x3fc>
   15d30:	2808d27a 	srli	r4,r5,9
   15d34:	2000371e 	bne	r4,zero,15e14 <_malloc_r+0x5ac>
   15d38:	2808d0fa 	srli	r4,r5,3
   15d3c:	200690fa 	slli	r3,r4,3
   15d40:	58d1883a 	add	r8,r11,r3
   15d44:	41800217 	ldw	r6,8(r8)
   15d48:	41805b26 	beq	r8,r6,15eb8 <_malloc_r+0x650>
   15d4c:	30800117 	ldw	r2,4(r6)
   15d50:	00ffff04 	movi	r3,-4
   15d54:	10c4703a 	and	r2,r2,r3
   15d58:	2880022e 	bgeu	r5,r2,15d64 <_malloc_r+0x4fc>
   15d5c:	31800217 	ldw	r6,8(r6)
   15d60:	41bffa1e 	bne	r8,r6,15d4c <_malloc_r+0x4e4>
   15d64:	32000317 	ldw	r8,12(r6)
   15d68:	39c00117 	ldw	r7,4(r7)
   15d6c:	82000315 	stw	r8,12(r16)
   15d70:	81800215 	stw	r6,8(r16)
   15d74:	070000b4 	movhi	fp,2
   15d78:	e724b004 	addi	fp,fp,-27968
   15d7c:	34000315 	stw	r16,12(r6)
   15d80:	44000215 	stw	r16,8(r8)
   15d84:	003f3e06 	br	15a80 <_malloc_r+0x218>
   15d88:	63000044 	addi	r12,r12,1
   15d8c:	608000cc 	andi	r2,r12,3
   15d90:	10005d26 	beq	r2,zero,15f08 <_malloc_r+0x6a0>
   15d94:	18c00204 	addi	r3,r3,8
   15d98:	003f5106 	br	15ae0 <_malloc_r+0x278>
   15d9c:	8089883a 	add	r4,r16,r2
   15da0:	003f6d06 	br	15b58 <_malloc_r+0x2f0>
   15da4:	00805504 	movi	r2,340
   15da8:	10c02036 	bltu	r2,r3,15e2c <_malloc_r+0x5c4>
   15dac:	8804d3fa 	srli	r2,r17,15
   15db0:	11801dc4 	addi	r6,r2,119
   15db4:	300490fa 	slli	r2,r6,3
   15db8:	003ed806 	br	1591c <_malloc_r+0xb4>
   15dbc:	48c000c4 	addi	r3,r9,3
   15dc0:	003f3106 	br	15a88 <_malloc_r+0x220>
   15dc4:	05c000b4 	movhi	r23,2
   15dc8:	bde7fc04 	addi	r23,r23,-24592
   15dcc:	b8800017 	ldw	r2,0(r23)
   15dd0:	988d883a 	add	r6,r19,r2
   15dd4:	b9800015 	stw	r6,0(r23)
   15dd8:	293fb21e 	bne	r5,r4,15ca4 <_malloc_r+0x43c>
   15ddc:	20801fcc 	andi	r2,r4,127
   15de0:	103fb01e 	bne	r2,zero,15ca4 <_malloc_r+0x43c>
   15de4:	e4000217 	ldw	r16,8(fp)
   15de8:	9d45883a 	add	r2,r19,r21
   15dec:	10800054 	ori	r2,r2,1
   15df0:	80800115 	stw	r2,4(r16)
   15df4:	b8c00017 	ldw	r3,0(r23)
   15df8:	d0a1cd17 	ldw	r2,-30924(gp)
   15dfc:	10c0012e 	bgeu	r2,r3,15e04 <_malloc_r+0x59c>
   15e00:	d0e1cd15 	stw	r3,-30924(gp)
   15e04:	d0a1ce17 	ldw	r2,-30920(gp)
   15e08:	10ff962e 	bgeu	r2,r3,15c64 <_malloc_r+0x3fc>
   15e0c:	d0e1ce15 	stw	r3,-30920(gp)
   15e10:	003f9406 	br	15c64 <_malloc_r+0x3fc>
   15e14:	00800104 	movi	r2,4
   15e18:	11001e36 	bltu	r2,r4,15e94 <_malloc_r+0x62c>
   15e1c:	2804d1ba 	srli	r2,r5,6
   15e20:	11000e04 	addi	r4,r2,56
   15e24:	200690fa 	slli	r3,r4,3
   15e28:	003fc506 	br	15d40 <_malloc_r+0x4d8>
   15e2c:	00815504 	movi	r2,1364
   15e30:	10c01d2e 	bgeu	r2,r3,15ea8 <_malloc_r+0x640>
   15e34:	01801f84 	movi	r6,126
   15e38:	0080fc04 	movi	r2,1008
   15e3c:	003eb706 	br	1591c <_malloc_r+0xb4>
   15e40:	00800204 	movi	r2,8
   15e44:	10cbc83a 	sub	r5,r2,r3
   15e48:	2169883a 	add	r20,r4,r5
   15e4c:	003f9e06 	br	15cc8 <_malloc_r+0x460>
   15e50:	00bffe04 	movi	r2,-8
   15e54:	a93ffd04 	addi	r4,r21,-12
   15e58:	2088703a 	and	r4,r4,r2
   15e5c:	b10b883a 	add	r5,r22,r4
   15e60:	00c00144 	movi	r3,5
   15e64:	28c00215 	stw	r3,8(r5)
   15e68:	28c00115 	stw	r3,4(r5)
   15e6c:	b0800117 	ldw	r2,4(r22)
   15e70:	1080004c 	andi	r2,r2,1
   15e74:	2084b03a 	or	r2,r4,r2
   15e78:	b0800115 	stw	r2,4(r22)
   15e7c:	313fdd2e 	bgeu	r6,r4,15df4 <_malloc_r+0x58c>
   15e80:	b1400204 	addi	r5,r22,8
   15e84:	9009883a 	mov	r4,r18
   15e88:	001552c0 	call	1552c <_free_r>
   15e8c:	e4000217 	ldw	r16,8(fp)
   15e90:	003fd806 	br	15df4 <_malloc_r+0x58c>
   15e94:	00800504 	movi	r2,20
   15e98:	11001536 	bltu	r2,r4,15ef0 <_malloc_r+0x688>
   15e9c:	210016c4 	addi	r4,r4,91
   15ea0:	200690fa 	slli	r3,r4,3
   15ea4:	003fa606 	br	15d40 <_malloc_r+0x4d8>
   15ea8:	8804d4ba 	srli	r2,r17,18
   15eac:	11801f04 	addi	r6,r2,124
   15eb0:	300490fa 	slli	r2,r6,3
   15eb4:	003e9906 	br	1591c <_malloc_r+0xb4>
   15eb8:	2009d0ba 	srai	r4,r4,2
   15ebc:	014000b4 	movhi	r5,2
   15ec0:	2964b004 	addi	r5,r5,-27968
   15ec4:	00c00044 	movi	r3,1
   15ec8:	28800117 	ldw	r2,4(r5)
   15ecc:	1906983a 	sll	r3,r3,r4
   15ed0:	10c4b03a 	or	r2,r2,r3
   15ed4:	28800115 	stw	r2,4(r5)
   15ed8:	003fa306 	br	15d68 <_malloc_r+0x500>
   15edc:	0027883a 	mov	r19,zero
   15ee0:	00c00044 	movi	r3,1
   15ee4:	003f8606 	br	15d00 <_malloc_r+0x498>
   15ee8:	d1200315 	stw	r4,-32756(gp)
   15eec:	003f7306 	br	15cbc <_malloc_r+0x454>
   15ef0:	00801504 	movi	r2,84
   15ef4:	11001936 	bltu	r2,r4,15f5c <_malloc_r+0x6f4>
   15ef8:	2804d33a 	srli	r2,r5,12
   15efc:	11001b84 	addi	r4,r2,110
   15f00:	200690fa 	slli	r3,r4,3
   15f04:	003f8e06 	br	15d40 <_malloc_r+0x4d8>
   15f08:	480b883a 	mov	r5,r9
   15f0c:	6807883a 	mov	r3,r13
   15f10:	288000cc 	andi	r2,r5,3
   15f14:	18fffe04 	addi	r3,r3,-8
   15f18:	297fffc4 	addi	r5,r5,-1
   15f1c:	10001526 	beq	r2,zero,15f74 <_malloc_r+0x70c>
   15f20:	18800217 	ldw	r2,8(r3)
   15f24:	10fffa26 	beq	r2,r3,15f10 <_malloc_r+0x6a8>
   15f28:	2109883a 	add	r4,r4,r4
   15f2c:	393f1e36 	bltu	r7,r4,15ba8 <_malloc_r+0x340>
   15f30:	203f1d26 	beq	r4,zero,15ba8 <_malloc_r+0x340>
   15f34:	21c4703a 	and	r2,r4,r7
   15f38:	10000226 	beq	r2,zero,15f44 <_malloc_r+0x6dc>
   15f3c:	6013883a 	mov	r9,r12
   15f40:	003ee106 	br	15ac8 <_malloc_r+0x260>
   15f44:	2109883a 	add	r4,r4,r4
   15f48:	3904703a 	and	r2,r7,r4
   15f4c:	63000104 	addi	r12,r12,4
   15f50:	103ffc26 	beq	r2,zero,15f44 <_malloc_r+0x6dc>
   15f54:	6013883a 	mov	r9,r12
   15f58:	003edb06 	br	15ac8 <_malloc_r+0x260>
   15f5c:	00805504 	movi	r2,340
   15f60:	11000836 	bltu	r2,r4,15f84 <_malloc_r+0x71c>
   15f64:	2804d3fa 	srli	r2,r5,15
   15f68:	11001dc4 	addi	r4,r2,119
   15f6c:	200690fa 	slli	r3,r4,3
   15f70:	003f7306 	br	15d40 <_malloc_r+0x4d8>
   15f74:	0104303a 	nor	r2,zero,r4
   15f78:	388e703a 	and	r7,r7,r2
   15f7c:	e1c00115 	stw	r7,4(fp)
   15f80:	003fe906 	br	15f28 <_malloc_r+0x6c0>
   15f84:	00815504 	movi	r2,1364
   15f88:	1100032e 	bgeu	r2,r4,15f98 <_malloc_r+0x730>
   15f8c:	01001f84 	movi	r4,126
   15f90:	00c0fc04 	movi	r3,1008
   15f94:	003f6a06 	br	15d40 <_malloc_r+0x4d8>
   15f98:	2804d4ba 	srli	r2,r5,18
   15f9c:	11001f04 	addi	r4,r2,124
   15fa0:	200690fa 	slli	r3,r4,3
   15fa4:	003f6606 	br	15d40 <_malloc_r+0x4d8>

00015fa8 <memcpy>:
   15fa8:	2011883a 	mov	r8,r4
   15fac:	30000726 	beq	r6,zero,15fcc <memcpy+0x24>
   15fb0:	000f883a 	mov	r7,zero
   15fb4:	29c5883a 	add	r2,r5,r7
   15fb8:	11000003 	ldbu	r4,0(r2)
   15fbc:	41c7883a 	add	r3,r8,r7
   15fc0:	39c00044 	addi	r7,r7,1
   15fc4:	19000005 	stb	r4,0(r3)
   15fc8:	39bffa1e 	bne	r7,r6,15fb4 <memcpy+0xc>
   15fcc:	4005883a 	mov	r2,r8
   15fd0:	f800283a 	ret

00015fd4 <memmove>:
   15fd4:	2011883a 	mov	r8,r4
   15fd8:	2900022e 	bgeu	r5,r4,15fe4 <memmove+0x10>
   15fdc:	2989883a 	add	r4,r5,r6
   15fe0:	41000a36 	bltu	r8,r4,1600c <memmove+0x38>
   15fe4:	30000726 	beq	r6,zero,16004 <memmove+0x30>
   15fe8:	000f883a 	mov	r7,zero
   15fec:	29c5883a 	add	r2,r5,r7
   15ff0:	11000003 	ldbu	r4,0(r2)
   15ff4:	3a07883a 	add	r3,r7,r8
   15ff8:	39c00044 	addi	r7,r7,1
   15ffc:	19000005 	stb	r4,0(r3)
   16000:	31fffa1e 	bne	r6,r7,15fec <memmove+0x18>
   16004:	4005883a 	mov	r2,r8
   16008:	f800283a 	ret
   1600c:	303ffd26 	beq	r6,zero,16004 <memmove+0x30>
   16010:	4187883a 	add	r3,r8,r6
   16014:	198dc83a 	sub	r6,r3,r6
   16018:	213fffc4 	addi	r4,r4,-1
   1601c:	20800003 	ldbu	r2,0(r4)
   16020:	18ffffc4 	addi	r3,r3,-1
   16024:	18800005 	stb	r2,0(r3)
   16028:	19bffb1e 	bne	r3,r6,16018 <memmove+0x44>
   1602c:	4005883a 	mov	r2,r8
   16030:	f800283a 	ret

00016034 <memset>:
   16034:	30000526 	beq	r6,zero,1604c <memset+0x18>
   16038:	310d883a 	add	r6,r6,r4
   1603c:	2005883a 	mov	r2,r4
   16040:	11400005 	stb	r5,0(r2)
   16044:	10800044 	addi	r2,r2,1
   16048:	11bffd1e 	bne	r2,r6,16040 <memset+0xc>
   1604c:	2005883a 	mov	r2,r4
   16050:	f800283a 	ret

00016054 <_sbrk_r>:
   16054:	defffd04 	addi	sp,sp,-12
   16058:	dc000015 	stw	r16,0(sp)
   1605c:	040000b4 	movhi	r16,2
   16060:	8427f204 	addi	r16,r16,-24632
   16064:	dc400115 	stw	r17,4(sp)
   16068:	80000015 	stw	zero,0(r16)
   1606c:	2023883a 	mov	r17,r4
   16070:	2809883a 	mov	r4,r5
   16074:	dfc00215 	stw	ra,8(sp)
   16078:	001758c0 	call	1758c <sbrk>
   1607c:	1007883a 	mov	r3,r2
   16080:	00bfffc4 	movi	r2,-1
   16084:	18800626 	beq	r3,r2,160a0 <_sbrk_r+0x4c>
   16088:	1805883a 	mov	r2,r3
   1608c:	dfc00217 	ldw	ra,8(sp)
   16090:	dc400117 	ldw	r17,4(sp)
   16094:	dc000017 	ldw	r16,0(sp)
   16098:	dec00304 	addi	sp,sp,12
   1609c:	f800283a 	ret
   160a0:	80800017 	ldw	r2,0(r16)
   160a4:	103ff826 	beq	r2,zero,16088 <_sbrk_r+0x34>
   160a8:	88800015 	stw	r2,0(r17)
   160ac:	1805883a 	mov	r2,r3
   160b0:	dfc00217 	ldw	ra,8(sp)
   160b4:	dc400117 	ldw	r17,4(sp)
   160b8:	dc000017 	ldw	r16,0(sp)
   160bc:	dec00304 	addi	sp,sp,12
   160c0:	f800283a 	ret

000160c4 <__extendsfdf2>:
   160c4:	defff904 	addi	sp,sp,-28
   160c8:	d9000115 	stw	r4,4(sp)
   160cc:	d9400204 	addi	r5,sp,8
   160d0:	d9000104 	addi	r4,sp,4
   160d4:	dfc00615 	stw	ra,24(sp)
   160d8:	00110dc0 	call	110dc <__unpack_f>
   160dc:	d9c00517 	ldw	r7,20(sp)
   160e0:	0011883a 	mov	r8,zero
   160e4:	400697ba 	slli	r3,r8,30
   160e8:	3812d0ba 	srli	r9,r7,2
   160ec:	380497ba 	slli	r2,r7,30
   160f0:	d9000217 	ldw	r4,8(sp)
   160f4:	d9400317 	ldw	r5,12(sp)
   160f8:	d9800417 	ldw	r6,16(sp)
   160fc:	48c6b03a 	or	r3,r9,r3
   16100:	100f883a 	mov	r7,r2
   16104:	d8c00015 	stw	r3,0(sp)
   16108:	00170400 	call	17040 <__make_dp>
   1610c:	dfc00617 	ldw	ra,24(sp)
   16110:	dec00704 	addi	sp,sp,28
   16114:	f800283a 	ret

00016118 <_fpadd_parts>:
   16118:	defff804 	addi	sp,sp,-32
   1611c:	dcc00315 	stw	r19,12(sp)
   16120:	2027883a 	mov	r19,r4
   16124:	21000017 	ldw	r4,0(r4)
   16128:	00c00044 	movi	r3,1
   1612c:	dd400515 	stw	r21,20(sp)
   16130:	dd000415 	stw	r20,16(sp)
   16134:	ddc00715 	stw	r23,28(sp)
   16138:	dd800615 	stw	r22,24(sp)
   1613c:	dc800215 	stw	r18,8(sp)
   16140:	dc400115 	stw	r17,4(sp)
   16144:	dc000015 	stw	r16,0(sp)
   16148:	282b883a 	mov	r21,r5
   1614c:	3029883a 	mov	r20,r6
   16150:	1900632e 	bgeu	r3,r4,162e0 <_fpadd_parts+0x1c8>
   16154:	28800017 	ldw	r2,0(r5)
   16158:	1880812e 	bgeu	r3,r2,16360 <_fpadd_parts+0x248>
   1615c:	00c00104 	movi	r3,4
   16160:	20c0dc26 	beq	r4,r3,164d4 <_fpadd_parts+0x3bc>
   16164:	10c07e26 	beq	r2,r3,16360 <_fpadd_parts+0x248>
   16168:	00c00084 	movi	r3,2
   1616c:	10c06726 	beq	r2,r3,1630c <_fpadd_parts+0x1f4>
   16170:	20c07b26 	beq	r4,r3,16360 <_fpadd_parts+0x248>
   16174:	9dc00217 	ldw	r23,8(r19)
   16178:	28c00217 	ldw	r3,8(r5)
   1617c:	9c400317 	ldw	r17,12(r19)
   16180:	2bc00317 	ldw	r15,12(r5)
   16184:	b8cdc83a 	sub	r6,r23,r3
   16188:	9c800417 	ldw	r18,16(r19)
   1618c:	2c000417 	ldw	r16,16(r5)
   16190:	3009883a 	mov	r4,r6
   16194:	30009716 	blt	r6,zero,163f4 <_fpadd_parts+0x2dc>
   16198:	00800fc4 	movi	r2,63
   1619c:	11806b16 	blt	r2,r6,1634c <_fpadd_parts+0x234>
   161a0:	0100a40e 	bge	zero,r4,16434 <_fpadd_parts+0x31c>
   161a4:	35bff804 	addi	r22,r6,-32
   161a8:	b000bc16 	blt	r22,zero,1649c <_fpadd_parts+0x384>
   161ac:	8596d83a 	srl	r11,r16,r22
   161b0:	0019883a 	mov	r12,zero
   161b4:	0013883a 	mov	r9,zero
   161b8:	01000044 	movi	r4,1
   161bc:	0015883a 	mov	r10,zero
   161c0:	b000be16 	blt	r22,zero,164bc <_fpadd_parts+0x3a4>
   161c4:	2590983a 	sll	r8,r4,r22
   161c8:	000f883a 	mov	r7,zero
   161cc:	00bfffc4 	movi	r2,-1
   161d0:	3889883a 	add	r4,r7,r2
   161d4:	408b883a 	add	r5,r8,r2
   161d8:	21cd803a 	cmpltu	r6,r4,r7
   161dc:	314b883a 	add	r5,r6,r5
   161e0:	7904703a 	and	r2,r15,r4
   161e4:	8146703a 	and	r3,r16,r5
   161e8:	10c4b03a 	or	r2,r2,r3
   161ec:	10000226 	beq	r2,zero,161f8 <_fpadd_parts+0xe0>
   161f0:	02400044 	movi	r9,1
   161f4:	0015883a 	mov	r10,zero
   161f8:	5a5eb03a 	or	r15,r11,r9
   161fc:	62a0b03a 	or	r16,r12,r10
   16200:	99400117 	ldw	r5,4(r19)
   16204:	a8800117 	ldw	r2,4(r21)
   16208:	28806e26 	beq	r5,r2,163c4 <_fpadd_parts+0x2ac>
   1620c:	28006626 	beq	r5,zero,163a8 <_fpadd_parts+0x290>
   16210:	7c45c83a 	sub	r2,r15,r17
   16214:	7889803a 	cmpltu	r4,r15,r2
   16218:	8487c83a 	sub	r3,r16,r18
   1621c:	1909c83a 	sub	r4,r3,r4
   16220:	100d883a 	mov	r6,r2
   16224:	200f883a 	mov	r7,r4
   16228:	38007716 	blt	r7,zero,16408 <_fpadd_parts+0x2f0>
   1622c:	a5c00215 	stw	r23,8(r20)
   16230:	a1c00415 	stw	r7,16(r20)
   16234:	a0000115 	stw	zero,4(r20)
   16238:	a1800315 	stw	r6,12(r20)
   1623c:	a2000317 	ldw	r8,12(r20)
   16240:	a2400417 	ldw	r9,16(r20)
   16244:	00bfffc4 	movi	r2,-1
   16248:	408b883a 	add	r5,r8,r2
   1624c:	2a09803a 	cmpltu	r4,r5,r8
   16250:	488d883a 	add	r6,r9,r2
   16254:	01c40034 	movhi	r7,4096
   16258:	39ffffc4 	addi	r7,r7,-1
   1625c:	218d883a 	add	r6,r4,r6
   16260:	39801736 	bltu	r7,r6,162c0 <_fpadd_parts+0x1a8>
   16264:	31c06526 	beq	r6,r7,163fc <_fpadd_parts+0x2e4>
   16268:	a3000217 	ldw	r12,8(r20)
   1626c:	4209883a 	add	r4,r8,r8
   16270:	00bfffc4 	movi	r2,-1
   16274:	220f803a 	cmpltu	r7,r4,r8
   16278:	4a4b883a 	add	r5,r9,r9
   1627c:	394f883a 	add	r7,r7,r5
   16280:	2095883a 	add	r10,r4,r2
   16284:	3897883a 	add	r11,r7,r2
   16288:	510d803a 	cmpltu	r6,r10,r4
   1628c:	6099883a 	add	r12,r12,r2
   16290:	32d7883a 	add	r11,r6,r11
   16294:	00840034 	movhi	r2,4096
   16298:	10bfffc4 	addi	r2,r2,-1
   1629c:	2011883a 	mov	r8,r4
   162a0:	3813883a 	mov	r9,r7
   162a4:	a1000315 	stw	r4,12(r20)
   162a8:	a1c00415 	stw	r7,16(r20)
   162ac:	a3000215 	stw	r12,8(r20)
   162b0:	12c00336 	bltu	r2,r11,162c0 <_fpadd_parts+0x1a8>
   162b4:	58bfed1e 	bne	r11,r2,1626c <_fpadd_parts+0x154>
   162b8:	00bfff84 	movi	r2,-2
   162bc:	12bfeb2e 	bgeu	r2,r10,1626c <_fpadd_parts+0x154>
   162c0:	a2800417 	ldw	r10,16(r20)
   162c4:	008000c4 	movi	r2,3
   162c8:	00c80034 	movhi	r3,8192
   162cc:	18ffffc4 	addi	r3,r3,-1
   162d0:	a2400317 	ldw	r9,12(r20)
   162d4:	a0800015 	stw	r2,0(r20)
   162d8:	1a802336 	bltu	r3,r10,16368 <_fpadd_parts+0x250>
   162dc:	a027883a 	mov	r19,r20
   162e0:	9805883a 	mov	r2,r19
   162e4:	ddc00717 	ldw	r23,28(sp)
   162e8:	dd800617 	ldw	r22,24(sp)
   162ec:	dd400517 	ldw	r21,20(sp)
   162f0:	dd000417 	ldw	r20,16(sp)
   162f4:	dcc00317 	ldw	r19,12(sp)
   162f8:	dc800217 	ldw	r18,8(sp)
   162fc:	dc400117 	ldw	r17,4(sp)
   16300:	dc000017 	ldw	r16,0(sp)
   16304:	dec00804 	addi	sp,sp,32
   16308:	f800283a 	ret
   1630c:	20fff41e 	bne	r4,r3,162e0 <_fpadd_parts+0x1c8>
   16310:	31000015 	stw	r4,0(r6)
   16314:	98800117 	ldw	r2,4(r19)
   16318:	30800115 	stw	r2,4(r6)
   1631c:	98c00217 	ldw	r3,8(r19)
   16320:	30c00215 	stw	r3,8(r6)
   16324:	98800317 	ldw	r2,12(r19)
   16328:	30800315 	stw	r2,12(r6)
   1632c:	98c00417 	ldw	r3,16(r19)
   16330:	30c00415 	stw	r3,16(r6)
   16334:	98800117 	ldw	r2,4(r19)
   16338:	28c00117 	ldw	r3,4(r5)
   1633c:	3027883a 	mov	r19,r6
   16340:	10c4703a 	and	r2,r2,r3
   16344:	30800115 	stw	r2,4(r6)
   16348:	003fe506 	br	162e0 <_fpadd_parts+0x1c8>
   1634c:	1dc02616 	blt	r3,r23,163e8 <_fpadd_parts+0x2d0>
   16350:	0023883a 	mov	r17,zero
   16354:	182f883a 	mov	r23,r3
   16358:	0025883a 	mov	r18,zero
   1635c:	003fa806 	br	16200 <_fpadd_parts+0xe8>
   16360:	a827883a 	mov	r19,r21
   16364:	003fde06 	br	162e0 <_fpadd_parts+0x1c8>
   16368:	01800044 	movi	r6,1
   1636c:	500497fa 	slli	r2,r10,31
   16370:	4808d07a 	srli	r4,r9,1
   16374:	518ad83a 	srl	r5,r10,r6
   16378:	a2000217 	ldw	r8,8(r20)
   1637c:	1108b03a 	or	r4,r2,r4
   16380:	0007883a 	mov	r3,zero
   16384:	4984703a 	and	r2,r9,r6
   16388:	208cb03a 	or	r6,r4,r2
   1638c:	28ceb03a 	or	r7,r5,r3
   16390:	42000044 	addi	r8,r8,1
   16394:	a027883a 	mov	r19,r20
   16398:	a1c00415 	stw	r7,16(r20)
   1639c:	a2000215 	stw	r8,8(r20)
   163a0:	a1800315 	stw	r6,12(r20)
   163a4:	003fce06 	br	162e0 <_fpadd_parts+0x1c8>
   163a8:	8bc5c83a 	sub	r2,r17,r15
   163ac:	8889803a 	cmpltu	r4,r17,r2
   163b0:	9407c83a 	sub	r3,r18,r16
   163b4:	1909c83a 	sub	r4,r3,r4
   163b8:	100d883a 	mov	r6,r2
   163bc:	200f883a 	mov	r7,r4
   163c0:	003f9906 	br	16228 <_fpadd_parts+0x110>
   163c4:	7c45883a 	add	r2,r15,r17
   163c8:	13c9803a 	cmpltu	r4,r2,r15
   163cc:	8487883a 	add	r3,r16,r18
   163d0:	20c9883a 	add	r4,r4,r3
   163d4:	a1400115 	stw	r5,4(r20)
   163d8:	a5c00215 	stw	r23,8(r20)
   163dc:	a0800315 	stw	r2,12(r20)
   163e0:	a1000415 	stw	r4,16(r20)
   163e4:	003fb606 	br	162c0 <_fpadd_parts+0x1a8>
   163e8:	001f883a 	mov	r15,zero
   163ec:	0021883a 	mov	r16,zero
   163f0:	003f8306 	br	16200 <_fpadd_parts+0xe8>
   163f4:	018dc83a 	sub	r6,zero,r6
   163f8:	003f6706 	br	16198 <_fpadd_parts+0x80>
   163fc:	00bfff84 	movi	r2,-2
   16400:	117faf36 	bltu	r2,r5,162c0 <_fpadd_parts+0x1a8>
   16404:	003f9806 	br	16268 <_fpadd_parts+0x150>
   16408:	0005883a 	mov	r2,zero
   1640c:	1189c83a 	sub	r4,r2,r6
   16410:	1105803a 	cmpltu	r2,r2,r4
   16414:	01cbc83a 	sub	r5,zero,r7
   16418:	2885c83a 	sub	r2,r5,r2
   1641c:	01800044 	movi	r6,1
   16420:	a1800115 	stw	r6,4(r20)
   16424:	a5c00215 	stw	r23,8(r20)
   16428:	a1000315 	stw	r4,12(r20)
   1642c:	a0800415 	stw	r2,16(r20)
   16430:	003f8206 	br	1623c <_fpadd_parts+0x124>
   16434:	203f7226 	beq	r4,zero,16200 <_fpadd_parts+0xe8>
   16438:	35bff804 	addi	r22,r6,-32
   1643c:	b9af883a 	add	r23,r23,r6
   16440:	b0003116 	blt	r22,zero,16508 <_fpadd_parts+0x3f0>
   16444:	959ad83a 	srl	r13,r18,r22
   16448:	001d883a 	mov	r14,zero
   1644c:	000f883a 	mov	r7,zero
   16450:	01000044 	movi	r4,1
   16454:	0011883a 	mov	r8,zero
   16458:	b0002516 	blt	r22,zero,164f0 <_fpadd_parts+0x3d8>
   1645c:	2594983a 	sll	r10,r4,r22
   16460:	0013883a 	mov	r9,zero
   16464:	00bfffc4 	movi	r2,-1
   16468:	4889883a 	add	r4,r9,r2
   1646c:	508b883a 	add	r5,r10,r2
   16470:	224d803a 	cmpltu	r6,r4,r9
   16474:	314b883a 	add	r5,r6,r5
   16478:	8904703a 	and	r2,r17,r4
   1647c:	9146703a 	and	r3,r18,r5
   16480:	10c4b03a 	or	r2,r2,r3
   16484:	10000226 	beq	r2,zero,16490 <_fpadd_parts+0x378>
   16488:	01c00044 	movi	r7,1
   1648c:	0011883a 	mov	r8,zero
   16490:	69e2b03a 	or	r17,r13,r7
   16494:	7224b03a 	or	r18,r14,r8
   16498:	003f5906 	br	16200 <_fpadd_parts+0xe8>
   1649c:	8407883a 	add	r3,r16,r16
   164a0:	008007c4 	movi	r2,31
   164a4:	1185c83a 	sub	r2,r2,r6
   164a8:	1886983a 	sll	r3,r3,r2
   164ac:	7996d83a 	srl	r11,r15,r6
   164b0:	8198d83a 	srl	r12,r16,r6
   164b4:	1ad6b03a 	or	r11,r3,r11
   164b8:	003f3e06 	br	161b4 <_fpadd_parts+0x9c>
   164bc:	2006d07a 	srli	r3,r4,1
   164c0:	008007c4 	movi	r2,31
   164c4:	1185c83a 	sub	r2,r2,r6
   164c8:	1890d83a 	srl	r8,r3,r2
   164cc:	218e983a 	sll	r7,r4,r6
   164d0:	003f3e06 	br	161cc <_fpadd_parts+0xb4>
   164d4:	113f821e 	bne	r2,r4,162e0 <_fpadd_parts+0x1c8>
   164d8:	28c00117 	ldw	r3,4(r5)
   164dc:	98800117 	ldw	r2,4(r19)
   164e0:	10ff7f26 	beq	r2,r3,162e0 <_fpadd_parts+0x1c8>
   164e4:	04c000b4 	movhi	r19,2
   164e8:	9ce46804 	addi	r19,r19,-28256
   164ec:	003f7c06 	br	162e0 <_fpadd_parts+0x1c8>
   164f0:	2006d07a 	srli	r3,r4,1
   164f4:	008007c4 	movi	r2,31
   164f8:	1185c83a 	sub	r2,r2,r6
   164fc:	1894d83a 	srl	r10,r3,r2
   16500:	2192983a 	sll	r9,r4,r6
   16504:	003fd706 	br	16464 <_fpadd_parts+0x34c>
   16508:	9487883a 	add	r3,r18,r18
   1650c:	008007c4 	movi	r2,31
   16510:	1185c83a 	sub	r2,r2,r6
   16514:	1886983a 	sll	r3,r3,r2
   16518:	899ad83a 	srl	r13,r17,r6
   1651c:	919cd83a 	srl	r14,r18,r6
   16520:	1b5ab03a 	or	r13,r3,r13
   16524:	003fc906 	br	1644c <_fpadd_parts+0x334>

00016528 <__subdf3>:
   16528:	deffea04 	addi	sp,sp,-88
   1652c:	dcc01415 	stw	r19,80(sp)
   16530:	dcc00404 	addi	r19,sp,16
   16534:	2011883a 	mov	r8,r4
   16538:	2813883a 	mov	r9,r5
   1653c:	dc401315 	stw	r17,76(sp)
   16540:	d809883a 	mov	r4,sp
   16544:	980b883a 	mov	r5,r19
   16548:	dc400904 	addi	r17,sp,36
   1654c:	dfc01515 	stw	ra,84(sp)
   16550:	da400115 	stw	r9,4(sp)
   16554:	d9c00315 	stw	r7,12(sp)
   16558:	da000015 	stw	r8,0(sp)
   1655c:	d9800215 	stw	r6,8(sp)
   16560:	00171c40 	call	171c4 <__unpack_d>
   16564:	d9000204 	addi	r4,sp,8
   16568:	880b883a 	mov	r5,r17
   1656c:	00171c40 	call	171c4 <__unpack_d>
   16570:	d8800a17 	ldw	r2,40(sp)
   16574:	880b883a 	mov	r5,r17
   16578:	9809883a 	mov	r4,r19
   1657c:	d9800e04 	addi	r6,sp,56
   16580:	1080005c 	xori	r2,r2,1
   16584:	d8800a15 	stw	r2,40(sp)
   16588:	00161180 	call	16118 <_fpadd_parts>
   1658c:	1009883a 	mov	r4,r2
   16590:	00111a40 	call	111a4 <__pack_d>
   16594:	dfc01517 	ldw	ra,84(sp)
   16598:	dcc01417 	ldw	r19,80(sp)
   1659c:	dc401317 	ldw	r17,76(sp)
   165a0:	dec01604 	addi	sp,sp,88
   165a4:	f800283a 	ret

000165a8 <__adddf3>:
   165a8:	deffea04 	addi	sp,sp,-88
   165ac:	dcc01415 	stw	r19,80(sp)
   165b0:	dcc00404 	addi	r19,sp,16
   165b4:	2011883a 	mov	r8,r4
   165b8:	2813883a 	mov	r9,r5
   165bc:	dc401315 	stw	r17,76(sp)
   165c0:	d809883a 	mov	r4,sp
   165c4:	980b883a 	mov	r5,r19
   165c8:	dc400904 	addi	r17,sp,36
   165cc:	dfc01515 	stw	ra,84(sp)
   165d0:	da400115 	stw	r9,4(sp)
   165d4:	d9c00315 	stw	r7,12(sp)
   165d8:	da000015 	stw	r8,0(sp)
   165dc:	d9800215 	stw	r6,8(sp)
   165e0:	00171c40 	call	171c4 <__unpack_d>
   165e4:	d9000204 	addi	r4,sp,8
   165e8:	880b883a 	mov	r5,r17
   165ec:	00171c40 	call	171c4 <__unpack_d>
   165f0:	d9800e04 	addi	r6,sp,56
   165f4:	9809883a 	mov	r4,r19
   165f8:	880b883a 	mov	r5,r17
   165fc:	00161180 	call	16118 <_fpadd_parts>
   16600:	1009883a 	mov	r4,r2
   16604:	00111a40 	call	111a4 <__pack_d>
   16608:	dfc01517 	ldw	ra,84(sp)
   1660c:	dcc01417 	ldw	r19,80(sp)
   16610:	dc401317 	ldw	r17,76(sp)
   16614:	dec01604 	addi	sp,sp,88
   16618:	f800283a 	ret

0001661c <__muldf3>:
   1661c:	deffe004 	addi	sp,sp,-128
   16620:	dc401815 	stw	r17,96(sp)
   16624:	dc400404 	addi	r17,sp,16
   16628:	2011883a 	mov	r8,r4
   1662c:	2813883a 	mov	r9,r5
   16630:	dc001715 	stw	r16,92(sp)
   16634:	d809883a 	mov	r4,sp
   16638:	880b883a 	mov	r5,r17
   1663c:	dc000904 	addi	r16,sp,36
   16640:	dfc01f15 	stw	ra,124(sp)
   16644:	da400115 	stw	r9,4(sp)
   16648:	d9c00315 	stw	r7,12(sp)
   1664c:	da000015 	stw	r8,0(sp)
   16650:	d9800215 	stw	r6,8(sp)
   16654:	ddc01e15 	stw	r23,120(sp)
   16658:	dd801d15 	stw	r22,116(sp)
   1665c:	dd401c15 	stw	r21,112(sp)
   16660:	dd001b15 	stw	r20,108(sp)
   16664:	dcc01a15 	stw	r19,104(sp)
   16668:	dc801915 	stw	r18,100(sp)
   1666c:	00171c40 	call	171c4 <__unpack_d>
   16670:	d9000204 	addi	r4,sp,8
   16674:	800b883a 	mov	r5,r16
   16678:	00171c40 	call	171c4 <__unpack_d>
   1667c:	d9000417 	ldw	r4,16(sp)
   16680:	00800044 	movi	r2,1
   16684:	1100102e 	bgeu	r2,r4,166c8 <__muldf3+0xac>
   16688:	d8c00917 	ldw	r3,36(sp)
   1668c:	10c0062e 	bgeu	r2,r3,166a8 <__muldf3+0x8c>
   16690:	00800104 	movi	r2,4
   16694:	20800a26 	beq	r4,r2,166c0 <__muldf3+0xa4>
   16698:	1880cc26 	beq	r3,r2,169cc <__muldf3+0x3b0>
   1669c:	00800084 	movi	r2,2
   166a0:	20800926 	beq	r4,r2,166c8 <__muldf3+0xac>
   166a4:	1880191e 	bne	r3,r2,1670c <__muldf3+0xf0>
   166a8:	d8c00a17 	ldw	r3,40(sp)
   166ac:	d8800517 	ldw	r2,20(sp)
   166b0:	8009883a 	mov	r4,r16
   166b4:	10c4c03a 	cmpne	r2,r2,r3
   166b8:	d8800a15 	stw	r2,40(sp)
   166bc:	00000706 	br	166dc <__muldf3+0xc0>
   166c0:	00800084 	movi	r2,2
   166c4:	1880c326 	beq	r3,r2,169d4 <__muldf3+0x3b8>
   166c8:	d8800517 	ldw	r2,20(sp)
   166cc:	d8c00a17 	ldw	r3,40(sp)
   166d0:	8809883a 	mov	r4,r17
   166d4:	10c4c03a 	cmpne	r2,r2,r3
   166d8:	d8800515 	stw	r2,20(sp)
   166dc:	00111a40 	call	111a4 <__pack_d>
   166e0:	dfc01f17 	ldw	ra,124(sp)
   166e4:	ddc01e17 	ldw	r23,120(sp)
   166e8:	dd801d17 	ldw	r22,116(sp)
   166ec:	dd401c17 	ldw	r21,112(sp)
   166f0:	dd001b17 	ldw	r20,108(sp)
   166f4:	dcc01a17 	ldw	r19,104(sp)
   166f8:	dc801917 	ldw	r18,100(sp)
   166fc:	dc401817 	ldw	r17,96(sp)
   16700:	dc001717 	ldw	r16,92(sp)
   16704:	dec02004 	addi	sp,sp,128
   16708:	f800283a 	ret
   1670c:	dd800717 	ldw	r22,28(sp)
   16710:	dc800c17 	ldw	r18,48(sp)
   16714:	002b883a 	mov	r21,zero
   16718:	0023883a 	mov	r17,zero
   1671c:	a80b883a 	mov	r5,r21
   16720:	b00d883a 	mov	r6,r22
   16724:	880f883a 	mov	r7,r17
   16728:	ddc00817 	ldw	r23,32(sp)
   1672c:	dcc00d17 	ldw	r19,52(sp)
   16730:	9009883a 	mov	r4,r18
   16734:	0010dd80 	call	10dd8 <__muldi3>
   16738:	001b883a 	mov	r13,zero
   1673c:	680f883a 	mov	r7,r13
   16740:	b009883a 	mov	r4,r22
   16744:	000b883a 	mov	r5,zero
   16748:	980d883a 	mov	r6,r19
   1674c:	b82d883a 	mov	r22,r23
   16750:	002f883a 	mov	r23,zero
   16754:	db401615 	stw	r13,88(sp)
   16758:	d8801315 	stw	r2,76(sp)
   1675c:	d8c01415 	stw	r3,80(sp)
   16760:	dcc01515 	stw	r19,84(sp)
   16764:	0010dd80 	call	10dd8 <__muldi3>
   16768:	b00d883a 	mov	r6,r22
   1676c:	000b883a 	mov	r5,zero
   16770:	9009883a 	mov	r4,r18
   16774:	b80f883a 	mov	r7,r23
   16778:	1021883a 	mov	r16,r2
   1677c:	1823883a 	mov	r17,r3
   16780:	0010dd80 	call	10dd8 <__muldi3>
   16784:	8085883a 	add	r2,r16,r2
   16788:	140d803a 	cmpltu	r6,r2,r16
   1678c:	88c7883a 	add	r3,r17,r3
   16790:	30cd883a 	add	r6,r6,r3
   16794:	1029883a 	mov	r20,r2
   16798:	302b883a 	mov	r21,r6
   1679c:	da801317 	ldw	r10,76(sp)
   167a0:	dac01417 	ldw	r11,80(sp)
   167a4:	db001517 	ldw	r12,84(sp)
   167a8:	db401617 	ldw	r13,88(sp)
   167ac:	3440612e 	bgeu	r6,r17,16934 <__muldf3+0x318>
   167b0:	0009883a 	mov	r4,zero
   167b4:	5105883a 	add	r2,r10,r4
   167b8:	128d803a 	cmpltu	r6,r2,r10
   167bc:	5d07883a 	add	r3,r11,r20
   167c0:	30cd883a 	add	r6,r6,r3
   167c4:	0021883a 	mov	r16,zero
   167c8:	04400044 	movi	r17,1
   167cc:	1025883a 	mov	r18,r2
   167d0:	3027883a 	mov	r19,r6
   167d4:	32c06236 	bltu	r6,r11,16960 <__muldf3+0x344>
   167d8:	59807a26 	beq	r11,r6,169c4 <__muldf3+0x3a8>
   167dc:	680b883a 	mov	r5,r13
   167e0:	b80f883a 	mov	r7,r23
   167e4:	6009883a 	mov	r4,r12
   167e8:	b00d883a 	mov	r6,r22
   167ec:	0010dd80 	call	10dd8 <__muldi3>
   167f0:	1009883a 	mov	r4,r2
   167f4:	000f883a 	mov	r7,zero
   167f8:	1545883a 	add	r2,r2,r21
   167fc:	1111803a 	cmpltu	r8,r2,r4
   16800:	19c7883a 	add	r3,r3,r7
   16804:	40c7883a 	add	r3,r8,r3
   16808:	88cb883a 	add	r5,r17,r3
   1680c:	d8c00617 	ldw	r3,24(sp)
   16810:	8089883a 	add	r4,r16,r2
   16814:	d8800b17 	ldw	r2,44(sp)
   16818:	18c00104 	addi	r3,r3,4
   1681c:	240d803a 	cmpltu	r6,r4,r16
   16820:	10c7883a 	add	r3,r2,r3
   16824:	2013883a 	mov	r9,r4
   16828:	d8800a17 	ldw	r2,40(sp)
   1682c:	d9000517 	ldw	r4,20(sp)
   16830:	314d883a 	add	r6,r6,r5
   16834:	3015883a 	mov	r10,r6
   16838:	2088c03a 	cmpne	r4,r4,r2
   1683c:	00880034 	movhi	r2,8192
   16840:	10bfffc4 	addi	r2,r2,-1
   16844:	d9000f15 	stw	r4,60(sp)
   16848:	d8c01015 	stw	r3,64(sp)
   1684c:	1180162e 	bgeu	r2,r6,168a8 <__muldf3+0x28c>
   16850:	1811883a 	mov	r8,r3
   16854:	101f883a 	mov	r15,r2
   16858:	980497fa 	slli	r2,r19,31
   1685c:	9016d07a 	srli	r11,r18,1
   16860:	500697fa 	slli	r3,r10,31
   16864:	480cd07a 	srli	r6,r9,1
   16868:	500ed07a 	srli	r7,r10,1
   1686c:	12d6b03a 	or	r11,r2,r11
   16870:	00800044 	movi	r2,1
   16874:	198cb03a 	or	r6,r3,r6
   16878:	4888703a 	and	r4,r9,r2
   1687c:	9818d07a 	srli	r12,r19,1
   16880:	001b883a 	mov	r13,zero
   16884:	03a00034 	movhi	r14,32768
   16888:	3013883a 	mov	r9,r6
   1688c:	3815883a 	mov	r10,r7
   16890:	4091883a 	add	r8,r8,r2
   16894:	20000226 	beq	r4,zero,168a0 <__muldf3+0x284>
   16898:	5b64b03a 	or	r18,r11,r13
   1689c:	63a6b03a 	or	r19,r12,r14
   168a0:	7abfed36 	bltu	r15,r10,16858 <__muldf3+0x23c>
   168a4:	da001015 	stw	r8,64(sp)
   168a8:	00840034 	movhi	r2,4096
   168ac:	10bfffc4 	addi	r2,r2,-1
   168b0:	12801436 	bltu	r2,r10,16904 <__muldf3+0x2e8>
   168b4:	da001017 	ldw	r8,64(sp)
   168b8:	101f883a 	mov	r15,r2
   168bc:	4a45883a 	add	r2,r9,r9
   168c0:	124d803a 	cmpltu	r6,r2,r9
   168c4:	5287883a 	add	r3,r10,r10
   168c8:	9497883a 	add	r11,r18,r18
   168cc:	5c8f803a 	cmpltu	r7,r11,r18
   168d0:	9cd9883a 	add	r12,r19,r19
   168d4:	01000044 	movi	r4,1
   168d8:	30cd883a 	add	r6,r6,r3
   168dc:	3b0f883a 	add	r7,r7,r12
   168e0:	423fffc4 	addi	r8,r8,-1
   168e4:	1013883a 	mov	r9,r2
   168e8:	3015883a 	mov	r10,r6
   168ec:	111ab03a 	or	r13,r2,r4
   168f0:	98003016 	blt	r19,zero,169b4 <__muldf3+0x398>
   168f4:	5825883a 	mov	r18,r11
   168f8:	3827883a 	mov	r19,r7
   168fc:	7abfef2e 	bgeu	r15,r10,168bc <__muldf3+0x2a0>
   16900:	da001015 	stw	r8,64(sp)
   16904:	00803fc4 	movi	r2,255
   16908:	488e703a 	and	r7,r9,r2
   1690c:	00802004 	movi	r2,128
   16910:	0007883a 	mov	r3,zero
   16914:	0011883a 	mov	r8,zero
   16918:	38801826 	beq	r7,r2,1697c <__muldf3+0x360>
   1691c:	008000c4 	movi	r2,3
   16920:	d9000e04 	addi	r4,sp,56
   16924:	da801215 	stw	r10,72(sp)
   16928:	d8800e15 	stw	r2,56(sp)
   1692c:	da401115 	stw	r9,68(sp)
   16930:	003f6a06 	br	166dc <__muldf3+0xc0>
   16934:	89802126 	beq	r17,r6,169bc <__muldf3+0x3a0>
   16938:	0009883a 	mov	r4,zero
   1693c:	5105883a 	add	r2,r10,r4
   16940:	128d803a 	cmpltu	r6,r2,r10
   16944:	5d07883a 	add	r3,r11,r20
   16948:	30cd883a 	add	r6,r6,r3
   1694c:	0021883a 	mov	r16,zero
   16950:	0023883a 	mov	r17,zero
   16954:	1025883a 	mov	r18,r2
   16958:	3027883a 	mov	r19,r6
   1695c:	32ff9e2e 	bgeu	r6,r11,167d8 <__muldf3+0x1bc>
   16960:	00800044 	movi	r2,1
   16964:	8089883a 	add	r4,r16,r2
   16968:	240d803a 	cmpltu	r6,r4,r16
   1696c:	344d883a 	add	r6,r6,r17
   16970:	2021883a 	mov	r16,r4
   16974:	3023883a 	mov	r17,r6
   16978:	003f9806 	br	167dc <__muldf3+0x1c0>
   1697c:	403fe71e 	bne	r8,zero,1691c <__muldf3+0x300>
   16980:	01004004 	movi	r4,256
   16984:	4904703a 	and	r2,r9,r4
   16988:	10c4b03a 	or	r2,r2,r3
   1698c:	103fe31e 	bne	r2,zero,1691c <__muldf3+0x300>
   16990:	94c4b03a 	or	r2,r18,r19
   16994:	103fe126 	beq	r2,zero,1691c <__muldf3+0x300>
   16998:	49c5883a 	add	r2,r9,r7
   1699c:	1251803a 	cmpltu	r8,r2,r9
   169a0:	4291883a 	add	r8,r8,r10
   169a4:	013fc004 	movi	r4,-256
   169a8:	1112703a 	and	r9,r2,r4
   169ac:	4015883a 	mov	r10,r8
   169b0:	003fda06 	br	1691c <__muldf3+0x300>
   169b4:	6813883a 	mov	r9,r13
   169b8:	003fce06 	br	168f4 <__muldf3+0x2d8>
   169bc:	143f7c36 	bltu	r2,r16,167b0 <__muldf3+0x194>
   169c0:	003fdd06 	br	16938 <__muldf3+0x31c>
   169c4:	12bf852e 	bgeu	r2,r10,167dc <__muldf3+0x1c0>
   169c8:	003fe506 	br	16960 <__muldf3+0x344>
   169cc:	00800084 	movi	r2,2
   169d0:	20bf351e 	bne	r4,r2,166a8 <__muldf3+0x8c>
   169d4:	010000b4 	movhi	r4,2
   169d8:	21246804 	addi	r4,r4,-28256
   169dc:	003f3f06 	br	166dc <__muldf3+0xc0>

000169e0 <__divdf3>:
   169e0:	deffed04 	addi	sp,sp,-76
   169e4:	dcc01115 	stw	r19,68(sp)
   169e8:	dcc00404 	addi	r19,sp,16
   169ec:	2011883a 	mov	r8,r4
   169f0:	2813883a 	mov	r9,r5
   169f4:	dc000e15 	stw	r16,56(sp)
   169f8:	d809883a 	mov	r4,sp
   169fc:	980b883a 	mov	r5,r19
   16a00:	dc000904 	addi	r16,sp,36
   16a04:	dfc01215 	stw	ra,72(sp)
   16a08:	da400115 	stw	r9,4(sp)
   16a0c:	d9c00315 	stw	r7,12(sp)
   16a10:	da000015 	stw	r8,0(sp)
   16a14:	d9800215 	stw	r6,8(sp)
   16a18:	dc801015 	stw	r18,64(sp)
   16a1c:	dc400f15 	stw	r17,60(sp)
   16a20:	00171c40 	call	171c4 <__unpack_d>
   16a24:	d9000204 	addi	r4,sp,8
   16a28:	800b883a 	mov	r5,r16
   16a2c:	00171c40 	call	171c4 <__unpack_d>
   16a30:	d9000417 	ldw	r4,16(sp)
   16a34:	00800044 	movi	r2,1
   16a38:	11000b2e 	bgeu	r2,r4,16a68 <__divdf3+0x88>
   16a3c:	d9400917 	ldw	r5,36(sp)
   16a40:	1140762e 	bgeu	r2,r5,16c1c <__divdf3+0x23c>
   16a44:	d8800517 	ldw	r2,20(sp)
   16a48:	d8c00a17 	ldw	r3,40(sp)
   16a4c:	01800104 	movi	r6,4
   16a50:	10c4f03a 	xor	r2,r2,r3
   16a54:	d8800515 	stw	r2,20(sp)
   16a58:	21800226 	beq	r4,r6,16a64 <__divdf3+0x84>
   16a5c:	00800084 	movi	r2,2
   16a60:	2080141e 	bne	r4,r2,16ab4 <__divdf3+0xd4>
   16a64:	29000926 	beq	r5,r4,16a8c <__divdf3+0xac>
   16a68:	9809883a 	mov	r4,r19
   16a6c:	00111a40 	call	111a4 <__pack_d>
   16a70:	dfc01217 	ldw	ra,72(sp)
   16a74:	dcc01117 	ldw	r19,68(sp)
   16a78:	dc801017 	ldw	r18,64(sp)
   16a7c:	dc400f17 	ldw	r17,60(sp)
   16a80:	dc000e17 	ldw	r16,56(sp)
   16a84:	dec01304 	addi	sp,sp,76
   16a88:	f800283a 	ret
   16a8c:	010000b4 	movhi	r4,2
   16a90:	21246804 	addi	r4,r4,-28256
   16a94:	00111a40 	call	111a4 <__pack_d>
   16a98:	dfc01217 	ldw	ra,72(sp)
   16a9c:	dcc01117 	ldw	r19,68(sp)
   16aa0:	dc801017 	ldw	r18,64(sp)
   16aa4:	dc400f17 	ldw	r17,60(sp)
   16aa8:	dc000e17 	ldw	r16,56(sp)
   16aac:	dec01304 	addi	sp,sp,76
   16ab0:	f800283a 	ret
   16ab4:	29805b26 	beq	r5,r6,16c24 <__divdf3+0x244>
   16ab8:	28802d26 	beq	r5,r2,16b70 <__divdf3+0x190>
   16abc:	d8c00617 	ldw	r3,24(sp)
   16ac0:	d8800b17 	ldw	r2,44(sp)
   16ac4:	d9c00817 	ldw	r7,32(sp)
   16ac8:	dc400d17 	ldw	r17,52(sp)
   16acc:	188bc83a 	sub	r5,r3,r2
   16ad0:	d9800717 	ldw	r6,28(sp)
   16ad4:	dc000c17 	ldw	r16,48(sp)
   16ad8:	d9400615 	stw	r5,24(sp)
   16adc:	3c403836 	bltu	r7,r17,16bc0 <__divdf3+0x1e0>
   16ae0:	89c03626 	beq	r17,r7,16bbc <__divdf3+0x1dc>
   16ae4:	0015883a 	mov	r10,zero
   16ae8:	001d883a 	mov	r14,zero
   16aec:	02c40034 	movhi	r11,4096
   16af0:	001f883a 	mov	r15,zero
   16af4:	003f883a 	mov	ra,zero
   16af8:	04800f44 	movi	r18,61
   16afc:	00000f06 	br	16b3c <__divdf3+0x15c>
   16b00:	601d883a 	mov	r14,r12
   16b04:	681f883a 	mov	r15,r13
   16b08:	400d883a 	mov	r6,r8
   16b0c:	100f883a 	mov	r7,r2
   16b10:	3191883a 	add	r8,r6,r6
   16b14:	5808d07a 	srli	r4,r11,1
   16b18:	4185803a 	cmpltu	r2,r8,r6
   16b1c:	39d3883a 	add	r9,r7,r7
   16b20:	28c6b03a 	or	r3,r5,r3
   16b24:	1245883a 	add	r2,r2,r9
   16b28:	1815883a 	mov	r10,r3
   16b2c:	2017883a 	mov	r11,r4
   16b30:	400d883a 	mov	r6,r8
   16b34:	100f883a 	mov	r7,r2
   16b38:	fc801726 	beq	ra,r18,16b98 <__divdf3+0x1b8>
   16b3c:	580a97fa 	slli	r5,r11,31
   16b40:	5006d07a 	srli	r3,r10,1
   16b44:	ffc00044 	addi	ra,ra,1
   16b48:	3c7ff136 	bltu	r7,r17,16b10 <__divdf3+0x130>
   16b4c:	3411c83a 	sub	r8,r6,r16
   16b50:	3205803a 	cmpltu	r2,r6,r8
   16b54:	3c53c83a 	sub	r9,r7,r17
   16b58:	7298b03a 	or	r12,r14,r10
   16b5c:	7adab03a 	or	r13,r15,r11
   16b60:	4885c83a 	sub	r2,r9,r2
   16b64:	89ffe61e 	bne	r17,r7,16b00 <__divdf3+0x120>
   16b68:	343fe936 	bltu	r6,r16,16b10 <__divdf3+0x130>
   16b6c:	003fe406 	br	16b00 <__divdf3+0x120>
   16b70:	9809883a 	mov	r4,r19
   16b74:	d9800415 	stw	r6,16(sp)
   16b78:	00111a40 	call	111a4 <__pack_d>
   16b7c:	dfc01217 	ldw	ra,72(sp)
   16b80:	dcc01117 	ldw	r19,68(sp)
   16b84:	dc801017 	ldw	r18,64(sp)
   16b88:	dc400f17 	ldw	r17,60(sp)
   16b8c:	dc000e17 	ldw	r16,56(sp)
   16b90:	dec01304 	addi	sp,sp,76
   16b94:	f800283a 	ret
   16b98:	00803fc4 	movi	r2,255
   16b9c:	7090703a 	and	r8,r14,r2
   16ba0:	00802004 	movi	r2,128
   16ba4:	0007883a 	mov	r3,zero
   16ba8:	0013883a 	mov	r9,zero
   16bac:	40800d26 	beq	r8,r2,16be4 <__divdf3+0x204>
   16bb0:	dbc00815 	stw	r15,32(sp)
   16bb4:	db800715 	stw	r14,28(sp)
   16bb8:	003fab06 	br	16a68 <__divdf3+0x88>
   16bbc:	343fc92e 	bgeu	r6,r16,16ae4 <__divdf3+0x104>
   16bc0:	3185883a 	add	r2,r6,r6
   16bc4:	1189803a 	cmpltu	r4,r2,r6
   16bc8:	39c7883a 	add	r3,r7,r7
   16bcc:	20c9883a 	add	r4,r4,r3
   16bd0:	297fffc4 	addi	r5,r5,-1
   16bd4:	100d883a 	mov	r6,r2
   16bd8:	200f883a 	mov	r7,r4
   16bdc:	d9400615 	stw	r5,24(sp)
   16be0:	003fc006 	br	16ae4 <__divdf3+0x104>
   16be4:	483ff21e 	bne	r9,zero,16bb0 <__divdf3+0x1d0>
   16be8:	01004004 	movi	r4,256
   16bec:	7104703a 	and	r2,r14,r4
   16bf0:	10c4b03a 	or	r2,r2,r3
   16bf4:	103fee1e 	bne	r2,zero,16bb0 <__divdf3+0x1d0>
   16bf8:	31c4b03a 	or	r2,r6,r7
   16bfc:	103fec26 	beq	r2,zero,16bb0 <__divdf3+0x1d0>
   16c00:	7205883a 	add	r2,r14,r8
   16c04:	1391803a 	cmpltu	r8,r2,r14
   16c08:	43d1883a 	add	r8,r8,r15
   16c0c:	013fc004 	movi	r4,-256
   16c10:	111c703a 	and	r14,r2,r4
   16c14:	401f883a 	mov	r15,r8
   16c18:	003fe506 	br	16bb0 <__divdf3+0x1d0>
   16c1c:	8009883a 	mov	r4,r16
   16c20:	003f9206 	br	16a6c <__divdf3+0x8c>
   16c24:	9809883a 	mov	r4,r19
   16c28:	d8000715 	stw	zero,28(sp)
   16c2c:	d8000815 	stw	zero,32(sp)
   16c30:	d8000615 	stw	zero,24(sp)
   16c34:	003f8d06 	br	16a6c <__divdf3+0x8c>

00016c38 <__eqdf2>:
   16c38:	deffef04 	addi	sp,sp,-68
   16c3c:	dc400f15 	stw	r17,60(sp)
   16c40:	dc400404 	addi	r17,sp,16
   16c44:	2005883a 	mov	r2,r4
   16c48:	2807883a 	mov	r3,r5
   16c4c:	dc000e15 	stw	r16,56(sp)
   16c50:	d809883a 	mov	r4,sp
   16c54:	880b883a 	mov	r5,r17
   16c58:	dc000904 	addi	r16,sp,36
   16c5c:	d8c00115 	stw	r3,4(sp)
   16c60:	d8800015 	stw	r2,0(sp)
   16c64:	d9800215 	stw	r6,8(sp)
   16c68:	dfc01015 	stw	ra,64(sp)
   16c6c:	d9c00315 	stw	r7,12(sp)
   16c70:	00171c40 	call	171c4 <__unpack_d>
   16c74:	d9000204 	addi	r4,sp,8
   16c78:	800b883a 	mov	r5,r16
   16c7c:	00171c40 	call	171c4 <__unpack_d>
   16c80:	d8800417 	ldw	r2,16(sp)
   16c84:	00c00044 	movi	r3,1
   16c88:	180d883a 	mov	r6,r3
   16c8c:	1880062e 	bgeu	r3,r2,16ca8 <__eqdf2+0x70>
   16c90:	d8800917 	ldw	r2,36(sp)
   16c94:	8809883a 	mov	r4,r17
   16c98:	800b883a 	mov	r5,r16
   16c9c:	1880022e 	bgeu	r3,r2,16ca8 <__eqdf2+0x70>
   16ca0:	00172fc0 	call	172fc <__fpcmp_parts_d>
   16ca4:	100d883a 	mov	r6,r2
   16ca8:	3005883a 	mov	r2,r6
   16cac:	dfc01017 	ldw	ra,64(sp)
   16cb0:	dc400f17 	ldw	r17,60(sp)
   16cb4:	dc000e17 	ldw	r16,56(sp)
   16cb8:	dec01104 	addi	sp,sp,68
   16cbc:	f800283a 	ret

00016cc0 <__nedf2>:
   16cc0:	deffef04 	addi	sp,sp,-68
   16cc4:	dc400f15 	stw	r17,60(sp)
   16cc8:	dc400404 	addi	r17,sp,16
   16ccc:	2005883a 	mov	r2,r4
   16cd0:	2807883a 	mov	r3,r5
   16cd4:	dc000e15 	stw	r16,56(sp)
   16cd8:	d809883a 	mov	r4,sp
   16cdc:	880b883a 	mov	r5,r17
   16ce0:	dc000904 	addi	r16,sp,36
   16ce4:	d8c00115 	stw	r3,4(sp)
   16ce8:	d8800015 	stw	r2,0(sp)
   16cec:	d9800215 	stw	r6,8(sp)
   16cf0:	dfc01015 	stw	ra,64(sp)
   16cf4:	d9c00315 	stw	r7,12(sp)
   16cf8:	00171c40 	call	171c4 <__unpack_d>
   16cfc:	d9000204 	addi	r4,sp,8
   16d00:	800b883a 	mov	r5,r16
   16d04:	00171c40 	call	171c4 <__unpack_d>
   16d08:	d8800417 	ldw	r2,16(sp)
   16d0c:	00c00044 	movi	r3,1
   16d10:	180d883a 	mov	r6,r3
   16d14:	1880062e 	bgeu	r3,r2,16d30 <__nedf2+0x70>
   16d18:	d8800917 	ldw	r2,36(sp)
   16d1c:	8809883a 	mov	r4,r17
   16d20:	800b883a 	mov	r5,r16
   16d24:	1880022e 	bgeu	r3,r2,16d30 <__nedf2+0x70>
   16d28:	00172fc0 	call	172fc <__fpcmp_parts_d>
   16d2c:	100d883a 	mov	r6,r2
   16d30:	3005883a 	mov	r2,r6
   16d34:	dfc01017 	ldw	ra,64(sp)
   16d38:	dc400f17 	ldw	r17,60(sp)
   16d3c:	dc000e17 	ldw	r16,56(sp)
   16d40:	dec01104 	addi	sp,sp,68
   16d44:	f800283a 	ret

00016d48 <__gtdf2>:
   16d48:	deffef04 	addi	sp,sp,-68
   16d4c:	dc400f15 	stw	r17,60(sp)
   16d50:	dc400404 	addi	r17,sp,16
   16d54:	2005883a 	mov	r2,r4
   16d58:	2807883a 	mov	r3,r5
   16d5c:	dc000e15 	stw	r16,56(sp)
   16d60:	d809883a 	mov	r4,sp
   16d64:	880b883a 	mov	r5,r17
   16d68:	dc000904 	addi	r16,sp,36
   16d6c:	d8c00115 	stw	r3,4(sp)
   16d70:	d8800015 	stw	r2,0(sp)
   16d74:	d9800215 	stw	r6,8(sp)
   16d78:	dfc01015 	stw	ra,64(sp)
   16d7c:	d9c00315 	stw	r7,12(sp)
   16d80:	00171c40 	call	171c4 <__unpack_d>
   16d84:	d9000204 	addi	r4,sp,8
   16d88:	800b883a 	mov	r5,r16
   16d8c:	00171c40 	call	171c4 <__unpack_d>
   16d90:	d8800417 	ldw	r2,16(sp)
   16d94:	00c00044 	movi	r3,1
   16d98:	01bfffc4 	movi	r6,-1
   16d9c:	1880062e 	bgeu	r3,r2,16db8 <__gtdf2+0x70>
   16da0:	d8800917 	ldw	r2,36(sp)
   16da4:	8809883a 	mov	r4,r17
   16da8:	800b883a 	mov	r5,r16
   16dac:	1880022e 	bgeu	r3,r2,16db8 <__gtdf2+0x70>
   16db0:	00172fc0 	call	172fc <__fpcmp_parts_d>
   16db4:	100d883a 	mov	r6,r2
   16db8:	3005883a 	mov	r2,r6
   16dbc:	dfc01017 	ldw	ra,64(sp)
   16dc0:	dc400f17 	ldw	r17,60(sp)
   16dc4:	dc000e17 	ldw	r16,56(sp)
   16dc8:	dec01104 	addi	sp,sp,68
   16dcc:	f800283a 	ret

00016dd0 <__gedf2>:
   16dd0:	deffef04 	addi	sp,sp,-68
   16dd4:	dc400f15 	stw	r17,60(sp)
   16dd8:	dc400404 	addi	r17,sp,16
   16ddc:	2005883a 	mov	r2,r4
   16de0:	2807883a 	mov	r3,r5
   16de4:	dc000e15 	stw	r16,56(sp)
   16de8:	d809883a 	mov	r4,sp
   16dec:	880b883a 	mov	r5,r17
   16df0:	dc000904 	addi	r16,sp,36
   16df4:	d8c00115 	stw	r3,4(sp)
   16df8:	d8800015 	stw	r2,0(sp)
   16dfc:	d9800215 	stw	r6,8(sp)
   16e00:	dfc01015 	stw	ra,64(sp)
   16e04:	d9c00315 	stw	r7,12(sp)
   16e08:	00171c40 	call	171c4 <__unpack_d>
   16e0c:	d9000204 	addi	r4,sp,8
   16e10:	800b883a 	mov	r5,r16
   16e14:	00171c40 	call	171c4 <__unpack_d>
   16e18:	d8800417 	ldw	r2,16(sp)
   16e1c:	00c00044 	movi	r3,1
   16e20:	01bfffc4 	movi	r6,-1
   16e24:	1880062e 	bgeu	r3,r2,16e40 <__gedf2+0x70>
   16e28:	d8800917 	ldw	r2,36(sp)
   16e2c:	8809883a 	mov	r4,r17
   16e30:	800b883a 	mov	r5,r16
   16e34:	1880022e 	bgeu	r3,r2,16e40 <__gedf2+0x70>
   16e38:	00172fc0 	call	172fc <__fpcmp_parts_d>
   16e3c:	100d883a 	mov	r6,r2
   16e40:	3005883a 	mov	r2,r6
   16e44:	dfc01017 	ldw	ra,64(sp)
   16e48:	dc400f17 	ldw	r17,60(sp)
   16e4c:	dc000e17 	ldw	r16,56(sp)
   16e50:	dec01104 	addi	sp,sp,68
   16e54:	f800283a 	ret

00016e58 <__ltdf2>:
   16e58:	deffef04 	addi	sp,sp,-68
   16e5c:	dc400f15 	stw	r17,60(sp)
   16e60:	dc400404 	addi	r17,sp,16
   16e64:	2005883a 	mov	r2,r4
   16e68:	2807883a 	mov	r3,r5
   16e6c:	dc000e15 	stw	r16,56(sp)
   16e70:	d809883a 	mov	r4,sp
   16e74:	880b883a 	mov	r5,r17
   16e78:	dc000904 	addi	r16,sp,36
   16e7c:	d8c00115 	stw	r3,4(sp)
   16e80:	d8800015 	stw	r2,0(sp)
   16e84:	d9800215 	stw	r6,8(sp)
   16e88:	dfc01015 	stw	ra,64(sp)
   16e8c:	d9c00315 	stw	r7,12(sp)
   16e90:	00171c40 	call	171c4 <__unpack_d>
   16e94:	d9000204 	addi	r4,sp,8
   16e98:	800b883a 	mov	r5,r16
   16e9c:	00171c40 	call	171c4 <__unpack_d>
   16ea0:	d8800417 	ldw	r2,16(sp)
   16ea4:	00c00044 	movi	r3,1
   16ea8:	180d883a 	mov	r6,r3
   16eac:	1880062e 	bgeu	r3,r2,16ec8 <__ltdf2+0x70>
   16eb0:	d8800917 	ldw	r2,36(sp)
   16eb4:	8809883a 	mov	r4,r17
   16eb8:	800b883a 	mov	r5,r16
   16ebc:	1880022e 	bgeu	r3,r2,16ec8 <__ltdf2+0x70>
   16ec0:	00172fc0 	call	172fc <__fpcmp_parts_d>
   16ec4:	100d883a 	mov	r6,r2
   16ec8:	3005883a 	mov	r2,r6
   16ecc:	dfc01017 	ldw	ra,64(sp)
   16ed0:	dc400f17 	ldw	r17,60(sp)
   16ed4:	dc000e17 	ldw	r16,56(sp)
   16ed8:	dec01104 	addi	sp,sp,68
   16edc:	f800283a 	ret

00016ee0 <__ledf2>:
   16ee0:	deffef04 	addi	sp,sp,-68
   16ee4:	dc400f15 	stw	r17,60(sp)
   16ee8:	dc400404 	addi	r17,sp,16
   16eec:	2005883a 	mov	r2,r4
   16ef0:	2807883a 	mov	r3,r5
   16ef4:	dc000e15 	stw	r16,56(sp)
   16ef8:	d809883a 	mov	r4,sp
   16efc:	880b883a 	mov	r5,r17
   16f00:	dc000904 	addi	r16,sp,36
   16f04:	d8c00115 	stw	r3,4(sp)
   16f08:	d8800015 	stw	r2,0(sp)
   16f0c:	d9800215 	stw	r6,8(sp)
   16f10:	dfc01015 	stw	ra,64(sp)
   16f14:	d9c00315 	stw	r7,12(sp)
   16f18:	00171c40 	call	171c4 <__unpack_d>
   16f1c:	d9000204 	addi	r4,sp,8
   16f20:	800b883a 	mov	r5,r16
   16f24:	00171c40 	call	171c4 <__unpack_d>
   16f28:	d8800417 	ldw	r2,16(sp)
   16f2c:	00c00044 	movi	r3,1
   16f30:	180d883a 	mov	r6,r3
   16f34:	1880062e 	bgeu	r3,r2,16f50 <__ledf2+0x70>
   16f38:	d8800917 	ldw	r2,36(sp)
   16f3c:	8809883a 	mov	r4,r17
   16f40:	800b883a 	mov	r5,r16
   16f44:	1880022e 	bgeu	r3,r2,16f50 <__ledf2+0x70>
   16f48:	00172fc0 	call	172fc <__fpcmp_parts_d>
   16f4c:	100d883a 	mov	r6,r2
   16f50:	3005883a 	mov	r2,r6
   16f54:	dfc01017 	ldw	ra,64(sp)
   16f58:	dc400f17 	ldw	r17,60(sp)
   16f5c:	dc000e17 	ldw	r16,56(sp)
   16f60:	dec01104 	addi	sp,sp,68
   16f64:	f800283a 	ret

00016f68 <__fixdfsi>:
   16f68:	defff804 	addi	sp,sp,-32
   16f6c:	2005883a 	mov	r2,r4
   16f70:	2807883a 	mov	r3,r5
   16f74:	d809883a 	mov	r4,sp
   16f78:	d9400204 	addi	r5,sp,8
   16f7c:	d8c00115 	stw	r3,4(sp)
   16f80:	d8800015 	stw	r2,0(sp)
   16f84:	dfc00715 	stw	ra,28(sp)
   16f88:	00171c40 	call	171c4 <__unpack_d>
   16f8c:	d8c00217 	ldw	r3,8(sp)
   16f90:	00800084 	movi	r2,2
   16f94:	1880051e 	bne	r3,r2,16fac <__fixdfsi+0x44>
   16f98:	0007883a 	mov	r3,zero
   16f9c:	1805883a 	mov	r2,r3
   16fa0:	dfc00717 	ldw	ra,28(sp)
   16fa4:	dec00804 	addi	sp,sp,32
   16fa8:	f800283a 	ret
   16fac:	00800044 	movi	r2,1
   16fb0:	10fff92e 	bgeu	r2,r3,16f98 <__fixdfsi+0x30>
   16fb4:	00800104 	movi	r2,4
   16fb8:	18800426 	beq	r3,r2,16fcc <__fixdfsi+0x64>
   16fbc:	d8c00417 	ldw	r3,16(sp)
   16fc0:	183ff516 	blt	r3,zero,16f98 <__fixdfsi+0x30>
   16fc4:	00800784 	movi	r2,30
   16fc8:	10c0080e 	bge	r2,r3,16fec <__fixdfsi+0x84>
   16fcc:	d8800317 	ldw	r2,12(sp)
   16fd0:	1000121e 	bne	r2,zero,1701c <__fixdfsi+0xb4>
   16fd4:	00e00034 	movhi	r3,32768
   16fd8:	18ffffc4 	addi	r3,r3,-1
   16fdc:	1805883a 	mov	r2,r3
   16fe0:	dfc00717 	ldw	ra,28(sp)
   16fe4:	dec00804 	addi	sp,sp,32
   16fe8:	f800283a 	ret
   16fec:	00800f04 	movi	r2,60
   16ff0:	10d1c83a 	sub	r8,r2,r3
   16ff4:	40bff804 	addi	r2,r8,-32
   16ff8:	d9800517 	ldw	r6,20(sp)
   16ffc:	d9c00617 	ldw	r7,24(sp)
   17000:	10000816 	blt	r2,zero,17024 <__fixdfsi+0xbc>
   17004:	3888d83a 	srl	r4,r7,r2
   17008:	d8800317 	ldw	r2,12(sp)
   1700c:	2007883a 	mov	r3,r4
   17010:	103fe226 	beq	r2,zero,16f9c <__fixdfsi+0x34>
   17014:	0107c83a 	sub	r3,zero,r4
   17018:	003fe006 	br	16f9c <__fixdfsi+0x34>
   1701c:	00e00034 	movhi	r3,32768
   17020:	003fde06 	br	16f9c <__fixdfsi+0x34>
   17024:	39c7883a 	add	r3,r7,r7
   17028:	008007c4 	movi	r2,31
   1702c:	1205c83a 	sub	r2,r2,r8
   17030:	1886983a 	sll	r3,r3,r2
   17034:	3208d83a 	srl	r4,r6,r8
   17038:	1908b03a 	or	r4,r3,r4
   1703c:	003ff206 	br	17008 <__fixdfsi+0xa0>

00017040 <__make_dp>:
   17040:	defff904 	addi	sp,sp,-28
   17044:	d8c00717 	ldw	r3,28(sp)
   17048:	d9000015 	stw	r4,0(sp)
   1704c:	d809883a 	mov	r4,sp
   17050:	dfc00515 	stw	ra,20(sp)
   17054:	d9c00615 	stw	r7,24(sp)
   17058:	d9400115 	stw	r5,4(sp)
   1705c:	d9800215 	stw	r6,8(sp)
   17060:	d8c00415 	stw	r3,16(sp)
   17064:	d9c00315 	stw	r7,12(sp)
   17068:	00111a40 	call	111a4 <__pack_d>
   1706c:	dfc00517 	ldw	ra,20(sp)
   17070:	dec00704 	addi	sp,sp,28
   17074:	f800283a 	ret

00017078 <udivmodsi4>:
   17078:	29001b2e 	bgeu	r5,r4,170e8 <udivmodsi4+0x70>
   1707c:	28001a16 	blt	r5,zero,170e8 <udivmodsi4+0x70>
   17080:	00800044 	movi	r2,1
   17084:	0007883a 	mov	r3,zero
   17088:	01c007c4 	movi	r7,31
   1708c:	00000306 	br	1709c <udivmodsi4+0x24>
   17090:	19c01326 	beq	r3,r7,170e0 <udivmodsi4+0x68>
   17094:	18c00044 	addi	r3,r3,1
   17098:	28000416 	blt	r5,zero,170ac <udivmodsi4+0x34>
   1709c:	294b883a 	add	r5,r5,r5
   170a0:	1085883a 	add	r2,r2,r2
   170a4:	293ffa36 	bltu	r5,r4,17090 <udivmodsi4+0x18>
   170a8:	10000d26 	beq	r2,zero,170e0 <udivmodsi4+0x68>
   170ac:	0007883a 	mov	r3,zero
   170b0:	21400236 	bltu	r4,r5,170bc <udivmodsi4+0x44>
   170b4:	2149c83a 	sub	r4,r4,r5
   170b8:	1886b03a 	or	r3,r3,r2
   170bc:	1004d07a 	srli	r2,r2,1
   170c0:	280ad07a 	srli	r5,r5,1
   170c4:	103ffa1e 	bne	r2,zero,170b0 <udivmodsi4+0x38>
   170c8:	30000226 	beq	r6,zero,170d4 <udivmodsi4+0x5c>
   170cc:	2005883a 	mov	r2,r4
   170d0:	f800283a 	ret
   170d4:	1809883a 	mov	r4,r3
   170d8:	2005883a 	mov	r2,r4
   170dc:	f800283a 	ret
   170e0:	0007883a 	mov	r3,zero
   170e4:	003ff806 	br	170c8 <udivmodsi4+0x50>
   170e8:	00800044 	movi	r2,1
   170ec:	0007883a 	mov	r3,zero
   170f0:	003fef06 	br	170b0 <udivmodsi4+0x38>

000170f4 <__divsi3>:
   170f4:	defffe04 	addi	sp,sp,-8
   170f8:	dc000015 	stw	r16,0(sp)
   170fc:	dfc00115 	stw	ra,4(sp)
   17100:	0021883a 	mov	r16,zero
   17104:	20000c16 	blt	r4,zero,17138 <__divsi3+0x44>
   17108:	000d883a 	mov	r6,zero
   1710c:	28000e16 	blt	r5,zero,17148 <__divsi3+0x54>
   17110:	00170780 	call	17078 <udivmodsi4>
   17114:	1007883a 	mov	r3,r2
   17118:	8005003a 	cmpeq	r2,r16,zero
   1711c:	1000011e 	bne	r2,zero,17124 <__divsi3+0x30>
   17120:	00c7c83a 	sub	r3,zero,r3
   17124:	1805883a 	mov	r2,r3
   17128:	dfc00117 	ldw	ra,4(sp)
   1712c:	dc000017 	ldw	r16,0(sp)
   17130:	dec00204 	addi	sp,sp,8
   17134:	f800283a 	ret
   17138:	0109c83a 	sub	r4,zero,r4
   1713c:	04000044 	movi	r16,1
   17140:	000d883a 	mov	r6,zero
   17144:	283ff20e 	bge	r5,zero,17110 <__divsi3+0x1c>
   17148:	014bc83a 	sub	r5,zero,r5
   1714c:	8021003a 	cmpeq	r16,r16,zero
   17150:	003fef06 	br	17110 <__divsi3+0x1c>

00017154 <__modsi3>:
   17154:	deffff04 	addi	sp,sp,-4
   17158:	dfc00015 	stw	ra,0(sp)
   1715c:	01800044 	movi	r6,1
   17160:	2807883a 	mov	r3,r5
   17164:	20000416 	blt	r4,zero,17178 <__modsi3+0x24>
   17168:	28000c16 	blt	r5,zero,1719c <__modsi3+0x48>
   1716c:	dfc00017 	ldw	ra,0(sp)
   17170:	dec00104 	addi	sp,sp,4
   17174:	00170781 	jmpi	17078 <udivmodsi4>
   17178:	0109c83a 	sub	r4,zero,r4
   1717c:	28000b16 	blt	r5,zero,171ac <__modsi3+0x58>
   17180:	180b883a 	mov	r5,r3
   17184:	01800044 	movi	r6,1
   17188:	00170780 	call	17078 <udivmodsi4>
   1718c:	0085c83a 	sub	r2,zero,r2
   17190:	dfc00017 	ldw	ra,0(sp)
   17194:	dec00104 	addi	sp,sp,4
   17198:	f800283a 	ret
   1719c:	014bc83a 	sub	r5,zero,r5
   171a0:	dfc00017 	ldw	ra,0(sp)
   171a4:	dec00104 	addi	sp,sp,4
   171a8:	00170781 	jmpi	17078 <udivmodsi4>
   171ac:	0147c83a 	sub	r3,zero,r5
   171b0:	003ff306 	br	17180 <__modsi3+0x2c>

000171b4 <__udivsi3>:
   171b4:	000d883a 	mov	r6,zero
   171b8:	00170781 	jmpi	17078 <udivmodsi4>

000171bc <__umodsi3>:
   171bc:	01800044 	movi	r6,1
   171c0:	00170781 	jmpi	17078 <udivmodsi4>

000171c4 <__unpack_d>:
   171c4:	20c00117 	ldw	r3,4(r4)
   171c8:	22400017 	ldw	r9,0(r4)
   171cc:	00800434 	movhi	r2,16
   171d0:	10bfffc4 	addi	r2,r2,-1
   171d4:	1808d53a 	srli	r4,r3,20
   171d8:	180cd7fa 	srli	r6,r3,31
   171dc:	1894703a 	and	r10,r3,r2
   171e0:	2201ffcc 	andi	r8,r4,2047
   171e4:	281b883a 	mov	r13,r5
   171e8:	4817883a 	mov	r11,r9
   171ec:	29800115 	stw	r6,4(r5)
   171f0:	5019883a 	mov	r12,r10
   171f4:	40001e1e 	bne	r8,zero,17270 <__unpack_d+0xac>
   171f8:	4a84b03a 	or	r2,r9,r10
   171fc:	10001926 	beq	r2,zero,17264 <__unpack_d+0xa0>
   17200:	4804d63a 	srli	r2,r9,24
   17204:	500c923a 	slli	r6,r10,8
   17208:	013f0084 	movi	r4,-1022
   1720c:	00c40034 	movhi	r3,4096
   17210:	18ffffc4 	addi	r3,r3,-1
   17214:	118cb03a 	or	r6,r2,r6
   17218:	008000c4 	movi	r2,3
   1721c:	480a923a 	slli	r5,r9,8
   17220:	68800015 	stw	r2,0(r13)
   17224:	69000215 	stw	r4,8(r13)
   17228:	19800b36 	bltu	r3,r6,17258 <__unpack_d+0x94>
   1722c:	200f883a 	mov	r7,r4
   17230:	1811883a 	mov	r8,r3
   17234:	2945883a 	add	r2,r5,r5
   17238:	1149803a 	cmpltu	r4,r2,r5
   1723c:	3187883a 	add	r3,r6,r6
   17240:	20c9883a 	add	r4,r4,r3
   17244:	100b883a 	mov	r5,r2
   17248:	200d883a 	mov	r6,r4
   1724c:	39ffffc4 	addi	r7,r7,-1
   17250:	413ff82e 	bgeu	r8,r4,17234 <__unpack_d+0x70>
   17254:	69c00215 	stw	r7,8(r13)
   17258:	69800415 	stw	r6,16(r13)
   1725c:	69400315 	stw	r5,12(r13)
   17260:	f800283a 	ret
   17264:	00800084 	movi	r2,2
   17268:	28800015 	stw	r2,0(r5)
   1726c:	f800283a 	ret
   17270:	0081ffc4 	movi	r2,2047
   17274:	40800f26 	beq	r8,r2,172b4 <__unpack_d+0xf0>
   17278:	480cd63a 	srli	r6,r9,24
   1727c:	5006923a 	slli	r3,r10,8
   17280:	4804923a 	slli	r2,r9,8
   17284:	0009883a 	mov	r4,zero
   17288:	30c6b03a 	or	r3,r6,r3
   1728c:	01440034 	movhi	r5,4096
   17290:	110cb03a 	or	r6,r2,r4
   17294:	423f0044 	addi	r8,r8,-1023
   17298:	194eb03a 	or	r7,r3,r5
   1729c:	008000c4 	movi	r2,3
   172a0:	69c00415 	stw	r7,16(r13)
   172a4:	6a000215 	stw	r8,8(r13)
   172a8:	68800015 	stw	r2,0(r13)
   172ac:	69800315 	stw	r6,12(r13)
   172b0:	f800283a 	ret
   172b4:	4a84b03a 	or	r2,r9,r10
   172b8:	1000031e 	bne	r2,zero,172c8 <__unpack_d+0x104>
   172bc:	00800104 	movi	r2,4
   172c0:	28800015 	stw	r2,0(r5)
   172c4:	f800283a 	ret
   172c8:	0009883a 	mov	r4,zero
   172cc:	01400234 	movhi	r5,8
   172d0:	4904703a 	and	r2,r9,r4
   172d4:	5146703a 	and	r3,r10,r5
   172d8:	10c4b03a 	or	r2,r2,r3
   172dc:	10000526 	beq	r2,zero,172f4 <__unpack_d+0x130>
   172e0:	00800044 	movi	r2,1
   172e4:	68800015 	stw	r2,0(r13)
   172e8:	6b000415 	stw	r12,16(r13)
   172ec:	6ac00315 	stw	r11,12(r13)
   172f0:	f800283a 	ret
   172f4:	68000015 	stw	zero,0(r13)
   172f8:	003ffb06 	br	172e8 <__unpack_d+0x124>

000172fc <__fpcmp_parts_d>:
   172fc:	21800017 	ldw	r6,0(r4)
   17300:	00c00044 	movi	r3,1
   17304:	19800a2e 	bgeu	r3,r6,17330 <__fpcmp_parts_d+0x34>
   17308:	28800017 	ldw	r2,0(r5)
   1730c:	1880082e 	bgeu	r3,r2,17330 <__fpcmp_parts_d+0x34>
   17310:	00c00104 	movi	r3,4
   17314:	30c02626 	beq	r6,r3,173b0 <__fpcmp_parts_d+0xb4>
   17318:	10c02226 	beq	r2,r3,173a4 <__fpcmp_parts_d+0xa8>
   1731c:	00c00084 	movi	r3,2
   17320:	30c00526 	beq	r6,r3,17338 <__fpcmp_parts_d+0x3c>
   17324:	10c0071e 	bne	r2,r3,17344 <__fpcmp_parts_d+0x48>
   17328:	20800117 	ldw	r2,4(r4)
   1732c:	1000091e 	bne	r2,zero,17354 <__fpcmp_parts_d+0x58>
   17330:	00800044 	movi	r2,1
   17334:	f800283a 	ret
   17338:	10c01a1e 	bne	r2,r3,173a4 <__fpcmp_parts_d+0xa8>
   1733c:	0005883a 	mov	r2,zero
   17340:	f800283a 	ret
   17344:	22000117 	ldw	r8,4(r4)
   17348:	28800117 	ldw	r2,4(r5)
   1734c:	40800326 	beq	r8,r2,1735c <__fpcmp_parts_d+0x60>
   17350:	403ff726 	beq	r8,zero,17330 <__fpcmp_parts_d+0x34>
   17354:	00bfffc4 	movi	r2,-1
   17358:	f800283a 	ret
   1735c:	20c00217 	ldw	r3,8(r4)
   17360:	28800217 	ldw	r2,8(r5)
   17364:	10fffa16 	blt	r2,r3,17350 <__fpcmp_parts_d+0x54>
   17368:	18800916 	blt	r3,r2,17390 <__fpcmp_parts_d+0x94>
   1736c:	21c00417 	ldw	r7,16(r4)
   17370:	28c00417 	ldw	r3,16(r5)
   17374:	21800317 	ldw	r6,12(r4)
   17378:	28800317 	ldw	r2,12(r5)
   1737c:	19fff436 	bltu	r3,r7,17350 <__fpcmp_parts_d+0x54>
   17380:	38c00526 	beq	r7,r3,17398 <__fpcmp_parts_d+0x9c>
   17384:	38c00236 	bltu	r7,r3,17390 <__fpcmp_parts_d+0x94>
   17388:	19ffec1e 	bne	r3,r7,1733c <__fpcmp_parts_d+0x40>
   1738c:	30bfeb2e 	bgeu	r6,r2,1733c <__fpcmp_parts_d+0x40>
   17390:	403fe71e 	bne	r8,zero,17330 <__fpcmp_parts_d+0x34>
   17394:	003fef06 	br	17354 <__fpcmp_parts_d+0x58>
   17398:	11bffa2e 	bgeu	r2,r6,17384 <__fpcmp_parts_d+0x88>
   1739c:	403fe426 	beq	r8,zero,17330 <__fpcmp_parts_d+0x34>
   173a0:	003fec06 	br	17354 <__fpcmp_parts_d+0x58>
   173a4:	28800117 	ldw	r2,4(r5)
   173a8:	103fe11e 	bne	r2,zero,17330 <__fpcmp_parts_d+0x34>
   173ac:	003fe906 	br	17354 <__fpcmp_parts_d+0x58>
   173b0:	11bfdd1e 	bne	r2,r6,17328 <__fpcmp_parts_d+0x2c>
   173b4:	28c00117 	ldw	r3,4(r5)
   173b8:	20800117 	ldw	r2,4(r4)
   173bc:	1885c83a 	sub	r2,r3,r2
   173c0:	f800283a 	ret

000173c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   173c4:	defffe04 	addi	sp,sp,-8
   173c8:	dfc00115 	stw	ra,4(sp)
   173cc:	df000015 	stw	fp,0(sp)
   173d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   173d4:	010000b4 	movhi	r4,2
   173d8:	21263504 	addi	r4,r4,-26412
   173dc:	014000b4 	movhi	r5,2
   173e0:	29647804 	addi	r5,r5,-28192
   173e4:	018000b4 	movhi	r6,2
   173e8:	31a63504 	addi	r6,r6,-26412
   173ec:	00174440 	call	17444 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   173f0:	01000074 	movhi	r4,1
   173f4:	21000804 	addi	r4,r4,32
   173f8:	01400074 	movhi	r5,1
   173fc:	29400804 	addi	r5,r5,32
   17400:	01800074 	movhi	r6,1
   17404:	31806d04 	addi	r6,r6,436
   17408:	00174440 	call	17444 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1740c:	010000b4 	movhi	r4,2
   17410:	2123c404 	addi	r4,r4,-28912
   17414:	014000b4 	movhi	r5,2
   17418:	2963c404 	addi	r5,r5,-28912
   1741c:	018000b4 	movhi	r6,2
   17420:	31a47804 	addi	r6,r6,-28192
   17424:	00174440 	call	17444 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   17428:	0017e2c0 	call	17e2c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1742c:	0017f880 	call	17f88 <alt_icache_flush_all>
}
   17430:	e037883a 	mov	sp,fp
   17434:	dfc00117 	ldw	ra,4(sp)
   17438:	df000017 	ldw	fp,0(sp)
   1743c:	dec00204 	addi	sp,sp,8
   17440:	f800283a 	ret

00017444 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   17444:	defffc04 	addi	sp,sp,-16
   17448:	df000315 	stw	fp,12(sp)
   1744c:	df000304 	addi	fp,sp,12
   17450:	e13ffd15 	stw	r4,-12(fp)
   17454:	e17ffe15 	stw	r5,-8(fp)
   17458:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1745c:	e0fffe17 	ldw	r3,-8(fp)
   17460:	e0bffd17 	ldw	r2,-12(fp)
   17464:	18800e26 	beq	r3,r2,174a0 <alt_load_section+0x5c>
  {
    while( to != end )
   17468:	00000a06 	br	17494 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1746c:	e0bffd17 	ldw	r2,-12(fp)
   17470:	10c00017 	ldw	r3,0(r2)
   17474:	e0bffe17 	ldw	r2,-8(fp)
   17478:	10c00015 	stw	r3,0(r2)
   1747c:	e0bffe17 	ldw	r2,-8(fp)
   17480:	10800104 	addi	r2,r2,4
   17484:	e0bffe15 	stw	r2,-8(fp)
   17488:	e0bffd17 	ldw	r2,-12(fp)
   1748c:	10800104 	addi	r2,r2,4
   17490:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   17494:	e0fffe17 	ldw	r3,-8(fp)
   17498:	e0bfff17 	ldw	r2,-4(fp)
   1749c:	18bff31e 	bne	r3,r2,1746c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   174a0:	e037883a 	mov	sp,fp
   174a4:	df000017 	ldw	fp,0(sp)
   174a8:	dec00104 	addi	sp,sp,4
   174ac:	f800283a 	ret

000174b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   174b0:	defffd04 	addi	sp,sp,-12
   174b4:	dfc00215 	stw	ra,8(sp)
   174b8:	df000115 	stw	fp,4(sp)
   174bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   174c0:	0009883a 	mov	r4,zero
   174c4:	00178c00 	call	178c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   174c8:	00178f40 	call	178f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   174cc:	010000b4 	movhi	r4,2
   174d0:	21246d04 	addi	r4,r4,-28236
   174d4:	014000b4 	movhi	r5,2
   174d8:	29646d04 	addi	r5,r5,-28236
   174dc:	018000b4 	movhi	r6,2
   174e0:	31a46d04 	addi	r6,r6,-28236
   174e4:	001835c0 	call	1835c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   174e8:	d121cf17 	ldw	r4,-30916(gp)
   174ec:	d161d017 	ldw	r5,-30912(gp)
   174f0:	d1a1d117 	ldw	r6,-30908(gp)
   174f4:	001036c0 	call	1036c <main>
   174f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   174fc:	01000044 	movi	r4,1
   17500:	0017ccc0 	call	17ccc <close>
  exit (result);
   17504:	e13fff17 	ldw	r4,-4(fp)
   17508:	0018c080 	call	18c08 <exit>

0001750c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1750c:	defffe04 	addi	sp,sp,-8
   17510:	df000115 	stw	fp,4(sp)
   17514:	df000104 	addi	fp,sp,4
   17518:	e13fff15 	stw	r4,-4(fp)
}
   1751c:	e037883a 	mov	sp,fp
   17520:	df000017 	ldw	fp,0(sp)
   17524:	dec00104 	addi	sp,sp,4
   17528:	f800283a 	ret

0001752c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1752c:	defffe04 	addi	sp,sp,-8
   17530:	df000115 	stw	fp,4(sp)
   17534:	df000104 	addi	fp,sp,4
   17538:	e13fff15 	stw	r4,-4(fp)
}
   1753c:	e037883a 	mov	sp,fp
   17540:	df000017 	ldw	fp,0(sp)
   17544:	dec00104 	addi	sp,sp,4
   17548:	f800283a 	ret

0001754c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   1754c:	defffd04 	addi	sp,sp,-12
   17550:	dfc00215 	stw	ra,8(sp)
   17554:	df000115 	stw	fp,4(sp)
   17558:	df000104 	addi	fp,sp,4
   1755c:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   17560:	008000b4 	movhi	r2,2
   17564:	10a62704 	addi	r2,r2,-26468
   17568:	10800017 	ldw	r2,0(r2)
   1756c:	11400217 	ldw	r5,8(r2)
   17570:	e13fff17 	ldw	r4,-4(fp)
   17574:	0018c280 	call	18c28 <fputs>
#endif
}
   17578:	e037883a 	mov	sp,fp
   1757c:	dfc00117 	ldw	ra,4(sp)
   17580:	df000017 	ldw	fp,0(sp)
   17584:	dec00204 	addi	sp,sp,8
   17588:	f800283a 	ret

0001758c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1758c:	defff804 	addi	sp,sp,-32
   17590:	df000715 	stw	fp,28(sp)
   17594:	df000704 	addi	fp,sp,28
   17598:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1759c:	0005303a 	rdctl	r2,status
   175a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   175a4:	e0fffb17 	ldw	r3,-20(fp)
   175a8:	00bfff84 	movi	r2,-2
   175ac:	1884703a 	and	r2,r3,r2
   175b0:	1001703a 	wrctl	status,r2
  
  return context;
   175b4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   175b8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   175bc:	d0a00417 	ldw	r2,-32752(gp)
   175c0:	10c000c4 	addi	r3,r2,3
   175c4:	00bfff04 	movi	r2,-4
   175c8:	1884703a 	and	r2,r3,r2
   175cc:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   175d0:	d0e00417 	ldw	r3,-32752(gp)
   175d4:	e0bffe17 	ldw	r2,-8(fp)
   175d8:	1887883a 	add	r3,r3,r2
   175dc:	008000b4 	movhi	r2,2
   175e0:	10ab2d04 	addi	r2,r2,-21324
   175e4:	10c0072e 	bgeu	r2,r3,17604 <sbrk+0x78>
   175e8:	e0bffd17 	ldw	r2,-12(fp)
   175ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   175f0:	e0bffa17 	ldw	r2,-24(fp)
   175f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   175f8:	00bfffc4 	movi	r2,-1
   175fc:	e0bfff15 	stw	r2,-4(fp)
   17600:	00000c06 	br	17634 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   17604:	d0a00417 	ldw	r2,-32752(gp)
   17608:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   1760c:	d0e00417 	ldw	r3,-32752(gp)
   17610:	e0bffe17 	ldw	r2,-8(fp)
   17614:	1885883a 	add	r2,r3,r2
   17618:	d0a00415 	stw	r2,-32752(gp)
   1761c:	e0bffd17 	ldw	r2,-12(fp)
   17620:	e0bff915 	stw	r2,-28(fp)
   17624:	e0bff917 	ldw	r2,-28(fp)
   17628:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1762c:	e0bffc17 	ldw	r2,-16(fp)
   17630:	e0bfff15 	stw	r2,-4(fp)
   17634:	e0bfff17 	ldw	r2,-4(fp)
} 
   17638:	e037883a 	mov	sp,fp
   1763c:	df000017 	ldw	fp,0(sp)
   17640:	dec00104 	addi	sp,sp,4
   17644:	f800283a 	ret

00017648 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   17648:	defffb04 	addi	sp,sp,-20
   1764c:	dfc00415 	stw	ra,16(sp)
   17650:	df000315 	stw	fp,12(sp)
   17654:	df000304 	addi	fp,sp,12
   17658:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1765c:	008000b4 	movhi	r2,2
   17660:	10a7fb04 	addi	r2,r2,-24596
   17664:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
   17668:	e0bffd15 	stw	r2,-12(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1766c:	008000b4 	movhi	r2,2
   17670:	10a7fa04 	addi	r2,r2,-24600
   17674:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   17678:	1004c03a 	cmpne	r2,r2,zero
   1767c:	1000061e 	bne	r2,zero,17698 <times+0x50>
  {
    ALT_ERRNO = ENOSYS;
   17680:	00176dc0 	call	176dc <alt_get_errno>
   17684:	1007883a 	mov	r3,r2
   17688:	00801604 	movi	r2,88
   1768c:	18800015 	stw	r2,0(r3)
    return 0;
   17690:	e03fff15 	stw	zero,-4(fp)
   17694:	00000b06 	br	176c4 <times+0x7c>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   17698:	e0bffe17 	ldw	r2,-8(fp)
   1769c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   176a0:	e0fffe17 	ldw	r3,-8(fp)
   176a4:	e0bffd17 	ldw	r2,-12(fp)
   176a8:	18800115 	stw	r2,4(r3)
  buf->tms_cutime = 0;
   176ac:	e0bffe17 	ldw	r2,-8(fp)
   176b0:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   176b4:	e0bffe17 	ldw	r2,-8(fp)
   176b8:	10000315 	stw	zero,12(r2)

  return ticks;
   176bc:	e0bffd17 	ldw	r2,-12(fp)
   176c0:	e0bfff15 	stw	r2,-4(fp)
   176c4:	e0bfff17 	ldw	r2,-4(fp)
}
   176c8:	e037883a 	mov	sp,fp
   176cc:	dfc00117 	ldw	ra,4(sp)
   176d0:	df000017 	ldw	fp,0(sp)
   176d4:	dec00204 	addi	sp,sp,8
   176d8:	f800283a 	ret

000176dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   176dc:	defffd04 	addi	sp,sp,-12
   176e0:	dfc00215 	stw	ra,8(sp)
   176e4:	df000115 	stw	fp,4(sp)
   176e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   176ec:	008000b4 	movhi	r2,2
   176f0:	10a63104 	addi	r2,r2,-26428
   176f4:	10800017 	ldw	r2,0(r2)
   176f8:	1005003a 	cmpeq	r2,r2,zero
   176fc:	1000061e 	bne	r2,zero,17718 <alt_get_errno+0x3c>
   17700:	008000b4 	movhi	r2,2
   17704:	10a63104 	addi	r2,r2,-26428
   17708:	10800017 	ldw	r2,0(r2)
   1770c:	103ee83a 	callr	r2
   17710:	e0bfff15 	stw	r2,-4(fp)
   17714:	00000306 	br	17724 <alt_get_errno+0x48>
   17718:	008000b4 	movhi	r2,2
   1771c:	10a7f204 	addi	r2,r2,-24632
   17720:	e0bfff15 	stw	r2,-4(fp)
   17724:	e0bfff17 	ldw	r2,-4(fp)
}
   17728:	e037883a 	mov	sp,fp
   1772c:	dfc00117 	ldw	ra,4(sp)
   17730:	df000017 	ldw	fp,0(sp)
   17734:	dec00204 	addi	sp,sp,8
   17738:	f800283a 	ret

0001773c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1773c:	defff704 	addi	sp,sp,-36
   17740:	dfc00815 	stw	ra,32(sp)
   17744:	df000715 	stw	fp,28(sp)
   17748:	df000704 	addi	fp,sp,28
   1774c:	e13ffb15 	stw	r4,-20(fp)
   17750:	e17ffc15 	stw	r5,-16(fp)
   17754:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17758:	e0bffb17 	ldw	r2,-20(fp)
   1775c:	1004803a 	cmplt	r2,r2,zero
   17760:	1000091e 	bne	r2,zero,17788 <write+0x4c>
   17764:	e13ffb17 	ldw	r4,-20(fp)
   17768:	01400304 	movi	r5,12
   1776c:	00114b80 	call	114b8 <__mulsi3>
   17770:	1007883a 	mov	r3,r2
   17774:	008000b4 	movhi	r2,2
   17778:	10a5c704 	addi	r2,r2,-26852
   1777c:	1887883a 	add	r3,r3,r2
   17780:	e0ffff15 	stw	r3,-4(fp)
   17784:	00000106 	br	1778c <write+0x50>
   17788:	e03fff15 	stw	zero,-4(fp)
   1778c:	e0bfff17 	ldw	r2,-4(fp)
   17790:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   17794:	e0bffa17 	ldw	r2,-24(fp)
   17798:	1005003a 	cmpeq	r2,r2,zero
   1779c:	1000241e 	bne	r2,zero,17830 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   177a0:	e0bffa17 	ldw	r2,-24(fp)
   177a4:	10800217 	ldw	r2,8(r2)
   177a8:	108000cc 	andi	r2,r2,3
   177ac:	1005003a 	cmpeq	r2,r2,zero
   177b0:	10001a1e 	bne	r2,zero,1781c <write+0xe0>
   177b4:	e0bffa17 	ldw	r2,-24(fp)
   177b8:	10800017 	ldw	r2,0(r2)
   177bc:	10800617 	ldw	r2,24(r2)
   177c0:	1005003a 	cmpeq	r2,r2,zero
   177c4:	1000151e 	bne	r2,zero,1781c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   177c8:	e0bffa17 	ldw	r2,-24(fp)
   177cc:	10800017 	ldw	r2,0(r2)
   177d0:	10800617 	ldw	r2,24(r2)
   177d4:	e17ffc17 	ldw	r5,-16(fp)
   177d8:	e1bffd17 	ldw	r6,-12(fp)
   177dc:	e13ffa17 	ldw	r4,-24(fp)
   177e0:	103ee83a 	callr	r2
   177e4:	e0bff915 	stw	r2,-28(fp)
   177e8:	e0bff917 	ldw	r2,-28(fp)
   177ec:	1004403a 	cmpge	r2,r2,zero
   177f0:	1000071e 	bne	r2,zero,17810 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   177f4:	00178600 	call	17860 <alt_get_errno>
   177f8:	e0fff917 	ldw	r3,-28(fp)
   177fc:	00c7c83a 	sub	r3,zero,r3
   17800:	10c00015 	stw	r3,0(r2)
        return -1;
   17804:	00bfffc4 	movi	r2,-1
   17808:	e0bffe15 	stw	r2,-8(fp)
   1780c:	00000e06 	br	17848 <write+0x10c>
      }
      return rval;
   17810:	e0bff917 	ldw	r2,-28(fp)
   17814:	e0bffe15 	stw	r2,-8(fp)
   17818:	00000b06 	br	17848 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1781c:	00178600 	call	17860 <alt_get_errno>
   17820:	1007883a 	mov	r3,r2
   17824:	00800344 	movi	r2,13
   17828:	18800015 	stw	r2,0(r3)
   1782c:	00000406 	br	17840 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   17830:	00178600 	call	17860 <alt_get_errno>
   17834:	1007883a 	mov	r3,r2
   17838:	00801444 	movi	r2,81
   1783c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   17840:	00bfffc4 	movi	r2,-1
   17844:	e0bffe15 	stw	r2,-8(fp)
   17848:	e0bffe17 	ldw	r2,-8(fp)
}
   1784c:	e037883a 	mov	sp,fp
   17850:	dfc00117 	ldw	ra,4(sp)
   17854:	df000017 	ldw	fp,0(sp)
   17858:	dec00204 	addi	sp,sp,8
   1785c:	f800283a 	ret

00017860 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17860:	defffd04 	addi	sp,sp,-12
   17864:	dfc00215 	stw	ra,8(sp)
   17868:	df000115 	stw	fp,4(sp)
   1786c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   17870:	008000b4 	movhi	r2,2
   17874:	10a63104 	addi	r2,r2,-26428
   17878:	10800017 	ldw	r2,0(r2)
   1787c:	1005003a 	cmpeq	r2,r2,zero
   17880:	1000061e 	bne	r2,zero,1789c <alt_get_errno+0x3c>
   17884:	008000b4 	movhi	r2,2
   17888:	10a63104 	addi	r2,r2,-26428
   1788c:	10800017 	ldw	r2,0(r2)
   17890:	103ee83a 	callr	r2
   17894:	e0bfff15 	stw	r2,-4(fp)
   17898:	00000306 	br	178a8 <alt_get_errno+0x48>
   1789c:	008000b4 	movhi	r2,2
   178a0:	10a7f204 	addi	r2,r2,-24632
   178a4:	e0bfff15 	stw	r2,-4(fp)
   178a8:	e0bfff17 	ldw	r2,-4(fp)
}
   178ac:	e037883a 	mov	sp,fp
   178b0:	dfc00117 	ldw	ra,4(sp)
   178b4:	df000017 	ldw	fp,0(sp)
   178b8:	dec00204 	addi	sp,sp,8
   178bc:	f800283a 	ret

000178c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   178c0:	defffd04 	addi	sp,sp,-12
   178c4:	dfc00215 	stw	ra,8(sp)
   178c8:	df000115 	stw	fp,4(sp)
   178cc:	df000104 	addi	fp,sp,4
   178d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   178d4:	00188d40 	call	188d4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   178d8:	00800044 	movi	r2,1
   178dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   178e0:	e037883a 	mov	sp,fp
   178e4:	dfc00117 	ldw	ra,4(sp)
   178e8:	df000017 	ldw	fp,0(sp)
   178ec:	dec00204 	addi	sp,sp,8
   178f0:	f800283a 	ret

000178f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   178f4:	defffe04 	addi	sp,sp,-8
   178f8:	dfc00115 	stw	ra,4(sp)
   178fc:	df000015 	stw	fp,0(sp)
   17900:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   17904:	010000b4 	movhi	r4,2
   17908:	21040004 	addi	r4,r4,4096
   1790c:	000b883a 	mov	r5,zero
   17910:	01800044 	movi	r6,1
   17914:	01c0fa04 	movi	r7,1000
   17918:	0017c3c0 	call	17c3c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   1791c:	010000b4 	movhi	r4,2
   17920:	2125b204 	addi	r4,r4,-26936
   17924:	001793c0 	call	1793c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   17928:	e037883a 	mov	sp,fp
   1792c:	dfc00117 	ldw	ra,4(sp)
   17930:	df000017 	ldw	fp,0(sp)
   17934:	dec00204 	addi	sp,sp,8
   17938:	f800283a 	ret

0001793c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1793c:	defffd04 	addi	sp,sp,-12
   17940:	dfc00215 	stw	ra,8(sp)
   17944:	df000115 	stw	fp,4(sp)
   17948:	df000104 	addi	fp,sp,4
   1794c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   17950:	e13fff17 	ldw	r4,-4(fp)
   17954:	014000b4 	movhi	r5,2
   17958:	29662e04 	addi	r5,r5,-26440
   1795c:	0017e740 	call	17e74 <alt_dev_llist_insert>
}
   17960:	e037883a 	mov	sp,fp
   17964:	dfc00117 	ldw	ra,4(sp)
   17968:	df000017 	ldw	fp,0(sp)
   1796c:	dec00204 	addi	sp,sp,8
   17970:	f800283a 	ret

00017974 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   17974:	defffa04 	addi	sp,sp,-24
   17978:	dfc00515 	stw	ra,20(sp)
   1797c:	df000415 	stw	fp,16(sp)
   17980:	df000404 	addi	fp,sp,16
   17984:	e13ffd15 	stw	r4,-12(fp)
   17988:	e17ffe15 	stw	r5,-8(fp)
   1798c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17990:	e0bffd17 	ldw	r2,-12(fp)
   17994:	10800017 	ldw	r2,0(r2)
   17998:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1799c:	e0bffc17 	ldw	r2,-16(fp)
   179a0:	11000a04 	addi	r4,r2,40
   179a4:	e0bffd17 	ldw	r2,-12(fp)
   179a8:	11c00217 	ldw	r7,8(r2)
   179ac:	e17ffe17 	ldw	r5,-8(fp)
   179b0:	e1bfff17 	ldw	r6,-4(fp)
   179b4:	0017a240 	call	17a24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   179b8:	e037883a 	mov	sp,fp
   179bc:	dfc00117 	ldw	ra,4(sp)
   179c0:	df000017 	ldw	fp,0(sp)
   179c4:	dec00204 	addi	sp,sp,8
   179c8:	f800283a 	ret

000179cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   179cc:	defffa04 	addi	sp,sp,-24
   179d0:	dfc00515 	stw	ra,20(sp)
   179d4:	df000415 	stw	fp,16(sp)
   179d8:	df000404 	addi	fp,sp,16
   179dc:	e13ffd15 	stw	r4,-12(fp)
   179e0:	e17ffe15 	stw	r5,-8(fp)
   179e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   179e8:	e0bffd17 	ldw	r2,-12(fp)
   179ec:	10800017 	ldw	r2,0(r2)
   179f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   179f4:	e0bffc17 	ldw	r2,-16(fp)
   179f8:	11000a04 	addi	r4,r2,40
   179fc:	e0bffd17 	ldw	r2,-12(fp)
   17a00:	11c00217 	ldw	r7,8(r2)
   17a04:	e17ffe17 	ldw	r5,-8(fp)
   17a08:	e1bfff17 	ldw	r6,-4(fp)
   17a0c:	0017b280 	call	17b28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   17a10:	e037883a 	mov	sp,fp
   17a14:	dfc00117 	ldw	ra,4(sp)
   17a18:	df000017 	ldw	fp,0(sp)
   17a1c:	dec00204 	addi	sp,sp,8
   17a20:	f800283a 	ret

00017a24 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   17a24:	defff604 	addi	sp,sp,-40
   17a28:	df000915 	stw	fp,36(sp)
   17a2c:	df000904 	addi	fp,sp,36
   17a30:	e13ffb15 	stw	r4,-20(fp)
   17a34:	e17ffc15 	stw	r5,-16(fp)
   17a38:	e1bffd15 	stw	r6,-12(fp)
   17a3c:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   17a40:	e0bffb17 	ldw	r2,-20(fp)
   17a44:	10800017 	ldw	r2,0(r2)
   17a48:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   17a4c:	e0bffc17 	ldw	r2,-16(fp)
   17a50:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   17a54:	e0bffd17 	ldw	r2,-12(fp)
   17a58:	1007883a 	mov	r3,r2
   17a5c:	e0bffc17 	ldw	r2,-16(fp)
   17a60:	10c5883a 	add	r2,r2,r3
   17a64:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   17a68:	00001606 	br	17ac4 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   17a6c:	e0bffa17 	ldw	r2,-24(fp)
   17a70:	10800037 	ldwio	r2,0(r2)
   17a74:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   17a78:	e0bff717 	ldw	r2,-36(fp)
   17a7c:	10a0000c 	andi	r2,r2,32768
   17a80:	1005003a 	cmpeq	r2,r2,zero
   17a84:	1000081e 	bne	r2,zero,17aa8 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   17a88:	e0bff717 	ldw	r2,-36(fp)
   17a8c:	1007883a 	mov	r3,r2
   17a90:	e0bff917 	ldw	r2,-28(fp)
   17a94:	10c00005 	stb	r3,0(r2)
   17a98:	e0bff917 	ldw	r2,-28(fp)
   17a9c:	10800044 	addi	r2,r2,1
   17aa0:	e0bff915 	stw	r2,-28(fp)
   17aa4:	00000706 	br	17ac4 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   17aa8:	e0fff917 	ldw	r3,-28(fp)
   17aac:	e0bffc17 	ldw	r2,-16(fp)
   17ab0:	1880071e 	bne	r3,r2,17ad0 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   17ab4:	e0bffe17 	ldw	r2,-8(fp)
   17ab8:	1090000c 	andi	r2,r2,16384
   17abc:	1004c03a 	cmpne	r2,r2,zero
   17ac0:	1000031e 	bne	r2,zero,17ad0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   17ac4:	e0fff917 	ldw	r3,-28(fp)
   17ac8:	e0bff817 	ldw	r2,-32(fp)
   17acc:	18bfe736 	bltu	r3,r2,17a6c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   17ad0:	e0fff917 	ldw	r3,-28(fp)
   17ad4:	e0bffc17 	ldw	r2,-16(fp)
   17ad8:	18800526 	beq	r3,r2,17af0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   17adc:	e0fff917 	ldw	r3,-28(fp)
   17ae0:	e0bffc17 	ldw	r2,-16(fp)
   17ae4:	1887c83a 	sub	r3,r3,r2
   17ae8:	e0ffff15 	stw	r3,-4(fp)
   17aec:	00000906 	br	17b14 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   17af0:	e0bffe17 	ldw	r2,-8(fp)
   17af4:	1090000c 	andi	r2,r2,16384
   17af8:	1005003a 	cmpeq	r2,r2,zero
   17afc:	1000031e 	bne	r2,zero,17b0c <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   17b00:	00bffd44 	movi	r2,-11
   17b04:	e0bfff15 	stw	r2,-4(fp)
   17b08:	00000206 	br	17b14 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   17b0c:	00bffec4 	movi	r2,-5
   17b10:	e0bfff15 	stw	r2,-4(fp)
   17b14:	e0bfff17 	ldw	r2,-4(fp)
}
   17b18:	e037883a 	mov	sp,fp
   17b1c:	df000017 	ldw	fp,0(sp)
   17b20:	dec00104 	addi	sp,sp,4
   17b24:	f800283a 	ret

00017b28 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   17b28:	defff904 	addi	sp,sp,-28
   17b2c:	df000615 	stw	fp,24(sp)
   17b30:	df000604 	addi	fp,sp,24
   17b34:	e13ffc15 	stw	r4,-16(fp)
   17b38:	e17ffd15 	stw	r5,-12(fp)
   17b3c:	e1bffe15 	stw	r6,-8(fp)
   17b40:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   17b44:	e0bffc17 	ldw	r2,-16(fp)
   17b48:	10800017 	ldw	r2,0(r2)
   17b4c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   17b50:	e0bffe17 	ldw	r2,-8(fp)
   17b54:	1007883a 	mov	r3,r2
   17b58:	e0bffd17 	ldw	r2,-12(fp)
   17b5c:	10c5883a 	add	r2,r2,r3
   17b60:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   17b64:	00001106 	br	17bac <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   17b68:	e0bffb17 	ldw	r2,-20(fp)
   17b6c:	10800104 	addi	r2,r2,4
   17b70:	10800037 	ldwio	r2,0(r2)
   17b74:	10bfffec 	andhi	r2,r2,65535
   17b78:	1005003a 	cmpeq	r2,r2,zero
   17b7c:	10000b1e 	bne	r2,zero,17bac <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   17b80:	e13ffb17 	ldw	r4,-20(fp)
   17b84:	e0bffd17 	ldw	r2,-12(fp)
   17b88:	10800003 	ldbu	r2,0(r2)
   17b8c:	10c03fcc 	andi	r3,r2,255
   17b90:	18c0201c 	xori	r3,r3,128
   17b94:	18ffe004 	addi	r3,r3,-128
   17b98:	e0bffd17 	ldw	r2,-12(fp)
   17b9c:	10800044 	addi	r2,r2,1
   17ba0:	e0bffd15 	stw	r2,-12(fp)
   17ba4:	2005883a 	mov	r2,r4
   17ba8:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   17bac:	e0fffd17 	ldw	r3,-12(fp)
   17bb0:	e0bffa17 	ldw	r2,-24(fp)
   17bb4:	18bfec36 	bltu	r3,r2,17b68 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   17bb8:	e0bffe17 	ldw	r2,-8(fp)
}
   17bbc:	e037883a 	mov	sp,fp
   17bc0:	df000017 	ldw	fp,0(sp)
   17bc4:	dec00104 	addi	sp,sp,4
   17bc8:	f800283a 	ret

00017bcc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   17bcc:	defffa04 	addi	sp,sp,-24
   17bd0:	dfc00515 	stw	ra,20(sp)
   17bd4:	df000415 	stw	fp,16(sp)
   17bd8:	df000404 	addi	fp,sp,16
   17bdc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   17be0:	e0bfff17 	ldw	r2,-4(fp)
   17be4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   17be8:	e0bfff17 	ldw	r2,-4(fp)
   17bec:	10800104 	addi	r2,r2,4
   17bf0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17bf4:	0005303a 	rdctl	r2,status
   17bf8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17bfc:	e0fffd17 	ldw	r3,-12(fp)
   17c00:	00bfff84 	movi	r2,-2
   17c04:	1884703a 	and	r2,r3,r2
   17c08:	1001703a 	wrctl	status,r2
  
  return context;
   17c0c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   17c10:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   17c14:	00187c80 	call	187c8 <alt_tick>
   17c18:	e0bffe17 	ldw	r2,-8(fp)
   17c1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17c20:	e0bffc17 	ldw	r2,-16(fp)
   17c24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   17c28:	e037883a 	mov	sp,fp
   17c2c:	dfc00117 	ldw	ra,4(sp)
   17c30:	df000017 	ldw	fp,0(sp)
   17c34:	dec00204 	addi	sp,sp,8
   17c38:	f800283a 	ret

00017c3c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   17c3c:	defff804 	addi	sp,sp,-32
   17c40:	dfc00715 	stw	ra,28(sp)
   17c44:	df000615 	stw	fp,24(sp)
   17c48:	df000604 	addi	fp,sp,24
   17c4c:	e13ffc15 	stw	r4,-16(fp)
   17c50:	e17ffd15 	stw	r5,-12(fp)
   17c54:	e1bffe15 	stw	r6,-8(fp)
   17c58:	e1ffff15 	stw	r7,-4(fp)
   17c5c:	e0bfff17 	ldw	r2,-4(fp)
   17c60:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   17c64:	008000b4 	movhi	r2,2
   17c68:	10a7fa04 	addi	r2,r2,-24600
   17c6c:	10800017 	ldw	r2,0(r2)
   17c70:	1004c03a 	cmpne	r2,r2,zero
   17c74:	1000041e 	bne	r2,zero,17c88 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   17c78:	00c000b4 	movhi	r3,2
   17c7c:	18e7fa04 	addi	r3,r3,-24600
   17c80:	e0bffb17 	ldw	r2,-20(fp)
   17c84:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   17c88:	e0bffc17 	ldw	r2,-16(fp)
   17c8c:	10800104 	addi	r2,r2,4
   17c90:	1007883a 	mov	r3,r2
   17c94:	008001c4 	movi	r2,7
   17c98:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   17c9c:	d8000015 	stw	zero,0(sp)
   17ca0:	e13ffd17 	ldw	r4,-12(fp)
   17ca4:	e17ffe17 	ldw	r5,-8(fp)
   17ca8:	01800074 	movhi	r6,1
   17cac:	319ef304 	addi	r6,r6,31692
   17cb0:	e1fffc17 	ldw	r7,-16(fp)
   17cb4:	0017fb80 	call	17fb8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   17cb8:	e037883a 	mov	sp,fp
   17cbc:	dfc00117 	ldw	ra,4(sp)
   17cc0:	df000017 	ldw	fp,0(sp)
   17cc4:	dec00204 	addi	sp,sp,8
   17cc8:	f800283a 	ret

00017ccc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   17ccc:	defff804 	addi	sp,sp,-32
   17cd0:	dfc00715 	stw	ra,28(sp)
   17cd4:	df000615 	stw	fp,24(sp)
   17cd8:	df000604 	addi	fp,sp,24
   17cdc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   17ce0:	e0bffc17 	ldw	r2,-16(fp)
   17ce4:	1004803a 	cmplt	r2,r2,zero
   17ce8:	1000091e 	bne	r2,zero,17d10 <close+0x44>
   17cec:	e13ffc17 	ldw	r4,-16(fp)
   17cf0:	01400304 	movi	r5,12
   17cf4:	00114b80 	call	114b8 <__mulsi3>
   17cf8:	1007883a 	mov	r3,r2
   17cfc:	008000b4 	movhi	r2,2
   17d00:	10a5c704 	addi	r2,r2,-26852
   17d04:	1887883a 	add	r3,r3,r2
   17d08:	e0ffff15 	stw	r3,-4(fp)
   17d0c:	00000106 	br	17d14 <close+0x48>
   17d10:	e03fff15 	stw	zero,-4(fp)
   17d14:	e0bfff17 	ldw	r2,-4(fp)
   17d18:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   17d1c:	e0bffb17 	ldw	r2,-20(fp)
   17d20:	1005003a 	cmpeq	r2,r2,zero
   17d24:	10001d1e 	bne	r2,zero,17d9c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   17d28:	e0bffb17 	ldw	r2,-20(fp)
   17d2c:	10800017 	ldw	r2,0(r2)
   17d30:	10800417 	ldw	r2,16(r2)
   17d34:	1005003a 	cmpeq	r2,r2,zero
   17d38:	1000071e 	bne	r2,zero,17d58 <close+0x8c>
   17d3c:	e0bffb17 	ldw	r2,-20(fp)
   17d40:	10800017 	ldw	r2,0(r2)
   17d44:	10800417 	ldw	r2,16(r2)
   17d48:	e13ffb17 	ldw	r4,-20(fp)
   17d4c:	103ee83a 	callr	r2
   17d50:	e0bffe15 	stw	r2,-8(fp)
   17d54:	00000106 	br	17d5c <close+0x90>
   17d58:	e03ffe15 	stw	zero,-8(fp)
   17d5c:	e0bffe17 	ldw	r2,-8(fp)
   17d60:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   17d64:	e13ffc17 	ldw	r4,-16(fp)
   17d68:	00186b80 	call	186b8 <alt_release_fd>
    if (rval < 0)
   17d6c:	e0bffa17 	ldw	r2,-24(fp)
   17d70:	1004403a 	cmpge	r2,r2,zero
   17d74:	1000071e 	bne	r2,zero,17d94 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   17d78:	0017dcc0 	call	17dcc <alt_get_errno>
   17d7c:	e0fffa17 	ldw	r3,-24(fp)
   17d80:	00c7c83a 	sub	r3,zero,r3
   17d84:	10c00015 	stw	r3,0(r2)
      return -1;
   17d88:	00bfffc4 	movi	r2,-1
   17d8c:	e0bffd15 	stw	r2,-12(fp)
   17d90:	00000806 	br	17db4 <close+0xe8>
    }
    return 0;
   17d94:	e03ffd15 	stw	zero,-12(fp)
   17d98:	00000606 	br	17db4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17d9c:	0017dcc0 	call	17dcc <alt_get_errno>
   17da0:	1007883a 	mov	r3,r2
   17da4:	00801444 	movi	r2,81
   17da8:	18800015 	stw	r2,0(r3)
    return -1;
   17dac:	00bfffc4 	movi	r2,-1
   17db0:	e0bffd15 	stw	r2,-12(fp)
   17db4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   17db8:	e037883a 	mov	sp,fp
   17dbc:	dfc00117 	ldw	ra,4(sp)
   17dc0:	df000017 	ldw	fp,0(sp)
   17dc4:	dec00204 	addi	sp,sp,8
   17dc8:	f800283a 	ret

00017dcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17dcc:	defffd04 	addi	sp,sp,-12
   17dd0:	dfc00215 	stw	ra,8(sp)
   17dd4:	df000115 	stw	fp,4(sp)
   17dd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   17ddc:	008000b4 	movhi	r2,2
   17de0:	10a63104 	addi	r2,r2,-26428
   17de4:	10800017 	ldw	r2,0(r2)
   17de8:	1005003a 	cmpeq	r2,r2,zero
   17dec:	1000061e 	bne	r2,zero,17e08 <alt_get_errno+0x3c>
   17df0:	008000b4 	movhi	r2,2
   17df4:	10a63104 	addi	r2,r2,-26428
   17df8:	10800017 	ldw	r2,0(r2)
   17dfc:	103ee83a 	callr	r2
   17e00:	e0bfff15 	stw	r2,-4(fp)
   17e04:	00000306 	br	17e14 <alt_get_errno+0x48>
   17e08:	008000b4 	movhi	r2,2
   17e0c:	10a7f204 	addi	r2,r2,-24632
   17e10:	e0bfff15 	stw	r2,-4(fp)
   17e14:	e0bfff17 	ldw	r2,-4(fp)
}
   17e18:	e037883a 	mov	sp,fp
   17e1c:	dfc00117 	ldw	ra,4(sp)
   17e20:	df000017 	ldw	fp,0(sp)
   17e24:	dec00204 	addi	sp,sp,8
   17e28:	f800283a 	ret

00017e2c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   17e2c:	deffff04 	addi	sp,sp,-4
   17e30:	df000015 	stw	fp,0(sp)
   17e34:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   17e38:	e037883a 	mov	sp,fp
   17e3c:	df000017 	ldw	fp,0(sp)
   17e40:	dec00104 	addi	sp,sp,4
   17e44:	f800283a 	ret

00017e48 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   17e48:	defffc04 	addi	sp,sp,-16
   17e4c:	df000315 	stw	fp,12(sp)
   17e50:	df000304 	addi	fp,sp,12
   17e54:	e13ffd15 	stw	r4,-12(fp)
   17e58:	e17ffe15 	stw	r5,-8(fp)
   17e5c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   17e60:	e0bfff17 	ldw	r2,-4(fp)
}
   17e64:	e037883a 	mov	sp,fp
   17e68:	df000017 	ldw	fp,0(sp)
   17e6c:	dec00104 	addi	sp,sp,4
   17e70:	f800283a 	ret

00017e74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   17e74:	defff904 	addi	sp,sp,-28
   17e78:	dfc00615 	stw	ra,24(sp)
   17e7c:	df000515 	stw	fp,20(sp)
   17e80:	df000504 	addi	fp,sp,20
   17e84:	e13ffd15 	stw	r4,-12(fp)
   17e88:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   17e8c:	e0bffd17 	ldw	r2,-12(fp)
   17e90:	1005003a 	cmpeq	r2,r2,zero
   17e94:	1000041e 	bne	r2,zero,17ea8 <alt_dev_llist_insert+0x34>
   17e98:	e0bffd17 	ldw	r2,-12(fp)
   17e9c:	10800217 	ldw	r2,8(r2)
   17ea0:	1004c03a 	cmpne	r2,r2,zero
   17ea4:	1000071e 	bne	r2,zero,17ec4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   17ea8:	0017f280 	call	17f28 <alt_get_errno>
   17eac:	1007883a 	mov	r3,r2
   17eb0:	00800584 	movi	r2,22
   17eb4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   17eb8:	00bffa84 	movi	r2,-22
   17ebc:	e0bfff15 	stw	r2,-4(fp)
   17ec0:	00001306 	br	17f10 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   17ec4:	e0fffd17 	ldw	r3,-12(fp)
   17ec8:	e0bffe17 	ldw	r2,-8(fp)
   17ecc:	e0bffb15 	stw	r2,-20(fp)
   17ed0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   17ed4:	e0fffc17 	ldw	r3,-16(fp)
   17ed8:	e0bffb17 	ldw	r2,-20(fp)
   17edc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   17ee0:	e0bffb17 	ldw	r2,-20(fp)
   17ee4:	10c00017 	ldw	r3,0(r2)
   17ee8:	e0bffc17 	ldw	r2,-16(fp)
   17eec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   17ef0:	e0bffb17 	ldw	r2,-20(fp)
   17ef4:	10c00017 	ldw	r3,0(r2)
   17ef8:	e0bffc17 	ldw	r2,-16(fp)
   17efc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   17f00:	e0fffb17 	ldw	r3,-20(fp)
   17f04:	e0bffc17 	ldw	r2,-16(fp)
   17f08:	18800015 	stw	r2,0(r3)

  return 0;  
   17f0c:	e03fff15 	stw	zero,-4(fp)
   17f10:	e0bfff17 	ldw	r2,-4(fp)
}
   17f14:	e037883a 	mov	sp,fp
   17f18:	dfc00117 	ldw	ra,4(sp)
   17f1c:	df000017 	ldw	fp,0(sp)
   17f20:	dec00204 	addi	sp,sp,8
   17f24:	f800283a 	ret

00017f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17f28:	defffd04 	addi	sp,sp,-12
   17f2c:	dfc00215 	stw	ra,8(sp)
   17f30:	df000115 	stw	fp,4(sp)
   17f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   17f38:	008000b4 	movhi	r2,2
   17f3c:	10a63104 	addi	r2,r2,-26428
   17f40:	10800017 	ldw	r2,0(r2)
   17f44:	1005003a 	cmpeq	r2,r2,zero
   17f48:	1000061e 	bne	r2,zero,17f64 <alt_get_errno+0x3c>
   17f4c:	008000b4 	movhi	r2,2
   17f50:	10a63104 	addi	r2,r2,-26428
   17f54:	10800017 	ldw	r2,0(r2)
   17f58:	103ee83a 	callr	r2
   17f5c:	e0bfff15 	stw	r2,-4(fp)
   17f60:	00000306 	br	17f70 <alt_get_errno+0x48>
   17f64:	008000b4 	movhi	r2,2
   17f68:	10a7f204 	addi	r2,r2,-24632
   17f6c:	e0bfff15 	stw	r2,-4(fp)
   17f70:	e0bfff17 	ldw	r2,-4(fp)
}
   17f74:	e037883a 	mov	sp,fp
   17f78:	dfc00117 	ldw	ra,4(sp)
   17f7c:	df000017 	ldw	fp,0(sp)
   17f80:	dec00204 	addi	sp,sp,8
   17f84:	f800283a 	ret

00017f88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   17f88:	defffe04 	addi	sp,sp,-8
   17f8c:	dfc00115 	stw	ra,4(sp)
   17f90:	df000015 	stw	fp,0(sp)
   17f94:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   17f98:	0009883a 	mov	r4,zero
   17f9c:	01420004 	movi	r5,2048
   17fa0:	0018b780 	call	18b78 <alt_icache_flush>
#endif
}
   17fa4:	e037883a 	mov	sp,fp
   17fa8:	dfc00117 	ldw	ra,4(sp)
   17fac:	df000017 	ldw	fp,0(sp)
   17fb0:	dec00204 	addi	sp,sp,8
   17fb4:	f800283a 	ret

00017fb8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   17fb8:	defff904 	addi	sp,sp,-28
   17fbc:	dfc00615 	stw	ra,24(sp)
   17fc0:	df000515 	stw	fp,20(sp)
   17fc4:	df000504 	addi	fp,sp,20
   17fc8:	e13ffc15 	stw	r4,-16(fp)
   17fcc:	e17ffd15 	stw	r5,-12(fp)
   17fd0:	e1bffe15 	stw	r6,-8(fp)
   17fd4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   17fd8:	e0800217 	ldw	r2,8(fp)
   17fdc:	d8800015 	stw	r2,0(sp)
   17fe0:	e13ffc17 	ldw	r4,-16(fp)
   17fe4:	e17ffd17 	ldw	r5,-12(fp)
   17fe8:	e1bffe17 	ldw	r6,-8(fp)
   17fec:	e1ffff17 	ldw	r7,-4(fp)
   17ff0:	001818c0 	call	1818c <alt_iic_isr_register>
}  
   17ff4:	e037883a 	mov	sp,fp
   17ff8:	dfc00117 	ldw	ra,4(sp)
   17ffc:	df000017 	ldw	fp,0(sp)
   18000:	dec00204 	addi	sp,sp,8
   18004:	f800283a 	ret

00018008 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   18008:	defff904 	addi	sp,sp,-28
   1800c:	df000615 	stw	fp,24(sp)
   18010:	df000604 	addi	fp,sp,24
   18014:	e13ffe15 	stw	r4,-8(fp)
   18018:	e17fff15 	stw	r5,-4(fp)
   1801c:	e0bfff17 	ldw	r2,-4(fp)
   18020:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18024:	0005303a 	rdctl	r2,status
   18028:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1802c:	e0fffb17 	ldw	r3,-20(fp)
   18030:	00bfff84 	movi	r2,-2
   18034:	1884703a 	and	r2,r3,r2
   18038:	1001703a 	wrctl	status,r2
  
  return context;
   1803c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18040:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   18044:	e0fffc17 	ldw	r3,-16(fp)
   18048:	00800044 	movi	r2,1
   1804c:	10c4983a 	sll	r2,r2,r3
   18050:	1007883a 	mov	r3,r2
   18054:	008000b4 	movhi	r2,2
   18058:	10a7f904 	addi	r2,r2,-24604
   1805c:	10800017 	ldw	r2,0(r2)
   18060:	1886b03a 	or	r3,r3,r2
   18064:	008000b4 	movhi	r2,2
   18068:	10a7f904 	addi	r2,r2,-24604
   1806c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18070:	008000b4 	movhi	r2,2
   18074:	10a7f904 	addi	r2,r2,-24604
   18078:	10800017 	ldw	r2,0(r2)
   1807c:	100170fa 	wrctl	ienable,r2
   18080:	e0bffd17 	ldw	r2,-12(fp)
   18084:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18088:	e0bffa17 	ldw	r2,-24(fp)
   1808c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18090:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   18094:	e037883a 	mov	sp,fp
   18098:	df000017 	ldw	fp,0(sp)
   1809c:	dec00104 	addi	sp,sp,4
   180a0:	f800283a 	ret

000180a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   180a4:	defff904 	addi	sp,sp,-28
   180a8:	df000615 	stw	fp,24(sp)
   180ac:	df000604 	addi	fp,sp,24
   180b0:	e13ffe15 	stw	r4,-8(fp)
   180b4:	e17fff15 	stw	r5,-4(fp)
   180b8:	e0bfff17 	ldw	r2,-4(fp)
   180bc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   180c0:	0005303a 	rdctl	r2,status
   180c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   180c8:	e0fffb17 	ldw	r3,-20(fp)
   180cc:	00bfff84 	movi	r2,-2
   180d0:	1884703a 	and	r2,r3,r2
   180d4:	1001703a 	wrctl	status,r2
  
  return context;
   180d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   180dc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   180e0:	e0fffc17 	ldw	r3,-16(fp)
   180e4:	00800044 	movi	r2,1
   180e8:	10c4983a 	sll	r2,r2,r3
   180ec:	0084303a 	nor	r2,zero,r2
   180f0:	1007883a 	mov	r3,r2
   180f4:	008000b4 	movhi	r2,2
   180f8:	10a7f904 	addi	r2,r2,-24604
   180fc:	10800017 	ldw	r2,0(r2)
   18100:	1886703a 	and	r3,r3,r2
   18104:	008000b4 	movhi	r2,2
   18108:	10a7f904 	addi	r2,r2,-24604
   1810c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18110:	008000b4 	movhi	r2,2
   18114:	10a7f904 	addi	r2,r2,-24604
   18118:	10800017 	ldw	r2,0(r2)
   1811c:	100170fa 	wrctl	ienable,r2
   18120:	e0bffd17 	ldw	r2,-12(fp)
   18124:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18128:	e0bffa17 	ldw	r2,-24(fp)
   1812c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18130:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   18134:	e037883a 	mov	sp,fp
   18138:	df000017 	ldw	fp,0(sp)
   1813c:	dec00104 	addi	sp,sp,4
   18140:	f800283a 	ret

00018144 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   18144:	defffc04 	addi	sp,sp,-16
   18148:	df000315 	stw	fp,12(sp)
   1814c:	df000304 	addi	fp,sp,12
   18150:	e13ffe15 	stw	r4,-8(fp)
   18154:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   18158:	000530fa 	rdctl	r2,ienable
   1815c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   18160:	e0ffff17 	ldw	r3,-4(fp)
   18164:	00800044 	movi	r2,1
   18168:	10c4983a 	sll	r2,r2,r3
   1816c:	1007883a 	mov	r3,r2
   18170:	e0bffd17 	ldw	r2,-12(fp)
   18174:	1884703a 	and	r2,r3,r2
   18178:	1004c03a 	cmpne	r2,r2,zero
}
   1817c:	e037883a 	mov	sp,fp
   18180:	df000017 	ldw	fp,0(sp)
   18184:	dec00104 	addi	sp,sp,4
   18188:	f800283a 	ret

0001818c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1818c:	defff404 	addi	sp,sp,-48
   18190:	dfc00b15 	stw	ra,44(sp)
   18194:	df000a15 	stw	fp,40(sp)
   18198:	df000a04 	addi	fp,sp,40
   1819c:	e13ffb15 	stw	r4,-20(fp)
   181a0:	e17ffc15 	stw	r5,-16(fp)
   181a4:	e1bffd15 	stw	r6,-12(fp)
   181a8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   181ac:	00bffa84 	movi	r2,-22
   181b0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   181b4:	e0bffc17 	ldw	r2,-16(fp)
   181b8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   181bc:	e0bff917 	ldw	r2,-28(fp)
   181c0:	10800808 	cmpgei	r2,r2,32
   181c4:	1000291e 	bne	r2,zero,1826c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   181c8:	0005303a 	rdctl	r2,status
   181cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   181d0:	e0fff717 	ldw	r3,-36(fp)
   181d4:	00bfff84 	movi	r2,-2
   181d8:	1884703a 	and	r2,r3,r2
   181dc:	1001703a 	wrctl	status,r2
  
  return context;
   181e0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   181e4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   181e8:	e0bff917 	ldw	r2,-28(fp)
   181ec:	00c000b4 	movhi	r3,2
   181f0:	18e80604 	addi	r3,r3,-24552
   181f4:	100490fa 	slli	r2,r2,3
   181f8:	10c7883a 	add	r3,r2,r3
   181fc:	e0bffd17 	ldw	r2,-12(fp)
   18200:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   18204:	e0bff917 	ldw	r2,-28(fp)
   18208:	00c000b4 	movhi	r3,2
   1820c:	18e80604 	addi	r3,r3,-24552
   18210:	100490fa 	slli	r2,r2,3
   18214:	10c5883a 	add	r2,r2,r3
   18218:	10c00104 	addi	r3,r2,4
   1821c:	e0bffe17 	ldw	r2,-8(fp)
   18220:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   18224:	e0bffd17 	ldw	r2,-12(fp)
   18228:	1005003a 	cmpeq	r2,r2,zero
   1822c:	1000051e 	bne	r2,zero,18244 <alt_iic_isr_register+0xb8>
   18230:	e17ff917 	ldw	r5,-28(fp)
   18234:	e13ffb17 	ldw	r4,-20(fp)
   18238:	00180080 	call	18008 <alt_ic_irq_enable>
   1823c:	e0bfff15 	stw	r2,-4(fp)
   18240:	00000406 	br	18254 <alt_iic_isr_register+0xc8>
   18244:	e17ff917 	ldw	r5,-28(fp)
   18248:	e13ffb17 	ldw	r4,-20(fp)
   1824c:	00180a40 	call	180a4 <alt_ic_irq_disable>
   18250:	e0bfff15 	stw	r2,-4(fp)
   18254:	e0bfff17 	ldw	r2,-4(fp)
   18258:	e0bffa15 	stw	r2,-24(fp)
   1825c:	e0bff817 	ldw	r2,-32(fp)
   18260:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18264:	e0bff617 	ldw	r2,-40(fp)
   18268:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1826c:	e0bffa17 	ldw	r2,-24(fp)
}
   18270:	e037883a 	mov	sp,fp
   18274:	dfc00117 	ldw	ra,4(sp)
   18278:	df000017 	ldw	fp,0(sp)
   1827c:	dec00204 	addi	sp,sp,8
   18280:	f800283a 	ret

00018284 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   18284:	defff804 	addi	sp,sp,-32
   18288:	dfc00715 	stw	ra,28(sp)
   1828c:	df000615 	stw	fp,24(sp)
   18290:	dc000515 	stw	r16,20(sp)
   18294:	df000504 	addi	fp,sp,20
   18298:	e13ffc15 	stw	r4,-16(fp)
   1829c:	e17ffd15 	stw	r5,-12(fp)
   182a0:	e1bffe15 	stw	r6,-8(fp)
   182a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   182a8:	e13ffd17 	ldw	r4,-12(fp)
   182ac:	e17ffe17 	ldw	r5,-8(fp)
   182b0:	e1bfff17 	ldw	r6,-4(fp)
   182b4:	00184cc0 	call	184cc <open>
   182b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   182bc:	e0bffb17 	ldw	r2,-20(fp)
   182c0:	1004803a 	cmplt	r2,r2,zero
   182c4:	10001f1e 	bne	r2,zero,18344 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   182c8:	e13ffb17 	ldw	r4,-20(fp)
   182cc:	040000b4 	movhi	r16,2
   182d0:	8425c704 	addi	r16,r16,-26852
   182d4:	01400304 	movi	r5,12
   182d8:	00114b80 	call	114b8 <__mulsi3>
   182dc:	1405883a 	add	r2,r2,r16
   182e0:	10c00017 	ldw	r3,0(r2)
   182e4:	e0bffc17 	ldw	r2,-16(fp)
   182e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   182ec:	e13ffb17 	ldw	r4,-20(fp)
   182f0:	040000b4 	movhi	r16,2
   182f4:	8425c704 	addi	r16,r16,-26852
   182f8:	01400304 	movi	r5,12
   182fc:	00114b80 	call	114b8 <__mulsi3>
   18300:	1405883a 	add	r2,r2,r16
   18304:	10800104 	addi	r2,r2,4
   18308:	10c00017 	ldw	r3,0(r2)
   1830c:	e0bffc17 	ldw	r2,-16(fp)
   18310:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   18314:	e13ffb17 	ldw	r4,-20(fp)
   18318:	040000b4 	movhi	r16,2
   1831c:	8425c704 	addi	r16,r16,-26852
   18320:	01400304 	movi	r5,12
   18324:	00114b80 	call	114b8 <__mulsi3>
   18328:	1405883a 	add	r2,r2,r16
   1832c:	10800204 	addi	r2,r2,8
   18330:	10c00017 	ldw	r3,0(r2)
   18334:	e0bffc17 	ldw	r2,-16(fp)
   18338:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1833c:	e13ffb17 	ldw	r4,-20(fp)
   18340:	00186b80 	call	186b8 <alt_release_fd>
  }
} 
   18344:	e037883a 	mov	sp,fp
   18348:	dfc00217 	ldw	ra,8(sp)
   1834c:	df000117 	ldw	fp,4(sp)
   18350:	dc000017 	ldw	r16,0(sp)
   18354:	dec00304 	addi	sp,sp,12
   18358:	f800283a 	ret

0001835c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1835c:	defffb04 	addi	sp,sp,-20
   18360:	dfc00415 	stw	ra,16(sp)
   18364:	df000315 	stw	fp,12(sp)
   18368:	df000304 	addi	fp,sp,12
   1836c:	e13ffd15 	stw	r4,-12(fp)
   18370:	e17ffe15 	stw	r5,-8(fp)
   18374:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   18378:	010000b4 	movhi	r4,2
   1837c:	2125ca04 	addi	r4,r4,-26840
   18380:	e17ffd17 	ldw	r5,-12(fp)
   18384:	01800044 	movi	r6,1
   18388:	01c07fc4 	movi	r7,511
   1838c:	00182840 	call	18284 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   18390:	010000b4 	movhi	r4,2
   18394:	2125c704 	addi	r4,r4,-26852
   18398:	e17ffe17 	ldw	r5,-8(fp)
   1839c:	000d883a 	mov	r6,zero
   183a0:	01c07fc4 	movi	r7,511
   183a4:	00182840 	call	18284 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   183a8:	010000b4 	movhi	r4,2
   183ac:	2125cd04 	addi	r4,r4,-26828
   183b0:	e17fff17 	ldw	r5,-4(fp)
   183b4:	01800044 	movi	r6,1
   183b8:	01c07fc4 	movi	r7,511
   183bc:	00182840 	call	18284 <alt_open_fd>
}  
   183c0:	e037883a 	mov	sp,fp
   183c4:	dfc00117 	ldw	ra,4(sp)
   183c8:	df000017 	ldw	fp,0(sp)
   183cc:	dec00204 	addi	sp,sp,8
   183d0:	f800283a 	ret

000183d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   183d4:	defffa04 	addi	sp,sp,-24
   183d8:	dfc00515 	stw	ra,20(sp)
   183dc:	df000415 	stw	fp,16(sp)
   183e0:	dc000315 	stw	r16,12(sp)
   183e4:	df000304 	addi	fp,sp,12
   183e8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   183ec:	e0bffe17 	ldw	r2,-8(fp)
   183f0:	10800217 	ldw	r2,8(r2)
   183f4:	10d00034 	orhi	r3,r2,16384
   183f8:	e0bffe17 	ldw	r2,-8(fp)
   183fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18400:	e03ffd15 	stw	zero,-12(fp)
   18404:	00002306 	br	18494 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18408:	e13ffd17 	ldw	r4,-12(fp)
   1840c:	040000b4 	movhi	r16,2
   18410:	8425c704 	addi	r16,r16,-26852
   18414:	01400304 	movi	r5,12
   18418:	00114b80 	call	114b8 <__mulsi3>
   1841c:	1405883a 	add	r2,r2,r16
   18420:	10c00017 	ldw	r3,0(r2)
   18424:	e0bffe17 	ldw	r2,-8(fp)
   18428:	10800017 	ldw	r2,0(r2)
   1842c:	1880161e 	bne	r3,r2,18488 <alt_file_locked+0xb4>
   18430:	e13ffd17 	ldw	r4,-12(fp)
   18434:	040000b4 	movhi	r16,2
   18438:	8425c704 	addi	r16,r16,-26852
   1843c:	01400304 	movi	r5,12
   18440:	00114b80 	call	114b8 <__mulsi3>
   18444:	1405883a 	add	r2,r2,r16
   18448:	10800204 	addi	r2,r2,8
   1844c:	10800017 	ldw	r2,0(r2)
   18450:	1004403a 	cmpge	r2,r2,zero
   18454:	10000c1e 	bne	r2,zero,18488 <alt_file_locked+0xb4>
   18458:	e13ffd17 	ldw	r4,-12(fp)
   1845c:	01400304 	movi	r5,12
   18460:	00114b80 	call	114b8 <__mulsi3>
   18464:	1007883a 	mov	r3,r2
   18468:	008000b4 	movhi	r2,2
   1846c:	10a5c704 	addi	r2,r2,-26852
   18470:	1887883a 	add	r3,r3,r2
   18474:	e0bffe17 	ldw	r2,-8(fp)
   18478:	18800326 	beq	r3,r2,18488 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1847c:	00bffcc4 	movi	r2,-13
   18480:	e0bfff15 	stw	r2,-4(fp)
   18484:	00000a06 	br	184b0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18488:	e0bffd17 	ldw	r2,-12(fp)
   1848c:	10800044 	addi	r2,r2,1
   18490:	e0bffd15 	stw	r2,-12(fp)
   18494:	008000b4 	movhi	r2,2
   18498:	10a63004 	addi	r2,r2,-26432
   1849c:	10800017 	ldw	r2,0(r2)
   184a0:	1007883a 	mov	r3,r2
   184a4:	e0bffd17 	ldw	r2,-12(fp)
   184a8:	18bfd72e 	bgeu	r3,r2,18408 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   184ac:	e03fff15 	stw	zero,-4(fp)
   184b0:	e0bfff17 	ldw	r2,-4(fp)
}
   184b4:	e037883a 	mov	sp,fp
   184b8:	dfc00217 	ldw	ra,8(sp)
   184bc:	df000117 	ldw	fp,4(sp)
   184c0:	dc000017 	ldw	r16,0(sp)
   184c4:	dec00304 	addi	sp,sp,12
   184c8:	f800283a 	ret

000184cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   184cc:	defff404 	addi	sp,sp,-48
   184d0:	dfc00b15 	stw	ra,44(sp)
   184d4:	df000a15 	stw	fp,40(sp)
   184d8:	df000a04 	addi	fp,sp,40
   184dc:	e13ffb15 	stw	r4,-20(fp)
   184e0:	e17ffc15 	stw	r5,-16(fp)
   184e4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   184e8:	00bfffc4 	movi	r2,-1
   184ec:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   184f0:	00bffb44 	movi	r2,-19
   184f4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   184f8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   184fc:	e13ffb17 	ldw	r4,-20(fp)
   18500:	014000b4 	movhi	r5,2
   18504:	29662e04 	addi	r5,r5,-26440
   18508:	00188f40 	call	188f4 <alt_find_dev>
   1850c:	e0bffa15 	stw	r2,-24(fp)
   18510:	e0bffa17 	ldw	r2,-24(fp)
   18514:	1004c03a 	cmpne	r2,r2,zero
   18518:	1000051e 	bne	r2,zero,18530 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1851c:	e13ffb17 	ldw	r4,-20(fp)
   18520:	00189880 	call	18988 <alt_find_file>
   18524:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   18528:	00800044 	movi	r2,1
   1852c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   18530:	e0bffa17 	ldw	r2,-24(fp)
   18534:	1005003a 	cmpeq	r2,r2,zero
   18538:	1000311e 	bne	r2,zero,18600 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1853c:	e13ffa17 	ldw	r4,-24(fp)
   18540:	0018aa80 	call	18aa8 <alt_get_fd>
   18544:	e0bff815 	stw	r2,-32(fp)
   18548:	e0bff817 	ldw	r2,-32(fp)
   1854c:	1004403a 	cmpge	r2,r2,zero
   18550:	1000031e 	bne	r2,zero,18560 <open+0x94>
    {
      status = index;
   18554:	e0bff817 	ldw	r2,-32(fp)
   18558:	e0bff715 	stw	r2,-36(fp)
   1855c:	00002a06 	br	18608 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   18560:	e13ff817 	ldw	r4,-32(fp)
   18564:	01400304 	movi	r5,12
   18568:	00114b80 	call	114b8 <__mulsi3>
   1856c:	1007883a 	mov	r3,r2
   18570:	008000b4 	movhi	r2,2
   18574:	10a5c704 	addi	r2,r2,-26852
   18578:	1885883a 	add	r2,r3,r2
   1857c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   18580:	e0fffc17 	ldw	r3,-16(fp)
   18584:	00900034 	movhi	r2,16384
   18588:	10bfffc4 	addi	r2,r2,-1
   1858c:	1886703a 	and	r3,r3,r2
   18590:	e0bff917 	ldw	r2,-28(fp)
   18594:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18598:	e0bff617 	ldw	r2,-40(fp)
   1859c:	1004c03a 	cmpne	r2,r2,zero
   185a0:	1000061e 	bne	r2,zero,185bc <open+0xf0>
   185a4:	e13ff917 	ldw	r4,-28(fp)
   185a8:	00183d40 	call	183d4 <alt_file_locked>
   185ac:	e0bff715 	stw	r2,-36(fp)
   185b0:	e0bff717 	ldw	r2,-36(fp)
   185b4:	1004803a 	cmplt	r2,r2,zero
   185b8:	1000131e 	bne	r2,zero,18608 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   185bc:	e0bffa17 	ldw	r2,-24(fp)
   185c0:	10800317 	ldw	r2,12(r2)
   185c4:	1005003a 	cmpeq	r2,r2,zero
   185c8:	1000091e 	bne	r2,zero,185f0 <open+0x124>
   185cc:	e0bffa17 	ldw	r2,-24(fp)
   185d0:	10800317 	ldw	r2,12(r2)
   185d4:	e13ff917 	ldw	r4,-28(fp)
   185d8:	e17ffb17 	ldw	r5,-20(fp)
   185dc:	e1bffc17 	ldw	r6,-16(fp)
   185e0:	e1fffd17 	ldw	r7,-12(fp)
   185e4:	103ee83a 	callr	r2
   185e8:	e0bfff15 	stw	r2,-4(fp)
   185ec:	00000106 	br	185f4 <open+0x128>
   185f0:	e03fff15 	stw	zero,-4(fp)
   185f4:	e0bfff17 	ldw	r2,-4(fp)
   185f8:	e0bff715 	stw	r2,-36(fp)
   185fc:	00000206 	br	18608 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   18600:	00bffb44 	movi	r2,-19
   18604:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   18608:	e0bff717 	ldw	r2,-36(fp)
   1860c:	1004403a 	cmpge	r2,r2,zero
   18610:	1000091e 	bne	r2,zero,18638 <open+0x16c>
  {
    alt_release_fd (index);  
   18614:	e13ff817 	ldw	r4,-32(fp)
   18618:	00186b80 	call	186b8 <alt_release_fd>
    ALT_ERRNO = -status;
   1861c:	00186580 	call	18658 <alt_get_errno>
   18620:	e0fff717 	ldw	r3,-36(fp)
   18624:	00c7c83a 	sub	r3,zero,r3
   18628:	10c00015 	stw	r3,0(r2)
    return -1;
   1862c:	00bfffc4 	movi	r2,-1
   18630:	e0bffe15 	stw	r2,-8(fp)
   18634:	00000206 	br	18640 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   18638:	e0bff817 	ldw	r2,-32(fp)
   1863c:	e0bffe15 	stw	r2,-8(fp)
   18640:	e0bffe17 	ldw	r2,-8(fp)
}
   18644:	e037883a 	mov	sp,fp
   18648:	dfc00117 	ldw	ra,4(sp)
   1864c:	df000017 	ldw	fp,0(sp)
   18650:	dec00204 	addi	sp,sp,8
   18654:	f800283a 	ret

00018658 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18658:	defffd04 	addi	sp,sp,-12
   1865c:	dfc00215 	stw	ra,8(sp)
   18660:	df000115 	stw	fp,4(sp)
   18664:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   18668:	008000b4 	movhi	r2,2
   1866c:	10a63104 	addi	r2,r2,-26428
   18670:	10800017 	ldw	r2,0(r2)
   18674:	1005003a 	cmpeq	r2,r2,zero
   18678:	1000061e 	bne	r2,zero,18694 <alt_get_errno+0x3c>
   1867c:	008000b4 	movhi	r2,2
   18680:	10a63104 	addi	r2,r2,-26428
   18684:	10800017 	ldw	r2,0(r2)
   18688:	103ee83a 	callr	r2
   1868c:	e0bfff15 	stw	r2,-4(fp)
   18690:	00000306 	br	186a0 <alt_get_errno+0x48>
   18694:	008000b4 	movhi	r2,2
   18698:	10a7f204 	addi	r2,r2,-24632
   1869c:	e0bfff15 	stw	r2,-4(fp)
   186a0:	e0bfff17 	ldw	r2,-4(fp)
}
   186a4:	e037883a 	mov	sp,fp
   186a8:	dfc00117 	ldw	ra,4(sp)
   186ac:	df000017 	ldw	fp,0(sp)
   186b0:	dec00204 	addi	sp,sp,8
   186b4:	f800283a 	ret

000186b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   186b8:	defffc04 	addi	sp,sp,-16
   186bc:	dfc00315 	stw	ra,12(sp)
   186c0:	df000215 	stw	fp,8(sp)
   186c4:	dc000115 	stw	r16,4(sp)
   186c8:	df000104 	addi	fp,sp,4
   186cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   186d0:	e0bfff17 	ldw	r2,-4(fp)
   186d4:	108000d0 	cmplti	r2,r2,3
   186d8:	10000f1e 	bne	r2,zero,18718 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   186dc:	e13fff17 	ldw	r4,-4(fp)
   186e0:	040000b4 	movhi	r16,2
   186e4:	8425c704 	addi	r16,r16,-26852
   186e8:	01400304 	movi	r5,12
   186ec:	00114b80 	call	114b8 <__mulsi3>
   186f0:	1405883a 	add	r2,r2,r16
   186f4:	10800204 	addi	r2,r2,8
   186f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   186fc:	e13fff17 	ldw	r4,-4(fp)
   18700:	040000b4 	movhi	r16,2
   18704:	8425c704 	addi	r16,r16,-26852
   18708:	01400304 	movi	r5,12
   1870c:	00114b80 	call	114b8 <__mulsi3>
   18710:	1405883a 	add	r2,r2,r16
   18714:	10000015 	stw	zero,0(r2)
  }
}
   18718:	e037883a 	mov	sp,fp
   1871c:	dfc00217 	ldw	ra,8(sp)
   18720:	df000117 	ldw	fp,4(sp)
   18724:	dc000017 	ldw	r16,0(sp)
   18728:	dec00304 	addi	sp,sp,12
   1872c:	f800283a 	ret

00018730 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   18730:	defffa04 	addi	sp,sp,-24
   18734:	df000515 	stw	fp,20(sp)
   18738:	df000504 	addi	fp,sp,20
   1873c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18740:	0005303a 	rdctl	r2,status
   18744:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18748:	e0fffd17 	ldw	r3,-12(fp)
   1874c:	00bfff84 	movi	r2,-2
   18750:	1884703a 	and	r2,r3,r2
   18754:	1001703a 	wrctl	status,r2
  
  return context;
   18758:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1875c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   18760:	e0bfff17 	ldw	r2,-4(fp)
   18764:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18768:	e0bffc17 	ldw	r2,-16(fp)
   1876c:	10c00017 	ldw	r3,0(r2)
   18770:	e0bffc17 	ldw	r2,-16(fp)
   18774:	10800117 	ldw	r2,4(r2)
   18778:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1877c:	e0bffc17 	ldw	r2,-16(fp)
   18780:	10c00117 	ldw	r3,4(r2)
   18784:	e0bffc17 	ldw	r2,-16(fp)
   18788:	10800017 	ldw	r2,0(r2)
   1878c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18790:	e0fffc17 	ldw	r3,-16(fp)
   18794:	e0bffc17 	ldw	r2,-16(fp)
   18798:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1879c:	e0fffc17 	ldw	r3,-16(fp)
   187a0:	e0bffc17 	ldw	r2,-16(fp)
   187a4:	18800015 	stw	r2,0(r3)
   187a8:	e0bffe17 	ldw	r2,-8(fp)
   187ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187b0:	e0bffb17 	ldw	r2,-20(fp)
   187b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   187b8:	e037883a 	mov	sp,fp
   187bc:	df000017 	ldw	fp,0(sp)
   187c0:	dec00104 	addi	sp,sp,4
   187c4:	f800283a 	ret

000187c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   187c8:	defffb04 	addi	sp,sp,-20
   187cc:	dfc00415 	stw	ra,16(sp)
   187d0:	df000315 	stw	fp,12(sp)
   187d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   187d8:	d0a00c17 	ldw	r2,-32720(gp)
   187dc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   187e0:	d0a1d417 	ldw	r2,-30896(gp)
   187e4:	10800044 	addi	r2,r2,1
   187e8:	d0a1d415 	stw	r2,-30896(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   187ec:	00003106 	br	188b4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   187f0:	e0bffe17 	ldw	r2,-8(fp)
   187f4:	10800017 	ldw	r2,0(r2)
   187f8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   187fc:	e0bffe17 	ldw	r2,-8(fp)
   18800:	10800403 	ldbu	r2,16(r2)
   18804:	10803fcc 	andi	r2,r2,255
   18808:	1005003a 	cmpeq	r2,r2,zero
   1880c:	1000051e 	bne	r2,zero,18824 <alt_tick+0x5c>
   18810:	d0a1d417 	ldw	r2,-30896(gp)
   18814:	1004c03a 	cmpne	r2,r2,zero
   18818:	1000021e 	bne	r2,zero,18824 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1881c:	e0bffe17 	ldw	r2,-8(fp)
   18820:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18824:	e0bffe17 	ldw	r2,-8(fp)
   18828:	10c00217 	ldw	r3,8(r2)
   1882c:	d0a1d417 	ldw	r2,-30896(gp)
   18830:	10c01e36 	bltu	r2,r3,188ac <alt_tick+0xe4>
   18834:	e0bffe17 	ldw	r2,-8(fp)
   18838:	10800403 	ldbu	r2,16(r2)
   1883c:	10803fcc 	andi	r2,r2,255
   18840:	1004c03a 	cmpne	r2,r2,zero
   18844:	1000191e 	bne	r2,zero,188ac <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   18848:	e0bffe17 	ldw	r2,-8(fp)
   1884c:	10c00317 	ldw	r3,12(r2)
   18850:	e0bffe17 	ldw	r2,-8(fp)
   18854:	11000517 	ldw	r4,20(r2)
   18858:	183ee83a 	callr	r3
   1885c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18860:	e0bffd17 	ldw	r2,-12(fp)
   18864:	1004c03a 	cmpne	r2,r2,zero
   18868:	1000031e 	bne	r2,zero,18878 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   1886c:	e13ffe17 	ldw	r4,-8(fp)
   18870:	00187300 	call	18730 <alt_alarm_stop>
   18874:	00000d06 	br	188ac <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   18878:	e0bffe17 	ldw	r2,-8(fp)
   1887c:	10c00217 	ldw	r3,8(r2)
   18880:	e0bffd17 	ldw	r2,-12(fp)
   18884:	1887883a 	add	r3,r3,r2
   18888:	e0bffe17 	ldw	r2,-8(fp)
   1888c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18890:	e0bffe17 	ldw	r2,-8(fp)
   18894:	10c00217 	ldw	r3,8(r2)
   18898:	d0a1d417 	ldw	r2,-30896(gp)
   1889c:	1880032e 	bgeu	r3,r2,188ac <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   188a0:	e0fffe17 	ldw	r3,-8(fp)
   188a4:	00800044 	movi	r2,1
   188a8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   188ac:	e0bfff17 	ldw	r2,-4(fp)
   188b0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   188b4:	d0e00c04 	addi	r3,gp,-32720
   188b8:	e0bffe17 	ldw	r2,-8(fp)
   188bc:	10ffcc1e 	bne	r2,r3,187f0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   188c0:	e037883a 	mov	sp,fp
   188c4:	dfc00117 	ldw	ra,4(sp)
   188c8:	df000017 	ldw	fp,0(sp)
   188cc:	dec00204 	addi	sp,sp,8
   188d0:	f800283a 	ret

000188d4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   188d4:	deffff04 	addi	sp,sp,-4
   188d8:	df000015 	stw	fp,0(sp)
   188dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   188e0:	000170fa 	wrctl	ienable,zero
}
   188e4:	e037883a 	mov	sp,fp
   188e8:	df000017 	ldw	fp,0(sp)
   188ec:	dec00104 	addi	sp,sp,4
   188f0:	f800283a 	ret

000188f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   188f4:	defff904 	addi	sp,sp,-28
   188f8:	dfc00615 	stw	ra,24(sp)
   188fc:	df000515 	stw	fp,20(sp)
   18900:	df000504 	addi	fp,sp,20
   18904:	e13ffd15 	stw	r4,-12(fp)
   18908:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1890c:	e0bffe17 	ldw	r2,-8(fp)
   18910:	10800017 	ldw	r2,0(r2)
   18914:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   18918:	e13ffd17 	ldw	r4,-12(fp)
   1891c:	00117900 	call	11790 <strlen>
   18920:	10800044 	addi	r2,r2,1
   18924:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18928:	00000d06 	br	18960 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1892c:	e0bffc17 	ldw	r2,-16(fp)
   18930:	11000217 	ldw	r4,8(r2)
   18934:	e1bffb17 	ldw	r6,-20(fp)
   18938:	e17ffd17 	ldw	r5,-12(fp)
   1893c:	0018cb00 	call	18cb0 <memcmp>
   18940:	1004c03a 	cmpne	r2,r2,zero
   18944:	1000031e 	bne	r2,zero,18954 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   18948:	e0bffc17 	ldw	r2,-16(fp)
   1894c:	e0bfff15 	stw	r2,-4(fp)
   18950:	00000706 	br	18970 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   18954:	e0bffc17 	ldw	r2,-16(fp)
   18958:	10800017 	ldw	r2,0(r2)
   1895c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18960:	e0fffe17 	ldw	r3,-8(fp)
   18964:	e0bffc17 	ldw	r2,-16(fp)
   18968:	10fff01e 	bne	r2,r3,1892c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1896c:	e03fff15 	stw	zero,-4(fp)
   18970:	e0bfff17 	ldw	r2,-4(fp)
}
   18974:	e037883a 	mov	sp,fp
   18978:	dfc00117 	ldw	ra,4(sp)
   1897c:	df000017 	ldw	fp,0(sp)
   18980:	dec00204 	addi	sp,sp,8
   18984:	f800283a 	ret

00018988 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   18988:	defffa04 	addi	sp,sp,-24
   1898c:	dfc00515 	stw	ra,20(sp)
   18990:	df000415 	stw	fp,16(sp)
   18994:	df000404 	addi	fp,sp,16
   18998:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1899c:	008000b4 	movhi	r2,2
   189a0:	10a62c04 	addi	r2,r2,-26448
   189a4:	10800017 	ldw	r2,0(r2)
   189a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   189ac:	00003306 	br	18a7c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   189b0:	e0bffd17 	ldw	r2,-12(fp)
   189b4:	11000217 	ldw	r4,8(r2)
   189b8:	00117900 	call	11790 <strlen>
   189bc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   189c0:	e0bffd17 	ldw	r2,-12(fp)
   189c4:	10c00217 	ldw	r3,8(r2)
   189c8:	e0bffc17 	ldw	r2,-16(fp)
   189cc:	1885883a 	add	r2,r3,r2
   189d0:	10bfffc4 	addi	r2,r2,-1
   189d4:	10800003 	ldbu	r2,0(r2)
   189d8:	10803fcc 	andi	r2,r2,255
   189dc:	1080201c 	xori	r2,r2,128
   189e0:	10bfe004 	addi	r2,r2,-128
   189e4:	10800bd8 	cmpnei	r2,r2,47
   189e8:	1000031e 	bne	r2,zero,189f8 <alt_find_file+0x70>
    {
      len -= 1;
   189ec:	e0bffc17 	ldw	r2,-16(fp)
   189f0:	10bfffc4 	addi	r2,r2,-1
   189f4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   189f8:	e0bffc17 	ldw	r2,-16(fp)
   189fc:	1007883a 	mov	r3,r2
   18a00:	e0bffe17 	ldw	r2,-8(fp)
   18a04:	1885883a 	add	r2,r3,r2
   18a08:	10800003 	ldbu	r2,0(r2)
   18a0c:	10803fcc 	andi	r2,r2,255
   18a10:	1080201c 	xori	r2,r2,128
   18a14:	10bfe004 	addi	r2,r2,-128
   18a18:	10800be0 	cmpeqi	r2,r2,47
   18a1c:	10000a1e 	bne	r2,zero,18a48 <alt_find_file+0xc0>
   18a20:	e0bffc17 	ldw	r2,-16(fp)
   18a24:	1007883a 	mov	r3,r2
   18a28:	e0bffe17 	ldw	r2,-8(fp)
   18a2c:	1885883a 	add	r2,r3,r2
   18a30:	10800003 	ldbu	r2,0(r2)
   18a34:	10803fcc 	andi	r2,r2,255
   18a38:	1080201c 	xori	r2,r2,128
   18a3c:	10bfe004 	addi	r2,r2,-128
   18a40:	1004c03a 	cmpne	r2,r2,zero
   18a44:	10000a1e 	bne	r2,zero,18a70 <alt_find_file+0xe8>
   18a48:	e0bffd17 	ldw	r2,-12(fp)
   18a4c:	11000217 	ldw	r4,8(r2)
   18a50:	e1bffc17 	ldw	r6,-16(fp)
   18a54:	e17ffe17 	ldw	r5,-8(fp)
   18a58:	0018cb00 	call	18cb0 <memcmp>
   18a5c:	1004c03a 	cmpne	r2,r2,zero
   18a60:	1000031e 	bne	r2,zero,18a70 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   18a64:	e0bffd17 	ldw	r2,-12(fp)
   18a68:	e0bfff15 	stw	r2,-4(fp)
   18a6c:	00000806 	br	18a90 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   18a70:	e0bffd17 	ldw	r2,-12(fp)
   18a74:	10800017 	ldw	r2,0(r2)
   18a78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18a7c:	00c000b4 	movhi	r3,2
   18a80:	18e62c04 	addi	r3,r3,-26448
   18a84:	e0bffd17 	ldw	r2,-12(fp)
   18a88:	10ffc91e 	bne	r2,r3,189b0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   18a8c:	e03fff15 	stw	zero,-4(fp)
   18a90:	e0bfff17 	ldw	r2,-4(fp)
}
   18a94:	e037883a 	mov	sp,fp
   18a98:	dfc00117 	ldw	ra,4(sp)
   18a9c:	df000017 	ldw	fp,0(sp)
   18aa0:	dec00204 	addi	sp,sp,8
   18aa4:	f800283a 	ret

00018aa8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   18aa8:	defffa04 	addi	sp,sp,-24
   18aac:	dfc00515 	stw	ra,20(sp)
   18ab0:	df000415 	stw	fp,16(sp)
   18ab4:	dc000315 	stw	r16,12(sp)
   18ab8:	df000304 	addi	fp,sp,12
   18abc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   18ac0:	00bffa04 	movi	r2,-24
   18ac4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   18ac8:	e03ffe15 	stw	zero,-8(fp)
   18acc:	00002006 	br	18b50 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   18ad0:	e13ffe17 	ldw	r4,-8(fp)
   18ad4:	040000b4 	movhi	r16,2
   18ad8:	8425c704 	addi	r16,r16,-26852
   18adc:	01400304 	movi	r5,12
   18ae0:	00114b80 	call	114b8 <__mulsi3>
   18ae4:	1405883a 	add	r2,r2,r16
   18ae8:	10800017 	ldw	r2,0(r2)
   18aec:	1004c03a 	cmpne	r2,r2,zero
   18af0:	1000141e 	bne	r2,zero,18b44 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   18af4:	e13ffe17 	ldw	r4,-8(fp)
   18af8:	040000b4 	movhi	r16,2
   18afc:	8425c704 	addi	r16,r16,-26852
   18b00:	01400304 	movi	r5,12
   18b04:	00114b80 	call	114b8 <__mulsi3>
   18b08:	1407883a 	add	r3,r2,r16
   18b0c:	e0bfff17 	ldw	r2,-4(fp)
   18b10:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   18b14:	008000b4 	movhi	r2,2
   18b18:	10a63004 	addi	r2,r2,-26432
   18b1c:	10c00017 	ldw	r3,0(r2)
   18b20:	e0bffe17 	ldw	r2,-8(fp)
   18b24:	1880040e 	bge	r3,r2,18b38 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   18b28:	00c000b4 	movhi	r3,2
   18b2c:	18e63004 	addi	r3,r3,-26432
   18b30:	e0bffe17 	ldw	r2,-8(fp)
   18b34:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   18b38:	e0bffe17 	ldw	r2,-8(fp)
   18b3c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   18b40:	00000606 	br	18b5c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   18b44:	e0bffe17 	ldw	r2,-8(fp)
   18b48:	10800044 	addi	r2,r2,1
   18b4c:	e0bffe15 	stw	r2,-8(fp)
   18b50:	e0bffe17 	ldw	r2,-8(fp)
   18b54:	10800810 	cmplti	r2,r2,32
   18b58:	103fdd1e 	bne	r2,zero,18ad0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   18b5c:	e0bffd17 	ldw	r2,-12(fp)
}
   18b60:	e037883a 	mov	sp,fp
   18b64:	dfc00217 	ldw	ra,8(sp)
   18b68:	df000117 	ldw	fp,4(sp)
   18b6c:	dc000017 	ldw	r16,0(sp)
   18b70:	dec00304 	addi	sp,sp,12
   18b74:	f800283a 	ret

00018b78 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   18b78:	defffb04 	addi	sp,sp,-20
   18b7c:	df000415 	stw	fp,16(sp)
   18b80:	df000404 	addi	fp,sp,16
   18b84:	e13ffe15 	stw	r4,-8(fp)
   18b88:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   18b8c:	e0bfff17 	ldw	r2,-4(fp)
   18b90:	10820070 	cmpltui	r2,r2,2049
   18b94:	1000021e 	bne	r2,zero,18ba0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   18b98:	00820004 	movi	r2,2048
   18b9c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   18ba0:	e0fffe17 	ldw	r3,-8(fp)
   18ba4:	e0bfff17 	ldw	r2,-4(fp)
   18ba8:	1885883a 	add	r2,r3,r2
   18bac:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   18bb0:	e0bffe17 	ldw	r2,-8(fp)
   18bb4:	e0bffd15 	stw	r2,-12(fp)
   18bb8:	00000506 	br	18bd0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   18bbc:	e0bffd17 	ldw	r2,-12(fp)
   18bc0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   18bc4:	e0bffd17 	ldw	r2,-12(fp)
   18bc8:	10800804 	addi	r2,r2,32
   18bcc:	e0bffd15 	stw	r2,-12(fp)
   18bd0:	e0fffd17 	ldw	r3,-12(fp)
   18bd4:	e0bffc17 	ldw	r2,-16(fp)
   18bd8:	18bff836 	bltu	r3,r2,18bbc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   18bdc:	e0bffe17 	ldw	r2,-8(fp)
   18be0:	108007cc 	andi	r2,r2,31
   18be4:	1005003a 	cmpeq	r2,r2,zero
   18be8:	1000021e 	bne	r2,zero,18bf4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   18bec:	e0bffd17 	ldw	r2,-12(fp)
   18bf0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   18bf4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   18bf8:	e037883a 	mov	sp,fp
   18bfc:	df000017 	ldw	fp,0(sp)
   18c00:	dec00104 	addi	sp,sp,4
   18c04:	f800283a 	ret

00018c08 <exit>:
   18c08:	defffe04 	addi	sp,sp,-8
   18c0c:	dc400015 	stw	r17,0(sp)
   18c10:	000b883a 	mov	r5,zero
   18c14:	2023883a 	mov	r17,r4
   18c18:	dfc00115 	stw	ra,4(sp)
   18c1c:	0018cf00 	call	18cf0 <__call_exitprocs>
   18c20:	8809883a 	mov	r4,r17
   18c24:	0018eec0 	call	18eec <_exit>

00018c28 <fputs>:
   18c28:	defffd04 	addi	sp,sp,-12
   18c2c:	dfc00215 	stw	ra,8(sp)
   18c30:	dcc00115 	stw	r19,4(sp)
   18c34:	dc400015 	stw	r17,0(sp)
   18c38:	2027883a 	mov	r19,r4
   18c3c:	2823883a 	mov	r17,r5
   18c40:	00117900 	call	11790 <strlen>
   18c44:	00c000b4 	movhi	r3,2
   18c48:	18e62704 	addi	r3,r3,-26468
   18c4c:	19000017 	ldw	r4,0(r3)
   18c50:	01400074 	movhi	r5,1
   18c54:	29489f04 	addi	r5,r5,8828
   18c58:	89400115 	stw	r5,4(r17)
   18c5c:	980d883a 	mov	r6,r19
   18c60:	880b883a 	mov	r5,r17
   18c64:	100f883a 	mov	r7,r2
   18c68:	001227c0 	call	1227c <__sfvwrite_small_dev>
   18c6c:	1007883a 	mov	r3,r2
   18c70:	00bfffc4 	movi	r2,-1
   18c74:	0009883a 	mov	r4,zero
   18c78:	18800626 	beq	r3,r2,18c94 <fputs+0x6c>
   18c7c:	2005883a 	mov	r2,r4
   18c80:	dfc00217 	ldw	ra,8(sp)
   18c84:	dcc00117 	ldw	r19,4(sp)
   18c88:	dc400017 	ldw	r17,0(sp)
   18c8c:	dec00304 	addi	sp,sp,12
   18c90:	f800283a 	ret
   18c94:	1809883a 	mov	r4,r3
   18c98:	2005883a 	mov	r2,r4
   18c9c:	dfc00217 	ldw	ra,8(sp)
   18ca0:	dcc00117 	ldw	r19,4(sp)
   18ca4:	dc400017 	ldw	r17,0(sp)
   18ca8:	dec00304 	addi	sp,sp,12
   18cac:	f800283a 	ret

00018cb0 <memcmp>:
   18cb0:	31ffffc4 	addi	r7,r6,-1
   18cb4:	3000061e 	bne	r6,zero,18cd0 <memcmp+0x20>
   18cb8:	00000a06 	br	18ce4 <memcmp+0x34>
   18cbc:	39ffffc4 	addi	r7,r7,-1
   18cc0:	00bfffc4 	movi	r2,-1
   18cc4:	21000044 	addi	r4,r4,1
   18cc8:	29400044 	addi	r5,r5,1
   18ccc:	38800526 	beq	r7,r2,18ce4 <memcmp+0x34>
   18cd0:	20c00003 	ldbu	r3,0(r4)
   18cd4:	28800003 	ldbu	r2,0(r5)
   18cd8:	18bff826 	beq	r3,r2,18cbc <memcmp+0xc>
   18cdc:	1885c83a 	sub	r2,r3,r2
   18ce0:	f800283a 	ret
   18ce4:	0005883a 	mov	r2,zero
   18ce8:	f800283a 	ret

00018cec <register_fini>:
   18cec:	f800283a 	ret

00018cf0 <__call_exitprocs>:
   18cf0:	defff304 	addi	sp,sp,-52
   18cf4:	008000b4 	movhi	r2,2
   18cf8:	10a62804 	addi	r2,r2,-26464
   18cfc:	df000b15 	stw	fp,44(sp)
   18d00:	17000017 	ldw	fp,0(r2)
   18d04:	00800074 	movhi	r2,1
   18d08:	10961004 	addi	r2,r2,22592
   18d0c:	1005003a 	cmpeq	r2,r2,zero
   18d10:	d8800215 	stw	r2,8(sp)
   18d14:	e0800c04 	addi	r2,fp,48
   18d18:	dd800915 	stw	r22,36(sp)
   18d1c:	dd400815 	stw	r21,32(sp)
   18d20:	dfc00c15 	stw	ra,48(sp)
   18d24:	ddc00a15 	stw	r23,40(sp)
   18d28:	dd000715 	stw	r20,28(sp)
   18d2c:	dcc00615 	stw	r19,24(sp)
   18d30:	dc800515 	stw	r18,20(sp)
   18d34:	dc400415 	stw	r17,16(sp)
   18d38:	dc000315 	stw	r16,12(sp)
   18d3c:	282d883a 	mov	r22,r5
   18d40:	d9000115 	stw	r4,4(sp)
   18d44:	d8800015 	stw	r2,0(sp)
   18d48:	282b003a 	cmpeq	r21,r5,zero
   18d4c:	e4400c17 	ldw	r17,48(fp)
   18d50:	88001226 	beq	r17,zero,18d9c <__call_exitprocs+0xac>
   18d54:	ddc00017 	ldw	r23,0(sp)
   18d58:	88800117 	ldw	r2,4(r17)
   18d5c:	8c802217 	ldw	r18,136(r17)
   18d60:	143fffc4 	addi	r16,r2,-1
   18d64:	80000b16 	blt	r16,zero,18d94 <__call_exitprocs+0xa4>
   18d68:	9027003a 	cmpeq	r19,r18,zero
   18d6c:	a800171e 	bne	r21,zero,18dcc <__call_exitprocs+0xdc>
   18d70:	9800051e 	bne	r19,zero,18d88 <__call_exitprocs+0x98>
   18d74:	8409883a 	add	r4,r16,r16
   18d78:	2105883a 	add	r2,r4,r4
   18d7c:	1485883a 	add	r2,r2,r18
   18d80:	10c02017 	ldw	r3,128(r2)
   18d84:	b0c01226 	beq	r22,r3,18dd0 <__call_exitprocs+0xe0>
   18d88:	843fffc4 	addi	r16,r16,-1
   18d8c:	00bfffc4 	movi	r2,-1
   18d90:	80bff61e 	bne	r16,r2,18d6c <__call_exitprocs+0x7c>
   18d94:	d8800217 	ldw	r2,8(sp)
   18d98:	10003226 	beq	r2,zero,18e64 <__call_exitprocs+0x174>
   18d9c:	dfc00c17 	ldw	ra,48(sp)
   18da0:	df000b17 	ldw	fp,44(sp)
   18da4:	ddc00a17 	ldw	r23,40(sp)
   18da8:	dd800917 	ldw	r22,36(sp)
   18dac:	dd400817 	ldw	r21,32(sp)
   18db0:	dd000717 	ldw	r20,28(sp)
   18db4:	dcc00617 	ldw	r19,24(sp)
   18db8:	dc800517 	ldw	r18,20(sp)
   18dbc:	dc400417 	ldw	r17,16(sp)
   18dc0:	dc000317 	ldw	r16,12(sp)
   18dc4:	dec00d04 	addi	sp,sp,52
   18dc8:	f800283a 	ret
   18dcc:	8409883a 	add	r4,r16,r16
   18dd0:	88c00117 	ldw	r3,4(r17)
   18dd4:	2105883a 	add	r2,r4,r4
   18dd8:	1445883a 	add	r2,r2,r17
   18ddc:	18ffffc4 	addi	r3,r3,-1
   18de0:	11800217 	ldw	r6,8(r2)
   18de4:	1c001826 	beq	r3,r16,18e48 <__call_exitprocs+0x158>
   18de8:	10000215 	stw	zero,8(r2)
   18dec:	303fe626 	beq	r6,zero,18d88 <__call_exitprocs+0x98>
   18df0:	8d000117 	ldw	r20,4(r17)
   18df4:	9800121e 	bne	r19,zero,18e40 <__call_exitprocs+0x150>
   18df8:	00c00044 	movi	r3,1
   18dfc:	1c06983a 	sll	r3,r3,r16
   18e00:	90804017 	ldw	r2,256(r18)
   18e04:	1884703a 	and	r2,r3,r2
   18e08:	10000d26 	beq	r2,zero,18e40 <__call_exitprocs+0x150>
   18e0c:	90804117 	ldw	r2,260(r18)
   18e10:	1884703a 	and	r2,r3,r2
   18e14:	10000e1e 	bne	r2,zero,18e50 <__call_exitprocs+0x160>
   18e18:	2105883a 	add	r2,r4,r4
   18e1c:	1485883a 	add	r2,r2,r18
   18e20:	11400017 	ldw	r5,0(r2)
   18e24:	d9000117 	ldw	r4,4(sp)
   18e28:	303ee83a 	callr	r6
   18e2c:	88800117 	ldw	r2,4(r17)
   18e30:	a0bfc61e 	bne	r20,r2,18d4c <__call_exitprocs+0x5c>
   18e34:	b8800017 	ldw	r2,0(r23)
   18e38:	147fd326 	beq	r2,r17,18d88 <__call_exitprocs+0x98>
   18e3c:	003fc306 	br	18d4c <__call_exitprocs+0x5c>
   18e40:	303ee83a 	callr	r6
   18e44:	003ff906 	br	18e2c <__call_exitprocs+0x13c>
   18e48:	8c000115 	stw	r16,4(r17)
   18e4c:	003fe706 	br	18dec <__call_exitprocs+0xfc>
   18e50:	2105883a 	add	r2,r4,r4
   18e54:	1485883a 	add	r2,r2,r18
   18e58:	11000017 	ldw	r4,0(r2)
   18e5c:	303ee83a 	callr	r6
   18e60:	003ff206 	br	18e2c <__call_exitprocs+0x13c>
   18e64:	88800117 	ldw	r2,4(r17)
   18e68:	10000b1e 	bne	r2,zero,18e98 <__call_exitprocs+0x1a8>
   18e6c:	89000017 	ldw	r4,0(r17)
   18e70:	20000a26 	beq	r4,zero,18e9c <__call_exitprocs+0x1ac>
   18e74:	b9000015 	stw	r4,0(r23)
   18e78:	90000226 	beq	r18,zero,18e84 <__call_exitprocs+0x194>
   18e7c:	9009883a 	mov	r4,r18
   18e80:	00158400 	call	15840 <free>
   18e84:	8809883a 	mov	r4,r17
   18e88:	00158400 	call	15840 <free>
   18e8c:	bc400017 	ldw	r17,0(r23)
   18e90:	883fb11e 	bne	r17,zero,18d58 <__call_exitprocs+0x68>
   18e94:	003fc106 	br	18d9c <__call_exitprocs+0xac>
   18e98:	89000017 	ldw	r4,0(r17)
   18e9c:	882f883a 	mov	r23,r17
   18ea0:	2023883a 	mov	r17,r4
   18ea4:	883fac1e 	bne	r17,zero,18d58 <__call_exitprocs+0x68>
   18ea8:	003fbc06 	br	18d9c <__call_exitprocs+0xac>

00018eac <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   18eac:	defffd04 	addi	sp,sp,-12
   18eb0:	df000215 	stw	fp,8(sp)
   18eb4:	df000204 	addi	fp,sp,8
   18eb8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   18ebc:	e0bfff17 	ldw	r2,-4(fp)
   18ec0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   18ec4:	e0bffe17 	ldw	r2,-8(fp)
   18ec8:	1005003a 	cmpeq	r2,r2,zero
   18ecc:	1000021e 	bne	r2,zero,18ed8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   18ed0:	002af070 	cmpltui	zero,zero,43969
   18ed4:	00000106 	br	18edc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   18ed8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   18edc:	e037883a 	mov	sp,fp
   18ee0:	df000017 	ldw	fp,0(sp)
   18ee4:	dec00104 	addi	sp,sp,4
   18ee8:	f800283a 	ret

00018eec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   18eec:	defffd04 	addi	sp,sp,-12
   18ef0:	dfc00215 	stw	ra,8(sp)
   18ef4:	df000115 	stw	fp,4(sp)
   18ef8:	df000104 	addi	fp,sp,4
   18efc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   18f00:	e13fff17 	ldw	r4,-4(fp)
   18f04:	0018eac0 	call	18eac <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   18f08:	003fff06 	br	18f08 <_exit+0x1c>
   18f0c:	00018cec 	andhi	zero,zero,1587
