/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdlib.h>
#include <sys/alt_stdio.h>
#include <sys/alt_alarm.h>
#include <sys/times.h>
#include <alt_types.h>
#include <system.h>
#include <stdio.h>
#include <unistd.h>
// Test case 1
//#define step 5
//#define N 52
// Test case 2
//#define step 0.1
//#define N 2551
//Test case 3
//#define step 0.001
//#define N 255001
// Generates the vector x and stores it in the memory

void generateVector(float x[], float step, int N)
{
	int i;
	x[0] = 0;
	for (i=1; i<N; i++){
		x[i] = x[i-1] + step;
	}
}

float sumVector(float x[], int M)
{
	float sum = 0.00;
	int i;
	for(i = 0; i<M; i++){
		sum = sum + x[i] +(x[i]*x[i]);
	}

	return sum;
}


int main()
{
	printf("Task 4!\n");

	float y;
	// Returned result
	// Define input vector Test Case 1

	float step = 5.0;
	int N = 52;
	float x[N];

	generateVector(x,step,N);
	// The following is used for timing
	char buf[50];
	clock_t exec_t1, exec_t2;
	exec_t1 = times(NULL); // get system time before starting the process
	int i;
	for (i=0; i<1;i++){
		y = sumVector(x, N);
	}
	exec_t2 = times(NULL); // get system time after finishing the process
	gcvt((exec_t2 - exec_t1), 10, buf);
	alt_putstr(" 1.proc time = ");
	alt_putstr(buf);
	alt_putstr(" ticks \n");
	alt_putstr(" Result (divided by 1024) = ");
	printf("result: %f \n",y);


	//Test Case 2
	step = 0.1;
	N = 2551;
	float g[N];

	generateVector(x,step,N);
	// The following is used for timing


	exec_t1 = times(NULL); // get system time before starting the process

	for (i=0; i<1;i++){
		y = sumVector(g, N);
	}
	exec_t2 = times(NULL); // get system time after finishing the process
	gcvt((exec_t2 - exec_t1), 10, buf);
	alt_putstr(" 1.proc time = ");
	alt_putstr(buf);
	alt_putstr(" ticks \n");
	alt_putstr(" Result (divided by 1024) = ");
	printf("result: %f \n",y);

	//Test Case 2
	step = 0.001;
	N = 255001;
	float h[N];

	generateVector(x,step,N);
	// The following is used for timing

	exec_t1 = times(NULL); // get system time before starting the process

	for (i=0; i<1;i++){
		y = sumVector(x, N);
	}
	exec_t2 = times(NULL); // get system time after finishing the process
	gcvt((exec_t2 - exec_t1), 10, buf);
	alt_putstr(" 1.proc time = ");
	alt_putstr(buf);
	alt_putstr(" ticks \n");
	alt_putstr(" Result (divided by 1024) = ");
	printf("result: %f \n",y);

	// printf could be used if there was enough memory
//	int i;
//	for (i=0; i<10; i++){
//		y = y/2.0;
//	}

//	gcvt((int) y, 10, buf);
//	alt_putstr(" Result (divided by 1024) = ");
//	alt_putstr(buf);
//	printf("result: %f \n",y);
	// printf could be used if there was enough memory
	return 0;
}
