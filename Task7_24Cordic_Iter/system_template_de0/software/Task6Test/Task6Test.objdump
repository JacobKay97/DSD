
Task6Test.elf:     file format elf32-littlenios2
Task6Test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000d010 memsz 0x0000d010 flags r-x
    LOAD off    0x0000e030 vaddr 0x0080d030 paddr 0x0080ea8c align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x000104e8 vaddr 0x008104e8 paddr 0x008104e8 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cb00  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000037c  0080ccb4  0080ccb4  0000dcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0080d030  0080ea8c  0000e030  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  008104e8  008104e8  000104e8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000fa8c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d38  00000000  00000000  0000fab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000140f  00000000  00000000  000107f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002389a  00000000  00000000  00011bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000812e  00000000  00000000  00035499  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013f07  00000000  00000000  0003d5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000191c  00000000  00000000  000514d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000229f  00000000  00000000  00052dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c053  00000000  00000000  0005508b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000610e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a60  00000000  00000000  00061100  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00064b4e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00064b51  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00064b54  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00064b55  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00064b56  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00064b5a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00064b5e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00064b62  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00064b6b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00064b74  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00064b7d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00064b8f  2**0
                  CONTENTS, READONLY
 29 .jdi          00004fae  00000000  00000000  00064bb0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00037cff  00000000  00000000  00069b5e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080ccb4 l    d  .rodata	00000000 .rodata
0080d030 l    d  .rwdata	00000000 .rwdata
008104e8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00800d74 l     F .text	00000058 __sprint_r
0080cd66 l     O .rodata	00000010 blanks.3452
0080cd56 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00802df0 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00804818 l     F .text	00000058 std
00804924 l     F .text	00000008 __fp_lock
0080492c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080d030 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0080ea58 l     O .rwdata	00000004 charset
0080cd9c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080cee4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00808cd8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00809e04 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a2d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080a330 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080a434 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a558 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a638 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080a798 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080a9c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080ea7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080ac80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080d9ec l     O .rwdata	00001060 jtag_uart
0080ad70 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080afb0 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080b1d8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080b854 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080bb78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080bf9c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080c0ec l     F .text	000000f8 alt_file_locked
0080c370 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080ca9c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080cc50 l     F .text	00000040 alt_sim_halt
00806608 g     F .text	00000094 _mprec_log10
008066f4 g     F .text	00000088 __any_on
00807eac g     F .text	00000070 _isatty_r
0080cebc g     O .rodata	00000028 __mprec_tinytens
0080a7f8 g     F .text	0000006c alt_main
00800c4c g     F .text	000000a0 _puts_r
00810544 g     O .bss	00000100 alt_irq
00807f1c g     F .text	00000078 _lseek_r
0080ea8c g       *ABS*	00000000 __flash_rwdata_start
008097f8 g     F .text	00000088 __eqdf2
008107d4 g       *ABS*	00000000 __alt_heap_start
00800bd4 g     F .text	00000044 printf
00807964 g     F .text	00000068 __sseek
00804880 g     F .text	000000a4 __sinit
0080558c g     F .text	00000084 _setlocale_r
00804980 g     F .text	0000009c __sfmoreglue
0080a884 g     F .text	00000020 __malloc_unlock
00806084 g     F .text	000000e0 memmove
00804970 g     F .text	00000010 _cleanup
0080677c g     F .text	000000bc _Balloc
00809908 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807e38 g     F .text	00000074 _fstat_r
00810500 g     O .bss	00000004 errno
00800504 g     F .text	00000038 __make_dp
00810508 g     O .bss	00000004 alt_argv
00816a4c g       *ABS*	00000000 _gp
0080d86c g     O .rwdata	00000180 alt_fd_list
0080c594 g     F .text	00000094 alt_find_dev
00805fe4 g     F .text	000000a0 memcpy
00804964 g     F .text	0000000c _cleanup_r
00809aa0 g     F .text	000000f8 __floatsidf
0080c074 g     F .text	00000078 alt_io_redirect
00809a18 g     F .text	00000088 __ltdf2
0080ccb4 g       *ABS*	00000000 __DTOR_END__
00800cec g     F .text	00000014 puts
00806558 g     F .text	000000b0 __ratio
0080b3f0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00800c18 g     F .text	00000034 _printf_r
00809f40 g     F .text	00000008 __udivsi3
0080a494 g     F .text	000000c4 isatty
0080cdcc g     O .rodata	000000c8 __mprec_tens
00805568 g     F .text	00000008 __locale_charset
0080c818 g     F .text	00000090 alt_icache_flush
008104f4 g     O .bss	00000004 __malloc_top_pad
0080ea54 g     O .rwdata	00000004 __mb_cur_max
00805570 g     F .text	0000000c _localeconv_r
00806ee0 g     F .text	0000003c __i2b
00804f4c g     F .text	0000049c __sfvwrite_r
008078ec g     F .text	00000070 _sbrk_r
00807f94 g     F .text	00000078 _read_r
0080d430 g     O .rwdata	0000000c __lc_ctype
0080ea74 g     O .rwdata	00000004 alt_max_fd
00809fd0 g     F .text	00000138 __unpack_d
00807d14 g     F .text	00000110 _fclose_r
008047e4 g     F .text	00000034 fflush
008104f8 g     O .bss	00000004 __malloc_max_sbrked_mem
008004b0 g     F .text	00000054 __extendsfdf2
00809168 g     F .text	00000074 __adddf3
00806438 g     F .text	00000120 __b2d
00808678 g     F .text	00000660 __umoddi3
0080a6a4 g     F .text	000000f4 lseek
0080ea50 g     O .rwdata	00000004 _global_impure_ptr
00807288 g     F .text	000005f4 _realloc_r
008107d4 g       *ABS*	00000000 __bss_end
0080bea4 g     F .text	000000f8 alt_iic_isr_register
0080c468 g     F .text	0000010c alt_tick
0080800c g     F .text	0000066c __udivdi3
0080ce94 g     O .rodata	00000028 __mprec_bigtens
00807168 g     F .text	00000120 __s2b
00809c70 g     F .text	00000194 __floatunsidf
00806358 g     F .text	00000060 __mcmp
0080494c g     F .text	00000018 __fp_lock_all
0080be5c g     F .text	00000048 alt_ic_irq_enabled
0080c3d0 g     F .text	00000098 alt_alarm_stop
00810510 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080d844 g     O .rwdata	00000028 alt_dev_null
008007c0 g     F .text	000000c8 __unpack_f
0080baa8 g     F .text	0000001c alt_dcache_flush_all
00806224 g     F .text	00000070 __hi0bits
00809b98 g     F .text	000000d8 __fixdfsi
0080ea8c g       *ABS*	00000000 __ram_rwdata_end
0080ea6c g     O .rwdata	00000008 alt_dev_list
0080ab5c g     F .text	00000124 write
0080d030 g       *ABS*	00000000 __ram_rodata_end
0080a35c g     F .text	000000d8 fstat
00807048 g     F .text	00000120 __pow5mult
008104e8 g     O .bss	00000004 __nlocale_changed
00809f48 g     F .text	00000008 __umodsi3
008107d4 g       *ABS*	00000000 end
00800660 g     F .text	00000160 __pack_f
0080aef0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080ccb0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080b8c4 g     F .text	00000090 alt_avalon_timer_sc_init
00809f50 g     F .text	00000080 __clzsi2
0080b614 g     F .text	00000240 altera_avalon_jtag_uart_write
00804870 g     F .text	00000004 __sfp_lock_acquire
00805f00 g     F .text	000000e4 memchr
00800dcc g     F .text	00001ec4 ___vfprintf_internal_r
00804c38 g     F .text	00000314 _free_r
0080caa0 g     F .text	000001b0 __call_exitprocs
008104ec g     O .bss	00000004 __mlocale_changed
0080ea60 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
00810514 g     O .bss	00000004 _alt_tick_rate
00806b40 g     F .text	0000014c __lshift
00810518 g     O .bss	00000004 _alt_nticks
0080a8a4 g     F .text	00000124 read
0080ad14 g     F .text	0000005c alt_sys_init
0080c968 g     F .text	00000134 __register_exitproc
00806c8c g     F .text	00000254 __multiply
0080b288 g     F .text	00000074 altera_avalon_jtag_uart_close
00800b9c g     F .text	00000038 __mulsi3
0080d030 g       *ABS*	00000000 __ram_rwdata_start
0080ccb4 g       *ABS*	00000000 __ram_rodata_start
0081051c g     O .bss	00000028 __malloc_current_mallinfo
00806838 g     F .text	0000017c __d2b
0080ada8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c748 g     F .text	000000d0 alt_get_fd
0080a108 g     F .text	000000c8 __fpcmp_parts_d
00807ca4 g     F .text	00000070 _close_r
0080c8f4 g     F .text	00000074 memcmp
0080ae58 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008107d4 g       *ABS*	00000000 __alt_stack_base
0080aea0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802cb4 g     F .text	0000013c __swsetup_r
008095a0 g     F .text	00000258 __divdf3
00804a1c g     F .text	000000f0 __sfp
0080669c g     F .text	00000058 __copybits
0080d43c g     O .rwdata	00000408 __malloc_av_
0080487c g     F .text	00000004 __sinit_lock_release
008091dc g     F .text	000003c4 __muldf3
00807a48 g     F .text	00000060 __sread
0080cce4 g     O .rodata	00000010 __thenan_sf
0080c628 g     F .text	00000120 alt_find_file
0080bac4 g     F .text	000000b4 alt_dev_llist_insert
0080a864 g     F .text	00000020 __malloc_lock
0080aaa0 g     F .text	000000bc sbrk
008045e8 g     F .text	000001fc _fflush_r
00807bdc g     F .text	000000c8 _calloc_r
008104e8 g       *ABS*	00000000 __bss_start
00806164 g     F .text	00000098 memset
008001f0 g     F .text	000000e0 main
0081050c g     O .bss	00000004 alt_envp
008104fc g     O .bss	00000004 __malloc_max_total_mem
0080ae00 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080795c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00807e24 g     F .text	00000014 fclose
00810644 g     O .bss	00000190 _atexit0
00803034 g     F .text	000015b4 _dtoa_r
008057c0 g     F .text	00000740 _malloc_r
0080ea78 g     O .rwdata	00000004 alt_errno
008054b0 g     F .text	000000b8 _fwalk
00809e80 g     F .text	00000060 __divsi3
0080cef0 g     O .rodata	00000014 __thenan_df
00804b0c g     F .text	0000012c _malloc_trim_r
0080ccb4 g       *ABS*	00000000 __CTOR_END__
008002d0 g     F .text	000001e0 __mulsf3
00807aa8 g     F .text	000000bc strcmp
0080ccb4 g       *ABS*	00000000 __flash_rodata_start
0080ccb4 g       *ABS*	00000000 __DTOR_LIST__
00809880 g     F .text	00000088 __nedf2
0080ace0 g     F .text	00000034 alt_irq_init
0080aa28 g     F .text	00000078 alt_release_fd
0080cf04 g     O .rodata	00000100 __clz_tab
008104f0 g     O .bss	00000004 _PathLocale
0080c8a8 g     F .text	00000014 atexit
00807b64 g     F .text	00000078 _write_r
00805610 g     F .text	0000001c setlocale
0080ea4c g     O .rwdata	00000004 _impure_ptr
00810504 g     O .bss	00000004 alt_argc
0080bc3c g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
008063b8 g     F .text	00000080 __ulp
0080787c g     F .text	00000040 __isinfd
00804934 g     F .text	00000018 __fp_unlock_all
0080ea64 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080557c g     F .text	00000010 localeconv
0080bcd0 g     F .text	00000050 alt_ic_isr_register
0080ea8c g       *ABS*	00000000 _edata
008107d4 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080b2fc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080bdbc g     F .text	000000a0 alt_ic_irq_disable
008079cc g     F .text	0000007c __swrite
0080ea5c g     O .rwdata	00000004 __malloc_trim_threshold
0080c574 g     F .text	00000020 altera_nios2_qsys_irq_init
0080c8bc g     F .text	00000038 exit
008053e8 g     F .text	000000c8 _fwalk_reent
008069b4 g     F .text	0000018c __mdiff
00809ee0 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00804874 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080cc90 g     F .text	00000020 _exit
008078bc g     F .text	00000030 __isnand
0080b954 g     F .text	00000154 alt_alarm_start
0080053c g     F .text	00000124 __muldi3
0080562c g     F .text	00000194 __smakebuf_r
00800d00 g     F .text	00000074 strlen
0080c1e4 g     F .text	0000018c open
00809990 g     F .text	00000088 __gedf2
0080bca0 g     F .text	00000030 alt_icache_flush_all
0080ea80 g     O .rwdata	00000004 alt_priority_mask
0080bd20 g     F .text	0000009c alt_ic_irq_enable
00802c90 g     F .text	00000024 __vfprintf_internal
008090e8 g     F .text	00000080 __subdf3
00806294 g     F .text	000000c4 __lo0bits
0080ea84 g     O .rwdata	00000008 alt_alarm_list
0080bbd8 g     F .text	00000064 _do_ctors
0080a1d0 g     F .text	00000100 close
0080a5b8 g     F .text	00000080 alt_load
00800888 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00804878 g     F .text	00000004 __sinit_lock_acquire
00806f1c g     F .text	0000012c __multadd
008061fc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00a00014 	movui	r2,32768
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18c15104 	addi	r3,r3,1348
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18c15104 	addi	r3,r3,1348
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d69a9314 	ori	gp,gp,27212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	10813a14 	ori	r2,r2,1256

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18c1f514 	ori	r3,r3,2004

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080a5b80 	call	80a5b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080a7f80 	call	80a7f8 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <main>:
#define ALT_CI_FP_ADD_SUB_0_N_MASK ((1<<1)-1)
#define ALT_CI_FP_MULT_0(A,B) __builtin_custom_fnff(ALT_CI_FP_MULT_0_N,(A),(B))
#define ALT_CI_FP_MULT_0_N 0x0

int main()
{
  8001f0:	defff904 	addi	sp,sp,-28
  8001f4:	dfc00615 	stw	ra,24(sp)
  8001f8:	df000515 	stw	fp,20(sp)
  8001fc:	df000504 	addi	fp,sp,20
  printf("Hello from Nios II!\n");
  800200:	01002074 	movhi	r4,129
  800204:	21332d04 	addi	r4,r4,-13132
  800208:	0800cec0 	call	800cec <puts>
  float a,b,c,d,e;
  a = 5.0;
  80020c:	00902834 	movhi	r2,16544
  800210:	e0bfff15 	stw	r2,-4(fp)
  b = 4.0;
  800214:	00902034 	movhi	r2,16512
  800218:	e0bffe15 	stw	r2,-8(fp)
  c = a*b;
  80021c:	e13fff17 	ldw	r4,-4(fp)
  800220:	e17ffe17 	ldw	r5,-8(fp)
  800224:	08002d00 	call	8002d0 <__mulsf3>
  800228:	e0bffd15 	stw	r2,-12(fp)
  d = ALT_CI_FP_MULT_0(a,b);
  80022c:	e0ffff17 	ldw	r3,-4(fp)
  800230:	e0bffe17 	ldw	r2,-8(fp)
  800234:	1885c032 	custom	0,r2,r3,r2
  800238:	e0bffc15 	stw	r2,-16(fp)
  e = ALT_CI_FP_ADD_SUB_0(0,a,b);
  80023c:	e0ffff17 	ldw	r3,-4(fp)
  800240:	e0bffe17 	ldw	r2,-8(fp)
  800244:	1885c0b2 	custom	2,r2,r3,r2
  800248:	e0bffb15 	stw	r2,-20(fp)

  printf("Original %f \n", c);
  80024c:	e13ffd17 	ldw	r4,-12(fp)
  800250:	08004b00 	call	8004b0 <__extendsfdf2>
  800254:	100d883a 	mov	r6,r2
  800258:	180f883a 	mov	r7,r3
  80025c:	01002074 	movhi	r4,129
  800260:	21333204 	addi	r4,r4,-13112
  800264:	300b883a 	mov	r5,r6
  800268:	380d883a 	mov	r6,r7
  80026c:	0800bd40 	call	800bd4 <printf>
  printf("Custom %f \n", d);
  800270:	e13ffc17 	ldw	r4,-16(fp)
  800274:	08004b00 	call	8004b0 <__extendsfdf2>
  800278:	100d883a 	mov	r6,r2
  80027c:	180f883a 	mov	r7,r3
  800280:	01002074 	movhi	r4,129
  800284:	21333604 	addi	r4,r4,-13096
  800288:	300b883a 	mov	r5,r6
  80028c:	380d883a 	mov	r6,r7
  800290:	0800bd40 	call	800bd4 <printf>
  printf("Custom %f \n", e);
  800294:	e13ffb17 	ldw	r4,-20(fp)
  800298:	08004b00 	call	8004b0 <__extendsfdf2>
  80029c:	100d883a 	mov	r6,r2
  8002a0:	180f883a 	mov	r7,r3
  8002a4:	01002074 	movhi	r4,129
  8002a8:	21333604 	addi	r4,r4,-13096
  8002ac:	300b883a 	mov	r5,r6
  8002b0:	380d883a 	mov	r6,r7
  8002b4:	0800bd40 	call	800bd4 <printf>
  return 0;
  8002b8:	0005883a 	mov	r2,zero
}
  8002bc:	e037883a 	mov	sp,fp
  8002c0:	dfc00117 	ldw	ra,4(sp)
  8002c4:	df000017 	ldw	fp,0(sp)
  8002c8:	dec00204 	addi	sp,sp,8
  8002cc:	f800283a 	ret

008002d0 <__mulsf3>:
  8002d0:	deffef04 	addi	sp,sp,-68
  8002d4:	dc400f15 	stw	r17,60(sp)
  8002d8:	dc400204 	addi	r17,sp,8
  8002dc:	dc000e15 	stw	r16,56(sp)
  8002e0:	d9000015 	stw	r4,0(sp)
  8002e4:	d9400115 	stw	r5,4(sp)
  8002e8:	d809883a 	mov	r4,sp
  8002ec:	880b883a 	mov	r5,r17
  8002f0:	dc000604 	addi	r16,sp,24
  8002f4:	dfc01015 	stw	ra,64(sp)
  8002f8:	08007c00 	call	8007c0 <__unpack_f>
  8002fc:	d9000104 	addi	r4,sp,4
  800300:	800b883a 	mov	r5,r16
  800304:	08007c00 	call	8007c0 <__unpack_f>
  800308:	d9000217 	ldw	r4,8(sp)
  80030c:	00800044 	movi	r2,1
  800310:	01400104 	movi	r5,4
  800314:	1100142e 	bgeu	r2,r4,800368 <__mulsf3+0x98>
  800318:	d8c00617 	ldw	r3,24(sp)
  80031c:	10c0052e 	bgeu	r2,r3,800334 <__mulsf3+0x64>
  800320:	21400f26 	beq	r4,r5,800360 <__mulsf3+0x90>
  800324:	19405d26 	beq	r3,r5,80049c <__mulsf3+0x1cc>
  800328:	00800084 	movi	r2,2
  80032c:	20800e26 	beq	r4,r2,800368 <__mulsf3+0x98>
  800330:	1880181e 	bne	r3,r2,800394 <__mulsf3+0xc4>
  800334:	d8c00717 	ldw	r3,28(sp)
  800338:	d8800317 	ldw	r2,12(sp)
  80033c:	8009883a 	mov	r4,r16
  800340:	10c4c03a 	cmpne	r2,r2,r3
  800344:	d8800715 	stw	r2,28(sp)
  800348:	08006600 	call	800660 <__pack_f>
  80034c:	dfc01017 	ldw	ra,64(sp)
  800350:	dc400f17 	ldw	r17,60(sp)
  800354:	dc000e17 	ldw	r16,56(sp)
  800358:	dec01104 	addi	sp,sp,68
  80035c:	f800283a 	ret
  800360:	00800084 	movi	r2,2
  800364:	18804f26 	beq	r3,r2,8004a4 <__mulsf3+0x1d4>
  800368:	d8800317 	ldw	r2,12(sp)
  80036c:	d8c00717 	ldw	r3,28(sp)
  800370:	8809883a 	mov	r4,r17
  800374:	10c4c03a 	cmpne	r2,r2,r3
  800378:	d8800315 	stw	r2,12(sp)
  80037c:	08006600 	call	800660 <__pack_f>
  800380:	dfc01017 	ldw	ra,64(sp)
  800384:	dc400f17 	ldw	r17,60(sp)
  800388:	dc000e17 	ldw	r16,56(sp)
  80038c:	dec01104 	addi	sp,sp,68
  800390:	f800283a 	ret
  800394:	d8800517 	ldw	r2,20(sp)
  800398:	da000917 	ldw	r8,36(sp)
  80039c:	0013883a 	mov	r9,zero
  8003a0:	0007883a 	mov	r3,zero
  8003a4:	480f883a 	mov	r7,r9
  8003a8:	180b883a 	mov	r5,r3
  8003ac:	400d883a 	mov	r6,r8
  8003b0:	1009883a 	mov	r4,r2
  8003b4:	080053c0 	call	80053c <__muldi3>
  8003b8:	da800417 	ldw	r10,16(sp)
  8003bc:	d9800817 	ldw	r6,32(sp)
  8003c0:	da400317 	ldw	r9,12(sp)
  8003c4:	52800084 	addi	r10,r10,2
  8003c8:	3295883a 	add	r10,r6,r10
  8003cc:	d9800717 	ldw	r6,28(sp)
  8003d0:	180b883a 	mov	r5,r3
  8003d4:	180f883a 	mov	r7,r3
  8003d8:	4992c03a 	cmpne	r9,r9,r6
  8003dc:	da400b15 	stw	r9,44(sp)
  8003e0:	1007883a 	mov	r3,r2
  8003e4:	da800c15 	stw	r10,48(sp)
  8003e8:	2800070e 	bge	r5,zero,800408 <__mulsf3+0x138>
  8003ec:	2880004c 	andi	r2,r5,1
  8003f0:	1005003a 	cmpeq	r2,r2,zero
  8003f4:	500d883a 	mov	r6,r10
  8003f8:	10001e26 	beq	r2,zero,800474 <__mulsf3+0x1a4>
  8003fc:	380ed07a 	srli	r7,r7,1
  800400:	31800044 	addi	r6,r6,1
  800404:	d9800c15 	stw	r6,48(sp)
  800408:	01100034 	movhi	r4,16384
  80040c:	213fffc4 	addi	r4,r4,-1
  800410:	21c00b36 	bltu	r4,r7,800440 <__mulsf3+0x170>
  800414:	d8800c17 	ldw	r2,48(sp)
  800418:	00000206 	br	800424 <__mulsf3+0x154>
  80041c:	18c7883a 	add	r3,r3,r3
  800420:	21c00636 	bltu	r4,r7,80043c <__mulsf3+0x16c>
  800424:	10bfffc4 	addi	r2,r2,-1
  800428:	39cf883a 	add	r7,r7,r7
  80042c:	183ffb0e 	bge	r3,zero,80041c <__mulsf3+0x14c>
  800430:	39c00054 	ori	r7,r7,1
  800434:	18c7883a 	add	r3,r3,r3
  800438:	21fffa2e 	bgeu	r4,r7,800424 <__mulsf3+0x154>
  80043c:	d8800c15 	stw	r2,48(sp)
  800440:	39001fcc 	andi	r4,r7,127
  800444:	00801004 	movi	r2,64
  800448:	20800d26 	beq	r4,r2,800480 <__mulsf3+0x1b0>
  80044c:	008000c4 	movi	r2,3
  800450:	d9000a04 	addi	r4,sp,40
  800454:	d9c00d15 	stw	r7,52(sp)
  800458:	d8800a15 	stw	r2,40(sp)
  80045c:	08006600 	call	800660 <__pack_f>
  800460:	dfc01017 	ldw	ra,64(sp)
  800464:	dc400f17 	ldw	r17,60(sp)
  800468:	dc000e17 	ldw	r16,56(sp)
  80046c:	dec01104 	addi	sp,sp,68
  800470:	f800283a 	ret
  800474:	1804d07a 	srli	r2,r3,1
  800478:	10e00034 	orhi	r3,r2,32768
  80047c:	003fdf06 	br	8003fc <__mulsf3+0x12c>
  800480:	3880200c 	andi	r2,r7,128
  800484:	103ff11e 	bne	r2,zero,80044c <__mulsf3+0x17c>
  800488:	183ff026 	beq	r3,zero,80044c <__mulsf3+0x17c>
  80048c:	3907883a 	add	r3,r7,r4
  800490:	00bfe004 	movi	r2,-128
  800494:	188e703a 	and	r7,r3,r2
  800498:	003fec06 	br	80044c <__mulsf3+0x17c>
  80049c:	00800084 	movi	r2,2
  8004a0:	20bfa41e 	bne	r4,r2,800334 <__mulsf3+0x64>
  8004a4:	01002074 	movhi	r4,129
  8004a8:	21333904 	addi	r4,r4,-13084
  8004ac:	003fb306 	br	80037c <__mulsf3+0xac>

008004b0 <__extendsfdf2>:
  8004b0:	defff904 	addi	sp,sp,-28
  8004b4:	d9000115 	stw	r4,4(sp)
  8004b8:	d9400204 	addi	r5,sp,8
  8004bc:	d9000104 	addi	r4,sp,4
  8004c0:	dfc00615 	stw	ra,24(sp)
  8004c4:	08007c00 	call	8007c0 <__unpack_f>
  8004c8:	d9c00517 	ldw	r7,20(sp)
  8004cc:	0011883a 	mov	r8,zero
  8004d0:	400697ba 	slli	r3,r8,30
  8004d4:	3812d0ba 	srli	r9,r7,2
  8004d8:	380497ba 	slli	r2,r7,30
  8004dc:	d9000217 	ldw	r4,8(sp)
  8004e0:	d9400317 	ldw	r5,12(sp)
  8004e4:	d9800417 	ldw	r6,16(sp)
  8004e8:	48c6b03a 	or	r3,r9,r3
  8004ec:	100f883a 	mov	r7,r2
  8004f0:	d8c00015 	stw	r3,0(sp)
  8004f4:	08005040 	call	800504 <__make_dp>
  8004f8:	dfc00617 	ldw	ra,24(sp)
  8004fc:	dec00704 	addi	sp,sp,28
  800500:	f800283a 	ret

00800504 <__make_dp>:
  800504:	defff904 	addi	sp,sp,-28
  800508:	d8c00717 	ldw	r3,28(sp)
  80050c:	d9000015 	stw	r4,0(sp)
  800510:	d809883a 	mov	r4,sp
  800514:	dfc00515 	stw	ra,20(sp)
  800518:	d9c00615 	stw	r7,24(sp)
  80051c:	d9400115 	stw	r5,4(sp)
  800520:	d9800215 	stw	r6,8(sp)
  800524:	d8c00415 	stw	r3,16(sp)
  800528:	d9c00315 	stw	r7,12(sp)
  80052c:	08008880 	call	800888 <__pack_d>
  800530:	dfc00517 	ldw	ra,20(sp)
  800534:	dec00704 	addi	sp,sp,28
  800538:	f800283a 	ret

0080053c <__muldi3>:
  80053c:	defff204 	addi	sp,sp,-56
  800540:	df000c15 	stw	fp,48(sp)
  800544:	3038d43a 	srli	fp,r6,16
  800548:	dd000815 	stw	r20,32(sp)
  80054c:	dc400515 	stw	r17,20(sp)
  800550:	2028d43a 	srli	r20,r4,16
  800554:	247fffcc 	andi	r17,r4,65535
  800558:	dc000415 	stw	r16,16(sp)
  80055c:	343fffcc 	andi	r16,r6,65535
  800560:	dcc00715 	stw	r19,28(sp)
  800564:	d9000015 	stw	r4,0(sp)
  800568:	2827883a 	mov	r19,r5
  80056c:	8809883a 	mov	r4,r17
  800570:	d9400115 	stw	r5,4(sp)
  800574:	800b883a 	mov	r5,r16
  800578:	d9800215 	stw	r6,8(sp)
  80057c:	dfc00d15 	stw	ra,52(sp)
  800580:	d9c00315 	stw	r7,12(sp)
  800584:	dd800a15 	stw	r22,40(sp)
  800588:	dd400915 	stw	r21,36(sp)
  80058c:	302d883a 	mov	r22,r6
  800590:	ddc00b15 	stw	r23,44(sp)
  800594:	dc800615 	stw	r18,24(sp)
  800598:	0800b9c0 	call	800b9c <__mulsi3>
  80059c:	8809883a 	mov	r4,r17
  8005a0:	e00b883a 	mov	r5,fp
  8005a4:	102b883a 	mov	r21,r2
  8005a8:	0800b9c0 	call	800b9c <__mulsi3>
  8005ac:	800b883a 	mov	r5,r16
  8005b0:	a009883a 	mov	r4,r20
  8005b4:	1023883a 	mov	r17,r2
  8005b8:	0800b9c0 	call	800b9c <__mulsi3>
  8005bc:	a009883a 	mov	r4,r20
  8005c0:	e00b883a 	mov	r5,fp
  8005c4:	1021883a 	mov	r16,r2
  8005c8:	0800b9c0 	call	800b9c <__mulsi3>
  8005cc:	a8ffffcc 	andi	r3,r21,65535
  8005d0:	a82ad43a 	srli	r21,r21,16
  8005d4:	8c23883a 	add	r17,r17,r16
  8005d8:	1011883a 	mov	r8,r2
  8005dc:	ac6b883a 	add	r21,r21,r17
  8005e0:	a804943a 	slli	r2,r21,16
  8005e4:	b009883a 	mov	r4,r22
  8005e8:	980b883a 	mov	r5,r19
  8005ec:	10c7883a 	add	r3,r2,r3
  8005f0:	a812d43a 	srli	r9,r21,16
  8005f4:	180d883a 	mov	r6,r3
  8005f8:	ac00022e 	bgeu	r21,r16,800604 <__muldi3+0xc8>
  8005fc:	00800074 	movhi	r2,1
  800600:	4091883a 	add	r8,r8,r2
  800604:	4267883a 	add	r19,r8,r9
  800608:	302d883a 	mov	r22,r6
  80060c:	0800b9c0 	call	800b9c <__mulsi3>
  800610:	d9400317 	ldw	r5,12(sp)
  800614:	d9000017 	ldw	r4,0(sp)
  800618:	1023883a 	mov	r17,r2
  80061c:	0800b9c0 	call	800b9c <__mulsi3>
  800620:	14cb883a 	add	r5,r2,r19
  800624:	894b883a 	add	r5,r17,r5
  800628:	b005883a 	mov	r2,r22
  80062c:	2807883a 	mov	r3,r5
  800630:	dfc00d17 	ldw	ra,52(sp)
  800634:	df000c17 	ldw	fp,48(sp)
  800638:	ddc00b17 	ldw	r23,44(sp)
  80063c:	dd800a17 	ldw	r22,40(sp)
  800640:	dd400917 	ldw	r21,36(sp)
  800644:	dd000817 	ldw	r20,32(sp)
  800648:	dcc00717 	ldw	r19,28(sp)
  80064c:	dc800617 	ldw	r18,24(sp)
  800650:	dc400517 	ldw	r17,20(sp)
  800654:	dc000417 	ldw	r16,16(sp)
  800658:	dec00e04 	addi	sp,sp,56
  80065c:	f800283a 	ret

00800660 <__pack_f>:
  800660:	20c00017 	ldw	r3,0(r4)
  800664:	01c00044 	movi	r7,1
  800668:	21800317 	ldw	r6,12(r4)
  80066c:	21400117 	ldw	r5,4(r4)
  800670:	38c02d2e 	bgeu	r7,r3,800728 <__pack_f+0xc8>
  800674:	00800104 	movi	r2,4
  800678:	18802826 	beq	r3,r2,80071c <__pack_f+0xbc>
  80067c:	00800084 	movi	r2,2
  800680:	18800126 	beq	r3,r2,800688 <__pack_f+0x28>
  800684:	3000101e 	bne	r6,zero,8006c8 <__pack_f+0x68>
  800688:	000d883a 	mov	r6,zero
  80068c:	0007883a 	mov	r3,zero
  800690:	19003fcc 	andi	r4,r3,255
  800694:	200895fa 	slli	r4,r4,23
  800698:	00c02034 	movhi	r3,128
  80069c:	18ffffc4 	addi	r3,r3,-1
  8006a0:	30c6703a 	and	r3,r6,r3
  8006a4:	10a0002c 	andhi	r2,r2,32768
  8006a8:	10c4b03a 	or	r2,r2,r3
  8006ac:	280a97fa 	slli	r5,r5,31
  8006b0:	1104b03a 	or	r2,r2,r4
  8006b4:	00e00034 	movhi	r3,32768
  8006b8:	18ffffc4 	addi	r3,r3,-1
  8006bc:	10c4703a 	and	r2,r2,r3
  8006c0:	1144b03a 	or	r2,r2,r5
  8006c4:	f800283a 	ret
  8006c8:	21000217 	ldw	r4,8(r4)
  8006cc:	00bfe084 	movi	r2,-126
  8006d0:	20801b16 	blt	r4,r2,800740 <__pack_f+0xe0>
  8006d4:	00801fc4 	movi	r2,127
  8006d8:	11001016 	blt	r2,r4,80071c <__pack_f+0xbc>
  8006dc:	308e703a 	and	r7,r6,r2
  8006e0:	2087883a 	add	r3,r4,r2
  8006e4:	00801004 	movi	r2,64
  8006e8:	38800526 	beq	r7,r2,800700 <__pack_f+0xa0>
  8006ec:	31800fc4 	addi	r6,r6,63
  8006f0:	30000716 	blt	r6,zero,800710 <__pack_f+0xb0>
  8006f4:	300490ba 	slli	r2,r6,2
  8006f8:	100cd27a 	srli	r6,r2,9
  8006fc:	003fe406 	br	800690 <__pack_f+0x30>
  800700:	3080200c 	andi	r2,r6,128
  800704:	103ffa26 	beq	r2,zero,8006f0 <__pack_f+0x90>
  800708:	31cd883a 	add	r6,r6,r7
  80070c:	003ff806 	br	8006f0 <__pack_f+0x90>
  800710:	300cd07a 	srli	r6,r6,1
  800714:	18c00044 	addi	r3,r3,1
  800718:	003ff606 	br	8006f4 <__pack_f+0x94>
  80071c:	000d883a 	mov	r6,zero
  800720:	00ffffc4 	movi	r3,-1
  800724:	003fda06 	br	800690 <__pack_f+0x30>
  800728:	31800434 	orhi	r6,r6,16
  80072c:	00802034 	movhi	r2,128
  800730:	10bfffc4 	addi	r2,r2,-1
  800734:	308c703a 	and	r6,r6,r2
  800738:	00ffffc4 	movi	r3,-1
  80073c:	003fd406 	br	800690 <__pack_f+0x30>
  800740:	1109c83a 	sub	r4,r2,r4
  800744:	00800644 	movi	r2,25
  800748:	11001216 	blt	r2,r4,800794 <__pack_f+0x134>
  80074c:	3904983a 	sll	r2,r7,r4
  800750:	3106d83a 	srl	r3,r6,r4
  800754:	10bfffc4 	addi	r2,r2,-1
  800758:	3084703a 	and	r2,r6,r2
  80075c:	1004c03a 	cmpne	r2,r2,zero
  800760:	1886b03a 	or	r3,r3,r2
  800764:	19001fcc 	andi	r4,r3,127
  800768:	00801004 	movi	r2,64
  80076c:	20800c26 	beq	r4,r2,8007a0 <__pack_f+0x140>
  800770:	18c00fc4 	addi	r3,r3,63
  800774:	00900034 	movhi	r2,16384
  800778:	10bfffc4 	addi	r2,r2,-1
  80077c:	180cd1fa 	srli	r6,r3,7
  800780:	10c7803a 	cmpltu	r3,r2,r3
  800784:	00802034 	movhi	r2,128
  800788:	10bfffc4 	addi	r2,r2,-1
  80078c:	308c703a 	and	r6,r6,r2
  800790:	003fbf06 	br	800690 <__pack_f+0x30>
  800794:	0007883a 	mov	r3,zero
  800798:	000d883a 	mov	r6,zero
  80079c:	003ff906 	br	800784 <__pack_f+0x124>
  8007a0:	1880200c 	andi	r2,r3,128
  8007a4:	10000126 	beq	r2,zero,8007ac <__pack_f+0x14c>
  8007a8:	1907883a 	add	r3,r3,r4
  8007ac:	180cd1fa 	srli	r6,r3,7
  8007b0:	00900034 	movhi	r2,16384
  8007b4:	10bfffc4 	addi	r2,r2,-1
  8007b8:	10c7803a 	cmpltu	r3,r2,r3
  8007bc:	003ff106 	br	800784 <__pack_f+0x124>

008007c0 <__unpack_f>:
  8007c0:	21800017 	ldw	r6,0(r4)
  8007c4:	00c02034 	movhi	r3,128
  8007c8:	18ffffc4 	addi	r3,r3,-1
  8007cc:	3004d5fa 	srli	r2,r6,23
  8007d0:	3008d7fa 	srli	r4,r6,31
  8007d4:	30ce703a 	and	r7,r6,r3
  8007d8:	10c03fcc 	andi	r3,r2,255
  8007dc:	29000115 	stw	r4,4(r5)
  8007e0:	1800131e 	bne	r3,zero,800830 <__unpack_f+0x70>
  8007e4:	38000f26 	beq	r7,zero,800824 <__unpack_f+0x64>
  8007e8:	380691fa 	slli	r3,r7,7
  8007ec:	01bfe084 	movi	r6,-126
  8007f0:	008000c4 	movi	r2,3
  8007f4:	01100034 	movhi	r4,16384
  8007f8:	213fffc4 	addi	r4,r4,-1
  8007fc:	28800015 	stw	r2,0(r5)
  800800:	29800215 	stw	r6,8(r5)
  800804:	20c00536 	bltu	r4,r3,80081c <__unpack_f+0x5c>
  800808:	3005883a 	mov	r2,r6
  80080c:	18c7883a 	add	r3,r3,r3
  800810:	10bfffc4 	addi	r2,r2,-1
  800814:	20fffd2e 	bgeu	r4,r3,80080c <__unpack_f+0x4c>
  800818:	28800215 	stw	r2,8(r5)
  80081c:	28c00315 	stw	r3,12(r5)
  800820:	f800283a 	ret
  800824:	00800084 	movi	r2,2
  800828:	28800015 	stw	r2,0(r5)
  80082c:	f800283a 	ret
  800830:	00803fc4 	movi	r2,255
  800834:	18800826 	beq	r3,r2,800858 <__unpack_f+0x98>
  800838:	380491fa 	slli	r2,r7,7
  80083c:	18ffe044 	addi	r3,r3,-127
  800840:	28c00215 	stw	r3,8(r5)
  800844:	10900034 	orhi	r2,r2,16384
  800848:	28800315 	stw	r2,12(r5)
  80084c:	008000c4 	movi	r2,3
  800850:	28800015 	stw	r2,0(r5)
  800854:	f800283a 	ret
  800858:	3800031e 	bne	r7,zero,800868 <__unpack_f+0xa8>
  80085c:	00800104 	movi	r2,4
  800860:	28800015 	stw	r2,0(r5)
  800864:	f800283a 	ret
  800868:	3080042c 	andhi	r2,r6,16
  80086c:	10000426 	beq	r2,zero,800880 <__unpack_f+0xc0>
  800870:	00800044 	movi	r2,1
  800874:	28800015 	stw	r2,0(r5)
  800878:	29c00315 	stw	r7,12(r5)
  80087c:	f800283a 	ret
  800880:	28000015 	stw	zero,0(r5)
  800884:	003ffc06 	br	800878 <__unpack_f+0xb8>

00800888 <__pack_d>:
  800888:	20c00017 	ldw	r3,0(r4)
  80088c:	defffd04 	addi	sp,sp,-12
  800890:	dc000015 	stw	r16,0(sp)
  800894:	dc800215 	stw	r18,8(sp)
  800898:	dc400115 	stw	r17,4(sp)
  80089c:	00800044 	movi	r2,1
  8008a0:	22000317 	ldw	r8,12(r4)
  8008a4:	001f883a 	mov	r15,zero
  8008a8:	22400417 	ldw	r9,16(r4)
  8008ac:	24000117 	ldw	r16,4(r4)
  8008b0:	10c0552e 	bgeu	r2,r3,800a08 <__pack_d+0x180>
  8008b4:	00800104 	movi	r2,4
  8008b8:	18804f26 	beq	r3,r2,8009f8 <__pack_d+0x170>
  8008bc:	00800084 	movi	r2,2
  8008c0:	18800226 	beq	r3,r2,8008cc <__pack_d+0x44>
  8008c4:	4244b03a 	or	r2,r8,r9
  8008c8:	10001a1e 	bne	r2,zero,800934 <__pack_d+0xac>
  8008cc:	000d883a 	mov	r6,zero
  8008d0:	000f883a 	mov	r7,zero
  8008d4:	0011883a 	mov	r8,zero
  8008d8:	00800434 	movhi	r2,16
  8008dc:	10bfffc4 	addi	r2,r2,-1
  8008e0:	301d883a 	mov	r14,r6
  8008e4:	3884703a 	and	r2,r7,r2
  8008e8:	400a953a 	slli	r5,r8,20
  8008ec:	79bffc2c 	andhi	r6,r15,65520
  8008f0:	308cb03a 	or	r6,r6,r2
  8008f4:	00e00434 	movhi	r3,32784
  8008f8:	18ffffc4 	addi	r3,r3,-1
  8008fc:	800497fa 	slli	r2,r16,31
  800900:	30c6703a 	and	r3,r6,r3
  800904:	1946b03a 	or	r3,r3,r5
  800908:	01600034 	movhi	r5,32768
  80090c:	297fffc4 	addi	r5,r5,-1
  800910:	194a703a 	and	r5,r3,r5
  800914:	288ab03a 	or	r5,r5,r2
  800918:	2807883a 	mov	r3,r5
  80091c:	7005883a 	mov	r2,r14
  800920:	dc800217 	ldw	r18,8(sp)
  800924:	dc400117 	ldw	r17,4(sp)
  800928:	dc000017 	ldw	r16,0(sp)
  80092c:	dec00304 	addi	sp,sp,12
  800930:	f800283a 	ret
  800934:	21000217 	ldw	r4,8(r4)
  800938:	00bf0084 	movi	r2,-1022
  80093c:	20803f16 	blt	r4,r2,800a3c <__pack_d+0x1b4>
  800940:	0080ffc4 	movi	r2,1023
  800944:	11002c16 	blt	r2,r4,8009f8 <__pack_d+0x170>
  800948:	00803fc4 	movi	r2,255
  80094c:	408c703a 	and	r6,r8,r2
  800950:	00802004 	movi	r2,128
  800954:	0007883a 	mov	r3,zero
  800958:	000f883a 	mov	r7,zero
  80095c:	2280ffc4 	addi	r10,r4,1023
  800960:	30801e26 	beq	r6,r2,8009dc <__pack_d+0x154>
  800964:	00801fc4 	movi	r2,127
  800968:	4089883a 	add	r4,r8,r2
  80096c:	220d803a 	cmpltu	r6,r4,r8
  800970:	324d883a 	add	r6,r6,r9
  800974:	2011883a 	mov	r8,r4
  800978:	3013883a 	mov	r9,r6
  80097c:	00880034 	movhi	r2,8192
  800980:	10bfffc4 	addi	r2,r2,-1
  800984:	12400d36 	bltu	r2,r9,8009bc <__pack_d+0x134>
  800988:	4804963a 	slli	r2,r9,24
  80098c:	400cd23a 	srli	r6,r8,8
  800990:	480ed23a 	srli	r7,r9,8
  800994:	013fffc4 	movi	r4,-1
  800998:	118cb03a 	or	r6,r2,r6
  80099c:	01400434 	movhi	r5,16
  8009a0:	297fffc4 	addi	r5,r5,-1
  8009a4:	3104703a 	and	r2,r6,r4
  8009a8:	3946703a 	and	r3,r7,r5
  8009ac:	5201ffcc 	andi	r8,r10,2047
  8009b0:	100d883a 	mov	r6,r2
  8009b4:	180f883a 	mov	r7,r3
  8009b8:	003fc706 	br	8008d8 <__pack_d+0x50>
  8009bc:	480897fa 	slli	r4,r9,31
  8009c0:	4004d07a 	srli	r2,r8,1
  8009c4:	4806d07a 	srli	r3,r9,1
  8009c8:	52800044 	addi	r10,r10,1
  8009cc:	2084b03a 	or	r2,r4,r2
  8009d0:	1011883a 	mov	r8,r2
  8009d4:	1813883a 	mov	r9,r3
  8009d8:	003feb06 	br	800988 <__pack_d+0x100>
  8009dc:	383fe11e 	bne	r7,zero,800964 <__pack_d+0xdc>
  8009e0:	01004004 	movi	r4,256
  8009e4:	4104703a 	and	r2,r8,r4
  8009e8:	10c4b03a 	or	r2,r2,r3
  8009ec:	103fe326 	beq	r2,zero,80097c <__pack_d+0xf4>
  8009f0:	3005883a 	mov	r2,r6
  8009f4:	003fdc06 	br	800968 <__pack_d+0xe0>
  8009f8:	000d883a 	mov	r6,zero
  8009fc:	000f883a 	mov	r7,zero
  800a00:	0201ffc4 	movi	r8,2047
  800a04:	003fb406 	br	8008d8 <__pack_d+0x50>
  800a08:	0005883a 	mov	r2,zero
  800a0c:	00c00234 	movhi	r3,8
  800a10:	408cb03a 	or	r6,r8,r2
  800a14:	48ceb03a 	or	r7,r9,r3
  800a18:	013fffc4 	movi	r4,-1
  800a1c:	01400434 	movhi	r5,16
  800a20:	297fffc4 	addi	r5,r5,-1
  800a24:	3104703a 	and	r2,r6,r4
  800a28:	3946703a 	and	r3,r7,r5
  800a2c:	100d883a 	mov	r6,r2
  800a30:	180f883a 	mov	r7,r3
  800a34:	0201ffc4 	movi	r8,2047
  800a38:	003fa706 	br	8008d8 <__pack_d+0x50>
  800a3c:	1109c83a 	sub	r4,r2,r4
  800a40:	00800e04 	movi	r2,56
  800a44:	11004316 	blt	r2,r4,800b54 <__pack_d+0x2cc>
  800a48:	21fff804 	addi	r7,r4,-32
  800a4c:	38004516 	blt	r7,zero,800b64 <__pack_d+0x2dc>
  800a50:	49d8d83a 	srl	r12,r9,r7
  800a54:	001b883a 	mov	r13,zero
  800a58:	0023883a 	mov	r17,zero
  800a5c:	01400044 	movi	r5,1
  800a60:	0025883a 	mov	r18,zero
  800a64:	38004716 	blt	r7,zero,800b84 <__pack_d+0x2fc>
  800a68:	29d6983a 	sll	r11,r5,r7
  800a6c:	0015883a 	mov	r10,zero
  800a70:	00bfffc4 	movi	r2,-1
  800a74:	5089883a 	add	r4,r10,r2
  800a78:	588b883a 	add	r5,r11,r2
  800a7c:	228d803a 	cmpltu	r6,r4,r10
  800a80:	314b883a 	add	r5,r6,r5
  800a84:	4104703a 	and	r2,r8,r4
  800a88:	4946703a 	and	r3,r9,r5
  800a8c:	10c4b03a 	or	r2,r2,r3
  800a90:	10000226 	beq	r2,zero,800a9c <__pack_d+0x214>
  800a94:	04400044 	movi	r17,1
  800a98:	0025883a 	mov	r18,zero
  800a9c:	00803fc4 	movi	r2,255
  800aa0:	644eb03a 	or	r7,r12,r17
  800aa4:	3892703a 	and	r9,r7,r2
  800aa8:	00802004 	movi	r2,128
  800aac:	6c90b03a 	or	r8,r13,r18
  800ab0:	0015883a 	mov	r10,zero
  800ab4:	48801626 	beq	r9,r2,800b10 <__pack_d+0x288>
  800ab8:	01001fc4 	movi	r4,127
  800abc:	3905883a 	add	r2,r7,r4
  800ac0:	11cd803a 	cmpltu	r6,r2,r7
  800ac4:	320d883a 	add	r6,r6,r8
  800ac8:	100f883a 	mov	r7,r2
  800acc:	00840034 	movhi	r2,4096
  800ad0:	10bfffc4 	addi	r2,r2,-1
  800ad4:	3011883a 	mov	r8,r6
  800ad8:	0007883a 	mov	r3,zero
  800adc:	11801b36 	bltu	r2,r6,800b4c <__pack_d+0x2c4>
  800ae0:	4004963a 	slli	r2,r8,24
  800ae4:	3808d23a 	srli	r4,r7,8
  800ae8:	400ad23a 	srli	r5,r8,8
  800aec:	1813883a 	mov	r9,r3
  800af0:	1108b03a 	or	r4,r2,r4
  800af4:	00bfffc4 	movi	r2,-1
  800af8:	00c00434 	movhi	r3,16
  800afc:	18ffffc4 	addi	r3,r3,-1
  800b00:	208c703a 	and	r6,r4,r2
  800b04:	28ce703a 	and	r7,r5,r3
  800b08:	4a01ffcc 	andi	r8,r9,2047
  800b0c:	003f7206 	br	8008d8 <__pack_d+0x50>
  800b10:	503fe91e 	bne	r10,zero,800ab8 <__pack_d+0x230>
  800b14:	01004004 	movi	r4,256
  800b18:	3904703a 	and	r2,r7,r4
  800b1c:	0007883a 	mov	r3,zero
  800b20:	10c4b03a 	or	r2,r2,r3
  800b24:	10000626 	beq	r2,zero,800b40 <__pack_d+0x2b8>
  800b28:	3a45883a 	add	r2,r7,r9
  800b2c:	11cd803a 	cmpltu	r6,r2,r7
  800b30:	320d883a 	add	r6,r6,r8
  800b34:	100f883a 	mov	r7,r2
  800b38:	3011883a 	mov	r8,r6
  800b3c:	0007883a 	mov	r3,zero
  800b40:	00840034 	movhi	r2,4096
  800b44:	10bfffc4 	addi	r2,r2,-1
  800b48:	123fe52e 	bgeu	r2,r8,800ae0 <__pack_d+0x258>
  800b4c:	00c00044 	movi	r3,1
  800b50:	003fe306 	br	800ae0 <__pack_d+0x258>
  800b54:	0009883a 	mov	r4,zero
  800b58:	0013883a 	mov	r9,zero
  800b5c:	000b883a 	mov	r5,zero
  800b60:	003fe406 	br	800af4 <__pack_d+0x26c>
  800b64:	4a47883a 	add	r3,r9,r9
  800b68:	008007c4 	movi	r2,31
  800b6c:	1105c83a 	sub	r2,r2,r4
  800b70:	1886983a 	sll	r3,r3,r2
  800b74:	4118d83a 	srl	r12,r8,r4
  800b78:	491ad83a 	srl	r13,r9,r4
  800b7c:	1b18b03a 	or	r12,r3,r12
  800b80:	003fb506 	br	800a58 <__pack_d+0x1d0>
  800b84:	2806d07a 	srli	r3,r5,1
  800b88:	008007c4 	movi	r2,31
  800b8c:	1105c83a 	sub	r2,r2,r4
  800b90:	1896d83a 	srl	r11,r3,r2
  800b94:	2914983a 	sll	r10,r5,r4
  800b98:	003fb506 	br	800a70 <__pack_d+0x1e8>

00800b9c <__mulsi3>:
  800b9c:	20000a26 	beq	r4,zero,800bc8 <__mulsi3+0x2c>
  800ba0:	0007883a 	mov	r3,zero
  800ba4:	2080004c 	andi	r2,r4,1
  800ba8:	1005003a 	cmpeq	r2,r2,zero
  800bac:	2008d07a 	srli	r4,r4,1
  800bb0:	1000011e 	bne	r2,zero,800bb8 <__mulsi3+0x1c>
  800bb4:	1947883a 	add	r3,r3,r5
  800bb8:	294b883a 	add	r5,r5,r5
  800bbc:	203ff91e 	bne	r4,zero,800ba4 <__mulsi3+0x8>
  800bc0:	1805883a 	mov	r2,r3
  800bc4:	f800283a 	ret
  800bc8:	0007883a 	mov	r3,zero
  800bcc:	1805883a 	mov	r2,r3
  800bd0:	f800283a 	ret

00800bd4 <printf>:
  800bd4:	defffb04 	addi	sp,sp,-20
  800bd8:	dfc00115 	stw	ra,4(sp)
  800bdc:	d9400215 	stw	r5,8(sp)
  800be0:	d9800315 	stw	r6,12(sp)
  800be4:	d9c00415 	stw	r7,16(sp)
  800be8:	00802074 	movhi	r2,129
  800bec:	10ba9304 	addi	r2,r2,-5556
  800bf0:	10c00017 	ldw	r3,0(r2)
  800bf4:	200b883a 	mov	r5,r4
  800bf8:	d8800204 	addi	r2,sp,8
  800bfc:	19000217 	ldw	r4,8(r3)
  800c00:	100d883a 	mov	r6,r2
  800c04:	d8800015 	stw	r2,0(sp)
  800c08:	0802c900 	call	802c90 <__vfprintf_internal>
  800c0c:	dfc00117 	ldw	ra,4(sp)
  800c10:	dec00504 	addi	sp,sp,20
  800c14:	f800283a 	ret

00800c18 <_printf_r>:
  800c18:	defffc04 	addi	sp,sp,-16
  800c1c:	dfc00115 	stw	ra,4(sp)
  800c20:	d9800215 	stw	r6,8(sp)
  800c24:	d9c00315 	stw	r7,12(sp)
  800c28:	280d883a 	mov	r6,r5
  800c2c:	21400217 	ldw	r5,8(r4)
  800c30:	d8c00204 	addi	r3,sp,8
  800c34:	180f883a 	mov	r7,r3
  800c38:	d8c00015 	stw	r3,0(sp)
  800c3c:	0800dcc0 	call	800dcc <___vfprintf_internal_r>
  800c40:	dfc00117 	ldw	ra,4(sp)
  800c44:	dec00404 	addi	sp,sp,16
  800c48:	f800283a 	ret

00800c4c <_puts_r>:
  800c4c:	defff604 	addi	sp,sp,-40
  800c50:	dc400715 	stw	r17,28(sp)
  800c54:	2023883a 	mov	r17,r4
  800c58:	2809883a 	mov	r4,r5
  800c5c:	dfc00915 	stw	ra,36(sp)
  800c60:	dcc00815 	stw	r19,32(sp)
  800c64:	2827883a 	mov	r19,r5
  800c68:	0800d000 	call	800d00 <strlen>
  800c6c:	89400217 	ldw	r5,8(r17)
  800c70:	00c02074 	movhi	r3,129
  800c74:	18f33d04 	addi	r3,r3,-13068
  800c78:	01c00044 	movi	r7,1
  800c7c:	12000044 	addi	r8,r2,1
  800c80:	d8c00515 	stw	r3,20(sp)
  800c84:	d9c00615 	stw	r7,24(sp)
  800c88:	d8c00304 	addi	r3,sp,12
  800c8c:	01c00084 	movi	r7,2
  800c90:	8809883a 	mov	r4,r17
  800c94:	d80d883a 	mov	r6,sp
  800c98:	d8c00015 	stw	r3,0(sp)
  800c9c:	dcc00315 	stw	r19,12(sp)
  800ca0:	da000215 	stw	r8,8(sp)
  800ca4:	d9c00115 	stw	r7,4(sp)
  800ca8:	d8800415 	stw	r2,16(sp)
  800cac:	0804f4c0 	call	804f4c <__sfvwrite_r>
  800cb0:	00ffffc4 	movi	r3,-1
  800cb4:	10000626 	beq	r2,zero,800cd0 <_puts_r+0x84>
  800cb8:	1805883a 	mov	r2,r3
  800cbc:	dfc00917 	ldw	ra,36(sp)
  800cc0:	dcc00817 	ldw	r19,32(sp)
  800cc4:	dc400717 	ldw	r17,28(sp)
  800cc8:	dec00a04 	addi	sp,sp,40
  800ccc:	f800283a 	ret
  800cd0:	00c00284 	movi	r3,10
  800cd4:	1805883a 	mov	r2,r3
  800cd8:	dfc00917 	ldw	ra,36(sp)
  800cdc:	dcc00817 	ldw	r19,32(sp)
  800ce0:	dc400717 	ldw	r17,28(sp)
  800ce4:	dec00a04 	addi	sp,sp,40
  800ce8:	f800283a 	ret

00800cec <puts>:
  800cec:	00802074 	movhi	r2,129
  800cf0:	10ba9304 	addi	r2,r2,-5556
  800cf4:	200b883a 	mov	r5,r4
  800cf8:	11000017 	ldw	r4,0(r2)
  800cfc:	0800c4c1 	jmpi	800c4c <_puts_r>

00800d00 <strlen>:
  800d00:	208000cc 	andi	r2,r4,3
  800d04:	2011883a 	mov	r8,r4
  800d08:	1000161e 	bne	r2,zero,800d64 <strlen+0x64>
  800d0c:	20c00017 	ldw	r3,0(r4)
  800d10:	017fbff4 	movhi	r5,65279
  800d14:	297fbfc4 	addi	r5,r5,-257
  800d18:	01e02074 	movhi	r7,32897
  800d1c:	39e02004 	addi	r7,r7,-32640
  800d20:	1945883a 	add	r2,r3,r5
  800d24:	11c4703a 	and	r2,r2,r7
  800d28:	00c6303a 	nor	r3,zero,r3
  800d2c:	1886703a 	and	r3,r3,r2
  800d30:	18000c1e 	bne	r3,zero,800d64 <strlen+0x64>
  800d34:	280d883a 	mov	r6,r5
  800d38:	380b883a 	mov	r5,r7
  800d3c:	21000104 	addi	r4,r4,4
  800d40:	20800017 	ldw	r2,0(r4)
  800d44:	1187883a 	add	r3,r2,r6
  800d48:	1946703a 	and	r3,r3,r5
  800d4c:	0084303a 	nor	r2,zero,r2
  800d50:	10c4703a 	and	r2,r2,r3
  800d54:	103ff926 	beq	r2,zero,800d3c <strlen+0x3c>
  800d58:	20800007 	ldb	r2,0(r4)
  800d5c:	10000326 	beq	r2,zero,800d6c <strlen+0x6c>
  800d60:	21000044 	addi	r4,r4,1
  800d64:	20800007 	ldb	r2,0(r4)
  800d68:	103ffd1e 	bne	r2,zero,800d60 <strlen+0x60>
  800d6c:	2205c83a 	sub	r2,r4,r8
  800d70:	f800283a 	ret

00800d74 <__sprint_r>:
  800d74:	30800217 	ldw	r2,8(r6)
  800d78:	defffe04 	addi	sp,sp,-8
  800d7c:	dc000015 	stw	r16,0(sp)
  800d80:	dfc00115 	stw	ra,4(sp)
  800d84:	3021883a 	mov	r16,r6
  800d88:	0007883a 	mov	r3,zero
  800d8c:	1000061e 	bne	r2,zero,800da8 <__sprint_r+0x34>
  800d90:	1805883a 	mov	r2,r3
  800d94:	30000115 	stw	zero,4(r6)
  800d98:	dfc00117 	ldw	ra,4(sp)
  800d9c:	dc000017 	ldw	r16,0(sp)
  800da0:	dec00204 	addi	sp,sp,8
  800da4:	f800283a 	ret
  800da8:	0804f4c0 	call	804f4c <__sfvwrite_r>
  800dac:	1007883a 	mov	r3,r2
  800db0:	1805883a 	mov	r2,r3
  800db4:	80000115 	stw	zero,4(r16)
  800db8:	80000215 	stw	zero,8(r16)
  800dbc:	dfc00117 	ldw	ra,4(sp)
  800dc0:	dc000017 	ldw	r16,0(sp)
  800dc4:	dec00204 	addi	sp,sp,8
  800dc8:	f800283a 	ret

00800dcc <___vfprintf_internal_r>:
  800dcc:	defea404 	addi	sp,sp,-1392
  800dd0:	dd815815 	stw	r22,1376(sp)
  800dd4:	dc015215 	stw	r16,1352(sp)
  800dd8:	d9c15115 	stw	r7,1348(sp)
  800ddc:	dfc15b15 	stw	ra,1388(sp)
  800de0:	df015a15 	stw	fp,1384(sp)
  800de4:	ddc15915 	stw	r23,1380(sp)
  800de8:	dd415715 	stw	r21,1372(sp)
  800dec:	dd015615 	stw	r20,1368(sp)
  800df0:	dcc15515 	stw	r19,1364(sp)
  800df4:	dc815415 	stw	r18,1360(sp)
  800df8:	dc415315 	stw	r17,1356(sp)
  800dfc:	282d883a 	mov	r22,r5
  800e00:	3021883a 	mov	r16,r6
  800e04:	d9014f15 	stw	r4,1340(sp)
  800e08:	08055700 	call	805570 <_localeconv_r>
  800e0c:	10800017 	ldw	r2,0(r2)
  800e10:	d9c15117 	ldw	r7,1348(sp)
  800e14:	d8814915 	stw	r2,1316(sp)
  800e18:	d8814f17 	ldw	r2,1340(sp)
  800e1c:	10000226 	beq	r2,zero,800e28 <___vfprintf_internal_r+0x5c>
  800e20:	10800e17 	ldw	r2,56(r2)
  800e24:	10020d26 	beq	r2,zero,80165c <___vfprintf_internal_r+0x890>
  800e28:	b080030b 	ldhu	r2,12(r22)
  800e2c:	1080020c 	andi	r2,r2,8
  800e30:	10020e26 	beq	r2,zero,80166c <___vfprintf_internal_r+0x8a0>
  800e34:	b0800417 	ldw	r2,16(r22)
  800e38:	10020c26 	beq	r2,zero,80166c <___vfprintf_internal_r+0x8a0>
  800e3c:	b200030b 	ldhu	r8,12(r22)
  800e40:	00800284 	movi	r2,10
  800e44:	40c0068c 	andi	r3,r8,26
  800e48:	18802f1e 	bne	r3,r2,800f08 <___vfprintf_internal_r+0x13c>
  800e4c:	b080038f 	ldh	r2,14(r22)
  800e50:	10002d16 	blt	r2,zero,800f08 <___vfprintf_internal_r+0x13c>
  800e54:	b240038b 	ldhu	r9,14(r22)
  800e58:	b2800717 	ldw	r10,28(r22)
  800e5c:	b2c00917 	ldw	r11,36(r22)
  800e60:	d9014f17 	ldw	r4,1340(sp)
  800e64:	dc402904 	addi	r17,sp,164
  800e68:	d8804004 	addi	r2,sp,256
  800e6c:	00c10004 	movi	r3,1024
  800e70:	423fff4c 	andi	r8,r8,65533
  800e74:	800d883a 	mov	r6,r16
  800e78:	880b883a 	mov	r5,r17
  800e7c:	da002c0d 	sth	r8,176(sp)
  800e80:	da402c8d 	sth	r9,178(sp)
  800e84:	da803015 	stw	r10,192(sp)
  800e88:	dac03215 	stw	r11,200(sp)
  800e8c:	d8802d15 	stw	r2,180(sp)
  800e90:	d8c02e15 	stw	r3,184(sp)
  800e94:	d8802915 	stw	r2,164(sp)
  800e98:	d8c02b15 	stw	r3,172(sp)
  800e9c:	d8002f15 	stw	zero,188(sp)
  800ea0:	0800dcc0 	call	800dcc <___vfprintf_internal_r>
  800ea4:	d8814b15 	stw	r2,1324(sp)
  800ea8:	10000416 	blt	r2,zero,800ebc <___vfprintf_internal_r+0xf0>
  800eac:	d9014f17 	ldw	r4,1340(sp)
  800eb0:	880b883a 	mov	r5,r17
  800eb4:	08045e80 	call	8045e8 <_fflush_r>
  800eb8:	1002321e 	bne	r2,zero,801784 <___vfprintf_internal_r+0x9b8>
  800ebc:	d8802c0b 	ldhu	r2,176(sp)
  800ec0:	1080100c 	andi	r2,r2,64
  800ec4:	10000326 	beq	r2,zero,800ed4 <___vfprintf_internal_r+0x108>
  800ec8:	b080030b 	ldhu	r2,12(r22)
  800ecc:	10801014 	ori	r2,r2,64
  800ed0:	b080030d 	sth	r2,12(r22)
  800ed4:	d8814b17 	ldw	r2,1324(sp)
  800ed8:	dfc15b17 	ldw	ra,1388(sp)
  800edc:	df015a17 	ldw	fp,1384(sp)
  800ee0:	ddc15917 	ldw	r23,1380(sp)
  800ee4:	dd815817 	ldw	r22,1376(sp)
  800ee8:	dd415717 	ldw	r21,1372(sp)
  800eec:	dd015617 	ldw	r20,1368(sp)
  800ef0:	dcc15517 	ldw	r19,1364(sp)
  800ef4:	dc815417 	ldw	r18,1360(sp)
  800ef8:	dc415317 	ldw	r17,1356(sp)
  800efc:	dc015217 	ldw	r16,1352(sp)
  800f00:	dec15c04 	addi	sp,sp,1392
  800f04:	f800283a 	ret
  800f08:	0005883a 	mov	r2,zero
  800f0c:	0007883a 	mov	r3,zero
  800f10:	dd401904 	addi	r21,sp,100
  800f14:	d8814215 	stw	r2,1288(sp)
  800f18:	802f883a 	mov	r23,r16
  800f1c:	d8c14315 	stw	r3,1292(sp)
  800f20:	d8014b15 	stw	zero,1324(sp)
  800f24:	d8014815 	stw	zero,1312(sp)
  800f28:	d8014415 	stw	zero,1296(sp)
  800f2c:	d8014715 	stw	zero,1308(sp)
  800f30:	dd400c15 	stw	r21,48(sp)
  800f34:	d8000e15 	stw	zero,56(sp)
  800f38:	d8000d15 	stw	zero,52(sp)
  800f3c:	b8800007 	ldb	r2,0(r23)
  800f40:	10001926 	beq	r2,zero,800fa8 <___vfprintf_internal_r+0x1dc>
  800f44:	00c00944 	movi	r3,37
  800f48:	10c01726 	beq	r2,r3,800fa8 <___vfprintf_internal_r+0x1dc>
  800f4c:	b821883a 	mov	r16,r23
  800f50:	00000106 	br	800f58 <___vfprintf_internal_r+0x18c>
  800f54:	10c00326 	beq	r2,r3,800f64 <___vfprintf_internal_r+0x198>
  800f58:	84000044 	addi	r16,r16,1
  800f5c:	80800007 	ldb	r2,0(r16)
  800f60:	103ffc1e 	bne	r2,zero,800f54 <___vfprintf_internal_r+0x188>
  800f64:	85e7c83a 	sub	r19,r16,r23
  800f68:	98000e26 	beq	r19,zero,800fa4 <___vfprintf_internal_r+0x1d8>
  800f6c:	dc800e17 	ldw	r18,56(sp)
  800f70:	dc400d17 	ldw	r17,52(sp)
  800f74:	008001c4 	movi	r2,7
  800f78:	94e5883a 	add	r18,r18,r19
  800f7c:	8c400044 	addi	r17,r17,1
  800f80:	adc00015 	stw	r23,0(r21)
  800f84:	dc800e15 	stw	r18,56(sp)
  800f88:	acc00115 	stw	r19,4(r21)
  800f8c:	dc400d15 	stw	r17,52(sp)
  800f90:	14428b16 	blt	r2,r17,8019c0 <___vfprintf_internal_r+0xbf4>
  800f94:	ad400204 	addi	r21,r21,8
  800f98:	d9014b17 	ldw	r4,1324(sp)
  800f9c:	24c9883a 	add	r4,r4,r19
  800fa0:	d9014b15 	stw	r4,1324(sp)
  800fa4:	802f883a 	mov	r23,r16
  800fa8:	b8800007 	ldb	r2,0(r23)
  800fac:	10013c26 	beq	r2,zero,8014a0 <___vfprintf_internal_r+0x6d4>
  800fb0:	bdc00044 	addi	r23,r23,1
  800fb4:	d8000405 	stb	zero,16(sp)
  800fb8:	b8c00007 	ldb	r3,0(r23)
  800fbc:	04ffffc4 	movi	r19,-1
  800fc0:	d8014c15 	stw	zero,1328(sp)
  800fc4:	d8014a15 	stw	zero,1320(sp)
  800fc8:	d8c14d15 	stw	r3,1332(sp)
  800fcc:	bdc00044 	addi	r23,r23,1
  800fd0:	d9414d17 	ldw	r5,1332(sp)
  800fd4:	00801604 	movi	r2,88
  800fd8:	28fff804 	addi	r3,r5,-32
  800fdc:	10c06036 	bltu	r2,r3,801160 <___vfprintf_internal_r+0x394>
  800fe0:	18c5883a 	add	r2,r3,r3
  800fe4:	1085883a 	add	r2,r2,r2
  800fe8:	00c02034 	movhi	r3,128
  800fec:	18c3ff04 	addi	r3,r3,4092
  800ff0:	10c5883a 	add	r2,r2,r3
  800ff4:	11000017 	ldw	r4,0(r2)
  800ff8:	2000683a 	jmp	r4
  800ffc:	00801f70 	cmpltui	r2,zero,125
  801000:	00801160 	cmpeqi	r2,zero,69
  801004:	00801160 	cmpeqi	r2,zero,69
  801008:	00801f5c 	xori	r2,zero,125
  80100c:	00801160 	cmpeqi	r2,zero,69
  801010:	00801160 	cmpeqi	r2,zero,69
  801014:	00801160 	cmpeqi	r2,zero,69
  801018:	00801160 	cmpeqi	r2,zero,69
  80101c:	00801160 	cmpeqi	r2,zero,69
  801020:	00801160 	cmpeqi	r2,zero,69
  801024:	00801d3c 	xorhi	r2,zero,116
  801028:	00801f4c 	andi	r2,zero,125
  80102c:	00801160 	cmpeqi	r2,zero,69
  801030:	00801d54 	movui	r2,117
  801034:	00801ff4 	movhi	r2,127
  801038:	00801160 	cmpeqi	r2,zero,69
  80103c:	00801fe0 	cmpeqi	r2,zero,127
  801040:	00801f9c 	xori	r2,zero,126
  801044:	00801f9c 	xori	r2,zero,126
  801048:	00801f9c 	xori	r2,zero,126
  80104c:	00801f9c 	xori	r2,zero,126
  801050:	00801f9c 	xori	r2,zero,126
  801054:	00801f9c 	xori	r2,zero,126
  801058:	00801f9c 	xori	r2,zero,126
  80105c:	00801f9c 	xori	r2,zero,126
  801060:	00801f9c 	xori	r2,zero,126
  801064:	00801160 	cmpeqi	r2,zero,69
  801068:	00801160 	cmpeqi	r2,zero,69
  80106c:	00801160 	cmpeqi	r2,zero,69
  801070:	00801160 	cmpeqi	r2,zero,69
  801074:	00801160 	cmpeqi	r2,zero,69
  801078:	00801160 	cmpeqi	r2,zero,69
  80107c:	00801160 	cmpeqi	r2,zero,69
  801080:	00801160 	cmpeqi	r2,zero,69
  801084:	00801160 	cmpeqi	r2,zero,69
  801088:	00801160 	cmpeqi	r2,zero,69
  80108c:	008017b8 	rdprs	r2,zero,94
  801090:	00801e24 	muli	r2,zero,120
  801094:	00801160 	cmpeqi	r2,zero,69
  801098:	00801e24 	muli	r2,zero,120
  80109c:	00801160 	cmpeqi	r2,zero,69
  8010a0:	00801160 	cmpeqi	r2,zero,69
  8010a4:	00801160 	cmpeqi	r2,zero,69
  8010a8:	00801160 	cmpeqi	r2,zero,69
  8010ac:	00801f88 	cmpgei	r2,zero,126
  8010b0:	00801160 	cmpeqi	r2,zero,69
  8010b4:	00801160 	cmpeqi	r2,zero,69
  8010b8:	0080186c 	andhi	r2,zero,97
  8010bc:	00801160 	cmpeqi	r2,zero,69
  8010c0:	00801160 	cmpeqi	r2,zero,69
  8010c4:	00801160 	cmpeqi	r2,zero,69
  8010c8:	00801160 	cmpeqi	r2,zero,69
  8010cc:	00801160 	cmpeqi	r2,zero,69
  8010d0:	008018b8 	rdprs	r2,zero,98
  8010d4:	00801160 	cmpeqi	r2,zero,69
  8010d8:	00801160 	cmpeqi	r2,zero,69
  8010dc:	00801ed8 	cmpnei	r2,zero,123
  8010e0:	00801160 	cmpeqi	r2,zero,69
  8010e4:	00801160 	cmpeqi	r2,zero,69
  8010e8:	00801160 	cmpeqi	r2,zero,69
  8010ec:	00801160 	cmpeqi	r2,zero,69
  8010f0:	00801160 	cmpeqi	r2,zero,69
  8010f4:	00801160 	cmpeqi	r2,zero,69
  8010f8:	00801160 	cmpeqi	r2,zero,69
  8010fc:	00801160 	cmpeqi	r2,zero,69
  801100:	00801160 	cmpeqi	r2,zero,69
  801104:	00801160 	cmpeqi	r2,zero,69
  801108:	00801eac 	andhi	r2,zero,122
  80110c:	008017c4 	movi	r2,95
  801110:	00801e24 	muli	r2,zero,120
  801114:	00801e24 	muli	r2,zero,120
  801118:	00801e24 	muli	r2,zero,120
  80111c:	00801e10 	cmplti	r2,zero,120
  801120:	008017c4 	movi	r2,95
  801124:	00801160 	cmpeqi	r2,zero,69
  801128:	00801160 	cmpeqi	r2,zero,69
  80112c:	00801d98 	cmpnei	r2,zero,118
  801130:	00801160 	cmpeqi	r2,zero,69
  801134:	00801d68 	cmpgeui	r2,zero,117
  801138:	00801878 	rdprs	r2,zero,97
  80113c:	00801dc8 	cmpgei	r2,zero,119
  801140:	00801db4 	movhi	r2,118
  801144:	00801160 	cmpeqi	r2,zero,69
  801148:	0080205c 	xori	r2,zero,129
  80114c:	00801160 	cmpeqi	r2,zero,69
  801150:	008018c4 	movi	r2,99
  801154:	00801160 	cmpeqi	r2,zero,69
  801158:	00801160 	cmpeqi	r2,zero,69
  80115c:	00801f3c 	xorhi	r2,zero,124
  801160:	d9014d17 	ldw	r4,1332(sp)
  801164:	2000ce26 	beq	r4,zero,8014a0 <___vfprintf_internal_r+0x6d4>
  801168:	01400044 	movi	r5,1
  80116c:	d9800f04 	addi	r6,sp,60
  801170:	d9c14015 	stw	r7,1280(sp)
  801174:	d9414515 	stw	r5,1300(sp)
  801178:	d9814115 	stw	r6,1284(sp)
  80117c:	280f883a 	mov	r7,r5
  801180:	d9000f05 	stb	r4,60(sp)
  801184:	d8000405 	stb	zero,16(sp)
  801188:	d8014615 	stw	zero,1304(sp)
  80118c:	d8c14c17 	ldw	r3,1328(sp)
  801190:	1880008c 	andi	r2,r3,2
  801194:	1005003a 	cmpeq	r2,r2,zero
  801198:	d8815015 	stw	r2,1344(sp)
  80119c:	1000031e 	bne	r2,zero,8011ac <___vfprintf_internal_r+0x3e0>
  8011a0:	d9014517 	ldw	r4,1300(sp)
  8011a4:	21000084 	addi	r4,r4,2
  8011a8:	d9014515 	stw	r4,1300(sp)
  8011ac:	d9414c17 	ldw	r5,1328(sp)
  8011b0:	2940210c 	andi	r5,r5,132
  8011b4:	d9414e15 	stw	r5,1336(sp)
  8011b8:	28002d1e 	bne	r5,zero,801270 <___vfprintf_internal_r+0x4a4>
  8011bc:	d9814a17 	ldw	r6,1320(sp)
  8011c0:	d8814517 	ldw	r2,1300(sp)
  8011c4:	30a1c83a 	sub	r16,r6,r2
  8011c8:	0400290e 	bge	zero,r16,801270 <___vfprintf_internal_r+0x4a4>
  8011cc:	00800404 	movi	r2,16
  8011d0:	14045e0e 	bge	r2,r16,80234c <___vfprintf_internal_r+0x1580>
  8011d4:	dc800e17 	ldw	r18,56(sp)
  8011d8:	dc400d17 	ldw	r17,52(sp)
  8011dc:	1027883a 	mov	r19,r2
  8011e0:	07002074 	movhi	fp,129
  8011e4:	e7335984 	addi	fp,fp,-12954
  8011e8:	050001c4 	movi	r20,7
  8011ec:	00000306 	br	8011fc <___vfprintf_internal_r+0x430>
  8011f0:	843ffc04 	addi	r16,r16,-16
  8011f4:	ad400204 	addi	r21,r21,8
  8011f8:	9c00130e 	bge	r19,r16,801248 <___vfprintf_internal_r+0x47c>
  8011fc:	94800404 	addi	r18,r18,16
  801200:	8c400044 	addi	r17,r17,1
  801204:	af000015 	stw	fp,0(r21)
  801208:	acc00115 	stw	r19,4(r21)
  80120c:	dc800e15 	stw	r18,56(sp)
  801210:	dc400d15 	stw	r17,52(sp)
  801214:	a47ff60e 	bge	r20,r17,8011f0 <___vfprintf_internal_r+0x424>
  801218:	d9014f17 	ldw	r4,1340(sp)
  80121c:	b00b883a 	mov	r5,r22
  801220:	d9800c04 	addi	r6,sp,48
  801224:	d9c15115 	stw	r7,1348(sp)
  801228:	0800d740 	call	800d74 <__sprint_r>
  80122c:	d9c15117 	ldw	r7,1348(sp)
  801230:	10009e1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801234:	843ffc04 	addi	r16,r16,-16
  801238:	dc800e17 	ldw	r18,56(sp)
  80123c:	dc400d17 	ldw	r17,52(sp)
  801240:	dd401904 	addi	r21,sp,100
  801244:	9c3fed16 	blt	r19,r16,8011fc <___vfprintf_internal_r+0x430>
  801248:	9425883a 	add	r18,r18,r16
  80124c:	8c400044 	addi	r17,r17,1
  801250:	008001c4 	movi	r2,7
  801254:	af000015 	stw	fp,0(r21)
  801258:	ac000115 	stw	r16,4(r21)
  80125c:	dc800e15 	stw	r18,56(sp)
  801260:	dc400d15 	stw	r17,52(sp)
  801264:	1441f516 	blt	r2,r17,801a3c <___vfprintf_internal_r+0xc70>
  801268:	ad400204 	addi	r21,r21,8
  80126c:	00000206 	br	801278 <___vfprintf_internal_r+0x4ac>
  801270:	dc800e17 	ldw	r18,56(sp)
  801274:	dc400d17 	ldw	r17,52(sp)
  801278:	d8800407 	ldb	r2,16(sp)
  80127c:	10000b26 	beq	r2,zero,8012ac <___vfprintf_internal_r+0x4e0>
  801280:	00800044 	movi	r2,1
  801284:	94800044 	addi	r18,r18,1
  801288:	8c400044 	addi	r17,r17,1
  80128c:	a8800115 	stw	r2,4(r21)
  801290:	d8c00404 	addi	r3,sp,16
  801294:	008001c4 	movi	r2,7
  801298:	a8c00015 	stw	r3,0(r21)
  80129c:	dc800e15 	stw	r18,56(sp)
  8012a0:	dc400d15 	stw	r17,52(sp)
  8012a4:	1441da16 	blt	r2,r17,801a10 <___vfprintf_internal_r+0xc44>
  8012a8:	ad400204 	addi	r21,r21,8
  8012ac:	d9015017 	ldw	r4,1344(sp)
  8012b0:	20000b1e 	bne	r4,zero,8012e0 <___vfprintf_internal_r+0x514>
  8012b4:	d8800444 	addi	r2,sp,17
  8012b8:	94800084 	addi	r18,r18,2
  8012bc:	8c400044 	addi	r17,r17,1
  8012c0:	a8800015 	stw	r2,0(r21)
  8012c4:	00c00084 	movi	r3,2
  8012c8:	008001c4 	movi	r2,7
  8012cc:	a8c00115 	stw	r3,4(r21)
  8012d0:	dc800e15 	stw	r18,56(sp)
  8012d4:	dc400d15 	stw	r17,52(sp)
  8012d8:	1441c216 	blt	r2,r17,8019e4 <___vfprintf_internal_r+0xc18>
  8012dc:	ad400204 	addi	r21,r21,8
  8012e0:	d9414e17 	ldw	r5,1336(sp)
  8012e4:	00802004 	movi	r2,128
  8012e8:	2880b126 	beq	r5,r2,8015b0 <___vfprintf_internal_r+0x7e4>
  8012ec:	d8c14617 	ldw	r3,1304(sp)
  8012f0:	19e1c83a 	sub	r16,r3,r7
  8012f4:	0400260e 	bge	zero,r16,801390 <___vfprintf_internal_r+0x5c4>
  8012f8:	00800404 	movi	r2,16
  8012fc:	1403cf0e 	bge	r2,r16,80223c <___vfprintf_internal_r+0x1470>
  801300:	1027883a 	mov	r19,r2
  801304:	07002074 	movhi	fp,129
  801308:	e7335584 	addi	fp,fp,-12970
  80130c:	050001c4 	movi	r20,7
  801310:	00000306 	br	801320 <___vfprintf_internal_r+0x554>
  801314:	843ffc04 	addi	r16,r16,-16
  801318:	ad400204 	addi	r21,r21,8
  80131c:	9c00130e 	bge	r19,r16,80136c <___vfprintf_internal_r+0x5a0>
  801320:	94800404 	addi	r18,r18,16
  801324:	8c400044 	addi	r17,r17,1
  801328:	af000015 	stw	fp,0(r21)
  80132c:	acc00115 	stw	r19,4(r21)
  801330:	dc800e15 	stw	r18,56(sp)
  801334:	dc400d15 	stw	r17,52(sp)
  801338:	a47ff60e 	bge	r20,r17,801314 <___vfprintf_internal_r+0x548>
  80133c:	d9014f17 	ldw	r4,1340(sp)
  801340:	b00b883a 	mov	r5,r22
  801344:	d9800c04 	addi	r6,sp,48
  801348:	d9c15115 	stw	r7,1348(sp)
  80134c:	0800d740 	call	800d74 <__sprint_r>
  801350:	d9c15117 	ldw	r7,1348(sp)
  801354:	1000551e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801358:	843ffc04 	addi	r16,r16,-16
  80135c:	dc800e17 	ldw	r18,56(sp)
  801360:	dc400d17 	ldw	r17,52(sp)
  801364:	dd401904 	addi	r21,sp,100
  801368:	9c3fed16 	blt	r19,r16,801320 <___vfprintf_internal_r+0x554>
  80136c:	9425883a 	add	r18,r18,r16
  801370:	8c400044 	addi	r17,r17,1
  801374:	008001c4 	movi	r2,7
  801378:	af000015 	stw	fp,0(r21)
  80137c:	ac000115 	stw	r16,4(r21)
  801380:	dc800e15 	stw	r18,56(sp)
  801384:	dc400d15 	stw	r17,52(sp)
  801388:	14418216 	blt	r2,r17,801994 <___vfprintf_internal_r+0xbc8>
  80138c:	ad400204 	addi	r21,r21,8
  801390:	d9014c17 	ldw	r4,1328(sp)
  801394:	2080400c 	andi	r2,r4,256
  801398:	10004a1e 	bne	r2,zero,8014c4 <___vfprintf_internal_r+0x6f8>
  80139c:	d9414117 	ldw	r5,1284(sp)
  8013a0:	91e5883a 	add	r18,r18,r7
  8013a4:	8c400044 	addi	r17,r17,1
  8013a8:	008001c4 	movi	r2,7
  8013ac:	a9400015 	stw	r5,0(r21)
  8013b0:	a9c00115 	stw	r7,4(r21)
  8013b4:	dc800e15 	stw	r18,56(sp)
  8013b8:	dc400d15 	stw	r17,52(sp)
  8013bc:	14416716 	blt	r2,r17,80195c <___vfprintf_internal_r+0xb90>
  8013c0:	a8c00204 	addi	r3,r21,8
  8013c4:	d9814c17 	ldw	r6,1328(sp)
  8013c8:	3080010c 	andi	r2,r6,4
  8013cc:	10002826 	beq	r2,zero,801470 <___vfprintf_internal_r+0x6a4>
  8013d0:	d8814a17 	ldw	r2,1320(sp)
  8013d4:	d9014517 	ldw	r4,1300(sp)
  8013d8:	1121c83a 	sub	r16,r2,r4
  8013dc:	0400240e 	bge	zero,r16,801470 <___vfprintf_internal_r+0x6a4>
  8013e0:	00800404 	movi	r2,16
  8013e4:	1404550e 	bge	r2,r16,80253c <___vfprintf_internal_r+0x1770>
  8013e8:	dc400d17 	ldw	r17,52(sp)
  8013ec:	1027883a 	mov	r19,r2
  8013f0:	07002074 	movhi	fp,129
  8013f4:	e7335984 	addi	fp,fp,-12954
  8013f8:	050001c4 	movi	r20,7
  8013fc:	00000306 	br	80140c <___vfprintf_internal_r+0x640>
  801400:	843ffc04 	addi	r16,r16,-16
  801404:	18c00204 	addi	r3,r3,8
  801408:	9c00110e 	bge	r19,r16,801450 <___vfprintf_internal_r+0x684>
  80140c:	94800404 	addi	r18,r18,16
  801410:	8c400044 	addi	r17,r17,1
  801414:	1f000015 	stw	fp,0(r3)
  801418:	1cc00115 	stw	r19,4(r3)
  80141c:	dc800e15 	stw	r18,56(sp)
  801420:	dc400d15 	stw	r17,52(sp)
  801424:	a47ff60e 	bge	r20,r17,801400 <___vfprintf_internal_r+0x634>
  801428:	d9014f17 	ldw	r4,1340(sp)
  80142c:	b00b883a 	mov	r5,r22
  801430:	d9800c04 	addi	r6,sp,48
  801434:	0800d740 	call	800d74 <__sprint_r>
  801438:	10001c1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  80143c:	843ffc04 	addi	r16,r16,-16
  801440:	dc800e17 	ldw	r18,56(sp)
  801444:	dc400d17 	ldw	r17,52(sp)
  801448:	d8c01904 	addi	r3,sp,100
  80144c:	9c3fef16 	blt	r19,r16,80140c <___vfprintf_internal_r+0x640>
  801450:	9425883a 	add	r18,r18,r16
  801454:	8c400044 	addi	r17,r17,1
  801458:	008001c4 	movi	r2,7
  80145c:	1f000015 	stw	fp,0(r3)
  801460:	1c000115 	stw	r16,4(r3)
  801464:	dc800e15 	stw	r18,56(sp)
  801468:	dc400d15 	stw	r17,52(sp)
  80146c:	1440cb16 	blt	r2,r17,80179c <___vfprintf_internal_r+0x9d0>
  801470:	d8814a17 	ldw	r2,1320(sp)
  801474:	d9414517 	ldw	r5,1300(sp)
  801478:	1140010e 	bge	r2,r5,801480 <___vfprintf_internal_r+0x6b4>
  80147c:	2805883a 	mov	r2,r5
  801480:	d9814b17 	ldw	r6,1324(sp)
  801484:	308d883a 	add	r6,r6,r2
  801488:	d9814b15 	stw	r6,1324(sp)
  80148c:	90013b1e 	bne	r18,zero,80197c <___vfprintf_internal_r+0xbb0>
  801490:	d9c14017 	ldw	r7,1280(sp)
  801494:	dd401904 	addi	r21,sp,100
  801498:	d8000d15 	stw	zero,52(sp)
  80149c:	003ea706 	br	800f3c <___vfprintf_internal_r+0x170>
  8014a0:	d8800e17 	ldw	r2,56(sp)
  8014a4:	1005451e 	bne	r2,zero,8029bc <___vfprintf_internal_r+0x1bf0>
  8014a8:	d8000d15 	stw	zero,52(sp)
  8014ac:	b080030b 	ldhu	r2,12(r22)
  8014b0:	1080100c 	andi	r2,r2,64
  8014b4:	103e8726 	beq	r2,zero,800ed4 <___vfprintf_internal_r+0x108>
  8014b8:	00bfffc4 	movi	r2,-1
  8014bc:	d8814b15 	stw	r2,1324(sp)
  8014c0:	003e8406 	br	800ed4 <___vfprintf_internal_r+0x108>
  8014c4:	d9814d17 	ldw	r6,1332(sp)
  8014c8:	00801944 	movi	r2,101
  8014cc:	11806e16 	blt	r2,r6,801688 <___vfprintf_internal_r+0x8bc>
  8014d0:	d9414717 	ldw	r5,1308(sp)
  8014d4:	00c00044 	movi	r3,1
  8014d8:	1943490e 	bge	r3,r5,802200 <___vfprintf_internal_r+0x1434>
  8014dc:	d8814117 	ldw	r2,1284(sp)
  8014e0:	94800044 	addi	r18,r18,1
  8014e4:	8c400044 	addi	r17,r17,1
  8014e8:	a8800015 	stw	r2,0(r21)
  8014ec:	008001c4 	movi	r2,7
  8014f0:	a8c00115 	stw	r3,4(r21)
  8014f4:	dc800e15 	stw	r18,56(sp)
  8014f8:	dc400d15 	stw	r17,52(sp)
  8014fc:	1441ca16 	blt	r2,r17,801c28 <___vfprintf_internal_r+0xe5c>
  801500:	a8c00204 	addi	r3,r21,8
  801504:	d9014917 	ldw	r4,1316(sp)
  801508:	00800044 	movi	r2,1
  80150c:	94800044 	addi	r18,r18,1
  801510:	8c400044 	addi	r17,r17,1
  801514:	18800115 	stw	r2,4(r3)
  801518:	008001c4 	movi	r2,7
  80151c:	19000015 	stw	r4,0(r3)
  801520:	dc800e15 	stw	r18,56(sp)
  801524:	dc400d15 	stw	r17,52(sp)
  801528:	1441b616 	blt	r2,r17,801c04 <___vfprintf_internal_r+0xe38>
  80152c:	1cc00204 	addi	r19,r3,8
  801530:	d9014217 	ldw	r4,1288(sp)
  801534:	d9414317 	ldw	r5,1292(sp)
  801538:	000d883a 	mov	r6,zero
  80153c:	000f883a 	mov	r7,zero
  801540:	08098800 	call	809880 <__nedf2>
  801544:	10017426 	beq	r2,zero,801b18 <___vfprintf_internal_r+0xd4c>
  801548:	d9414717 	ldw	r5,1308(sp)
  80154c:	d9814117 	ldw	r6,1284(sp)
  801550:	8c400044 	addi	r17,r17,1
  801554:	2c85883a 	add	r2,r5,r18
  801558:	14bfffc4 	addi	r18,r2,-1
  80155c:	28bfffc4 	addi	r2,r5,-1
  801560:	30c00044 	addi	r3,r6,1
  801564:	98800115 	stw	r2,4(r19)
  801568:	008001c4 	movi	r2,7
  80156c:	98c00015 	stw	r3,0(r19)
  801570:	dc800e15 	stw	r18,56(sp)
  801574:	dc400d15 	stw	r17,52(sp)
  801578:	14418e16 	blt	r2,r17,801bb4 <___vfprintf_internal_r+0xde8>
  80157c:	9cc00204 	addi	r19,r19,8
  801580:	d9414817 	ldw	r5,1312(sp)
  801584:	d8800804 	addi	r2,sp,32
  801588:	8c400044 	addi	r17,r17,1
  80158c:	9165883a 	add	r18,r18,r5
  801590:	98800015 	stw	r2,0(r19)
  801594:	008001c4 	movi	r2,7
  801598:	99400115 	stw	r5,4(r19)
  80159c:	dc800e15 	stw	r18,56(sp)
  8015a0:	dc400d15 	stw	r17,52(sp)
  8015a4:	1440ed16 	blt	r2,r17,80195c <___vfprintf_internal_r+0xb90>
  8015a8:	98c00204 	addi	r3,r19,8
  8015ac:	003f8506 	br	8013c4 <___vfprintf_internal_r+0x5f8>
  8015b0:	d9814a17 	ldw	r6,1320(sp)
  8015b4:	d8814517 	ldw	r2,1300(sp)
  8015b8:	30a1c83a 	sub	r16,r6,r2
  8015bc:	043f4b0e 	bge	zero,r16,8012ec <___vfprintf_internal_r+0x520>
  8015c0:	00800404 	movi	r2,16
  8015c4:	14043a0e 	bge	r2,r16,8026b0 <___vfprintf_internal_r+0x18e4>
  8015c8:	1027883a 	mov	r19,r2
  8015cc:	07002074 	movhi	fp,129
  8015d0:	e7335584 	addi	fp,fp,-12970
  8015d4:	050001c4 	movi	r20,7
  8015d8:	00000306 	br	8015e8 <___vfprintf_internal_r+0x81c>
  8015dc:	843ffc04 	addi	r16,r16,-16
  8015e0:	ad400204 	addi	r21,r21,8
  8015e4:	9c00130e 	bge	r19,r16,801634 <___vfprintf_internal_r+0x868>
  8015e8:	94800404 	addi	r18,r18,16
  8015ec:	8c400044 	addi	r17,r17,1
  8015f0:	af000015 	stw	fp,0(r21)
  8015f4:	acc00115 	stw	r19,4(r21)
  8015f8:	dc800e15 	stw	r18,56(sp)
  8015fc:	dc400d15 	stw	r17,52(sp)
  801600:	a47ff60e 	bge	r20,r17,8015dc <___vfprintf_internal_r+0x810>
  801604:	d9014f17 	ldw	r4,1340(sp)
  801608:	b00b883a 	mov	r5,r22
  80160c:	d9800c04 	addi	r6,sp,48
  801610:	d9c15115 	stw	r7,1348(sp)
  801614:	0800d740 	call	800d74 <__sprint_r>
  801618:	d9c15117 	ldw	r7,1348(sp)
  80161c:	103fa31e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801620:	843ffc04 	addi	r16,r16,-16
  801624:	dc800e17 	ldw	r18,56(sp)
  801628:	dc400d17 	ldw	r17,52(sp)
  80162c:	dd401904 	addi	r21,sp,100
  801630:	9c3fed16 	blt	r19,r16,8015e8 <___vfprintf_internal_r+0x81c>
  801634:	9425883a 	add	r18,r18,r16
  801638:	8c400044 	addi	r17,r17,1
  80163c:	008001c4 	movi	r2,7
  801640:	af000015 	stw	fp,0(r21)
  801644:	ac000115 	stw	r16,4(r21)
  801648:	dc800e15 	stw	r18,56(sp)
  80164c:	dc400d15 	stw	r17,52(sp)
  801650:	14416116 	blt	r2,r17,801bd8 <___vfprintf_internal_r+0xe0c>
  801654:	ad400204 	addi	r21,r21,8
  801658:	003f2406 	br	8012ec <___vfprintf_internal_r+0x520>
  80165c:	d9014f17 	ldw	r4,1340(sp)
  801660:	08048800 	call	804880 <__sinit>
  801664:	d9c15117 	ldw	r7,1348(sp)
  801668:	003def06 	br	800e28 <___vfprintf_internal_r+0x5c>
  80166c:	d9014f17 	ldw	r4,1340(sp)
  801670:	b00b883a 	mov	r5,r22
  801674:	d9c15115 	stw	r7,1348(sp)
  801678:	0802cb40 	call	802cb4 <__swsetup_r>
  80167c:	d9c15117 	ldw	r7,1348(sp)
  801680:	103dee26 	beq	r2,zero,800e3c <___vfprintf_internal_r+0x70>
  801684:	003f8c06 	br	8014b8 <___vfprintf_internal_r+0x6ec>
  801688:	d9014217 	ldw	r4,1288(sp)
  80168c:	d9414317 	ldw	r5,1292(sp)
  801690:	000d883a 	mov	r6,zero
  801694:	000f883a 	mov	r7,zero
  801698:	08097f80 	call	8097f8 <__eqdf2>
  80169c:	1000f21e 	bne	r2,zero,801a68 <___vfprintf_internal_r+0xc9c>
  8016a0:	00802074 	movhi	r2,129
  8016a4:	10b35504 	addi	r2,r2,-12972
  8016a8:	94800044 	addi	r18,r18,1
  8016ac:	8c400044 	addi	r17,r17,1
  8016b0:	a8800015 	stw	r2,0(r21)
  8016b4:	00c00044 	movi	r3,1
  8016b8:	008001c4 	movi	r2,7
  8016bc:	a8c00115 	stw	r3,4(r21)
  8016c0:	dc800e15 	stw	r18,56(sp)
  8016c4:	dc400d15 	stw	r17,52(sp)
  8016c8:	14430016 	blt	r2,r17,8022cc <___vfprintf_internal_r+0x1500>
  8016cc:	a8c00204 	addi	r3,r21,8
  8016d0:	d8800517 	ldw	r2,20(sp)
  8016d4:	d9014717 	ldw	r4,1308(sp)
  8016d8:	11015c0e 	bge	r2,r4,801c4c <___vfprintf_internal_r+0xe80>
  8016dc:	dc400d17 	ldw	r17,52(sp)
  8016e0:	d9814917 	ldw	r6,1316(sp)
  8016e4:	00800044 	movi	r2,1
  8016e8:	94800044 	addi	r18,r18,1
  8016ec:	8c400044 	addi	r17,r17,1
  8016f0:	18800115 	stw	r2,4(r3)
  8016f4:	008001c4 	movi	r2,7
  8016f8:	19800015 	stw	r6,0(r3)
  8016fc:	dc800e15 	stw	r18,56(sp)
  801700:	dc400d15 	stw	r17,52(sp)
  801704:	14431616 	blt	r2,r17,802360 <___vfprintf_internal_r+0x1594>
  801708:	18c00204 	addi	r3,r3,8
  80170c:	d8814717 	ldw	r2,1308(sp)
  801710:	143fffc4 	addi	r16,r2,-1
  801714:	043f2b0e 	bge	zero,r16,8013c4 <___vfprintf_internal_r+0x5f8>
  801718:	00800404 	movi	r2,16
  80171c:	1402a80e 	bge	r2,r16,8021c0 <___vfprintf_internal_r+0x13f4>
  801720:	dc400d17 	ldw	r17,52(sp)
  801724:	1027883a 	mov	r19,r2
  801728:	07002074 	movhi	fp,129
  80172c:	e7335584 	addi	fp,fp,-12970
  801730:	050001c4 	movi	r20,7
  801734:	00000306 	br	801744 <___vfprintf_internal_r+0x978>
  801738:	18c00204 	addi	r3,r3,8
  80173c:	843ffc04 	addi	r16,r16,-16
  801740:	9c02a20e 	bge	r19,r16,8021cc <___vfprintf_internal_r+0x1400>
  801744:	94800404 	addi	r18,r18,16
  801748:	8c400044 	addi	r17,r17,1
  80174c:	1f000015 	stw	fp,0(r3)
  801750:	1cc00115 	stw	r19,4(r3)
  801754:	dc800e15 	stw	r18,56(sp)
  801758:	dc400d15 	stw	r17,52(sp)
  80175c:	a47ff60e 	bge	r20,r17,801738 <___vfprintf_internal_r+0x96c>
  801760:	d9014f17 	ldw	r4,1340(sp)
  801764:	b00b883a 	mov	r5,r22
  801768:	d9800c04 	addi	r6,sp,48
  80176c:	0800d740 	call	800d74 <__sprint_r>
  801770:	103f4e1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801774:	dc800e17 	ldw	r18,56(sp)
  801778:	dc400d17 	ldw	r17,52(sp)
  80177c:	d8c01904 	addi	r3,sp,100
  801780:	003fee06 	br	80173c <___vfprintf_internal_r+0x970>
  801784:	d8802c0b 	ldhu	r2,176(sp)
  801788:	00ffffc4 	movi	r3,-1
  80178c:	d8c14b15 	stw	r3,1324(sp)
  801790:	1080100c 	andi	r2,r2,64
  801794:	103dcc1e 	bne	r2,zero,800ec8 <___vfprintf_internal_r+0xfc>
  801798:	003dce06 	br	800ed4 <___vfprintf_internal_r+0x108>
  80179c:	d9014f17 	ldw	r4,1340(sp)
  8017a0:	b00b883a 	mov	r5,r22
  8017a4:	d9800c04 	addi	r6,sp,48
  8017a8:	0800d740 	call	800d74 <__sprint_r>
  8017ac:	103f3f1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  8017b0:	dc800e17 	ldw	r18,56(sp)
  8017b4:	003f2e06 	br	801470 <___vfprintf_internal_r+0x6a4>
  8017b8:	d9414c17 	ldw	r5,1328(sp)
  8017bc:	29400414 	ori	r5,r5,16
  8017c0:	d9414c15 	stw	r5,1328(sp)
  8017c4:	d9814c17 	ldw	r6,1328(sp)
  8017c8:	3080080c 	andi	r2,r6,32
  8017cc:	10014f1e 	bne	r2,zero,801d0c <___vfprintf_internal_r+0xf40>
  8017d0:	d8c14c17 	ldw	r3,1328(sp)
  8017d4:	1880040c 	andi	r2,r3,16
  8017d8:	1002f01e 	bne	r2,zero,80239c <___vfprintf_internal_r+0x15d0>
  8017dc:	d9014c17 	ldw	r4,1328(sp)
  8017e0:	2080100c 	andi	r2,r4,64
  8017e4:	1002ed26 	beq	r2,zero,80239c <___vfprintf_internal_r+0x15d0>
  8017e8:	3880000f 	ldh	r2,0(r7)
  8017ec:	39c00104 	addi	r7,r7,4
  8017f0:	d9c14015 	stw	r7,1280(sp)
  8017f4:	1023d7fa 	srai	r17,r2,31
  8017f8:	1021883a 	mov	r16,r2
  8017fc:	88037816 	blt	r17,zero,8025e0 <___vfprintf_internal_r+0x1814>
  801800:	01000044 	movi	r4,1
  801804:	98000416 	blt	r19,zero,801818 <___vfprintf_internal_r+0xa4c>
  801808:	d8c14c17 	ldw	r3,1328(sp)
  80180c:	00bfdfc4 	movi	r2,-129
  801810:	1886703a 	and	r3,r3,r2
  801814:	d8c14c15 	stw	r3,1328(sp)
  801818:	8444b03a 	or	r2,r16,r17
  80181c:	10022c1e 	bne	r2,zero,8020d0 <___vfprintf_internal_r+0x1304>
  801820:	98022b1e 	bne	r19,zero,8020d0 <___vfprintf_internal_r+0x1304>
  801824:	20803fcc 	andi	r2,r4,255
  801828:	1002a126 	beq	r2,zero,8022b0 <___vfprintf_internal_r+0x14e4>
  80182c:	d8c01904 	addi	r3,sp,100
  801830:	dd000f04 	addi	r20,sp,60
  801834:	d8c14115 	stw	r3,1284(sp)
  801838:	d8c14117 	ldw	r3,1284(sp)
  80183c:	dcc14515 	stw	r19,1300(sp)
  801840:	a0c5c83a 	sub	r2,r20,r3
  801844:	11c00a04 	addi	r7,r2,40
  801848:	99c0010e 	bge	r19,r7,801850 <___vfprintf_internal_r+0xa84>
  80184c:	d9c14515 	stw	r7,1300(sp)
  801850:	dcc14615 	stw	r19,1304(sp)
  801854:	d8800407 	ldb	r2,16(sp)
  801858:	103e4c26 	beq	r2,zero,80118c <___vfprintf_internal_r+0x3c0>
  80185c:	d8814517 	ldw	r2,1300(sp)
  801860:	10800044 	addi	r2,r2,1
  801864:	d8814515 	stw	r2,1300(sp)
  801868:	003e4806 	br	80118c <___vfprintf_internal_r+0x3c0>
  80186c:	d9814c17 	ldw	r6,1328(sp)
  801870:	31800414 	ori	r6,r6,16
  801874:	d9814c15 	stw	r6,1328(sp)
  801878:	d8c14c17 	ldw	r3,1328(sp)
  80187c:	1880080c 	andi	r2,r3,32
  801880:	1001271e 	bne	r2,zero,801d20 <___vfprintf_internal_r+0xf54>
  801884:	d9414c17 	ldw	r5,1328(sp)
  801888:	2880040c 	andi	r2,r5,16
  80188c:	1002bc1e 	bne	r2,zero,802380 <___vfprintf_internal_r+0x15b4>
  801890:	d9814c17 	ldw	r6,1328(sp)
  801894:	3080100c 	andi	r2,r6,64
  801898:	1002b926 	beq	r2,zero,802380 <___vfprintf_internal_r+0x15b4>
  80189c:	3c00000b 	ldhu	r16,0(r7)
  8018a0:	0009883a 	mov	r4,zero
  8018a4:	39c00104 	addi	r7,r7,4
  8018a8:	0023883a 	mov	r17,zero
  8018ac:	d9c14015 	stw	r7,1280(sp)
  8018b0:	d8000405 	stb	zero,16(sp)
  8018b4:	003fd306 	br	801804 <___vfprintf_internal_r+0xa38>
  8018b8:	d9014c17 	ldw	r4,1328(sp)
  8018bc:	21000414 	ori	r4,r4,16
  8018c0:	d9014c15 	stw	r4,1328(sp)
  8018c4:	d9414c17 	ldw	r5,1328(sp)
  8018c8:	2880080c 	andi	r2,r5,32
  8018cc:	1001081e 	bne	r2,zero,801cf0 <___vfprintf_internal_r+0xf24>
  8018d0:	d8c14c17 	ldw	r3,1328(sp)
  8018d4:	1880040c 	andi	r2,r3,16
  8018d8:	1002b61e 	bne	r2,zero,8023b4 <___vfprintf_internal_r+0x15e8>
  8018dc:	d9014c17 	ldw	r4,1328(sp)
  8018e0:	2080100c 	andi	r2,r4,64
  8018e4:	1002b326 	beq	r2,zero,8023b4 <___vfprintf_internal_r+0x15e8>
  8018e8:	3c00000b 	ldhu	r16,0(r7)
  8018ec:	01000044 	movi	r4,1
  8018f0:	39c00104 	addi	r7,r7,4
  8018f4:	0023883a 	mov	r17,zero
  8018f8:	d9c14015 	stw	r7,1280(sp)
  8018fc:	d8000405 	stb	zero,16(sp)
  801900:	003fc006 	br	801804 <___vfprintf_internal_r+0xa38>
  801904:	d9014f17 	ldw	r4,1340(sp)
  801908:	b00b883a 	mov	r5,r22
  80190c:	d9800c04 	addi	r6,sp,48
  801910:	0800d740 	call	800d74 <__sprint_r>
  801914:	103ee51e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801918:	dc800e17 	ldw	r18,56(sp)
  80191c:	d8c01904 	addi	r3,sp,100
  801920:	d9814c17 	ldw	r6,1328(sp)
  801924:	3080004c 	andi	r2,r6,1
  801928:	1005003a 	cmpeq	r2,r2,zero
  80192c:	103ea51e 	bne	r2,zero,8013c4 <___vfprintf_internal_r+0x5f8>
  801930:	00800044 	movi	r2,1
  801934:	dc400d17 	ldw	r17,52(sp)
  801938:	18800115 	stw	r2,4(r3)
  80193c:	d8814917 	ldw	r2,1316(sp)
  801940:	94800044 	addi	r18,r18,1
  801944:	8c400044 	addi	r17,r17,1
  801948:	18800015 	stw	r2,0(r3)
  80194c:	008001c4 	movi	r2,7
  801950:	dc800e15 	stw	r18,56(sp)
  801954:	dc400d15 	stw	r17,52(sp)
  801958:	1442240e 	bge	r2,r17,8021ec <___vfprintf_internal_r+0x1420>
  80195c:	d9014f17 	ldw	r4,1340(sp)
  801960:	b00b883a 	mov	r5,r22
  801964:	d9800c04 	addi	r6,sp,48
  801968:	0800d740 	call	800d74 <__sprint_r>
  80196c:	103ecf1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801970:	dc800e17 	ldw	r18,56(sp)
  801974:	d8c01904 	addi	r3,sp,100
  801978:	003e9206 	br	8013c4 <___vfprintf_internal_r+0x5f8>
  80197c:	d9014f17 	ldw	r4,1340(sp)
  801980:	b00b883a 	mov	r5,r22
  801984:	d9800c04 	addi	r6,sp,48
  801988:	0800d740 	call	800d74 <__sprint_r>
  80198c:	103ec026 	beq	r2,zero,801490 <___vfprintf_internal_r+0x6c4>
  801990:	003ec606 	br	8014ac <___vfprintf_internal_r+0x6e0>
  801994:	d9014f17 	ldw	r4,1340(sp)
  801998:	b00b883a 	mov	r5,r22
  80199c:	d9800c04 	addi	r6,sp,48
  8019a0:	d9c15115 	stw	r7,1348(sp)
  8019a4:	0800d740 	call	800d74 <__sprint_r>
  8019a8:	d9c15117 	ldw	r7,1348(sp)
  8019ac:	103ebf1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  8019b0:	dc800e17 	ldw	r18,56(sp)
  8019b4:	dc400d17 	ldw	r17,52(sp)
  8019b8:	dd401904 	addi	r21,sp,100
  8019bc:	003e7406 	br	801390 <___vfprintf_internal_r+0x5c4>
  8019c0:	d9014f17 	ldw	r4,1340(sp)
  8019c4:	b00b883a 	mov	r5,r22
  8019c8:	d9800c04 	addi	r6,sp,48
  8019cc:	d9c15115 	stw	r7,1348(sp)
  8019d0:	0800d740 	call	800d74 <__sprint_r>
  8019d4:	d9c15117 	ldw	r7,1348(sp)
  8019d8:	103eb41e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  8019dc:	dd401904 	addi	r21,sp,100
  8019e0:	003d6d06 	br	800f98 <___vfprintf_internal_r+0x1cc>
  8019e4:	d9014f17 	ldw	r4,1340(sp)
  8019e8:	b00b883a 	mov	r5,r22
  8019ec:	d9800c04 	addi	r6,sp,48
  8019f0:	d9c15115 	stw	r7,1348(sp)
  8019f4:	0800d740 	call	800d74 <__sprint_r>
  8019f8:	d9c15117 	ldw	r7,1348(sp)
  8019fc:	103eab1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801a00:	dc800e17 	ldw	r18,56(sp)
  801a04:	dc400d17 	ldw	r17,52(sp)
  801a08:	dd401904 	addi	r21,sp,100
  801a0c:	003e3406 	br	8012e0 <___vfprintf_internal_r+0x514>
  801a10:	d9014f17 	ldw	r4,1340(sp)
  801a14:	b00b883a 	mov	r5,r22
  801a18:	d9800c04 	addi	r6,sp,48
  801a1c:	d9c15115 	stw	r7,1348(sp)
  801a20:	0800d740 	call	800d74 <__sprint_r>
  801a24:	d9c15117 	ldw	r7,1348(sp)
  801a28:	103ea01e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801a2c:	dc800e17 	ldw	r18,56(sp)
  801a30:	dc400d17 	ldw	r17,52(sp)
  801a34:	dd401904 	addi	r21,sp,100
  801a38:	003e1c06 	br	8012ac <___vfprintf_internal_r+0x4e0>
  801a3c:	d9014f17 	ldw	r4,1340(sp)
  801a40:	b00b883a 	mov	r5,r22
  801a44:	d9800c04 	addi	r6,sp,48
  801a48:	d9c15115 	stw	r7,1348(sp)
  801a4c:	0800d740 	call	800d74 <__sprint_r>
  801a50:	d9c15117 	ldw	r7,1348(sp)
  801a54:	103e951e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801a58:	dc800e17 	ldw	r18,56(sp)
  801a5c:	dc400d17 	ldw	r17,52(sp)
  801a60:	dd401904 	addi	r21,sp,100
  801a64:	003e0406 	br	801278 <___vfprintf_internal_r+0x4ac>
  801a68:	d9000517 	ldw	r4,20(sp)
  801a6c:	0102580e 	bge	zero,r4,8023d0 <___vfprintf_internal_r+0x1604>
  801a70:	d9814717 	ldw	r6,1308(sp)
  801a74:	21807a16 	blt	r4,r6,801c60 <___vfprintf_internal_r+0xe94>
  801a78:	d8814117 	ldw	r2,1284(sp)
  801a7c:	91a5883a 	add	r18,r18,r6
  801a80:	8c400044 	addi	r17,r17,1
  801a84:	a8800015 	stw	r2,0(r21)
  801a88:	008001c4 	movi	r2,7
  801a8c:	a9800115 	stw	r6,4(r21)
  801a90:	dc800e15 	stw	r18,56(sp)
  801a94:	dc400d15 	stw	r17,52(sp)
  801a98:	1442fc16 	blt	r2,r17,80268c <___vfprintf_internal_r+0x18c0>
  801a9c:	a8c00204 	addi	r3,r21,8
  801aa0:	d9414717 	ldw	r5,1308(sp)
  801aa4:	2161c83a 	sub	r16,r4,r5
  801aa8:	043f9d0e 	bge	zero,r16,801920 <___vfprintf_internal_r+0xb54>
  801aac:	00800404 	movi	r2,16
  801ab0:	1402190e 	bge	r2,r16,802318 <___vfprintf_internal_r+0x154c>
  801ab4:	dc400d17 	ldw	r17,52(sp)
  801ab8:	1027883a 	mov	r19,r2
  801abc:	07002074 	movhi	fp,129
  801ac0:	e7335584 	addi	fp,fp,-12970
  801ac4:	050001c4 	movi	r20,7
  801ac8:	00000306 	br	801ad8 <___vfprintf_internal_r+0xd0c>
  801acc:	18c00204 	addi	r3,r3,8
  801ad0:	843ffc04 	addi	r16,r16,-16
  801ad4:	9c02130e 	bge	r19,r16,802324 <___vfprintf_internal_r+0x1558>
  801ad8:	94800404 	addi	r18,r18,16
  801adc:	8c400044 	addi	r17,r17,1
  801ae0:	1f000015 	stw	fp,0(r3)
  801ae4:	1cc00115 	stw	r19,4(r3)
  801ae8:	dc800e15 	stw	r18,56(sp)
  801aec:	dc400d15 	stw	r17,52(sp)
  801af0:	a47ff60e 	bge	r20,r17,801acc <___vfprintf_internal_r+0xd00>
  801af4:	d9014f17 	ldw	r4,1340(sp)
  801af8:	b00b883a 	mov	r5,r22
  801afc:	d9800c04 	addi	r6,sp,48
  801b00:	0800d740 	call	800d74 <__sprint_r>
  801b04:	103e691e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801b08:	dc800e17 	ldw	r18,56(sp)
  801b0c:	dc400d17 	ldw	r17,52(sp)
  801b10:	d8c01904 	addi	r3,sp,100
  801b14:	003fee06 	br	801ad0 <___vfprintf_internal_r+0xd04>
  801b18:	d8814717 	ldw	r2,1308(sp)
  801b1c:	143fffc4 	addi	r16,r2,-1
  801b20:	043e970e 	bge	zero,r16,801580 <___vfprintf_internal_r+0x7b4>
  801b24:	00800404 	movi	r2,16
  801b28:	1400180e 	bge	r2,r16,801b8c <___vfprintf_internal_r+0xdc0>
  801b2c:	1029883a 	mov	r20,r2
  801b30:	07002074 	movhi	fp,129
  801b34:	e7335584 	addi	fp,fp,-12970
  801b38:	054001c4 	movi	r21,7
  801b3c:	00000306 	br	801b4c <___vfprintf_internal_r+0xd80>
  801b40:	9cc00204 	addi	r19,r19,8
  801b44:	843ffc04 	addi	r16,r16,-16
  801b48:	a400120e 	bge	r20,r16,801b94 <___vfprintf_internal_r+0xdc8>
  801b4c:	94800404 	addi	r18,r18,16
  801b50:	8c400044 	addi	r17,r17,1
  801b54:	9f000015 	stw	fp,0(r19)
  801b58:	9d000115 	stw	r20,4(r19)
  801b5c:	dc800e15 	stw	r18,56(sp)
  801b60:	dc400d15 	stw	r17,52(sp)
  801b64:	ac7ff60e 	bge	r21,r17,801b40 <___vfprintf_internal_r+0xd74>
  801b68:	d9014f17 	ldw	r4,1340(sp)
  801b6c:	b00b883a 	mov	r5,r22
  801b70:	d9800c04 	addi	r6,sp,48
  801b74:	0800d740 	call	800d74 <__sprint_r>
  801b78:	103e4c1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801b7c:	dc800e17 	ldw	r18,56(sp)
  801b80:	dc400d17 	ldw	r17,52(sp)
  801b84:	dcc01904 	addi	r19,sp,100
  801b88:	003fee06 	br	801b44 <___vfprintf_internal_r+0xd78>
  801b8c:	07002074 	movhi	fp,129
  801b90:	e7335584 	addi	fp,fp,-12970
  801b94:	9425883a 	add	r18,r18,r16
  801b98:	8c400044 	addi	r17,r17,1
  801b9c:	008001c4 	movi	r2,7
  801ba0:	9f000015 	stw	fp,0(r19)
  801ba4:	9c000115 	stw	r16,4(r19)
  801ba8:	dc800e15 	stw	r18,56(sp)
  801bac:	dc400d15 	stw	r17,52(sp)
  801bb0:	147e720e 	bge	r2,r17,80157c <___vfprintf_internal_r+0x7b0>
  801bb4:	d9014f17 	ldw	r4,1340(sp)
  801bb8:	b00b883a 	mov	r5,r22
  801bbc:	d9800c04 	addi	r6,sp,48
  801bc0:	0800d740 	call	800d74 <__sprint_r>
  801bc4:	103e391e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801bc8:	dc800e17 	ldw	r18,56(sp)
  801bcc:	dc400d17 	ldw	r17,52(sp)
  801bd0:	dcc01904 	addi	r19,sp,100
  801bd4:	003e6a06 	br	801580 <___vfprintf_internal_r+0x7b4>
  801bd8:	d9014f17 	ldw	r4,1340(sp)
  801bdc:	b00b883a 	mov	r5,r22
  801be0:	d9800c04 	addi	r6,sp,48
  801be4:	d9c15115 	stw	r7,1348(sp)
  801be8:	0800d740 	call	800d74 <__sprint_r>
  801bec:	d9c15117 	ldw	r7,1348(sp)
  801bf0:	103e2e1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801bf4:	dc800e17 	ldw	r18,56(sp)
  801bf8:	dc400d17 	ldw	r17,52(sp)
  801bfc:	dd401904 	addi	r21,sp,100
  801c00:	003dba06 	br	8012ec <___vfprintf_internal_r+0x520>
  801c04:	d9014f17 	ldw	r4,1340(sp)
  801c08:	b00b883a 	mov	r5,r22
  801c0c:	d9800c04 	addi	r6,sp,48
  801c10:	0800d740 	call	800d74 <__sprint_r>
  801c14:	103e251e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801c18:	dc800e17 	ldw	r18,56(sp)
  801c1c:	dc400d17 	ldw	r17,52(sp)
  801c20:	dcc01904 	addi	r19,sp,100
  801c24:	003e4206 	br	801530 <___vfprintf_internal_r+0x764>
  801c28:	d9014f17 	ldw	r4,1340(sp)
  801c2c:	b00b883a 	mov	r5,r22
  801c30:	d9800c04 	addi	r6,sp,48
  801c34:	0800d740 	call	800d74 <__sprint_r>
  801c38:	103e1c1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  801c3c:	dc800e17 	ldw	r18,56(sp)
  801c40:	dc400d17 	ldw	r17,52(sp)
  801c44:	d8c01904 	addi	r3,sp,100
  801c48:	003e2e06 	br	801504 <___vfprintf_internal_r+0x738>
  801c4c:	d9414c17 	ldw	r5,1328(sp)
  801c50:	2880004c 	andi	r2,r5,1
  801c54:	1005003a 	cmpeq	r2,r2,zero
  801c58:	103dda1e 	bne	r2,zero,8013c4 <___vfprintf_internal_r+0x5f8>
  801c5c:	003e9f06 	br	8016dc <___vfprintf_internal_r+0x910>
  801c60:	d8c14117 	ldw	r3,1284(sp)
  801c64:	9125883a 	add	r18,r18,r4
  801c68:	8c400044 	addi	r17,r17,1
  801c6c:	008001c4 	movi	r2,7
  801c70:	a8c00015 	stw	r3,0(r21)
  801c74:	a9000115 	stw	r4,4(r21)
  801c78:	dc800e15 	stw	r18,56(sp)
  801c7c:	dc400d15 	stw	r17,52(sp)
  801c80:	14426c16 	blt	r2,r17,802634 <___vfprintf_internal_r+0x1868>
  801c84:	a8c00204 	addi	r3,r21,8
  801c88:	d9414917 	ldw	r5,1316(sp)
  801c8c:	00800044 	movi	r2,1
  801c90:	94800044 	addi	r18,r18,1
  801c94:	8c400044 	addi	r17,r17,1
  801c98:	18800115 	stw	r2,4(r3)
  801c9c:	008001c4 	movi	r2,7
  801ca0:	19400015 	stw	r5,0(r3)
  801ca4:	dc800e15 	stw	r18,56(sp)
  801ca8:	dc400d15 	stw	r17,52(sp)
  801cac:	2021883a 	mov	r16,r4
  801cb0:	14425616 	blt	r2,r17,80260c <___vfprintf_internal_r+0x1840>
  801cb4:	19400204 	addi	r5,r3,8
  801cb8:	d9814717 	ldw	r6,1308(sp)
  801cbc:	8c400044 	addi	r17,r17,1
  801cc0:	dc400d15 	stw	r17,52(sp)
  801cc4:	3107c83a 	sub	r3,r6,r4
  801cc8:	d9014117 	ldw	r4,1284(sp)
  801ccc:	90e5883a 	add	r18,r18,r3
  801cd0:	28c00115 	stw	r3,4(r5)
  801cd4:	8105883a 	add	r2,r16,r4
  801cd8:	28800015 	stw	r2,0(r5)
  801cdc:	008001c4 	movi	r2,7
  801ce0:	dc800e15 	stw	r18,56(sp)
  801ce4:	147f1d16 	blt	r2,r17,80195c <___vfprintf_internal_r+0xb90>
  801ce8:	28c00204 	addi	r3,r5,8
  801cec:	003db506 	br	8013c4 <___vfprintf_internal_r+0x5f8>
  801cf0:	3c000017 	ldw	r16,0(r7)
  801cf4:	3c400117 	ldw	r17,4(r7)
  801cf8:	39800204 	addi	r6,r7,8
  801cfc:	01000044 	movi	r4,1
  801d00:	d9814015 	stw	r6,1280(sp)
  801d04:	d8000405 	stb	zero,16(sp)
  801d08:	003ebe06 	br	801804 <___vfprintf_internal_r+0xa38>
  801d0c:	3c000017 	ldw	r16,0(r7)
  801d10:	3c400117 	ldw	r17,4(r7)
  801d14:	38800204 	addi	r2,r7,8
  801d18:	d8814015 	stw	r2,1280(sp)
  801d1c:	003eb706 	br	8017fc <___vfprintf_internal_r+0xa30>
  801d20:	3c000017 	ldw	r16,0(r7)
  801d24:	3c400117 	ldw	r17,4(r7)
  801d28:	39000204 	addi	r4,r7,8
  801d2c:	d9014015 	stw	r4,1280(sp)
  801d30:	0009883a 	mov	r4,zero
  801d34:	d8000405 	stb	zero,16(sp)
  801d38:	003eb206 	br	801804 <___vfprintf_internal_r+0xa38>
  801d3c:	38c00017 	ldw	r3,0(r7)
  801d40:	39c00104 	addi	r7,r7,4
  801d44:	d8c14a15 	stw	r3,1320(sp)
  801d48:	1800d70e 	bge	r3,zero,8020a8 <___vfprintf_internal_r+0x12dc>
  801d4c:	00c7c83a 	sub	r3,zero,r3
  801d50:	d8c14a15 	stw	r3,1320(sp)
  801d54:	d9014c17 	ldw	r4,1328(sp)
  801d58:	b8c00007 	ldb	r3,0(r23)
  801d5c:	21000114 	ori	r4,r4,4
  801d60:	d9014c15 	stw	r4,1328(sp)
  801d64:	003c9806 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  801d68:	d9814c17 	ldw	r6,1328(sp)
  801d6c:	3080080c 	andi	r2,r6,32
  801d70:	1001f626 	beq	r2,zero,80254c <___vfprintf_internal_r+0x1780>
  801d74:	d9014b17 	ldw	r4,1324(sp)
  801d78:	38800017 	ldw	r2,0(r7)
  801d7c:	39c00104 	addi	r7,r7,4
  801d80:	d9c14015 	stw	r7,1280(sp)
  801d84:	2007d7fa 	srai	r3,r4,31
  801d88:	d9c14017 	ldw	r7,1280(sp)
  801d8c:	11000015 	stw	r4,0(r2)
  801d90:	10c00115 	stw	r3,4(r2)
  801d94:	003c6906 	br	800f3c <___vfprintf_internal_r+0x170>
  801d98:	b8c00007 	ldb	r3,0(r23)
  801d9c:	00801b04 	movi	r2,108
  801da0:	18825526 	beq	r3,r2,8026f8 <___vfprintf_internal_r+0x192c>
  801da4:	d9414c17 	ldw	r5,1328(sp)
  801da8:	29400414 	ori	r5,r5,16
  801dac:	d9414c15 	stw	r5,1328(sp)
  801db0:	003c8506 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  801db4:	d9814c17 	ldw	r6,1328(sp)
  801db8:	b8c00007 	ldb	r3,0(r23)
  801dbc:	31800814 	ori	r6,r6,32
  801dc0:	d9814c15 	stw	r6,1328(sp)
  801dc4:	003c8006 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  801dc8:	d8814c17 	ldw	r2,1328(sp)
  801dcc:	3c000017 	ldw	r16,0(r7)
  801dd0:	00c01e04 	movi	r3,120
  801dd4:	10800094 	ori	r2,r2,2
  801dd8:	d8814c15 	stw	r2,1328(sp)
  801ddc:	39c00104 	addi	r7,r7,4
  801de0:	01402074 	movhi	r5,129
  801de4:	29733e04 	addi	r5,r5,-13064
  801de8:	00800c04 	movi	r2,48
  801dec:	0023883a 	mov	r17,zero
  801df0:	01000084 	movi	r4,2
  801df4:	d9c14015 	stw	r7,1280(sp)
  801df8:	d8c14d15 	stw	r3,1332(sp)
  801dfc:	d9414415 	stw	r5,1296(sp)
  801e00:	d8800445 	stb	r2,17(sp)
  801e04:	d8c00485 	stb	r3,18(sp)
  801e08:	d8000405 	stb	zero,16(sp)
  801e0c:	003e7d06 	br	801804 <___vfprintf_internal_r+0xa38>
  801e10:	d8814c17 	ldw	r2,1328(sp)
  801e14:	b8c00007 	ldb	r3,0(r23)
  801e18:	10801014 	ori	r2,r2,64
  801e1c:	d8814c15 	stw	r2,1328(sp)
  801e20:	003c6906 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  801e24:	d9414c17 	ldw	r5,1328(sp)
  801e28:	2880020c 	andi	r2,r5,8
  801e2c:	1001e526 	beq	r2,zero,8025c4 <___vfprintf_internal_r+0x17f8>
  801e30:	39800017 	ldw	r6,0(r7)
  801e34:	38800204 	addi	r2,r7,8
  801e38:	d8814015 	stw	r2,1280(sp)
  801e3c:	d9814215 	stw	r6,1288(sp)
  801e40:	39c00117 	ldw	r7,4(r7)
  801e44:	d9c14315 	stw	r7,1292(sp)
  801e48:	d9014217 	ldw	r4,1288(sp)
  801e4c:	d9414317 	ldw	r5,1292(sp)
  801e50:	080787c0 	call	80787c <__isinfd>
  801e54:	10021d26 	beq	r2,zero,8026cc <___vfprintf_internal_r+0x1900>
  801e58:	d9014217 	ldw	r4,1288(sp)
  801e5c:	d9414317 	ldw	r5,1292(sp)
  801e60:	000d883a 	mov	r6,zero
  801e64:	000f883a 	mov	r7,zero
  801e68:	0809a180 	call	809a18 <__ltdf2>
  801e6c:	1002d016 	blt	r2,zero,8029b0 <___vfprintf_internal_r+0x1be4>
  801e70:	d9414d17 	ldw	r5,1332(sp)
  801e74:	008011c4 	movi	r2,71
  801e78:	11421016 	blt	r2,r5,8026bc <___vfprintf_internal_r+0x18f0>
  801e7c:	01802074 	movhi	r6,129
  801e80:	31b34304 	addi	r6,r6,-13044
  801e84:	d9814115 	stw	r6,1284(sp)
  801e88:	d9014c17 	ldw	r4,1328(sp)
  801e8c:	00c000c4 	movi	r3,3
  801e90:	00bfdfc4 	movi	r2,-129
  801e94:	2088703a 	and	r4,r4,r2
  801e98:	180f883a 	mov	r7,r3
  801e9c:	d8c14515 	stw	r3,1300(sp)
  801ea0:	d9014c15 	stw	r4,1328(sp)
  801ea4:	d8014615 	stw	zero,1304(sp)
  801ea8:	003e6a06 	br	801854 <___vfprintf_internal_r+0xa88>
  801eac:	38800017 	ldw	r2,0(r7)
  801eb0:	00c00044 	movi	r3,1
  801eb4:	39c00104 	addi	r7,r7,4
  801eb8:	d9c14015 	stw	r7,1280(sp)
  801ebc:	d9000f04 	addi	r4,sp,60
  801ec0:	180f883a 	mov	r7,r3
  801ec4:	d8c14515 	stw	r3,1300(sp)
  801ec8:	d9014115 	stw	r4,1284(sp)
  801ecc:	d8800f05 	stb	r2,60(sp)
  801ed0:	d8000405 	stb	zero,16(sp)
  801ed4:	003cac06 	br	801188 <___vfprintf_internal_r+0x3bc>
  801ed8:	01402074 	movhi	r5,129
  801edc:	29734904 	addi	r5,r5,-13020
  801ee0:	d9414415 	stw	r5,1296(sp)
  801ee4:	d9814c17 	ldw	r6,1328(sp)
  801ee8:	3080080c 	andi	r2,r6,32
  801eec:	1000ff26 	beq	r2,zero,8022ec <___vfprintf_internal_r+0x1520>
  801ef0:	3c000017 	ldw	r16,0(r7)
  801ef4:	3c400117 	ldw	r17,4(r7)
  801ef8:	38800204 	addi	r2,r7,8
  801efc:	d8814015 	stw	r2,1280(sp)
  801f00:	d9414c17 	ldw	r5,1328(sp)
  801f04:	2880004c 	andi	r2,r5,1
  801f08:	1005003a 	cmpeq	r2,r2,zero
  801f0c:	1000b91e 	bne	r2,zero,8021f4 <___vfprintf_internal_r+0x1428>
  801f10:	8444b03a 	or	r2,r16,r17
  801f14:	1000b726 	beq	r2,zero,8021f4 <___vfprintf_internal_r+0x1428>
  801f18:	d9814d17 	ldw	r6,1332(sp)
  801f1c:	29400094 	ori	r5,r5,2
  801f20:	00800c04 	movi	r2,48
  801f24:	01000084 	movi	r4,2
  801f28:	d9414c15 	stw	r5,1328(sp)
  801f2c:	d8800445 	stb	r2,17(sp)
  801f30:	d9800485 	stb	r6,18(sp)
  801f34:	d8000405 	stb	zero,16(sp)
  801f38:	003e3206 	br	801804 <___vfprintf_internal_r+0xa38>
  801f3c:	01802074 	movhi	r6,129
  801f40:	31b33e04 	addi	r6,r6,-13064
  801f44:	d9814415 	stw	r6,1296(sp)
  801f48:	003fe606 	br	801ee4 <___vfprintf_internal_r+0x1118>
  801f4c:	00800ac4 	movi	r2,43
  801f50:	d8800405 	stb	r2,16(sp)
  801f54:	b8c00007 	ldb	r3,0(r23)
  801f58:	003c1b06 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  801f5c:	d8814c17 	ldw	r2,1328(sp)
  801f60:	b8c00007 	ldb	r3,0(r23)
  801f64:	10800054 	ori	r2,r2,1
  801f68:	d8814c15 	stw	r2,1328(sp)
  801f6c:	003c1606 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  801f70:	d8800407 	ldb	r2,16(sp)
  801f74:	10004c1e 	bne	r2,zero,8020a8 <___vfprintf_internal_r+0x12dc>
  801f78:	00800804 	movi	r2,32
  801f7c:	d8800405 	stb	r2,16(sp)
  801f80:	b8c00007 	ldb	r3,0(r23)
  801f84:	003c1006 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  801f88:	d9814c17 	ldw	r6,1328(sp)
  801f8c:	b8c00007 	ldb	r3,0(r23)
  801f90:	31800214 	ori	r6,r6,8
  801f94:	d9814c15 	stw	r6,1328(sp)
  801f98:	003c0b06 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  801f9c:	0009883a 	mov	r4,zero
  801fa0:	04000244 	movi	r16,9
  801fa4:	01400284 	movi	r5,10
  801fa8:	d9c15115 	stw	r7,1348(sp)
  801fac:	0800b9c0 	call	800b9c <__mulsi3>
  801fb0:	b9000007 	ldb	r4,0(r23)
  801fb4:	d8c14d17 	ldw	r3,1332(sp)
  801fb8:	bdc00044 	addi	r23,r23,1
  801fbc:	d9014d15 	stw	r4,1332(sp)
  801fc0:	d9414d17 	ldw	r5,1332(sp)
  801fc4:	1885883a 	add	r2,r3,r2
  801fc8:	113ff404 	addi	r4,r2,-48
  801fcc:	28bff404 	addi	r2,r5,-48
  801fd0:	d9c15117 	ldw	r7,1348(sp)
  801fd4:	80bff32e 	bgeu	r16,r2,801fa4 <___vfprintf_internal_r+0x11d8>
  801fd8:	d9014a15 	stw	r4,1320(sp)
  801fdc:	003bfc06 	br	800fd0 <___vfprintf_internal_r+0x204>
  801fe0:	d8814c17 	ldw	r2,1328(sp)
  801fe4:	b8c00007 	ldb	r3,0(r23)
  801fe8:	10802014 	ori	r2,r2,128
  801fec:	d8814c15 	stw	r2,1328(sp)
  801ff0:	003bf506 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  801ff4:	b8c00007 	ldb	r3,0(r23)
  801ff8:	00800a84 	movi	r2,42
  801ffc:	bdc00044 	addi	r23,r23,1
  802000:	18831826 	beq	r3,r2,802c64 <___vfprintf_internal_r+0x1e98>
  802004:	d8c14d15 	stw	r3,1332(sp)
  802008:	18bff404 	addi	r2,r3,-48
  80200c:	00c00244 	movi	r3,9
  802010:	18827b36 	bltu	r3,r2,802a00 <___vfprintf_internal_r+0x1c34>
  802014:	1821883a 	mov	r16,r3
  802018:	0009883a 	mov	r4,zero
  80201c:	01400284 	movi	r5,10
  802020:	d9c15115 	stw	r7,1348(sp)
  802024:	0800b9c0 	call	800b9c <__mulsi3>
  802028:	d9414d17 	ldw	r5,1332(sp)
  80202c:	b9800007 	ldb	r6,0(r23)
  802030:	d9c15117 	ldw	r7,1348(sp)
  802034:	1145883a 	add	r2,r2,r5
  802038:	113ff404 	addi	r4,r2,-48
  80203c:	30bff404 	addi	r2,r6,-48
  802040:	d9814d15 	stw	r6,1332(sp)
  802044:	bdc00044 	addi	r23,r23,1
  802048:	80bff42e 	bgeu	r16,r2,80201c <___vfprintf_internal_r+0x1250>
  80204c:	2027883a 	mov	r19,r4
  802050:	203bdf0e 	bge	r4,zero,800fd0 <___vfprintf_internal_r+0x204>
  802054:	04ffffc4 	movi	r19,-1
  802058:	003bdd06 	br	800fd0 <___vfprintf_internal_r+0x204>
  80205c:	d8000405 	stb	zero,16(sp)
  802060:	39800017 	ldw	r6,0(r7)
  802064:	39c00104 	addi	r7,r7,4
  802068:	d9c14015 	stw	r7,1280(sp)
  80206c:	d9814115 	stw	r6,1284(sp)
  802070:	3001c926 	beq	r6,zero,802798 <___vfprintf_internal_r+0x19cc>
  802074:	98000e16 	blt	r19,zero,8020b0 <___vfprintf_internal_r+0x12e4>
  802078:	d9014117 	ldw	r4,1284(sp)
  80207c:	000b883a 	mov	r5,zero
  802080:	980d883a 	mov	r6,r19
  802084:	0805f000 	call	805f00 <memchr>
  802088:	10025926 	beq	r2,zero,8029f0 <___vfprintf_internal_r+0x1c24>
  80208c:	d8c14117 	ldw	r3,1284(sp)
  802090:	10cfc83a 	sub	r7,r2,r3
  802094:	99c19e16 	blt	r19,r7,802710 <___vfprintf_internal_r+0x1944>
  802098:	d9c14515 	stw	r7,1300(sp)
  80209c:	38000916 	blt	r7,zero,8020c4 <___vfprintf_internal_r+0x12f8>
  8020a0:	d8014615 	stw	zero,1304(sp)
  8020a4:	003deb06 	br	801854 <___vfprintf_internal_r+0xa88>
  8020a8:	b8c00007 	ldb	r3,0(r23)
  8020ac:	003bc606 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  8020b0:	d9014117 	ldw	r4,1284(sp)
  8020b4:	0800d000 	call	800d00 <strlen>
  8020b8:	d8814515 	stw	r2,1300(sp)
  8020bc:	100f883a 	mov	r7,r2
  8020c0:	103ff70e 	bge	r2,zero,8020a0 <___vfprintf_internal_r+0x12d4>
  8020c4:	d8014515 	stw	zero,1300(sp)
  8020c8:	d8014615 	stw	zero,1304(sp)
  8020cc:	003de106 	br	801854 <___vfprintf_internal_r+0xa88>
  8020d0:	20c03fcc 	andi	r3,r4,255
  8020d4:	00800044 	movi	r2,1
  8020d8:	18802d26 	beq	r3,r2,802190 <___vfprintf_internal_r+0x13c4>
  8020dc:	18800e36 	bltu	r3,r2,802118 <___vfprintf_internal_r+0x134c>
  8020e0:	00800084 	movi	r2,2
  8020e4:	1880fa26 	beq	r3,r2,8024d0 <___vfprintf_internal_r+0x1704>
  8020e8:	01002074 	movhi	r4,129
  8020ec:	21334e04 	addi	r4,r4,-13000
  8020f0:	0800d000 	call	800d00 <strlen>
  8020f4:	100f883a 	mov	r7,r2
  8020f8:	dcc14515 	stw	r19,1300(sp)
  8020fc:	9880010e 	bge	r19,r2,802104 <___vfprintf_internal_r+0x1338>
  802100:	d8814515 	stw	r2,1300(sp)
  802104:	00802074 	movhi	r2,129
  802108:	10b34e04 	addi	r2,r2,-13000
  80210c:	dcc14615 	stw	r19,1304(sp)
  802110:	d8814115 	stw	r2,1284(sp)
  802114:	003dcf06 	br	801854 <___vfprintf_internal_r+0xa88>
  802118:	d9401904 	addi	r5,sp,100
  80211c:	dd000f04 	addi	r20,sp,60
  802120:	d9414115 	stw	r5,1284(sp)
  802124:	880a977a 	slli	r5,r17,29
  802128:	d9814117 	ldw	r6,1284(sp)
  80212c:	8004d0fa 	srli	r2,r16,3
  802130:	8806d0fa 	srli	r3,r17,3
  802134:	810001cc 	andi	r4,r16,7
  802138:	2884b03a 	or	r2,r5,r2
  80213c:	31bfffc4 	addi	r6,r6,-1
  802140:	21000c04 	addi	r4,r4,48
  802144:	d9814115 	stw	r6,1284(sp)
  802148:	10cab03a 	or	r5,r2,r3
  80214c:	31000005 	stb	r4,0(r6)
  802150:	1021883a 	mov	r16,r2
  802154:	1823883a 	mov	r17,r3
  802158:	283ff21e 	bne	r5,zero,802124 <___vfprintf_internal_r+0x1358>
  80215c:	d8c14c17 	ldw	r3,1328(sp)
  802160:	1880004c 	andi	r2,r3,1
  802164:	1005003a 	cmpeq	r2,r2,zero
  802168:	103db31e 	bne	r2,zero,801838 <___vfprintf_internal_r+0xa6c>
  80216c:	20803fcc 	andi	r2,r4,255
  802170:	1080201c 	xori	r2,r2,128
  802174:	10bfe004 	addi	r2,r2,-128
  802178:	00c00c04 	movi	r3,48
  80217c:	10fdae26 	beq	r2,r3,801838 <___vfprintf_internal_r+0xa6c>
  802180:	31bfffc4 	addi	r6,r6,-1
  802184:	d9814115 	stw	r6,1284(sp)
  802188:	30c00005 	stb	r3,0(r6)
  80218c:	003daa06 	br	801838 <___vfprintf_internal_r+0xa6c>
  802190:	88800068 	cmpgeui	r2,r17,1
  802194:	10002c1e 	bne	r2,zero,802248 <___vfprintf_internal_r+0x147c>
  802198:	8800021e 	bne	r17,zero,8021a4 <___vfprintf_internal_r+0x13d8>
  80219c:	00800244 	movi	r2,9
  8021a0:	14002936 	bltu	r2,r16,802248 <___vfprintf_internal_r+0x147c>
  8021a4:	d90018c4 	addi	r4,sp,99
  8021a8:	dd000f04 	addi	r20,sp,60
  8021ac:	d9014115 	stw	r4,1284(sp)
  8021b0:	d9014117 	ldw	r4,1284(sp)
  8021b4:	80800c04 	addi	r2,r16,48
  8021b8:	20800005 	stb	r2,0(r4)
  8021bc:	003d9e06 	br	801838 <___vfprintf_internal_r+0xa6c>
  8021c0:	dc400d17 	ldw	r17,52(sp)
  8021c4:	07002074 	movhi	fp,129
  8021c8:	e7335584 	addi	fp,fp,-12970
  8021cc:	9425883a 	add	r18,r18,r16
  8021d0:	8c400044 	addi	r17,r17,1
  8021d4:	008001c4 	movi	r2,7
  8021d8:	1f000015 	stw	fp,0(r3)
  8021dc:	1c000115 	stw	r16,4(r3)
  8021e0:	dc800e15 	stw	r18,56(sp)
  8021e4:	dc400d15 	stw	r17,52(sp)
  8021e8:	147ddc16 	blt	r2,r17,80195c <___vfprintf_internal_r+0xb90>
  8021ec:	18c00204 	addi	r3,r3,8
  8021f0:	003c7406 	br	8013c4 <___vfprintf_internal_r+0x5f8>
  8021f4:	01000084 	movi	r4,2
  8021f8:	d8000405 	stb	zero,16(sp)
  8021fc:	003d8106 	br	801804 <___vfprintf_internal_r+0xa38>
  802200:	d9814c17 	ldw	r6,1328(sp)
  802204:	30c4703a 	and	r2,r6,r3
  802208:	1005003a 	cmpeq	r2,r2,zero
  80220c:	103cb326 	beq	r2,zero,8014dc <___vfprintf_internal_r+0x710>
  802210:	d9014117 	ldw	r4,1284(sp)
  802214:	94800044 	addi	r18,r18,1
  802218:	8c400044 	addi	r17,r17,1
  80221c:	008001c4 	movi	r2,7
  802220:	a9000015 	stw	r4,0(r21)
  802224:	a8c00115 	stw	r3,4(r21)
  802228:	dc800e15 	stw	r18,56(sp)
  80222c:	dc400d15 	stw	r17,52(sp)
  802230:	147e6016 	blt	r2,r17,801bb4 <___vfprintf_internal_r+0xde8>
  802234:	acc00204 	addi	r19,r21,8
  802238:	003cd106 	br	801580 <___vfprintf_internal_r+0x7b4>
  80223c:	07002074 	movhi	fp,129
  802240:	e7335584 	addi	fp,fp,-12970
  802244:	003c4906 	br	80136c <___vfprintf_internal_r+0x5a0>
  802248:	dd000f04 	addi	r20,sp,60
  80224c:	dc801904 	addi	r18,sp,100
  802250:	8009883a 	mov	r4,r16
  802254:	880b883a 	mov	r5,r17
  802258:	01800284 	movi	r6,10
  80225c:	000f883a 	mov	r7,zero
  802260:	08086780 	call	808678 <__umoddi3>
  802264:	12000c04 	addi	r8,r2,48
  802268:	94bfffc4 	addi	r18,r18,-1
  80226c:	8009883a 	mov	r4,r16
  802270:	880b883a 	mov	r5,r17
  802274:	01800284 	movi	r6,10
  802278:	000f883a 	mov	r7,zero
  80227c:	92000005 	stb	r8,0(r18)
  802280:	080800c0 	call	80800c <__udivdi3>
  802284:	1009883a 	mov	r4,r2
  802288:	1021883a 	mov	r16,r2
  80228c:	18800068 	cmpgeui	r2,r3,1
  802290:	1823883a 	mov	r17,r3
  802294:	103fee1e 	bne	r2,zero,802250 <___vfprintf_internal_r+0x1484>
  802298:	1800021e 	bne	r3,zero,8022a4 <___vfprintf_internal_r+0x14d8>
  80229c:	00800244 	movi	r2,9
  8022a0:	113feb36 	bltu	r2,r4,802250 <___vfprintf_internal_r+0x1484>
  8022a4:	94bfffc4 	addi	r18,r18,-1
  8022a8:	dc814115 	stw	r18,1284(sp)
  8022ac:	003fc006 	br	8021b0 <___vfprintf_internal_r+0x13e4>
  8022b0:	d9014c17 	ldw	r4,1328(sp)
  8022b4:	2080004c 	andi	r2,r4,1
  8022b8:	10009a1e 	bne	r2,zero,802524 <___vfprintf_internal_r+0x1758>
  8022bc:	d9401904 	addi	r5,sp,100
  8022c0:	dd000f04 	addi	r20,sp,60
  8022c4:	d9414115 	stw	r5,1284(sp)
  8022c8:	003d5b06 	br	801838 <___vfprintf_internal_r+0xa6c>
  8022cc:	d9014f17 	ldw	r4,1340(sp)
  8022d0:	b00b883a 	mov	r5,r22
  8022d4:	d9800c04 	addi	r6,sp,48
  8022d8:	0800d740 	call	800d74 <__sprint_r>
  8022dc:	103c731e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  8022e0:	dc800e17 	ldw	r18,56(sp)
  8022e4:	d8c01904 	addi	r3,sp,100
  8022e8:	003cf906 	br	8016d0 <___vfprintf_internal_r+0x904>
  8022ec:	d8c14c17 	ldw	r3,1328(sp)
  8022f0:	1880040c 	andi	r2,r3,16
  8022f4:	1000711e 	bne	r2,zero,8024bc <___vfprintf_internal_r+0x16f0>
  8022f8:	d9014c17 	ldw	r4,1328(sp)
  8022fc:	2080100c 	andi	r2,r4,64
  802300:	10006e26 	beq	r2,zero,8024bc <___vfprintf_internal_r+0x16f0>
  802304:	3c00000b 	ldhu	r16,0(r7)
  802308:	0023883a 	mov	r17,zero
  80230c:	39c00104 	addi	r7,r7,4
  802310:	d9c14015 	stw	r7,1280(sp)
  802314:	003efa06 	br	801f00 <___vfprintf_internal_r+0x1134>
  802318:	dc400d17 	ldw	r17,52(sp)
  80231c:	07002074 	movhi	fp,129
  802320:	e7335584 	addi	fp,fp,-12970
  802324:	9425883a 	add	r18,r18,r16
  802328:	8c400044 	addi	r17,r17,1
  80232c:	008001c4 	movi	r2,7
  802330:	1f000015 	stw	fp,0(r3)
  802334:	1c000115 	stw	r16,4(r3)
  802338:	dc800e15 	stw	r18,56(sp)
  80233c:	dc400d15 	stw	r17,52(sp)
  802340:	147d7016 	blt	r2,r17,801904 <___vfprintf_internal_r+0xb38>
  802344:	18c00204 	addi	r3,r3,8
  802348:	003d7506 	br	801920 <___vfprintf_internal_r+0xb54>
  80234c:	dc800e17 	ldw	r18,56(sp)
  802350:	dc400d17 	ldw	r17,52(sp)
  802354:	07002074 	movhi	fp,129
  802358:	e7335984 	addi	fp,fp,-12954
  80235c:	003bba06 	br	801248 <___vfprintf_internal_r+0x47c>
  802360:	d9014f17 	ldw	r4,1340(sp)
  802364:	b00b883a 	mov	r5,r22
  802368:	d9800c04 	addi	r6,sp,48
  80236c:	0800d740 	call	800d74 <__sprint_r>
  802370:	103c4e1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  802374:	dc800e17 	ldw	r18,56(sp)
  802378:	d8c01904 	addi	r3,sp,100
  80237c:	003ce306 	br	80170c <___vfprintf_internal_r+0x940>
  802380:	3c000017 	ldw	r16,0(r7)
  802384:	0009883a 	mov	r4,zero
  802388:	39c00104 	addi	r7,r7,4
  80238c:	0023883a 	mov	r17,zero
  802390:	d9c14015 	stw	r7,1280(sp)
  802394:	d8000405 	stb	zero,16(sp)
  802398:	003d1a06 	br	801804 <___vfprintf_internal_r+0xa38>
  80239c:	38800017 	ldw	r2,0(r7)
  8023a0:	39c00104 	addi	r7,r7,4
  8023a4:	d9c14015 	stw	r7,1280(sp)
  8023a8:	1023d7fa 	srai	r17,r2,31
  8023ac:	1021883a 	mov	r16,r2
  8023b0:	003d1206 	br	8017fc <___vfprintf_internal_r+0xa30>
  8023b4:	3c000017 	ldw	r16,0(r7)
  8023b8:	01000044 	movi	r4,1
  8023bc:	39c00104 	addi	r7,r7,4
  8023c0:	0023883a 	mov	r17,zero
  8023c4:	d9c14015 	stw	r7,1280(sp)
  8023c8:	d8000405 	stb	zero,16(sp)
  8023cc:	003d0d06 	br	801804 <___vfprintf_internal_r+0xa38>
  8023d0:	00802074 	movhi	r2,129
  8023d4:	10b35504 	addi	r2,r2,-12972
  8023d8:	94800044 	addi	r18,r18,1
  8023dc:	8c400044 	addi	r17,r17,1
  8023e0:	a8800015 	stw	r2,0(r21)
  8023e4:	00c00044 	movi	r3,1
  8023e8:	008001c4 	movi	r2,7
  8023ec:	a8c00115 	stw	r3,4(r21)
  8023f0:	dc800e15 	stw	r18,56(sp)
  8023f4:	dc400d15 	stw	r17,52(sp)
  8023f8:	1440ca16 	blt	r2,r17,802724 <___vfprintf_internal_r+0x1958>
  8023fc:	a8c00204 	addi	r3,r21,8
  802400:	2000061e 	bne	r4,zero,80241c <___vfprintf_internal_r+0x1650>
  802404:	d9414717 	ldw	r5,1308(sp)
  802408:	2800041e 	bne	r5,zero,80241c <___vfprintf_internal_r+0x1650>
  80240c:	d9814c17 	ldw	r6,1328(sp)
  802410:	3080004c 	andi	r2,r6,1
  802414:	1005003a 	cmpeq	r2,r2,zero
  802418:	103bea1e 	bne	r2,zero,8013c4 <___vfprintf_internal_r+0x5f8>
  80241c:	00800044 	movi	r2,1
  802420:	dc400d17 	ldw	r17,52(sp)
  802424:	18800115 	stw	r2,4(r3)
  802428:	d8814917 	ldw	r2,1316(sp)
  80242c:	94800044 	addi	r18,r18,1
  802430:	8c400044 	addi	r17,r17,1
  802434:	18800015 	stw	r2,0(r3)
  802438:	008001c4 	movi	r2,7
  80243c:	dc800e15 	stw	r18,56(sp)
  802440:	dc400d15 	stw	r17,52(sp)
  802444:	1440ca16 	blt	r2,r17,802770 <___vfprintf_internal_r+0x19a4>
  802448:	18c00204 	addi	r3,r3,8
  80244c:	0121c83a 	sub	r16,zero,r4
  802450:	0400500e 	bge	zero,r16,802594 <___vfprintf_internal_r+0x17c8>
  802454:	00800404 	movi	r2,16
  802458:	1400800e 	bge	r2,r16,80265c <___vfprintf_internal_r+0x1890>
  80245c:	1027883a 	mov	r19,r2
  802460:	07002074 	movhi	fp,129
  802464:	e7335584 	addi	fp,fp,-12970
  802468:	050001c4 	movi	r20,7
  80246c:	00000306 	br	80247c <___vfprintf_internal_r+0x16b0>
  802470:	18c00204 	addi	r3,r3,8
  802474:	843ffc04 	addi	r16,r16,-16
  802478:	9c007a0e 	bge	r19,r16,802664 <___vfprintf_internal_r+0x1898>
  80247c:	94800404 	addi	r18,r18,16
  802480:	8c400044 	addi	r17,r17,1
  802484:	1f000015 	stw	fp,0(r3)
  802488:	1cc00115 	stw	r19,4(r3)
  80248c:	dc800e15 	stw	r18,56(sp)
  802490:	dc400d15 	stw	r17,52(sp)
  802494:	a47ff60e 	bge	r20,r17,802470 <___vfprintf_internal_r+0x16a4>
  802498:	d9014f17 	ldw	r4,1340(sp)
  80249c:	b00b883a 	mov	r5,r22
  8024a0:	d9800c04 	addi	r6,sp,48
  8024a4:	0800d740 	call	800d74 <__sprint_r>
  8024a8:	103c001e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  8024ac:	dc800e17 	ldw	r18,56(sp)
  8024b0:	dc400d17 	ldw	r17,52(sp)
  8024b4:	d8c01904 	addi	r3,sp,100
  8024b8:	003fee06 	br	802474 <___vfprintf_internal_r+0x16a8>
  8024bc:	3c000017 	ldw	r16,0(r7)
  8024c0:	0023883a 	mov	r17,zero
  8024c4:	39c00104 	addi	r7,r7,4
  8024c8:	d9c14015 	stw	r7,1280(sp)
  8024cc:	003e8c06 	br	801f00 <___vfprintf_internal_r+0x1134>
  8024d0:	d9401904 	addi	r5,sp,100
  8024d4:	dd000f04 	addi	r20,sp,60
  8024d8:	d9414115 	stw	r5,1284(sp)
  8024dc:	d9814417 	ldw	r6,1296(sp)
  8024e0:	880a973a 	slli	r5,r17,28
  8024e4:	8004d13a 	srli	r2,r16,4
  8024e8:	810003cc 	andi	r4,r16,15
  8024ec:	3109883a 	add	r4,r6,r4
  8024f0:	2884b03a 	or	r2,r5,r2
  8024f4:	21400003 	ldbu	r5,0(r4)
  8024f8:	d9014117 	ldw	r4,1284(sp)
  8024fc:	8806d13a 	srli	r3,r17,4
  802500:	1021883a 	mov	r16,r2
  802504:	213fffc4 	addi	r4,r4,-1
  802508:	d9014115 	stw	r4,1284(sp)
  80250c:	d9814117 	ldw	r6,1284(sp)
  802510:	10c8b03a 	or	r4,r2,r3
  802514:	1823883a 	mov	r17,r3
  802518:	31400005 	stb	r5,0(r6)
  80251c:	203fef1e 	bne	r4,zero,8024dc <___vfprintf_internal_r+0x1710>
  802520:	003cc506 	br	801838 <___vfprintf_internal_r+0xa6c>
  802524:	00800c04 	movi	r2,48
  802528:	d98018c4 	addi	r6,sp,99
  80252c:	dd000f04 	addi	r20,sp,60
  802530:	d88018c5 	stb	r2,99(sp)
  802534:	d9814115 	stw	r6,1284(sp)
  802538:	003cbf06 	br	801838 <___vfprintf_internal_r+0xa6c>
  80253c:	dc400d17 	ldw	r17,52(sp)
  802540:	07002074 	movhi	fp,129
  802544:	e7335984 	addi	fp,fp,-12954
  802548:	003bc106 	br	801450 <___vfprintf_internal_r+0x684>
  80254c:	d9414c17 	ldw	r5,1328(sp)
  802550:	2880040c 	andi	r2,r5,16
  802554:	10007c26 	beq	r2,zero,802748 <___vfprintf_internal_r+0x197c>
  802558:	38800017 	ldw	r2,0(r7)
  80255c:	39c00104 	addi	r7,r7,4
  802560:	d9c14015 	stw	r7,1280(sp)
  802564:	d9814b17 	ldw	r6,1324(sp)
  802568:	d9c14017 	ldw	r7,1280(sp)
  80256c:	11800015 	stw	r6,0(r2)
  802570:	003a7206 	br	800f3c <___vfprintf_internal_r+0x170>
  802574:	d9014f17 	ldw	r4,1340(sp)
  802578:	b00b883a 	mov	r5,r22
  80257c:	d9800c04 	addi	r6,sp,48
  802580:	0800d740 	call	800d74 <__sprint_r>
  802584:	103bc91e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  802588:	dc800e17 	ldw	r18,56(sp)
  80258c:	dc400d17 	ldw	r17,52(sp)
  802590:	d8c01904 	addi	r3,sp,100
  802594:	d9014717 	ldw	r4,1308(sp)
  802598:	d9414117 	ldw	r5,1284(sp)
  80259c:	8c400044 	addi	r17,r17,1
  8025a0:	9125883a 	add	r18,r18,r4
  8025a4:	008001c4 	movi	r2,7
  8025a8:	19400015 	stw	r5,0(r3)
  8025ac:	19000115 	stw	r4,4(r3)
  8025b0:	dc800e15 	stw	r18,56(sp)
  8025b4:	dc400d15 	stw	r17,52(sp)
  8025b8:	147ce816 	blt	r2,r17,80195c <___vfprintf_internal_r+0xb90>
  8025bc:	18c00204 	addi	r3,r3,8
  8025c0:	003b8006 	br	8013c4 <___vfprintf_internal_r+0x5f8>
  8025c4:	38c00017 	ldw	r3,0(r7)
  8025c8:	39000204 	addi	r4,r7,8
  8025cc:	d9014015 	stw	r4,1280(sp)
  8025d0:	d8c14215 	stw	r3,1288(sp)
  8025d4:	39c00117 	ldw	r7,4(r7)
  8025d8:	d9c14315 	stw	r7,1292(sp)
  8025dc:	003e1a06 	br	801e48 <___vfprintf_internal_r+0x107c>
  8025e0:	0005883a 	mov	r2,zero
  8025e4:	1409c83a 	sub	r4,r2,r16
  8025e8:	1105803a 	cmpltu	r2,r2,r4
  8025ec:	044bc83a 	sub	r5,zero,r17
  8025f0:	2885c83a 	sub	r2,r5,r2
  8025f4:	2021883a 	mov	r16,r4
  8025f8:	1023883a 	mov	r17,r2
  8025fc:	01000044 	movi	r4,1
  802600:	00800b44 	movi	r2,45
  802604:	d8800405 	stb	r2,16(sp)
  802608:	003c7e06 	br	801804 <___vfprintf_internal_r+0xa38>
  80260c:	d9014f17 	ldw	r4,1340(sp)
  802610:	b00b883a 	mov	r5,r22
  802614:	d9800c04 	addi	r6,sp,48
  802618:	0800d740 	call	800d74 <__sprint_r>
  80261c:	103ba31e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  802620:	dc800e17 	ldw	r18,56(sp)
  802624:	dc400d17 	ldw	r17,52(sp)
  802628:	d9000517 	ldw	r4,20(sp)
  80262c:	d9401904 	addi	r5,sp,100
  802630:	003da106 	br	801cb8 <___vfprintf_internal_r+0xeec>
  802634:	d9014f17 	ldw	r4,1340(sp)
  802638:	b00b883a 	mov	r5,r22
  80263c:	d9800c04 	addi	r6,sp,48
  802640:	0800d740 	call	800d74 <__sprint_r>
  802644:	103b991e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  802648:	dc800e17 	ldw	r18,56(sp)
  80264c:	dc400d17 	ldw	r17,52(sp)
  802650:	d9000517 	ldw	r4,20(sp)
  802654:	d8c01904 	addi	r3,sp,100
  802658:	003d8b06 	br	801c88 <___vfprintf_internal_r+0xebc>
  80265c:	07002074 	movhi	fp,129
  802660:	e7335584 	addi	fp,fp,-12970
  802664:	9425883a 	add	r18,r18,r16
  802668:	8c400044 	addi	r17,r17,1
  80266c:	008001c4 	movi	r2,7
  802670:	1f000015 	stw	fp,0(r3)
  802674:	1c000115 	stw	r16,4(r3)
  802678:	dc800e15 	stw	r18,56(sp)
  80267c:	dc400d15 	stw	r17,52(sp)
  802680:	147fbc16 	blt	r2,r17,802574 <___vfprintf_internal_r+0x17a8>
  802684:	18c00204 	addi	r3,r3,8
  802688:	003fc206 	br	802594 <___vfprintf_internal_r+0x17c8>
  80268c:	d9014f17 	ldw	r4,1340(sp)
  802690:	b00b883a 	mov	r5,r22
  802694:	d9800c04 	addi	r6,sp,48
  802698:	0800d740 	call	800d74 <__sprint_r>
  80269c:	103b831e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  8026a0:	dc800e17 	ldw	r18,56(sp)
  8026a4:	d9000517 	ldw	r4,20(sp)
  8026a8:	d8c01904 	addi	r3,sp,100
  8026ac:	003cfc06 	br	801aa0 <___vfprintf_internal_r+0xcd4>
  8026b0:	07002074 	movhi	fp,129
  8026b4:	e7335584 	addi	fp,fp,-12970
  8026b8:	003bde06 	br	801634 <___vfprintf_internal_r+0x868>
  8026bc:	00802074 	movhi	r2,129
  8026c0:	10b34404 	addi	r2,r2,-13040
  8026c4:	d8814115 	stw	r2,1284(sp)
  8026c8:	003def06 	br	801e88 <___vfprintf_internal_r+0x10bc>
  8026cc:	d9014217 	ldw	r4,1288(sp)
  8026d0:	d9414317 	ldw	r5,1292(sp)
  8026d4:	08078bc0 	call	8078bc <__isnand>
  8026d8:	10003926 	beq	r2,zero,8027c0 <___vfprintf_internal_r+0x19f4>
  8026dc:	d9414d17 	ldw	r5,1332(sp)
  8026e0:	008011c4 	movi	r2,71
  8026e4:	1140ce16 	blt	r2,r5,802a20 <___vfprintf_internal_r+0x1c54>
  8026e8:	01802074 	movhi	r6,129
  8026ec:	31b34504 	addi	r6,r6,-13036
  8026f0:	d9814115 	stw	r6,1284(sp)
  8026f4:	003de406 	br	801e88 <___vfprintf_internal_r+0x10bc>
  8026f8:	d9014c17 	ldw	r4,1328(sp)
  8026fc:	bdc00044 	addi	r23,r23,1
  802700:	b8c00007 	ldb	r3,0(r23)
  802704:	21000814 	ori	r4,r4,32
  802708:	d9014c15 	stw	r4,1328(sp)
  80270c:	003a2e06 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  802710:	dcc14515 	stw	r19,1300(sp)
  802714:	98011016 	blt	r19,zero,802b58 <___vfprintf_internal_r+0x1d8c>
  802718:	980f883a 	mov	r7,r19
  80271c:	d8014615 	stw	zero,1304(sp)
  802720:	003c4c06 	br	801854 <___vfprintf_internal_r+0xa88>
  802724:	d9014f17 	ldw	r4,1340(sp)
  802728:	b00b883a 	mov	r5,r22
  80272c:	d9800c04 	addi	r6,sp,48
  802730:	0800d740 	call	800d74 <__sprint_r>
  802734:	103b5d1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  802738:	dc800e17 	ldw	r18,56(sp)
  80273c:	d9000517 	ldw	r4,20(sp)
  802740:	d8c01904 	addi	r3,sp,100
  802744:	003f2e06 	br	802400 <___vfprintf_internal_r+0x1634>
  802748:	d8c14c17 	ldw	r3,1328(sp)
  80274c:	1880100c 	andi	r2,r3,64
  802750:	1000a026 	beq	r2,zero,8029d4 <___vfprintf_internal_r+0x1c08>
  802754:	38800017 	ldw	r2,0(r7)
  802758:	39c00104 	addi	r7,r7,4
  80275c:	d9c14015 	stw	r7,1280(sp)
  802760:	d9014b17 	ldw	r4,1324(sp)
  802764:	d9c14017 	ldw	r7,1280(sp)
  802768:	1100000d 	sth	r4,0(r2)
  80276c:	0039f306 	br	800f3c <___vfprintf_internal_r+0x170>
  802770:	d9014f17 	ldw	r4,1340(sp)
  802774:	b00b883a 	mov	r5,r22
  802778:	d9800c04 	addi	r6,sp,48
  80277c:	0800d740 	call	800d74 <__sprint_r>
  802780:	103b4a1e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  802784:	dc800e17 	ldw	r18,56(sp)
  802788:	dc400d17 	ldw	r17,52(sp)
  80278c:	d9000517 	ldw	r4,20(sp)
  802790:	d8c01904 	addi	r3,sp,100
  802794:	003f2d06 	br	80244c <___vfprintf_internal_r+0x1680>
  802798:	00800184 	movi	r2,6
  80279c:	14c09a36 	bltu	r2,r19,802a08 <___vfprintf_internal_r+0x1c3c>
  8027a0:	dcc14515 	stw	r19,1300(sp)
  8027a4:	9800010e 	bge	r19,zero,8027ac <___vfprintf_internal_r+0x19e0>
  8027a8:	d8014515 	stw	zero,1300(sp)
  8027ac:	00802074 	movhi	r2,129
  8027b0:	10b34704 	addi	r2,r2,-13028
  8027b4:	980f883a 	mov	r7,r19
  8027b8:	d8814115 	stw	r2,1284(sp)
  8027bc:	003a7206 	br	801188 <___vfprintf_internal_r+0x3bc>
  8027c0:	00bfffc4 	movi	r2,-1
  8027c4:	9880e226 	beq	r19,r2,802b50 <___vfprintf_internal_r+0x1d84>
  8027c8:	d9414d17 	ldw	r5,1332(sp)
  8027cc:	008019c4 	movi	r2,103
  8027d0:	2880dc26 	beq	r5,r2,802b44 <___vfprintf_internal_r+0x1d78>
  8027d4:	008011c4 	movi	r2,71
  8027d8:	2880da26 	beq	r5,r2,802b44 <___vfprintf_internal_r+0x1d78>
  8027dc:	d9414c17 	ldw	r5,1328(sp)
  8027e0:	d9014317 	ldw	r4,1292(sp)
  8027e4:	d9814217 	ldw	r6,1288(sp)
  8027e8:	29404014 	ori	r5,r5,256
  8027ec:	d9414c15 	stw	r5,1328(sp)
  8027f0:	2000cc16 	blt	r4,zero,802b24 <___vfprintf_internal_r+0x1d58>
  8027f4:	3021883a 	mov	r16,r6
  8027f8:	2023883a 	mov	r17,r4
  8027fc:	0039883a 	mov	fp,zero
  802800:	d9414d17 	ldw	r5,1332(sp)
  802804:	00801984 	movi	r2,102
  802808:	2880b726 	beq	r5,r2,802ae8 <___vfprintf_internal_r+0x1d1c>
  80280c:	00801184 	movi	r2,70
  802810:	2880b526 	beq	r5,r2,802ae8 <___vfprintf_internal_r+0x1d1c>
  802814:	00801944 	movi	r2,101
  802818:	2880c826 	beq	r5,r2,802b3c <___vfprintf_internal_r+0x1d70>
  80281c:	00801144 	movi	r2,69
  802820:	2880c626 	beq	r5,r2,802b3c <___vfprintf_internal_r+0x1d70>
  802824:	9829883a 	mov	r20,r19
  802828:	d9014f17 	ldw	r4,1340(sp)
  80282c:	d8800504 	addi	r2,sp,20
  802830:	880d883a 	mov	r6,r17
  802834:	d8800115 	stw	r2,4(sp)
  802838:	d8c00604 	addi	r3,sp,24
  80283c:	d8800704 	addi	r2,sp,28
  802840:	800b883a 	mov	r5,r16
  802844:	01c00084 	movi	r7,2
  802848:	d8c00215 	stw	r3,8(sp)
  80284c:	d8800315 	stw	r2,12(sp)
  802850:	dd000015 	stw	r20,0(sp)
  802854:	08030340 	call	803034 <_dtoa_r>
  802858:	d9814d17 	ldw	r6,1332(sp)
  80285c:	d8814115 	stw	r2,1284(sp)
  802860:	008019c4 	movi	r2,103
  802864:	30809526 	beq	r6,r2,802abc <___vfprintf_internal_r+0x1cf0>
  802868:	d8c14d17 	ldw	r3,1332(sp)
  80286c:	008011c4 	movi	r2,71
  802870:	18809226 	beq	r3,r2,802abc <___vfprintf_internal_r+0x1cf0>
  802874:	d9414117 	ldw	r5,1284(sp)
  802878:	d9814d17 	ldw	r6,1332(sp)
  80287c:	00801984 	movi	r2,102
  802880:	2d25883a 	add	r18,r5,r20
  802884:	30808626 	beq	r6,r2,802aa0 <___vfprintf_internal_r+0x1cd4>
  802888:	00801184 	movi	r2,70
  80288c:	30808426 	beq	r6,r2,802aa0 <___vfprintf_internal_r+0x1cd4>
  802890:	000d883a 	mov	r6,zero
  802894:	000f883a 	mov	r7,zero
  802898:	880b883a 	mov	r5,r17
  80289c:	8009883a 	mov	r4,r16
  8028a0:	08097f80 	call	8097f8 <__eqdf2>
  8028a4:	1000751e 	bne	r2,zero,802a7c <___vfprintf_internal_r+0x1cb0>
  8028a8:	9005883a 	mov	r2,r18
  8028ac:	dc800715 	stw	r18,28(sp)
  8028b0:	d9014117 	ldw	r4,1284(sp)
  8028b4:	d9414d17 	ldw	r5,1332(sp)
  8028b8:	00c019c4 	movi	r3,103
  8028bc:	1125c83a 	sub	r18,r2,r4
  8028c0:	28c06826 	beq	r5,r3,802a64 <___vfprintf_internal_r+0x1c98>
  8028c4:	008011c4 	movi	r2,71
  8028c8:	28806626 	beq	r5,r2,802a64 <___vfprintf_internal_r+0x1c98>
  8028cc:	d9000517 	ldw	r4,20(sp)
  8028d0:	d8c14d17 	ldw	r3,1332(sp)
  8028d4:	00801944 	movi	r2,101
  8028d8:	10c05516 	blt	r2,r3,802a30 <___vfprintf_internal_r+0x1c64>
  8028dc:	213fffc4 	addi	r4,r4,-1
  8028e0:	d9000515 	stw	r4,20(sp)
  8028e4:	d8c00805 	stb	r3,32(sp)
  8028e8:	2021883a 	mov	r16,r4
  8028ec:	2000c116 	blt	r4,zero,802bf4 <___vfprintf_internal_r+0x1e28>
  8028f0:	00800ac4 	movi	r2,43
  8028f4:	d8800845 	stb	r2,33(sp)
  8028f8:	00800244 	movi	r2,9
  8028fc:	1400af0e 	bge	r2,r16,802bbc <___vfprintf_internal_r+0x1df0>
  802900:	1027883a 	mov	r19,r2
  802904:	dc400b84 	addi	r17,sp,46
  802908:	8009883a 	mov	r4,r16
  80290c:	01400284 	movi	r5,10
  802910:	0809ee00 	call	809ee0 <__modsi3>
  802914:	10800c04 	addi	r2,r2,48
  802918:	8c7fffc4 	addi	r17,r17,-1
  80291c:	8009883a 	mov	r4,r16
  802920:	01400284 	movi	r5,10
  802924:	88800005 	stb	r2,0(r17)
  802928:	0809e800 	call	809e80 <__divsi3>
  80292c:	1021883a 	mov	r16,r2
  802930:	98bff516 	blt	r19,r2,802908 <___vfprintf_internal_r+0x1b3c>
  802934:	10c00c04 	addi	r3,r2,48
  802938:	d88009c4 	addi	r2,sp,39
  80293c:	108001c4 	addi	r2,r2,7
  802940:	897fffc4 	addi	r5,r17,-1
  802944:	88ffffc5 	stb	r3,-1(r17)
  802948:	2880a72e 	bgeu	r5,r2,802be8 <___vfprintf_internal_r+0x1e1c>
  80294c:	1009883a 	mov	r4,r2
  802950:	d9800804 	addi	r6,sp,32
  802954:	d8c00884 	addi	r3,sp,34
  802958:	28800003 	ldbu	r2,0(r5)
  80295c:	29400044 	addi	r5,r5,1
  802960:	18800005 	stb	r2,0(r3)
  802964:	18c00044 	addi	r3,r3,1
  802968:	293ffb36 	bltu	r5,r4,802958 <___vfprintf_internal_r+0x1b8c>
  80296c:	1987c83a 	sub	r3,r3,r6
  802970:	00800044 	movi	r2,1
  802974:	d8c14815 	stw	r3,1312(sp)
  802978:	90cf883a 	add	r7,r18,r3
  80297c:	1480960e 	bge	r2,r18,802bd8 <___vfprintf_internal_r+0x1e0c>
  802980:	39c00044 	addi	r7,r7,1
  802984:	d9c14515 	stw	r7,1300(sp)
  802988:	38003416 	blt	r7,zero,802a5c <___vfprintf_internal_r+0x1c90>
  80298c:	e0803fcc 	andi	r2,fp,255
  802990:	1080201c 	xori	r2,r2,128
  802994:	10bfe004 	addi	r2,r2,-128
  802998:	10004e26 	beq	r2,zero,802ad4 <___vfprintf_internal_r+0x1d08>
  80299c:	00800b44 	movi	r2,45
  8029a0:	dc814715 	stw	r18,1308(sp)
  8029a4:	d8014615 	stw	zero,1304(sp)
  8029a8:	d8800405 	stb	r2,16(sp)
  8029ac:	003bab06 	br	80185c <___vfprintf_internal_r+0xa90>
  8029b0:	00800b44 	movi	r2,45
  8029b4:	d8800405 	stb	r2,16(sp)
  8029b8:	003d2d06 	br	801e70 <___vfprintf_internal_r+0x10a4>
  8029bc:	d9014f17 	ldw	r4,1340(sp)
  8029c0:	b00b883a 	mov	r5,r22
  8029c4:	d9800c04 	addi	r6,sp,48
  8029c8:	0800d740 	call	800d74 <__sprint_r>
  8029cc:	103ab71e 	bne	r2,zero,8014ac <___vfprintf_internal_r+0x6e0>
  8029d0:	003ab506 	br	8014a8 <___vfprintf_internal_r+0x6dc>
  8029d4:	38800017 	ldw	r2,0(r7)
  8029d8:	39c00104 	addi	r7,r7,4
  8029dc:	d9c14015 	stw	r7,1280(sp)
  8029e0:	d9414b17 	ldw	r5,1324(sp)
  8029e4:	d9c14017 	ldw	r7,1280(sp)
  8029e8:	11400015 	stw	r5,0(r2)
  8029ec:	00395306 	br	800f3c <___vfprintf_internal_r+0x170>
  8029f0:	980f883a 	mov	r7,r19
  8029f4:	dcc14515 	stw	r19,1300(sp)
  8029f8:	d8014615 	stw	zero,1304(sp)
  8029fc:	003b9506 	br	801854 <___vfprintf_internal_r+0xa88>
  802a00:	0027883a 	mov	r19,zero
  802a04:	00397206 	br	800fd0 <___vfprintf_internal_r+0x204>
  802a08:	00c02074 	movhi	r3,129
  802a0c:	18f34704 	addi	r3,r3,-13028
  802a10:	100f883a 	mov	r7,r2
  802a14:	d8814515 	stw	r2,1300(sp)
  802a18:	d8c14115 	stw	r3,1284(sp)
  802a1c:	0039da06 	br	801188 <___vfprintf_internal_r+0x3bc>
  802a20:	00802074 	movhi	r2,129
  802a24:	10b34604 	addi	r2,r2,-13032
  802a28:	d8814115 	stw	r2,1284(sp)
  802a2c:	003d1606 	br	801e88 <___vfprintf_internal_r+0x10bc>
  802a30:	d9414d17 	ldw	r5,1332(sp)
  802a34:	00801984 	movi	r2,102
  802a38:	28804926 	beq	r5,r2,802b60 <___vfprintf_internal_r+0x1d94>
  802a3c:	200f883a 	mov	r7,r4
  802a40:	24805716 	blt	r4,r18,802ba0 <___vfprintf_internal_r+0x1dd4>
  802a44:	d9414c17 	ldw	r5,1328(sp)
  802a48:	2880004c 	andi	r2,r5,1
  802a4c:	10000126 	beq	r2,zero,802a54 <___vfprintf_internal_r+0x1c88>
  802a50:	21c00044 	addi	r7,r4,1
  802a54:	d9c14515 	stw	r7,1300(sp)
  802a58:	383fcc0e 	bge	r7,zero,80298c <___vfprintf_internal_r+0x1bc0>
  802a5c:	d8014515 	stw	zero,1300(sp)
  802a60:	003fca06 	br	80298c <___vfprintf_internal_r+0x1bc0>
  802a64:	d9000517 	ldw	r4,20(sp)
  802a68:	00bfff04 	movi	r2,-4
  802a6c:	1100480e 	bge	r2,r4,802b90 <___vfprintf_internal_r+0x1dc4>
  802a70:	99004716 	blt	r19,r4,802b90 <___vfprintf_internal_r+0x1dc4>
  802a74:	d8c14d15 	stw	r3,1332(sp)
  802a78:	003ff006 	br	802a3c <___vfprintf_internal_r+0x1c70>
  802a7c:	d8800717 	ldw	r2,28(sp)
  802a80:	14bf8b2e 	bgeu	r2,r18,8028b0 <___vfprintf_internal_r+0x1ae4>
  802a84:	9007883a 	mov	r3,r18
  802a88:	01000c04 	movi	r4,48
  802a8c:	11000005 	stb	r4,0(r2)
  802a90:	10800044 	addi	r2,r2,1
  802a94:	d8800715 	stw	r2,28(sp)
  802a98:	18bffc1e 	bne	r3,r2,802a8c <___vfprintf_internal_r+0x1cc0>
  802a9c:	003f8406 	br	8028b0 <___vfprintf_internal_r+0x1ae4>
  802aa0:	d8814117 	ldw	r2,1284(sp)
  802aa4:	10c00007 	ldb	r3,0(r2)
  802aa8:	00800c04 	movi	r2,48
  802aac:	18805b26 	beq	r3,r2,802c1c <___vfprintf_internal_r+0x1e50>
  802ab0:	d9000517 	ldw	r4,20(sp)
  802ab4:	9125883a 	add	r18,r18,r4
  802ab8:	003f7506 	br	802890 <___vfprintf_internal_r+0x1ac4>
  802abc:	d9014c17 	ldw	r4,1328(sp)
  802ac0:	2080004c 	andi	r2,r4,1
  802ac4:	1005003a 	cmpeq	r2,r2,zero
  802ac8:	103f6a26 	beq	r2,zero,802874 <___vfprintf_internal_r+0x1aa8>
  802acc:	d8800717 	ldw	r2,28(sp)
  802ad0:	003f7706 	br	8028b0 <___vfprintf_internal_r+0x1ae4>
  802ad4:	d9c14515 	stw	r7,1300(sp)
  802ad8:	38004d16 	blt	r7,zero,802c10 <___vfprintf_internal_r+0x1e44>
  802adc:	dc814715 	stw	r18,1308(sp)
  802ae0:	d8014615 	stw	zero,1304(sp)
  802ae4:	003b5b06 	br	801854 <___vfprintf_internal_r+0xa88>
  802ae8:	d9014f17 	ldw	r4,1340(sp)
  802aec:	d8800504 	addi	r2,sp,20
  802af0:	d8800115 	stw	r2,4(sp)
  802af4:	d8c00604 	addi	r3,sp,24
  802af8:	d8800704 	addi	r2,sp,28
  802afc:	800b883a 	mov	r5,r16
  802b00:	880d883a 	mov	r6,r17
  802b04:	01c000c4 	movi	r7,3
  802b08:	d8c00215 	stw	r3,8(sp)
  802b0c:	d8800315 	stw	r2,12(sp)
  802b10:	dcc00015 	stw	r19,0(sp)
  802b14:	9829883a 	mov	r20,r19
  802b18:	08030340 	call	803034 <_dtoa_r>
  802b1c:	d8814115 	stw	r2,1284(sp)
  802b20:	003f5106 	br	802868 <___vfprintf_internal_r+0x1a9c>
  802b24:	d8c14217 	ldw	r3,1288(sp)
  802b28:	d9014317 	ldw	r4,1292(sp)
  802b2c:	07000b44 	movi	fp,45
  802b30:	1821883a 	mov	r16,r3
  802b34:	2460003c 	xorhi	r17,r4,32768
  802b38:	003f3106 	br	802800 <___vfprintf_internal_r+0x1a34>
  802b3c:	9d000044 	addi	r20,r19,1
  802b40:	003f3906 	br	802828 <___vfprintf_internal_r+0x1a5c>
  802b44:	983f251e 	bne	r19,zero,8027dc <___vfprintf_internal_r+0x1a10>
  802b48:	04c00044 	movi	r19,1
  802b4c:	003f2306 	br	8027dc <___vfprintf_internal_r+0x1a10>
  802b50:	04c00184 	movi	r19,6
  802b54:	003f2106 	br	8027dc <___vfprintf_internal_r+0x1a10>
  802b58:	d8014515 	stw	zero,1300(sp)
  802b5c:	003eee06 	br	802718 <___vfprintf_internal_r+0x194c>
  802b60:	200f883a 	mov	r7,r4
  802b64:	0100370e 	bge	zero,r4,802c44 <___vfprintf_internal_r+0x1e78>
  802b68:	9800031e 	bne	r19,zero,802b78 <___vfprintf_internal_r+0x1dac>
  802b6c:	d9814c17 	ldw	r6,1328(sp)
  802b70:	3080004c 	andi	r2,r6,1
  802b74:	103fb726 	beq	r2,zero,802a54 <___vfprintf_internal_r+0x1c88>
  802b78:	20800044 	addi	r2,r4,1
  802b7c:	98a7883a 	add	r19,r19,r2
  802b80:	dcc14515 	stw	r19,1300(sp)
  802b84:	980f883a 	mov	r7,r19
  802b88:	983f800e 	bge	r19,zero,80298c <___vfprintf_internal_r+0x1bc0>
  802b8c:	003fb306 	br	802a5c <___vfprintf_internal_r+0x1c90>
  802b90:	d9814d17 	ldw	r6,1332(sp)
  802b94:	31bfff84 	addi	r6,r6,-2
  802b98:	d9814d15 	stw	r6,1332(sp)
  802b9c:	003f4c06 	br	8028d0 <___vfprintf_internal_r+0x1b04>
  802ba0:	0100180e 	bge	zero,r4,802c04 <___vfprintf_internal_r+0x1e38>
  802ba4:	00800044 	movi	r2,1
  802ba8:	1485883a 	add	r2,r2,r18
  802bac:	d8814515 	stw	r2,1300(sp)
  802bb0:	100f883a 	mov	r7,r2
  802bb4:	103f750e 	bge	r2,zero,80298c <___vfprintf_internal_r+0x1bc0>
  802bb8:	003fa806 	br	802a5c <___vfprintf_internal_r+0x1c90>
  802bbc:	80c00c04 	addi	r3,r16,48
  802bc0:	00800c04 	movi	r2,48
  802bc4:	d8c008c5 	stb	r3,35(sp)
  802bc8:	d9800804 	addi	r6,sp,32
  802bcc:	d8c00904 	addi	r3,sp,36
  802bd0:	d8800885 	stb	r2,34(sp)
  802bd4:	003f6506 	br	80296c <___vfprintf_internal_r+0x1ba0>
  802bd8:	d9014c17 	ldw	r4,1328(sp)
  802bdc:	2084703a 	and	r2,r4,r2
  802be0:	103f9c26 	beq	r2,zero,802a54 <___vfprintf_internal_r+0x1c88>
  802be4:	003f6606 	br	802980 <___vfprintf_internal_r+0x1bb4>
  802be8:	d9800804 	addi	r6,sp,32
  802bec:	d8c00884 	addi	r3,sp,34
  802bf0:	003f5e06 	br	80296c <___vfprintf_internal_r+0x1ba0>
  802bf4:	00800b44 	movi	r2,45
  802bf8:	0121c83a 	sub	r16,zero,r4
  802bfc:	d8800845 	stb	r2,33(sp)
  802c00:	003f3d06 	br	8028f8 <___vfprintf_internal_r+0x1b2c>
  802c04:	00800084 	movi	r2,2
  802c08:	1105c83a 	sub	r2,r2,r4
  802c0c:	003fe606 	br	802ba8 <___vfprintf_internal_r+0x1ddc>
  802c10:	d8014515 	stw	zero,1300(sp)
  802c14:	dc814715 	stw	r18,1308(sp)
  802c18:	003fb106 	br	802ae0 <___vfprintf_internal_r+0x1d14>
  802c1c:	000d883a 	mov	r6,zero
  802c20:	000f883a 	mov	r7,zero
  802c24:	8009883a 	mov	r4,r16
  802c28:	880b883a 	mov	r5,r17
  802c2c:	08098800 	call	809880 <__nedf2>
  802c30:	103f9f26 	beq	r2,zero,802ab0 <___vfprintf_internal_r+0x1ce4>
  802c34:	00800044 	movi	r2,1
  802c38:	1509c83a 	sub	r4,r2,r20
  802c3c:	d9000515 	stw	r4,20(sp)
  802c40:	003f9b06 	br	802ab0 <___vfprintf_internal_r+0x1ce4>
  802c44:	98000d1e 	bne	r19,zero,802c7c <___vfprintf_internal_r+0x1eb0>
  802c48:	d8c14c17 	ldw	r3,1328(sp)
  802c4c:	1880004c 	andi	r2,r3,1
  802c50:	10000a1e 	bne	r2,zero,802c7c <___vfprintf_internal_r+0x1eb0>
  802c54:	01000044 	movi	r4,1
  802c58:	200f883a 	mov	r7,r4
  802c5c:	d9014515 	stw	r4,1300(sp)
  802c60:	003f4a06 	br	80298c <___vfprintf_internal_r+0x1bc0>
  802c64:	3cc00017 	ldw	r19,0(r7)
  802c68:	39c00104 	addi	r7,r7,4
  802c6c:	983d0e0e 	bge	r19,zero,8020a8 <___vfprintf_internal_r+0x12dc>
  802c70:	b8c00007 	ldb	r3,0(r23)
  802c74:	04ffffc4 	movi	r19,-1
  802c78:	0038d306 	br	800fc8 <___vfprintf_internal_r+0x1fc>
  802c7c:	9cc00084 	addi	r19,r19,2
  802c80:	dcc14515 	stw	r19,1300(sp)
  802c84:	980f883a 	mov	r7,r19
  802c88:	983f400e 	bge	r19,zero,80298c <___vfprintf_internal_r+0x1bc0>
  802c8c:	003f7306 	br	802a5c <___vfprintf_internal_r+0x1c90>

00802c90 <__vfprintf_internal>:
  802c90:	00802074 	movhi	r2,129
  802c94:	10ba9304 	addi	r2,r2,-5556
  802c98:	2013883a 	mov	r9,r4
  802c9c:	11000017 	ldw	r4,0(r2)
  802ca0:	2805883a 	mov	r2,r5
  802ca4:	300f883a 	mov	r7,r6
  802ca8:	480b883a 	mov	r5,r9
  802cac:	100d883a 	mov	r6,r2
  802cb0:	0800dcc1 	jmpi	800dcc <___vfprintf_internal_r>

00802cb4 <__swsetup_r>:
  802cb4:	00802074 	movhi	r2,129
  802cb8:	10ba9304 	addi	r2,r2,-5556
  802cbc:	10c00017 	ldw	r3,0(r2)
  802cc0:	defffd04 	addi	sp,sp,-12
  802cc4:	dc400115 	stw	r17,4(sp)
  802cc8:	dc000015 	stw	r16,0(sp)
  802ccc:	dfc00215 	stw	ra,8(sp)
  802cd0:	2023883a 	mov	r17,r4
  802cd4:	2821883a 	mov	r16,r5
  802cd8:	18000226 	beq	r3,zero,802ce4 <__swsetup_r+0x30>
  802cdc:	18800e17 	ldw	r2,56(r3)
  802ce0:	10001f26 	beq	r2,zero,802d60 <__swsetup_r+0xac>
  802ce4:	8100030b 	ldhu	r4,12(r16)
  802ce8:	2080020c 	andi	r2,r4,8
  802cec:	10002826 	beq	r2,zero,802d90 <__swsetup_r+0xdc>
  802cf0:	81400417 	ldw	r5,16(r16)
  802cf4:	28001d26 	beq	r5,zero,802d6c <__swsetup_r+0xb8>
  802cf8:	2080004c 	andi	r2,r4,1
  802cfc:	1005003a 	cmpeq	r2,r2,zero
  802d00:	10000b26 	beq	r2,zero,802d30 <__swsetup_r+0x7c>
  802d04:	2080008c 	andi	r2,r4,2
  802d08:	10001226 	beq	r2,zero,802d54 <__swsetup_r+0xa0>
  802d0c:	0005883a 	mov	r2,zero
  802d10:	80800215 	stw	r2,8(r16)
  802d14:	28000b26 	beq	r5,zero,802d44 <__swsetup_r+0x90>
  802d18:	0005883a 	mov	r2,zero
  802d1c:	dfc00217 	ldw	ra,8(sp)
  802d20:	dc400117 	ldw	r17,4(sp)
  802d24:	dc000017 	ldw	r16,0(sp)
  802d28:	dec00304 	addi	sp,sp,12
  802d2c:	f800283a 	ret
  802d30:	80800517 	ldw	r2,20(r16)
  802d34:	80000215 	stw	zero,8(r16)
  802d38:	0085c83a 	sub	r2,zero,r2
  802d3c:	80800615 	stw	r2,24(r16)
  802d40:	283ff51e 	bne	r5,zero,802d18 <__swsetup_r+0x64>
  802d44:	2080200c 	andi	r2,r4,128
  802d48:	103ff326 	beq	r2,zero,802d18 <__swsetup_r+0x64>
  802d4c:	00bfffc4 	movi	r2,-1
  802d50:	003ff206 	br	802d1c <__swsetup_r+0x68>
  802d54:	80800517 	ldw	r2,20(r16)
  802d58:	80800215 	stw	r2,8(r16)
  802d5c:	003fed06 	br	802d14 <__swsetup_r+0x60>
  802d60:	1809883a 	mov	r4,r3
  802d64:	08048800 	call	804880 <__sinit>
  802d68:	003fde06 	br	802ce4 <__swsetup_r+0x30>
  802d6c:	20c0a00c 	andi	r3,r4,640
  802d70:	00808004 	movi	r2,512
  802d74:	18bfe026 	beq	r3,r2,802cf8 <__swsetup_r+0x44>
  802d78:	8809883a 	mov	r4,r17
  802d7c:	800b883a 	mov	r5,r16
  802d80:	080562c0 	call	80562c <__smakebuf_r>
  802d84:	8100030b 	ldhu	r4,12(r16)
  802d88:	81400417 	ldw	r5,16(r16)
  802d8c:	003fda06 	br	802cf8 <__swsetup_r+0x44>
  802d90:	2080040c 	andi	r2,r4,16
  802d94:	103fed26 	beq	r2,zero,802d4c <__swsetup_r+0x98>
  802d98:	2080010c 	andi	r2,r4,4
  802d9c:	10001226 	beq	r2,zero,802de8 <__swsetup_r+0x134>
  802da0:	81400c17 	ldw	r5,48(r16)
  802da4:	28000526 	beq	r5,zero,802dbc <__swsetup_r+0x108>
  802da8:	80801004 	addi	r2,r16,64
  802dac:	28800226 	beq	r5,r2,802db8 <__swsetup_r+0x104>
  802db0:	8809883a 	mov	r4,r17
  802db4:	0804c380 	call	804c38 <_free_r>
  802db8:	80000c15 	stw	zero,48(r16)
  802dbc:	8080030b 	ldhu	r2,12(r16)
  802dc0:	81400417 	ldw	r5,16(r16)
  802dc4:	80000115 	stw	zero,4(r16)
  802dc8:	10bff6cc 	andi	r2,r2,65499
  802dcc:	8080030d 	sth	r2,12(r16)
  802dd0:	81400015 	stw	r5,0(r16)
  802dd4:	8080030b 	ldhu	r2,12(r16)
  802dd8:	10800214 	ori	r2,r2,8
  802ddc:	113fffcc 	andi	r4,r2,65535
  802de0:	8080030d 	sth	r2,12(r16)
  802de4:	003fc306 	br	802cf4 <__swsetup_r+0x40>
  802de8:	81400417 	ldw	r5,16(r16)
  802dec:	003ff906 	br	802dd4 <__swsetup_r+0x120>

00802df0 <quorem>:
  802df0:	28c00417 	ldw	r3,16(r5)
  802df4:	20800417 	ldw	r2,16(r4)
  802df8:	defff104 	addi	sp,sp,-60
  802dfc:	dfc00e15 	stw	ra,56(sp)
  802e00:	df000d15 	stw	fp,52(sp)
  802e04:	ddc00c15 	stw	r23,48(sp)
  802e08:	dd800b15 	stw	r22,44(sp)
  802e0c:	dd400a15 	stw	r21,40(sp)
  802e10:	dd000915 	stw	r20,36(sp)
  802e14:	dcc00815 	stw	r19,32(sp)
  802e18:	dc800715 	stw	r18,28(sp)
  802e1c:	dc400615 	stw	r17,24(sp)
  802e20:	dc000515 	stw	r16,20(sp)
  802e24:	d9000315 	stw	r4,12(sp)
  802e28:	d9400415 	stw	r5,16(sp)
  802e2c:	10c07f16 	blt	r2,r3,80302c <quorem+0x23c>
  802e30:	1d3fffc4 	addi	r20,r3,-1
  802e34:	d8c00417 	ldw	r3,16(sp)
  802e38:	d9000317 	ldw	r4,12(sp)
  802e3c:	a505883a 	add	r2,r20,r20
  802e40:	1085883a 	add	r2,r2,r2
  802e44:	1cc00504 	addi	r19,r3,20
  802e48:	25c00504 	addi	r23,r4,20
  802e4c:	98ad883a 	add	r22,r19,r2
  802e50:	15c7883a 	add	r3,r2,r23
  802e54:	b1400017 	ldw	r5,0(r22)
  802e58:	19000017 	ldw	r4,0(r3)
  802e5c:	d8c00015 	stw	r3,0(sp)
  802e60:	29400044 	addi	r5,r5,1
  802e64:	d9000215 	stw	r4,8(sp)
  802e68:	0809f400 	call	809f40 <__udivsi3>
  802e6c:	1039883a 	mov	fp,r2
  802e70:	10003d1e 	bne	r2,zero,802f68 <quorem+0x178>
  802e74:	d9400417 	ldw	r5,16(sp)
  802e78:	d9000317 	ldw	r4,12(sp)
  802e7c:	08063580 	call	806358 <__mcmp>
  802e80:	10002c16 	blt	r2,zero,802f34 <quorem+0x144>
  802e84:	e7000044 	addi	fp,fp,1
  802e88:	b80f883a 	mov	r7,r23
  802e8c:	0011883a 	mov	r8,zero
  802e90:	0009883a 	mov	r4,zero
  802e94:	99400017 	ldw	r5,0(r19)
  802e98:	38c00017 	ldw	r3,0(r7)
  802e9c:	9cc00104 	addi	r19,r19,4
  802ea0:	28bfffcc 	andi	r2,r5,65535
  802ea4:	2085883a 	add	r2,r4,r2
  802ea8:	11bfffcc 	andi	r6,r2,65535
  802eac:	193fffcc 	andi	r4,r3,65535
  802eb0:	1004d43a 	srli	r2,r2,16
  802eb4:	280ad43a 	srli	r5,r5,16
  802eb8:	2189c83a 	sub	r4,r4,r6
  802ebc:	2209883a 	add	r4,r4,r8
  802ec0:	1806d43a 	srli	r3,r3,16
  802ec4:	288b883a 	add	r5,r5,r2
  802ec8:	200dd43a 	srai	r6,r4,16
  802ecc:	28bfffcc 	andi	r2,r5,65535
  802ed0:	1887c83a 	sub	r3,r3,r2
  802ed4:	1987883a 	add	r3,r3,r6
  802ed8:	3900000d 	sth	r4,0(r7)
  802edc:	38c0008d 	sth	r3,2(r7)
  802ee0:	2808d43a 	srli	r4,r5,16
  802ee4:	39c00104 	addi	r7,r7,4
  802ee8:	1811d43a 	srai	r8,r3,16
  802eec:	b4ffe92e 	bgeu	r22,r19,802e94 <quorem+0xa4>
  802ef0:	a505883a 	add	r2,r20,r20
  802ef4:	1085883a 	add	r2,r2,r2
  802ef8:	b885883a 	add	r2,r23,r2
  802efc:	10c00017 	ldw	r3,0(r2)
  802f00:	18000c1e 	bne	r3,zero,802f34 <quorem+0x144>
  802f04:	113fff04 	addi	r4,r2,-4
  802f08:	b900082e 	bgeu	r23,r4,802f2c <quorem+0x13c>
  802f0c:	10bfff17 	ldw	r2,-4(r2)
  802f10:	10000326 	beq	r2,zero,802f20 <quorem+0x130>
  802f14:	00000506 	br	802f2c <quorem+0x13c>
  802f18:	20800017 	ldw	r2,0(r4)
  802f1c:	1000031e 	bne	r2,zero,802f2c <quorem+0x13c>
  802f20:	213fff04 	addi	r4,r4,-4
  802f24:	a53fffc4 	addi	r20,r20,-1
  802f28:	b93ffb36 	bltu	r23,r4,802f18 <quorem+0x128>
  802f2c:	d9000317 	ldw	r4,12(sp)
  802f30:	25000415 	stw	r20,16(r4)
  802f34:	e005883a 	mov	r2,fp
  802f38:	dfc00e17 	ldw	ra,56(sp)
  802f3c:	df000d17 	ldw	fp,52(sp)
  802f40:	ddc00c17 	ldw	r23,48(sp)
  802f44:	dd800b17 	ldw	r22,44(sp)
  802f48:	dd400a17 	ldw	r21,40(sp)
  802f4c:	dd000917 	ldw	r20,36(sp)
  802f50:	dcc00817 	ldw	r19,32(sp)
  802f54:	dc800717 	ldw	r18,28(sp)
  802f58:	dc400617 	ldw	r17,24(sp)
  802f5c:	dc000517 	ldw	r16,20(sp)
  802f60:	dec00f04 	addi	sp,sp,60
  802f64:	f800283a 	ret
  802f68:	b823883a 	mov	r17,r23
  802f6c:	9825883a 	mov	r18,r19
  802f70:	d8000115 	stw	zero,4(sp)
  802f74:	002b883a 	mov	r21,zero
  802f78:	94000017 	ldw	r16,0(r18)
  802f7c:	e009883a 	mov	r4,fp
  802f80:	94800104 	addi	r18,r18,4
  802f84:	817fffcc 	andi	r5,r16,65535
  802f88:	0800b9c0 	call	800b9c <__mulsi3>
  802f8c:	800ad43a 	srli	r5,r16,16
  802f90:	e009883a 	mov	r4,fp
  802f94:	a8a1883a 	add	r16,r21,r2
  802f98:	0800b9c0 	call	800b9c <__mulsi3>
  802f9c:	89000017 	ldw	r4,0(r17)
  802fa0:	80ffffcc 	andi	r3,r16,65535
  802fa4:	8020d43a 	srli	r16,r16,16
  802fa8:	217fffcc 	andi	r5,r4,65535
  802fac:	28cbc83a 	sub	r5,r5,r3
  802fb0:	d8c00117 	ldw	r3,4(sp)
  802fb4:	2008d43a 	srli	r4,r4,16
  802fb8:	1405883a 	add	r2,r2,r16
  802fbc:	28cb883a 	add	r5,r5,r3
  802fc0:	280dd43a 	srai	r6,r5,16
  802fc4:	10ffffcc 	andi	r3,r2,65535
  802fc8:	20c9c83a 	sub	r4,r4,r3
  802fcc:	2189883a 	add	r4,r4,r6
  802fd0:	8900008d 	sth	r4,2(r17)
  802fd4:	2009d43a 	srai	r4,r4,16
  802fd8:	8940000d 	sth	r5,0(r17)
  802fdc:	102ad43a 	srli	r21,r2,16
  802fe0:	8c400104 	addi	r17,r17,4
  802fe4:	d9000115 	stw	r4,4(sp)
  802fe8:	b4bfe32e 	bgeu	r22,r18,802f78 <quorem+0x188>
  802fec:	d9000217 	ldw	r4,8(sp)
  802ff0:	203fa01e 	bne	r4,zero,802e74 <quorem+0x84>
  802ff4:	d8800017 	ldw	r2,0(sp)
  802ff8:	10ffff04 	addi	r3,r2,-4
  802ffc:	b8c0082e 	bgeu	r23,r3,803020 <quorem+0x230>
  803000:	10bfff17 	ldw	r2,-4(r2)
  803004:	10000326 	beq	r2,zero,803014 <quorem+0x224>
  803008:	00000506 	br	803020 <quorem+0x230>
  80300c:	18800017 	ldw	r2,0(r3)
  803010:	1000031e 	bne	r2,zero,803020 <quorem+0x230>
  803014:	18ffff04 	addi	r3,r3,-4
  803018:	a53fffc4 	addi	r20,r20,-1
  80301c:	b8fffb36 	bltu	r23,r3,80300c <quorem+0x21c>
  803020:	d8c00317 	ldw	r3,12(sp)
  803024:	1d000415 	stw	r20,16(r3)
  803028:	003f9206 	br	802e74 <quorem+0x84>
  80302c:	0005883a 	mov	r2,zero
  803030:	003fc106 	br	802f38 <quorem+0x148>

00803034 <_dtoa_r>:
  803034:	22001017 	ldw	r8,64(r4)
  803038:	deffda04 	addi	sp,sp,-152
  80303c:	dd402115 	stw	r21,132(sp)
  803040:	dd002015 	stw	r20,128(sp)
  803044:	dc801e15 	stw	r18,120(sp)
  803048:	dc401d15 	stw	r17,116(sp)
  80304c:	dfc02515 	stw	ra,148(sp)
  803050:	df002415 	stw	fp,144(sp)
  803054:	ddc02315 	stw	r23,140(sp)
  803058:	dd802215 	stw	r22,136(sp)
  80305c:	dcc01f15 	stw	r19,124(sp)
  803060:	dc001c15 	stw	r16,112(sp)
  803064:	d9001615 	stw	r4,88(sp)
  803068:	3023883a 	mov	r17,r6
  80306c:	2829883a 	mov	r20,r5
  803070:	d9c01715 	stw	r7,92(sp)
  803074:	dc802817 	ldw	r18,160(sp)
  803078:	302b883a 	mov	r21,r6
  80307c:	40000a26 	beq	r8,zero,8030a8 <_dtoa_r+0x74>
  803080:	20801117 	ldw	r2,68(r4)
  803084:	400b883a 	mov	r5,r8
  803088:	40800115 	stw	r2,4(r8)
  80308c:	20c01117 	ldw	r3,68(r4)
  803090:	00800044 	movi	r2,1
  803094:	10c4983a 	sll	r2,r2,r3
  803098:	40800215 	stw	r2,8(r8)
  80309c:	08061fc0 	call	8061fc <_Bfree>
  8030a0:	d8c01617 	ldw	r3,88(sp)
  8030a4:	18001015 	stw	zero,64(r3)
  8030a8:	8800a316 	blt	r17,zero,803338 <_dtoa_r+0x304>
  8030ac:	90000015 	stw	zero,0(r18)
  8030b0:	a8dffc2c 	andhi	r3,r21,32752
  8030b4:	009ffc34 	movhi	r2,32752
  8030b8:	18809126 	beq	r3,r2,803300 <_dtoa_r+0x2cc>
  8030bc:	000d883a 	mov	r6,zero
  8030c0:	000f883a 	mov	r7,zero
  8030c4:	a009883a 	mov	r4,r20
  8030c8:	a80b883a 	mov	r5,r21
  8030cc:	dd001215 	stw	r20,72(sp)
  8030d0:	dd401315 	stw	r21,76(sp)
  8030d4:	08098800 	call	809880 <__nedf2>
  8030d8:	1000171e 	bne	r2,zero,803138 <_dtoa_r+0x104>
  8030dc:	d9802717 	ldw	r6,156(sp)
  8030e0:	00800044 	movi	r2,1
  8030e4:	30800015 	stw	r2,0(r6)
  8030e8:	d8802917 	ldw	r2,164(sp)
  8030ec:	10029b26 	beq	r2,zero,803b5c <_dtoa_r+0xb28>
  8030f0:	d9002917 	ldw	r4,164(sp)
  8030f4:	00802074 	movhi	r2,129
  8030f8:	10b35544 	addi	r2,r2,-12971
  8030fc:	10ffffc4 	addi	r3,r2,-1
  803100:	20800015 	stw	r2,0(r4)
  803104:	1805883a 	mov	r2,r3
  803108:	dfc02517 	ldw	ra,148(sp)
  80310c:	df002417 	ldw	fp,144(sp)
  803110:	ddc02317 	ldw	r23,140(sp)
  803114:	dd802217 	ldw	r22,136(sp)
  803118:	dd402117 	ldw	r21,132(sp)
  80311c:	dd002017 	ldw	r20,128(sp)
  803120:	dcc01f17 	ldw	r19,124(sp)
  803124:	dc801e17 	ldw	r18,120(sp)
  803128:	dc401d17 	ldw	r17,116(sp)
  80312c:	dc001c17 	ldw	r16,112(sp)
  803130:	dec02604 	addi	sp,sp,152
  803134:	f800283a 	ret
  803138:	d9001617 	ldw	r4,88(sp)
  80313c:	d9401217 	ldw	r5,72(sp)
  803140:	d8800104 	addi	r2,sp,4
  803144:	a80d883a 	mov	r6,r21
  803148:	d9c00204 	addi	r7,sp,8
  80314c:	d8800015 	stw	r2,0(sp)
  803150:	08068380 	call	806838 <__d2b>
  803154:	d8800715 	stw	r2,28(sp)
  803158:	a804d53a 	srli	r2,r21,20
  80315c:	1101ffcc 	andi	r4,r2,2047
  803160:	20008626 	beq	r4,zero,80337c <_dtoa_r+0x348>
  803164:	d8c01217 	ldw	r3,72(sp)
  803168:	00800434 	movhi	r2,16
  80316c:	10bfffc4 	addi	r2,r2,-1
  803170:	ddc00117 	ldw	r23,4(sp)
  803174:	a884703a 	and	r2,r21,r2
  803178:	1811883a 	mov	r8,r3
  80317c:	124ffc34 	orhi	r9,r2,16368
  803180:	25bf0044 	addi	r22,r4,-1023
  803184:	d8000815 	stw	zero,32(sp)
  803188:	0005883a 	mov	r2,zero
  80318c:	00cffe34 	movhi	r3,16376
  803190:	480b883a 	mov	r5,r9
  803194:	4009883a 	mov	r4,r8
  803198:	180f883a 	mov	r7,r3
  80319c:	100d883a 	mov	r6,r2
  8031a0:	08090e80 	call	8090e8 <__subdf3>
  8031a4:	0218dbf4 	movhi	r8,25455
  8031a8:	4210d844 	addi	r8,r8,17249
  8031ac:	024ff4f4 	movhi	r9,16339
  8031b0:	4a61e9c4 	addi	r9,r9,-30809
  8031b4:	480f883a 	mov	r7,r9
  8031b8:	400d883a 	mov	r6,r8
  8031bc:	180b883a 	mov	r5,r3
  8031c0:	1009883a 	mov	r4,r2
  8031c4:	08091dc0 	call	8091dc <__muldf3>
  8031c8:	0222d874 	movhi	r8,35681
  8031cc:	42322cc4 	addi	r8,r8,-14157
  8031d0:	024ff1f4 	movhi	r9,16327
  8031d4:	4a628a04 	addi	r9,r9,-30168
  8031d8:	480f883a 	mov	r7,r9
  8031dc:	400d883a 	mov	r6,r8
  8031e0:	180b883a 	mov	r5,r3
  8031e4:	1009883a 	mov	r4,r2
  8031e8:	08091680 	call	809168 <__adddf3>
  8031ec:	b009883a 	mov	r4,r22
  8031f0:	1021883a 	mov	r16,r2
  8031f4:	1823883a 	mov	r17,r3
  8031f8:	0809aa00 	call	809aa0 <__floatsidf>
  8031fc:	021427f4 	movhi	r8,20639
  803200:	421e7ec4 	addi	r8,r8,31227
  803204:	024ff4f4 	movhi	r9,16339
  803208:	4a5104c4 	addi	r9,r9,17427
  80320c:	480f883a 	mov	r7,r9
  803210:	400d883a 	mov	r6,r8
  803214:	180b883a 	mov	r5,r3
  803218:	1009883a 	mov	r4,r2
  80321c:	08091dc0 	call	8091dc <__muldf3>
  803220:	180f883a 	mov	r7,r3
  803224:	880b883a 	mov	r5,r17
  803228:	100d883a 	mov	r6,r2
  80322c:	8009883a 	mov	r4,r16
  803230:	08091680 	call	809168 <__adddf3>
  803234:	1009883a 	mov	r4,r2
  803238:	180b883a 	mov	r5,r3
  80323c:	1021883a 	mov	r16,r2
  803240:	1823883a 	mov	r17,r3
  803244:	0809b980 	call	809b98 <__fixdfsi>
  803248:	000d883a 	mov	r6,zero
  80324c:	000f883a 	mov	r7,zero
  803250:	8009883a 	mov	r4,r16
  803254:	880b883a 	mov	r5,r17
  803258:	d8800d15 	stw	r2,52(sp)
  80325c:	0809a180 	call	809a18 <__ltdf2>
  803260:	10031716 	blt	r2,zero,803ec0 <_dtoa_r+0xe8c>
  803264:	d8c00d17 	ldw	r3,52(sp)
  803268:	00800584 	movi	r2,22
  80326c:	10c1482e 	bgeu	r2,r3,803790 <_dtoa_r+0x75c>
  803270:	01000044 	movi	r4,1
  803274:	d9000c15 	stw	r4,48(sp)
  803278:	bd85c83a 	sub	r2,r23,r22
  80327c:	11bfffc4 	addi	r6,r2,-1
  803280:	30030b16 	blt	r6,zero,803eb0 <_dtoa_r+0xe7c>
  803284:	d9800a15 	stw	r6,40(sp)
  803288:	d8001115 	stw	zero,68(sp)
  80328c:	d8c00d17 	ldw	r3,52(sp)
  803290:	1802ff16 	blt	r3,zero,803e90 <_dtoa_r+0xe5c>
  803294:	d9000a17 	ldw	r4,40(sp)
  803298:	d8c00915 	stw	r3,36(sp)
  80329c:	d8001015 	stw	zero,64(sp)
  8032a0:	20c9883a 	add	r4,r4,r3
  8032a4:	d9000a15 	stw	r4,40(sp)
  8032a8:	d9001717 	ldw	r4,92(sp)
  8032ac:	00800244 	movi	r2,9
  8032b0:	11004636 	bltu	r2,r4,8033cc <_dtoa_r+0x398>
  8032b4:	00800144 	movi	r2,5
  8032b8:	11020416 	blt	r2,r4,803acc <_dtoa_r+0xa98>
  8032bc:	04400044 	movi	r17,1
  8032c0:	d8c01717 	ldw	r3,92(sp)
  8032c4:	00800144 	movi	r2,5
  8032c8:	10c1ed36 	bltu	r2,r3,803a80 <_dtoa_r+0xa4c>
  8032cc:	18c5883a 	add	r2,r3,r3
  8032d0:	1085883a 	add	r2,r2,r2
  8032d4:	00c02034 	movhi	r3,128
  8032d8:	18ccba04 	addi	r3,r3,13032
  8032dc:	10c5883a 	add	r2,r2,r3
  8032e0:	11000017 	ldw	r4,0(r2)
  8032e4:	2000683a 	jmp	r4
  8032e8:	008033d4 	movui	r2,207
  8032ec:	008033d4 	movui	r2,207
  8032f0:	00803dd4 	movui	r2,247
  8032f4:	00803dac 	andhi	r2,zero,246
  8032f8:	00803df0 	cmpltui	r2,zero,247
  8032fc:	00803dfc 	xorhi	r2,zero,247
  803300:	d9002717 	ldw	r4,156(sp)
  803304:	0089c3c4 	movi	r2,9999
  803308:	20800015 	stw	r2,0(r4)
  80330c:	a0001026 	beq	r20,zero,803350 <_dtoa_r+0x31c>
  803310:	00c02074 	movhi	r3,129
  803314:	18f36104 	addi	r3,r3,-12924
  803318:	d9802917 	ldw	r6,164(sp)
  80331c:	303f7926 	beq	r6,zero,803104 <_dtoa_r+0xd0>
  803320:	188000c7 	ldb	r2,3(r3)
  803324:	190000c4 	addi	r4,r3,3
  803328:	1000101e 	bne	r2,zero,80336c <_dtoa_r+0x338>
  80332c:	d8802917 	ldw	r2,164(sp)
  803330:	11000015 	stw	r4,0(r2)
  803334:	003f7306 	br	803104 <_dtoa_r+0xd0>
  803338:	00a00034 	movhi	r2,32768
  80333c:	10bfffc4 	addi	r2,r2,-1
  803340:	00c00044 	movi	r3,1
  803344:	88aa703a 	and	r21,r17,r2
  803348:	90c00015 	stw	r3,0(r18)
  80334c:	003f5806 	br	8030b0 <_dtoa_r+0x7c>
  803350:	00800434 	movhi	r2,16
  803354:	10bfffc4 	addi	r2,r2,-1
  803358:	a884703a 	and	r2,r21,r2
  80335c:	103fec1e 	bne	r2,zero,803310 <_dtoa_r+0x2dc>
  803360:	00c02074 	movhi	r3,129
  803364:	18f35e04 	addi	r3,r3,-12936
  803368:	003feb06 	br	803318 <_dtoa_r+0x2e4>
  80336c:	d8802917 	ldw	r2,164(sp)
  803370:	19000204 	addi	r4,r3,8
  803374:	11000015 	stw	r4,0(r2)
  803378:	003f6206 	br	803104 <_dtoa_r+0xd0>
  80337c:	ddc00117 	ldw	r23,4(sp)
  803380:	d8800217 	ldw	r2,8(sp)
  803384:	01000804 	movi	r4,32
  803388:	b8c10c84 	addi	r3,r23,1074
  80338c:	18a3883a 	add	r17,r3,r2
  803390:	2441b80e 	bge	r4,r17,803a74 <_dtoa_r+0xa40>
  803394:	00c01004 	movi	r3,64
  803398:	1c47c83a 	sub	r3,r3,r17
  80339c:	88bff804 	addi	r2,r17,-32
  8033a0:	a8c6983a 	sll	r3,r21,r3
  8033a4:	a084d83a 	srl	r2,r20,r2
  8033a8:	1888b03a 	or	r4,r3,r2
  8033ac:	0809c700 	call	809c70 <__floatunsidf>
  8033b0:	1011883a 	mov	r8,r2
  8033b4:	00bf8434 	movhi	r2,65040
  8033b8:	01000044 	movi	r4,1
  8033bc:	10d3883a 	add	r9,r2,r3
  8033c0:	8dbef344 	addi	r22,r17,-1075
  8033c4:	d9000815 	stw	r4,32(sp)
  8033c8:	003f6f06 	br	803188 <_dtoa_r+0x154>
  8033cc:	d8001715 	stw	zero,92(sp)
  8033d0:	04400044 	movi	r17,1
  8033d4:	00bfffc4 	movi	r2,-1
  8033d8:	00c00044 	movi	r3,1
  8033dc:	d8800e15 	stw	r2,56(sp)
  8033e0:	d8002615 	stw	zero,152(sp)
  8033e4:	d8800f15 	stw	r2,60(sp)
  8033e8:	d8c00b15 	stw	r3,44(sp)
  8033ec:	1021883a 	mov	r16,r2
  8033f0:	d8801617 	ldw	r2,88(sp)
  8033f4:	10001115 	stw	zero,68(r2)
  8033f8:	d8801617 	ldw	r2,88(sp)
  8033fc:	11401117 	ldw	r5,68(r2)
  803400:	1009883a 	mov	r4,r2
  803404:	080677c0 	call	80677c <_Balloc>
  803408:	d8c01617 	ldw	r3,88(sp)
  80340c:	d8800515 	stw	r2,20(sp)
  803410:	18801015 	stw	r2,64(r3)
  803414:	00800384 	movi	r2,14
  803418:	14006836 	bltu	r2,r16,8035bc <_dtoa_r+0x588>
  80341c:	8805003a 	cmpeq	r2,r17,zero
  803420:	1000661e 	bne	r2,zero,8035bc <_dtoa_r+0x588>
  803424:	d9000d17 	ldw	r4,52(sp)
  803428:	0102300e 	bge	zero,r4,803cec <_dtoa_r+0xcb8>
  80342c:	208003cc 	andi	r2,r4,15
  803430:	100490fa 	slli	r2,r2,3
  803434:	2025d13a 	srai	r18,r4,4
  803438:	00c02074 	movhi	r3,129
  80343c:	18f37304 	addi	r3,r3,-12852
  803440:	10c5883a 	add	r2,r2,r3
  803444:	90c0040c 	andi	r3,r18,16
  803448:	14000017 	ldw	r16,0(r2)
  80344c:	14400117 	ldw	r17,4(r2)
  803450:	18036a1e 	bne	r3,zero,8041fc <_dtoa_r+0x11c8>
  803454:	05800084 	movi	r22,2
  803458:	90001026 	beq	r18,zero,80349c <_dtoa_r+0x468>
  80345c:	04c02074 	movhi	r19,129
  803460:	9cf3a504 	addi	r19,r19,-12652
  803464:	9080004c 	andi	r2,r18,1
  803468:	1005003a 	cmpeq	r2,r2,zero
  80346c:	1000081e 	bne	r2,zero,803490 <_dtoa_r+0x45c>
  803470:	99800017 	ldw	r6,0(r19)
  803474:	99c00117 	ldw	r7,4(r19)
  803478:	880b883a 	mov	r5,r17
  80347c:	8009883a 	mov	r4,r16
  803480:	08091dc0 	call	8091dc <__muldf3>
  803484:	1021883a 	mov	r16,r2
  803488:	b5800044 	addi	r22,r22,1
  80348c:	1823883a 	mov	r17,r3
  803490:	9025d07a 	srai	r18,r18,1
  803494:	9cc00204 	addi	r19,r19,8
  803498:	903ff21e 	bne	r18,zero,803464 <_dtoa_r+0x430>
  80349c:	a80b883a 	mov	r5,r21
  8034a0:	a009883a 	mov	r4,r20
  8034a4:	880f883a 	mov	r7,r17
  8034a8:	800d883a 	mov	r6,r16
  8034ac:	08095a00 	call	8095a0 <__divdf3>
  8034b0:	1029883a 	mov	r20,r2
  8034b4:	182b883a 	mov	r21,r3
  8034b8:	d8c00c17 	ldw	r3,48(sp)
  8034bc:	1805003a 	cmpeq	r2,r3,zero
  8034c0:	1000081e 	bne	r2,zero,8034e4 <_dtoa_r+0x4b0>
  8034c4:	0005883a 	mov	r2,zero
  8034c8:	00cffc34 	movhi	r3,16368
  8034cc:	180f883a 	mov	r7,r3
  8034d0:	a009883a 	mov	r4,r20
  8034d4:	a80b883a 	mov	r5,r21
  8034d8:	100d883a 	mov	r6,r2
  8034dc:	0809a180 	call	809a18 <__ltdf2>
  8034e0:	1003fe16 	blt	r2,zero,8044dc <_dtoa_r+0x14a8>
  8034e4:	b009883a 	mov	r4,r22
  8034e8:	0809aa00 	call	809aa0 <__floatsidf>
  8034ec:	180b883a 	mov	r5,r3
  8034f0:	1009883a 	mov	r4,r2
  8034f4:	a00d883a 	mov	r6,r20
  8034f8:	a80f883a 	mov	r7,r21
  8034fc:	08091dc0 	call	8091dc <__muldf3>
  803500:	0011883a 	mov	r8,zero
  803504:	02500734 	movhi	r9,16412
  803508:	1009883a 	mov	r4,r2
  80350c:	180b883a 	mov	r5,r3
  803510:	480f883a 	mov	r7,r9
  803514:	400d883a 	mov	r6,r8
  803518:	08091680 	call	809168 <__adddf3>
  80351c:	d9000f17 	ldw	r4,60(sp)
  803520:	102d883a 	mov	r22,r2
  803524:	00bf3034 	movhi	r2,64704
  803528:	18b9883a 	add	fp,r3,r2
  80352c:	e02f883a 	mov	r23,fp
  803530:	20028f1e 	bne	r4,zero,803f70 <_dtoa_r+0xf3c>
  803534:	0005883a 	mov	r2,zero
  803538:	00d00534 	movhi	r3,16404
  80353c:	a009883a 	mov	r4,r20
  803540:	a80b883a 	mov	r5,r21
  803544:	180f883a 	mov	r7,r3
  803548:	100d883a 	mov	r6,r2
  80354c:	08090e80 	call	8090e8 <__subdf3>
  803550:	1009883a 	mov	r4,r2
  803554:	e00f883a 	mov	r7,fp
  803558:	180b883a 	mov	r5,r3
  80355c:	b00d883a 	mov	r6,r22
  803560:	1025883a 	mov	r18,r2
  803564:	1827883a 	mov	r19,r3
  803568:	08099080 	call	809908 <__gtdf2>
  80356c:	00834f16 	blt	zero,r2,8042ac <_dtoa_r+0x1278>
  803570:	e0e0003c 	xorhi	r3,fp,32768
  803574:	9009883a 	mov	r4,r18
  803578:	980b883a 	mov	r5,r19
  80357c:	180f883a 	mov	r7,r3
  803580:	b00d883a 	mov	r6,r22
  803584:	0809a180 	call	809a18 <__ltdf2>
  803588:	1000080e 	bge	r2,zero,8035ac <_dtoa_r+0x578>
  80358c:	0027883a 	mov	r19,zero
  803590:	0025883a 	mov	r18,zero
  803594:	d8802617 	ldw	r2,152(sp)
  803598:	df000517 	ldw	fp,20(sp)
  80359c:	d8000615 	stw	zero,24(sp)
  8035a0:	0084303a 	nor	r2,zero,r2
  8035a4:	d8800d15 	stw	r2,52(sp)
  8035a8:	00019b06 	br	803c18 <_dtoa_r+0xbe4>
  8035ac:	d9801217 	ldw	r6,72(sp)
  8035b0:	d8801317 	ldw	r2,76(sp)
  8035b4:	3029883a 	mov	r20,r6
  8035b8:	102b883a 	mov	r21,r2
  8035bc:	d8c00217 	ldw	r3,8(sp)
  8035c0:	18008516 	blt	r3,zero,8037d8 <_dtoa_r+0x7a4>
  8035c4:	d9000d17 	ldw	r4,52(sp)
  8035c8:	00800384 	movi	r2,14
  8035cc:	11008216 	blt	r2,r4,8037d8 <_dtoa_r+0x7a4>
  8035d0:	200490fa 	slli	r2,r4,3
  8035d4:	d9802617 	ldw	r6,152(sp)
  8035d8:	00c02074 	movhi	r3,129
  8035dc:	18f37304 	addi	r3,r3,-12852
  8035e0:	10c5883a 	add	r2,r2,r3
  8035e4:	14800017 	ldw	r18,0(r2)
  8035e8:	14c00117 	ldw	r19,4(r2)
  8035ec:	30031e16 	blt	r6,zero,804268 <_dtoa_r+0x1234>
  8035f0:	d9000517 	ldw	r4,20(sp)
  8035f4:	d8c00f17 	ldw	r3,60(sp)
  8035f8:	a823883a 	mov	r17,r21
  8035fc:	a021883a 	mov	r16,r20
  803600:	192b883a 	add	r21,r3,r4
  803604:	2039883a 	mov	fp,r4
  803608:	00000f06 	br	803648 <_dtoa_r+0x614>
  80360c:	0005883a 	mov	r2,zero
  803610:	00d00934 	movhi	r3,16420
  803614:	5009883a 	mov	r4,r10
  803618:	580b883a 	mov	r5,r11
  80361c:	180f883a 	mov	r7,r3
  803620:	100d883a 	mov	r6,r2
  803624:	08091dc0 	call	8091dc <__muldf3>
  803628:	180b883a 	mov	r5,r3
  80362c:	000d883a 	mov	r6,zero
  803630:	000f883a 	mov	r7,zero
  803634:	1009883a 	mov	r4,r2
  803638:	1021883a 	mov	r16,r2
  80363c:	1823883a 	mov	r17,r3
  803640:	08098800 	call	809880 <__nedf2>
  803644:	10004526 	beq	r2,zero,80375c <_dtoa_r+0x728>
  803648:	900d883a 	mov	r6,r18
  80364c:	980f883a 	mov	r7,r19
  803650:	8009883a 	mov	r4,r16
  803654:	880b883a 	mov	r5,r17
  803658:	08095a00 	call	8095a0 <__divdf3>
  80365c:	180b883a 	mov	r5,r3
  803660:	1009883a 	mov	r4,r2
  803664:	0809b980 	call	809b98 <__fixdfsi>
  803668:	1009883a 	mov	r4,r2
  80366c:	1029883a 	mov	r20,r2
  803670:	0809aa00 	call	809aa0 <__floatsidf>
  803674:	180f883a 	mov	r7,r3
  803678:	9009883a 	mov	r4,r18
  80367c:	980b883a 	mov	r5,r19
  803680:	100d883a 	mov	r6,r2
  803684:	08091dc0 	call	8091dc <__muldf3>
  803688:	180f883a 	mov	r7,r3
  80368c:	880b883a 	mov	r5,r17
  803690:	8009883a 	mov	r4,r16
  803694:	100d883a 	mov	r6,r2
  803698:	08090e80 	call	8090e8 <__subdf3>
  80369c:	1015883a 	mov	r10,r2
  8036a0:	a0800c04 	addi	r2,r20,48
  8036a4:	e0800005 	stb	r2,0(fp)
  8036a8:	e7000044 	addi	fp,fp,1
  8036ac:	1817883a 	mov	r11,r3
  8036b0:	e57fd61e 	bne	fp,r21,80360c <_dtoa_r+0x5d8>
  8036b4:	500d883a 	mov	r6,r10
  8036b8:	180f883a 	mov	r7,r3
  8036bc:	5009883a 	mov	r4,r10
  8036c0:	180b883a 	mov	r5,r3
  8036c4:	08091680 	call	809168 <__adddf3>
  8036c8:	100d883a 	mov	r6,r2
  8036cc:	9009883a 	mov	r4,r18
  8036d0:	980b883a 	mov	r5,r19
  8036d4:	180f883a 	mov	r7,r3
  8036d8:	1021883a 	mov	r16,r2
  8036dc:	1823883a 	mov	r17,r3
  8036e0:	0809a180 	call	809a18 <__ltdf2>
  8036e4:	10000816 	blt	r2,zero,803708 <_dtoa_r+0x6d4>
  8036e8:	980b883a 	mov	r5,r19
  8036ec:	800d883a 	mov	r6,r16
  8036f0:	880f883a 	mov	r7,r17
  8036f4:	9009883a 	mov	r4,r18
  8036f8:	08097f80 	call	8097f8 <__eqdf2>
  8036fc:	1000171e 	bne	r2,zero,80375c <_dtoa_r+0x728>
  803700:	a080004c 	andi	r2,r20,1
  803704:	10001526 	beq	r2,zero,80375c <_dtoa_r+0x728>
  803708:	d8800d17 	ldw	r2,52(sp)
  80370c:	d8800415 	stw	r2,16(sp)
  803710:	e009883a 	mov	r4,fp
  803714:	213fffc4 	addi	r4,r4,-1
  803718:	20c00007 	ldb	r3,0(r4)
  80371c:	00800e44 	movi	r2,57
  803720:	1880081e 	bne	r3,r2,803744 <_dtoa_r+0x710>
  803724:	d8800517 	ldw	r2,20(sp)
  803728:	113ffa1e 	bne	r2,r4,803714 <_dtoa_r+0x6e0>
  80372c:	d8c00417 	ldw	r3,16(sp)
  803730:	d9800517 	ldw	r6,20(sp)
  803734:	00800c04 	movi	r2,48
  803738:	18c00044 	addi	r3,r3,1
  80373c:	d8c00415 	stw	r3,16(sp)
  803740:	30800005 	stb	r2,0(r6)
  803744:	20800003 	ldbu	r2,0(r4)
  803748:	d8c00417 	ldw	r3,16(sp)
  80374c:	27000044 	addi	fp,r4,1
  803750:	10800044 	addi	r2,r2,1
  803754:	d8c00d15 	stw	r3,52(sp)
  803758:	20800005 	stb	r2,0(r4)
  80375c:	d9001617 	ldw	r4,88(sp)
  803760:	d9400717 	ldw	r5,28(sp)
  803764:	08061fc0 	call	8061fc <_Bfree>
  803768:	e0000005 	stb	zero,0(fp)
  80376c:	d9800d17 	ldw	r6,52(sp)
  803770:	d8c02717 	ldw	r3,156(sp)
  803774:	d9002917 	ldw	r4,164(sp)
  803778:	30800044 	addi	r2,r6,1
  80377c:	18800015 	stw	r2,0(r3)
  803780:	20029c26 	beq	r4,zero,8041f4 <_dtoa_r+0x11c0>
  803784:	d8c00517 	ldw	r3,20(sp)
  803788:	27000015 	stw	fp,0(r4)
  80378c:	003e5d06 	br	803104 <_dtoa_r+0xd0>
  803790:	d9800d17 	ldw	r6,52(sp)
  803794:	00c02074 	movhi	r3,129
  803798:	18f37304 	addi	r3,r3,-12852
  80379c:	d9001217 	ldw	r4,72(sp)
  8037a0:	300490fa 	slli	r2,r6,3
  8037a4:	d9401317 	ldw	r5,76(sp)
  8037a8:	10c5883a 	add	r2,r2,r3
  8037ac:	12000017 	ldw	r8,0(r2)
  8037b0:	12400117 	ldw	r9,4(r2)
  8037b4:	400d883a 	mov	r6,r8
  8037b8:	480f883a 	mov	r7,r9
  8037bc:	0809a180 	call	809a18 <__ltdf2>
  8037c0:	1000030e 	bge	r2,zero,8037d0 <_dtoa_r+0x79c>
  8037c4:	d8800d17 	ldw	r2,52(sp)
  8037c8:	10bfffc4 	addi	r2,r2,-1
  8037cc:	d8800d15 	stw	r2,52(sp)
  8037d0:	d8000c15 	stw	zero,48(sp)
  8037d4:	003ea806 	br	803278 <_dtoa_r+0x244>
  8037d8:	d9000b17 	ldw	r4,44(sp)
  8037dc:	202cc03a 	cmpne	r22,r4,zero
  8037e0:	b000c71e 	bne	r22,zero,803b00 <_dtoa_r+0xacc>
  8037e4:	dc001117 	ldw	r16,68(sp)
  8037e8:	dc801017 	ldw	r18,64(sp)
  8037ec:	0027883a 	mov	r19,zero
  8037f0:	04000b0e 	bge	zero,r16,803820 <_dtoa_r+0x7ec>
  8037f4:	d8c00a17 	ldw	r3,40(sp)
  8037f8:	00c0090e 	bge	zero,r3,803820 <_dtoa_r+0x7ec>
  8037fc:	8005883a 	mov	r2,r16
  803800:	1c011316 	blt	r3,r16,803c50 <_dtoa_r+0xc1c>
  803804:	d9000a17 	ldw	r4,40(sp)
  803808:	d9801117 	ldw	r6,68(sp)
  80380c:	80a1c83a 	sub	r16,r16,r2
  803810:	2089c83a 	sub	r4,r4,r2
  803814:	308dc83a 	sub	r6,r6,r2
  803818:	d9000a15 	stw	r4,40(sp)
  80381c:	d9801115 	stw	r6,68(sp)
  803820:	d8801017 	ldw	r2,64(sp)
  803824:	0080150e 	bge	zero,r2,80387c <_dtoa_r+0x848>
  803828:	d8c00b17 	ldw	r3,44(sp)
  80382c:	1805003a 	cmpeq	r2,r3,zero
  803830:	1001c91e 	bne	r2,zero,803f58 <_dtoa_r+0xf24>
  803834:	04800e0e 	bge	zero,r18,803870 <_dtoa_r+0x83c>
  803838:	d9001617 	ldw	r4,88(sp)
  80383c:	980b883a 	mov	r5,r19
  803840:	900d883a 	mov	r6,r18
  803844:	08070480 	call	807048 <__pow5mult>
  803848:	d9001617 	ldw	r4,88(sp)
  80384c:	d9800717 	ldw	r6,28(sp)
  803850:	100b883a 	mov	r5,r2
  803854:	1027883a 	mov	r19,r2
  803858:	0806c8c0 	call	806c8c <__multiply>
  80385c:	d9001617 	ldw	r4,88(sp)
  803860:	d9400717 	ldw	r5,28(sp)
  803864:	1023883a 	mov	r17,r2
  803868:	08061fc0 	call	8061fc <_Bfree>
  80386c:	dc400715 	stw	r17,28(sp)
  803870:	d9001017 	ldw	r4,64(sp)
  803874:	248dc83a 	sub	r6,r4,r18
  803878:	30010e1e 	bne	r6,zero,803cb4 <_dtoa_r+0xc80>
  80387c:	d9001617 	ldw	r4,88(sp)
  803880:	04400044 	movi	r17,1
  803884:	880b883a 	mov	r5,r17
  803888:	0806ee00 	call	806ee0 <__i2b>
  80388c:	d9800917 	ldw	r6,36(sp)
  803890:	1025883a 	mov	r18,r2
  803894:	0180040e 	bge	zero,r6,8038a8 <_dtoa_r+0x874>
  803898:	d9001617 	ldw	r4,88(sp)
  80389c:	100b883a 	mov	r5,r2
  8038a0:	08070480 	call	807048 <__pow5mult>
  8038a4:	1025883a 	mov	r18,r2
  8038a8:	d8801717 	ldw	r2,92(sp)
  8038ac:	8880f30e 	bge	r17,r2,803c7c <_dtoa_r+0xc48>
  8038b0:	0023883a 	mov	r17,zero
  8038b4:	d9800917 	ldw	r6,36(sp)
  8038b8:	30019e1e 	bne	r6,zero,803f34 <_dtoa_r+0xf00>
  8038bc:	00c00044 	movi	r3,1
  8038c0:	d9000a17 	ldw	r4,40(sp)
  8038c4:	20c5883a 	add	r2,r4,r3
  8038c8:	10c007cc 	andi	r3,r2,31
  8038cc:	1800841e 	bne	r3,zero,803ae0 <_dtoa_r+0xaac>
  8038d0:	00800704 	movi	r2,28
  8038d4:	d9000a17 	ldw	r4,40(sp)
  8038d8:	d9801117 	ldw	r6,68(sp)
  8038dc:	80a1883a 	add	r16,r16,r2
  8038e0:	2089883a 	add	r4,r4,r2
  8038e4:	308d883a 	add	r6,r6,r2
  8038e8:	d9000a15 	stw	r4,40(sp)
  8038ec:	d9801115 	stw	r6,68(sp)
  8038f0:	d8801117 	ldw	r2,68(sp)
  8038f4:	0080050e 	bge	zero,r2,80390c <_dtoa_r+0x8d8>
  8038f8:	d9400717 	ldw	r5,28(sp)
  8038fc:	d9001617 	ldw	r4,88(sp)
  803900:	100d883a 	mov	r6,r2
  803904:	0806b400 	call	806b40 <__lshift>
  803908:	d8800715 	stw	r2,28(sp)
  80390c:	d8c00a17 	ldw	r3,40(sp)
  803910:	00c0050e 	bge	zero,r3,803928 <_dtoa_r+0x8f4>
  803914:	d9001617 	ldw	r4,88(sp)
  803918:	900b883a 	mov	r5,r18
  80391c:	180d883a 	mov	r6,r3
  803920:	0806b400 	call	806b40 <__lshift>
  803924:	1025883a 	mov	r18,r2
  803928:	d9000c17 	ldw	r4,48(sp)
  80392c:	2005003a 	cmpeq	r2,r4,zero
  803930:	10016f26 	beq	r2,zero,803ef0 <_dtoa_r+0xebc>
  803934:	d9000f17 	ldw	r4,60(sp)
  803938:	0102170e 	bge	zero,r4,804198 <_dtoa_r+0x1164>
  80393c:	d9800b17 	ldw	r6,44(sp)
  803940:	3005003a 	cmpeq	r2,r6,zero
  803944:	1000881e 	bne	r2,zero,803b68 <_dtoa_r+0xb34>
  803948:	0400050e 	bge	zero,r16,803960 <_dtoa_r+0x92c>
  80394c:	d9001617 	ldw	r4,88(sp)
  803950:	980b883a 	mov	r5,r19
  803954:	800d883a 	mov	r6,r16
  803958:	0806b400 	call	806b40 <__lshift>
  80395c:	1027883a 	mov	r19,r2
  803960:	8804c03a 	cmpne	r2,r17,zero
  803964:	1002541e 	bne	r2,zero,8042b8 <_dtoa_r+0x1284>
  803968:	980b883a 	mov	r5,r19
  80396c:	dd800517 	ldw	r22,20(sp)
  803970:	dcc00615 	stw	r19,24(sp)
  803974:	a700004c 	andi	fp,r20,1
  803978:	2827883a 	mov	r19,r5
  80397c:	d9000717 	ldw	r4,28(sp)
  803980:	900b883a 	mov	r5,r18
  803984:	0802df00 	call	802df0 <quorem>
  803988:	d9000717 	ldw	r4,28(sp)
  80398c:	d9400617 	ldw	r5,24(sp)
  803990:	1023883a 	mov	r17,r2
  803994:	8dc00c04 	addi	r23,r17,48
  803998:	08063580 	call	806358 <__mcmp>
  80399c:	d9001617 	ldw	r4,88(sp)
  8039a0:	900b883a 	mov	r5,r18
  8039a4:	980d883a 	mov	r6,r19
  8039a8:	1029883a 	mov	r20,r2
  8039ac:	08069b40 	call	8069b4 <__mdiff>
  8039b0:	102b883a 	mov	r21,r2
  8039b4:	10800317 	ldw	r2,12(r2)
  8039b8:	1001281e 	bne	r2,zero,803e5c <_dtoa_r+0xe28>
  8039bc:	d9000717 	ldw	r4,28(sp)
  8039c0:	a80b883a 	mov	r5,r21
  8039c4:	08063580 	call	806358 <__mcmp>
  8039c8:	d9001617 	ldw	r4,88(sp)
  8039cc:	1021883a 	mov	r16,r2
  8039d0:	a80b883a 	mov	r5,r21
  8039d4:	08061fc0 	call	8061fc <_Bfree>
  8039d8:	8000041e 	bne	r16,zero,8039ec <_dtoa_r+0x9b8>
  8039dc:	d8801717 	ldw	r2,92(sp)
  8039e0:	1000021e 	bne	r2,zero,8039ec <_dtoa_r+0x9b8>
  8039e4:	e004c03a 	cmpne	r2,fp,zero
  8039e8:	10011726 	beq	r2,zero,803e48 <_dtoa_r+0xe14>
  8039ec:	a0010616 	blt	r20,zero,803e08 <_dtoa_r+0xdd4>
  8039f0:	a000041e 	bne	r20,zero,803a04 <_dtoa_r+0x9d0>
  8039f4:	d8c01717 	ldw	r3,92(sp)
  8039f8:	1800021e 	bne	r3,zero,803a04 <_dtoa_r+0x9d0>
  8039fc:	e004c03a 	cmpne	r2,fp,zero
  803a00:	10010126 	beq	r2,zero,803e08 <_dtoa_r+0xdd4>
  803a04:	04023d16 	blt	zero,r16,8042fc <_dtoa_r+0x12c8>
  803a08:	b5c00005 	stb	r23,0(r22)
  803a0c:	d9800517 	ldw	r6,20(sp)
  803a10:	d9000f17 	ldw	r4,60(sp)
  803a14:	b5800044 	addi	r22,r22,1
  803a18:	3105883a 	add	r2,r6,r4
  803a1c:	b0806526 	beq	r22,r2,803bb4 <_dtoa_r+0xb80>
  803a20:	d9400717 	ldw	r5,28(sp)
  803a24:	d9001617 	ldw	r4,88(sp)
  803a28:	01800284 	movi	r6,10
  803a2c:	000f883a 	mov	r7,zero
  803a30:	0806f1c0 	call	806f1c <__multadd>
  803a34:	d8800715 	stw	r2,28(sp)
  803a38:	d8800617 	ldw	r2,24(sp)
  803a3c:	14c10c26 	beq	r2,r19,803e70 <_dtoa_r+0xe3c>
  803a40:	d9400617 	ldw	r5,24(sp)
  803a44:	d9001617 	ldw	r4,88(sp)
  803a48:	01800284 	movi	r6,10
  803a4c:	000f883a 	mov	r7,zero
  803a50:	0806f1c0 	call	806f1c <__multadd>
  803a54:	d9001617 	ldw	r4,88(sp)
  803a58:	980b883a 	mov	r5,r19
  803a5c:	01800284 	movi	r6,10
  803a60:	000f883a 	mov	r7,zero
  803a64:	d8800615 	stw	r2,24(sp)
  803a68:	0806f1c0 	call	806f1c <__multadd>
  803a6c:	1027883a 	mov	r19,r2
  803a70:	003fc206 	br	80397c <_dtoa_r+0x948>
  803a74:	2445c83a 	sub	r2,r4,r17
  803a78:	a088983a 	sll	r4,r20,r2
  803a7c:	003e4b06 	br	8033ac <_dtoa_r+0x378>
  803a80:	01bfffc4 	movi	r6,-1
  803a84:	00800044 	movi	r2,1
  803a88:	d9800e15 	stw	r6,56(sp)
  803a8c:	d9800f15 	stw	r6,60(sp)
  803a90:	d8800b15 	stw	r2,44(sp)
  803a94:	d8c01617 	ldw	r3,88(sp)
  803a98:	008005c4 	movi	r2,23
  803a9c:	18001115 	stw	zero,68(r3)
  803aa0:	1580082e 	bgeu	r2,r22,803ac4 <_dtoa_r+0xa90>
  803aa4:	00c00104 	movi	r3,4
  803aa8:	0009883a 	mov	r4,zero
  803aac:	18c7883a 	add	r3,r3,r3
  803ab0:	18800504 	addi	r2,r3,20
  803ab4:	21000044 	addi	r4,r4,1
  803ab8:	b0bffc2e 	bgeu	r22,r2,803aac <_dtoa_r+0xa78>
  803abc:	d9801617 	ldw	r6,88(sp)
  803ac0:	31001115 	stw	r4,68(r6)
  803ac4:	dc000f17 	ldw	r16,60(sp)
  803ac8:	003e4b06 	br	8033f8 <_dtoa_r+0x3c4>
  803acc:	d9801717 	ldw	r6,92(sp)
  803ad0:	0023883a 	mov	r17,zero
  803ad4:	31bfff04 	addi	r6,r6,-4
  803ad8:	d9801715 	stw	r6,92(sp)
  803adc:	003df806 	br	8032c0 <_dtoa_r+0x28c>
  803ae0:	00800804 	movi	r2,32
  803ae4:	10c9c83a 	sub	r4,r2,r3
  803ae8:	00c00104 	movi	r3,4
  803aec:	19005a16 	blt	r3,r4,803c58 <_dtoa_r+0xc24>
  803af0:	008000c4 	movi	r2,3
  803af4:	113f7e16 	blt	r2,r4,8038f0 <_dtoa_r+0x8bc>
  803af8:	20800704 	addi	r2,r4,28
  803afc:	003f7506 	br	8038d4 <_dtoa_r+0x8a0>
  803b00:	d9801717 	ldw	r6,92(sp)
  803b04:	00800044 	movi	r2,1
  803b08:	1180a10e 	bge	r2,r6,803d90 <_dtoa_r+0xd5c>
  803b0c:	d9800f17 	ldw	r6,60(sp)
  803b10:	d8c01017 	ldw	r3,64(sp)
  803b14:	30bfffc4 	addi	r2,r6,-1
  803b18:	1881c616 	blt	r3,r2,804234 <_dtoa_r+0x1200>
  803b1c:	18a5c83a 	sub	r18,r3,r2
  803b20:	d8800f17 	ldw	r2,60(sp)
  803b24:	10026216 	blt	r2,zero,8044b0 <_dtoa_r+0x147c>
  803b28:	dc001117 	ldw	r16,68(sp)
  803b2c:	1007883a 	mov	r3,r2
  803b30:	d9800a17 	ldw	r6,40(sp)
  803b34:	d8801117 	ldw	r2,68(sp)
  803b38:	d9001617 	ldw	r4,88(sp)
  803b3c:	30cd883a 	add	r6,r6,r3
  803b40:	10c5883a 	add	r2,r2,r3
  803b44:	01400044 	movi	r5,1
  803b48:	d9800a15 	stw	r6,40(sp)
  803b4c:	d8801115 	stw	r2,68(sp)
  803b50:	0806ee00 	call	806ee0 <__i2b>
  803b54:	1027883a 	mov	r19,r2
  803b58:	003f2506 	br	8037f0 <_dtoa_r+0x7bc>
  803b5c:	00c02074 	movhi	r3,129
  803b60:	18f35504 	addi	r3,r3,-12972
  803b64:	003d6706 	br	803104 <_dtoa_r+0xd0>
  803b68:	dd800517 	ldw	r22,20(sp)
  803b6c:	04000044 	movi	r16,1
  803b70:	00000706 	br	803b90 <_dtoa_r+0xb5c>
  803b74:	d9400717 	ldw	r5,28(sp)
  803b78:	d9001617 	ldw	r4,88(sp)
  803b7c:	01800284 	movi	r6,10
  803b80:	000f883a 	mov	r7,zero
  803b84:	0806f1c0 	call	806f1c <__multadd>
  803b88:	d8800715 	stw	r2,28(sp)
  803b8c:	84000044 	addi	r16,r16,1
  803b90:	d9000717 	ldw	r4,28(sp)
  803b94:	900b883a 	mov	r5,r18
  803b98:	0802df00 	call	802df0 <quorem>
  803b9c:	15c00c04 	addi	r23,r2,48
  803ba0:	b5c00005 	stb	r23,0(r22)
  803ba4:	d8c00f17 	ldw	r3,60(sp)
  803ba8:	b5800044 	addi	r22,r22,1
  803bac:	80fff116 	blt	r16,r3,803b74 <_dtoa_r+0xb40>
  803bb0:	d8000615 	stw	zero,24(sp)
  803bb4:	d9400717 	ldw	r5,28(sp)
  803bb8:	d9001617 	ldw	r4,88(sp)
  803bbc:	01800044 	movi	r6,1
  803bc0:	0806b400 	call	806b40 <__lshift>
  803bc4:	1009883a 	mov	r4,r2
  803bc8:	900b883a 	mov	r5,r18
  803bcc:	d8800715 	stw	r2,28(sp)
  803bd0:	08063580 	call	806358 <__mcmp>
  803bd4:	00803c0e 	bge	zero,r2,803cc8 <_dtoa_r+0xc94>
  803bd8:	b009883a 	mov	r4,r22
  803bdc:	213fffc4 	addi	r4,r4,-1
  803be0:	21400003 	ldbu	r5,0(r4)
  803be4:	00800e44 	movi	r2,57
  803be8:	28c03fcc 	andi	r3,r5,255
  803bec:	18c0201c 	xori	r3,r3,128
  803bf0:	18ffe004 	addi	r3,r3,-128
  803bf4:	1881981e 	bne	r3,r2,804258 <_dtoa_r+0x1224>
  803bf8:	d9800517 	ldw	r6,20(sp)
  803bfc:	21bff71e 	bne	r4,r6,803bdc <_dtoa_r+0xba8>
  803c00:	d8800d17 	ldw	r2,52(sp)
  803c04:	37000044 	addi	fp,r6,1
  803c08:	10800044 	addi	r2,r2,1
  803c0c:	d8800d15 	stw	r2,52(sp)
  803c10:	00800c44 	movi	r2,49
  803c14:	30800005 	stb	r2,0(r6)
  803c18:	d9001617 	ldw	r4,88(sp)
  803c1c:	900b883a 	mov	r5,r18
  803c20:	08061fc0 	call	8061fc <_Bfree>
  803c24:	983ecd26 	beq	r19,zero,80375c <_dtoa_r+0x728>
  803c28:	d8c00617 	ldw	r3,24(sp)
  803c2c:	18000426 	beq	r3,zero,803c40 <_dtoa_r+0xc0c>
  803c30:	1cc00326 	beq	r3,r19,803c40 <_dtoa_r+0xc0c>
  803c34:	d9001617 	ldw	r4,88(sp)
  803c38:	180b883a 	mov	r5,r3
  803c3c:	08061fc0 	call	8061fc <_Bfree>
  803c40:	d9001617 	ldw	r4,88(sp)
  803c44:	980b883a 	mov	r5,r19
  803c48:	08061fc0 	call	8061fc <_Bfree>
  803c4c:	003ec306 	br	80375c <_dtoa_r+0x728>
  803c50:	1805883a 	mov	r2,r3
  803c54:	003eeb06 	br	803804 <_dtoa_r+0x7d0>
  803c58:	d9800a17 	ldw	r6,40(sp)
  803c5c:	d8c01117 	ldw	r3,68(sp)
  803c60:	20bfff04 	addi	r2,r4,-4
  803c64:	308d883a 	add	r6,r6,r2
  803c68:	1887883a 	add	r3,r3,r2
  803c6c:	80a1883a 	add	r16,r16,r2
  803c70:	d9800a15 	stw	r6,40(sp)
  803c74:	d8c01115 	stw	r3,68(sp)
  803c78:	003f1d06 	br	8038f0 <_dtoa_r+0x8bc>
  803c7c:	a03f0c1e 	bne	r20,zero,8038b0 <_dtoa_r+0x87c>
  803c80:	00800434 	movhi	r2,16
  803c84:	10bfffc4 	addi	r2,r2,-1
  803c88:	a884703a 	and	r2,r21,r2
  803c8c:	103f081e 	bne	r2,zero,8038b0 <_dtoa_r+0x87c>
  803c90:	a89ffc2c 	andhi	r2,r21,32752
  803c94:	103f0626 	beq	r2,zero,8038b0 <_dtoa_r+0x87c>
  803c98:	d8c01117 	ldw	r3,68(sp)
  803c9c:	d9000a17 	ldw	r4,40(sp)
  803ca0:	18c00044 	addi	r3,r3,1
  803ca4:	21000044 	addi	r4,r4,1
  803ca8:	d8c01115 	stw	r3,68(sp)
  803cac:	d9000a15 	stw	r4,40(sp)
  803cb0:	003f0006 	br	8038b4 <_dtoa_r+0x880>
  803cb4:	d9400717 	ldw	r5,28(sp)
  803cb8:	d9001617 	ldw	r4,88(sp)
  803cbc:	08070480 	call	807048 <__pow5mult>
  803cc0:	d8800715 	stw	r2,28(sp)
  803cc4:	003eed06 	br	80387c <_dtoa_r+0x848>
  803cc8:	1000021e 	bne	r2,zero,803cd4 <_dtoa_r+0xca0>
  803ccc:	b880004c 	andi	r2,r23,1
  803cd0:	103fc11e 	bne	r2,zero,803bd8 <_dtoa_r+0xba4>
  803cd4:	b5bfffc4 	addi	r22,r22,-1
  803cd8:	b0c00007 	ldb	r3,0(r22)
  803cdc:	00800c04 	movi	r2,48
  803ce0:	18bffc26 	beq	r3,r2,803cd4 <_dtoa_r+0xca0>
  803ce4:	b7000044 	addi	fp,r22,1
  803ce8:	003fcb06 	br	803c18 <_dtoa_r+0xbe4>
  803cec:	d9800d17 	ldw	r6,52(sp)
  803cf0:	018fc83a 	sub	r7,zero,r6
  803cf4:	3801f726 	beq	r7,zero,8044d4 <_dtoa_r+0x14a0>
  803cf8:	398003cc 	andi	r6,r7,15
  803cfc:	300c90fa 	slli	r6,r6,3
  803d00:	01402074 	movhi	r5,129
  803d04:	29737304 	addi	r5,r5,-12852
  803d08:	d9001217 	ldw	r4,72(sp)
  803d0c:	314d883a 	add	r6,r6,r5
  803d10:	30c00117 	ldw	r3,4(r6)
  803d14:	30800017 	ldw	r2,0(r6)
  803d18:	d9401317 	ldw	r5,76(sp)
  803d1c:	3821d13a 	srai	r16,r7,4
  803d20:	100d883a 	mov	r6,r2
  803d24:	180f883a 	mov	r7,r3
  803d28:	08091dc0 	call	8091dc <__muldf3>
  803d2c:	1011883a 	mov	r8,r2
  803d30:	1813883a 	mov	r9,r3
  803d34:	1029883a 	mov	r20,r2
  803d38:	182b883a 	mov	r21,r3
  803d3c:	8001e526 	beq	r16,zero,8044d4 <_dtoa_r+0x14a0>
  803d40:	05800084 	movi	r22,2
  803d44:	04402074 	movhi	r17,129
  803d48:	8c73a504 	addi	r17,r17,-12652
  803d4c:	8080004c 	andi	r2,r16,1
  803d50:	1005003a 	cmpeq	r2,r2,zero
  803d54:	1000081e 	bne	r2,zero,803d78 <_dtoa_r+0xd44>
  803d58:	89800017 	ldw	r6,0(r17)
  803d5c:	89c00117 	ldw	r7,4(r17)
  803d60:	480b883a 	mov	r5,r9
  803d64:	4009883a 	mov	r4,r8
  803d68:	08091dc0 	call	8091dc <__muldf3>
  803d6c:	1011883a 	mov	r8,r2
  803d70:	b5800044 	addi	r22,r22,1
  803d74:	1813883a 	mov	r9,r3
  803d78:	8021d07a 	srai	r16,r16,1
  803d7c:	8c400204 	addi	r17,r17,8
  803d80:	803ff21e 	bne	r16,zero,803d4c <_dtoa_r+0xd18>
  803d84:	4029883a 	mov	r20,r8
  803d88:	482b883a 	mov	r21,r9
  803d8c:	003dca06 	br	8034b8 <_dtoa_r+0x484>
  803d90:	d9000817 	ldw	r4,32(sp)
  803d94:	2005003a 	cmpeq	r2,r4,zero
  803d98:	1001f61e 	bne	r2,zero,804574 <_dtoa_r+0x1540>
  803d9c:	dc001117 	ldw	r16,68(sp)
  803da0:	dc801017 	ldw	r18,64(sp)
  803da4:	18c10cc4 	addi	r3,r3,1075
  803da8:	003f6106 	br	803b30 <_dtoa_r+0xafc>
  803dac:	d8000b15 	stw	zero,44(sp)
  803db0:	d9802617 	ldw	r6,152(sp)
  803db4:	d8c00d17 	ldw	r3,52(sp)
  803db8:	30800044 	addi	r2,r6,1
  803dbc:	18ad883a 	add	r22,r3,r2
  803dc0:	b13fffc4 	addi	r4,r22,-1
  803dc4:	d9000e15 	stw	r4,56(sp)
  803dc8:	0581f60e 	bge	zero,r22,8045a4 <_dtoa_r+0x1570>
  803dcc:	dd800f15 	stw	r22,60(sp)
  803dd0:	003f3006 	br	803a94 <_dtoa_r+0xa60>
  803dd4:	d8000b15 	stw	zero,44(sp)
  803dd8:	d9002617 	ldw	r4,152(sp)
  803ddc:	0101eb0e 	bge	zero,r4,80458c <_dtoa_r+0x1558>
  803de0:	202d883a 	mov	r22,r4
  803de4:	d9000e15 	stw	r4,56(sp)
  803de8:	d9000f15 	stw	r4,60(sp)
  803dec:	003f2906 	br	803a94 <_dtoa_r+0xa60>
  803df0:	01800044 	movi	r6,1
  803df4:	d9800b15 	stw	r6,44(sp)
  803df8:	003ff706 	br	803dd8 <_dtoa_r+0xda4>
  803dfc:	01000044 	movi	r4,1
  803e00:	d9000b15 	stw	r4,44(sp)
  803e04:	003fea06 	br	803db0 <_dtoa_r+0xd7c>
  803e08:	04000c0e 	bge	zero,r16,803e3c <_dtoa_r+0xe08>
  803e0c:	d9400717 	ldw	r5,28(sp)
  803e10:	d9001617 	ldw	r4,88(sp)
  803e14:	01800044 	movi	r6,1
  803e18:	0806b400 	call	806b40 <__lshift>
  803e1c:	1009883a 	mov	r4,r2
  803e20:	900b883a 	mov	r5,r18
  803e24:	d8800715 	stw	r2,28(sp)
  803e28:	08063580 	call	806358 <__mcmp>
  803e2c:	0081e00e 	bge	zero,r2,8045b0 <_dtoa_r+0x157c>
  803e30:	bdc00044 	addi	r23,r23,1
  803e34:	00800e84 	movi	r2,58
  803e38:	b881a226 	beq	r23,r2,8044c4 <_dtoa_r+0x1490>
  803e3c:	b7000044 	addi	fp,r22,1
  803e40:	b5c00005 	stb	r23,0(r22)
  803e44:	003f7406 	br	803c18 <_dtoa_r+0xbe4>
  803e48:	00800e44 	movi	r2,57
  803e4c:	b8819d26 	beq	r23,r2,8044c4 <_dtoa_r+0x1490>
  803e50:	053ffa0e 	bge	zero,r20,803e3c <_dtoa_r+0xe08>
  803e54:	8dc00c44 	addi	r23,r17,49
  803e58:	003ff806 	br	803e3c <_dtoa_r+0xe08>
  803e5c:	d9001617 	ldw	r4,88(sp)
  803e60:	a80b883a 	mov	r5,r21
  803e64:	04000044 	movi	r16,1
  803e68:	08061fc0 	call	8061fc <_Bfree>
  803e6c:	003edf06 	br	8039ec <_dtoa_r+0x9b8>
  803e70:	d9001617 	ldw	r4,88(sp)
  803e74:	980b883a 	mov	r5,r19
  803e78:	01800284 	movi	r6,10
  803e7c:	000f883a 	mov	r7,zero
  803e80:	0806f1c0 	call	806f1c <__multadd>
  803e84:	1027883a 	mov	r19,r2
  803e88:	d8800615 	stw	r2,24(sp)
  803e8c:	003ebb06 	br	80397c <_dtoa_r+0x948>
  803e90:	d9801117 	ldw	r6,68(sp)
  803e94:	d8800d17 	ldw	r2,52(sp)
  803e98:	d8000915 	stw	zero,36(sp)
  803e9c:	308dc83a 	sub	r6,r6,r2
  803ea0:	0087c83a 	sub	r3,zero,r2
  803ea4:	d9801115 	stw	r6,68(sp)
  803ea8:	d8c01015 	stw	r3,64(sp)
  803eac:	003cfe06 	br	8032a8 <_dtoa_r+0x274>
  803eb0:	018dc83a 	sub	r6,zero,r6
  803eb4:	d9801115 	stw	r6,68(sp)
  803eb8:	d8000a15 	stw	zero,40(sp)
  803ebc:	003cf306 	br	80328c <_dtoa_r+0x258>
  803ec0:	d9000d17 	ldw	r4,52(sp)
  803ec4:	0809aa00 	call	809aa0 <__floatsidf>
  803ec8:	880b883a 	mov	r5,r17
  803ecc:	8009883a 	mov	r4,r16
  803ed0:	180f883a 	mov	r7,r3
  803ed4:	100d883a 	mov	r6,r2
  803ed8:	08098800 	call	809880 <__nedf2>
  803edc:	103ce126 	beq	r2,zero,803264 <_dtoa_r+0x230>
  803ee0:	d9800d17 	ldw	r6,52(sp)
  803ee4:	31bfffc4 	addi	r6,r6,-1
  803ee8:	d9800d15 	stw	r6,52(sp)
  803eec:	003cdd06 	br	803264 <_dtoa_r+0x230>
  803ef0:	d9000717 	ldw	r4,28(sp)
  803ef4:	900b883a 	mov	r5,r18
  803ef8:	08063580 	call	806358 <__mcmp>
  803efc:	103e8d0e 	bge	r2,zero,803934 <_dtoa_r+0x900>
  803f00:	d9400717 	ldw	r5,28(sp)
  803f04:	d9001617 	ldw	r4,88(sp)
  803f08:	01800284 	movi	r6,10
  803f0c:	000f883a 	mov	r7,zero
  803f10:	0806f1c0 	call	806f1c <__multadd>
  803f14:	d9800d17 	ldw	r6,52(sp)
  803f18:	d8800715 	stw	r2,28(sp)
  803f1c:	31bfffc4 	addi	r6,r6,-1
  803f20:	d9800d15 	stw	r6,52(sp)
  803f24:	b001a71e 	bne	r22,zero,8045c4 <_dtoa_r+0x1590>
  803f28:	d8800e17 	ldw	r2,56(sp)
  803f2c:	d8800f15 	stw	r2,60(sp)
  803f30:	003e8006 	br	803934 <_dtoa_r+0x900>
  803f34:	90800417 	ldw	r2,16(r18)
  803f38:	1085883a 	add	r2,r2,r2
  803f3c:	1085883a 	add	r2,r2,r2
  803f40:	1485883a 	add	r2,r2,r18
  803f44:	11000417 	ldw	r4,16(r2)
  803f48:	08062240 	call	806224 <__hi0bits>
  803f4c:	00c00804 	movi	r3,32
  803f50:	1887c83a 	sub	r3,r3,r2
  803f54:	003e5a06 	br	8038c0 <_dtoa_r+0x88c>
  803f58:	d9400717 	ldw	r5,28(sp)
  803f5c:	d9801017 	ldw	r6,64(sp)
  803f60:	d9001617 	ldw	r4,88(sp)
  803f64:	08070480 	call	807048 <__pow5mult>
  803f68:	d8800715 	stw	r2,28(sp)
  803f6c:	003e4306 	br	80387c <_dtoa_r+0x848>
  803f70:	d9800f17 	ldw	r6,60(sp)
  803f74:	d8800d17 	ldw	r2,52(sp)
  803f78:	d9800315 	stw	r6,12(sp)
  803f7c:	d8800415 	stw	r2,16(sp)
  803f80:	d8c00b17 	ldw	r3,44(sp)
  803f84:	1805003a 	cmpeq	r2,r3,zero
  803f88:	1000e21e 	bne	r2,zero,804314 <_dtoa_r+0x12e0>
  803f8c:	d9000317 	ldw	r4,12(sp)
  803f90:	0005883a 	mov	r2,zero
  803f94:	00cff834 	movhi	r3,16352
  803f98:	200c90fa 	slli	r6,r4,3
  803f9c:	01002074 	movhi	r4,129
  803fa0:	21337304 	addi	r4,r4,-12852
  803fa4:	180b883a 	mov	r5,r3
  803fa8:	310d883a 	add	r6,r6,r4
  803fac:	327fff17 	ldw	r9,-4(r6)
  803fb0:	323ffe17 	ldw	r8,-8(r6)
  803fb4:	1009883a 	mov	r4,r2
  803fb8:	480f883a 	mov	r7,r9
  803fbc:	400d883a 	mov	r6,r8
  803fc0:	08095a00 	call	8095a0 <__divdf3>
  803fc4:	180b883a 	mov	r5,r3
  803fc8:	b00d883a 	mov	r6,r22
  803fcc:	b80f883a 	mov	r7,r23
  803fd0:	1009883a 	mov	r4,r2
  803fd4:	08090e80 	call	8090e8 <__subdf3>
  803fd8:	a80b883a 	mov	r5,r21
  803fdc:	a009883a 	mov	r4,r20
  803fe0:	d8c01915 	stw	r3,100(sp)
  803fe4:	d8801815 	stw	r2,96(sp)
  803fe8:	0809b980 	call	809b98 <__fixdfsi>
  803fec:	1009883a 	mov	r4,r2
  803ff0:	1027883a 	mov	r19,r2
  803ff4:	0809aa00 	call	809aa0 <__floatsidf>
  803ff8:	a80b883a 	mov	r5,r21
  803ffc:	a009883a 	mov	r4,r20
  804000:	180f883a 	mov	r7,r3
  804004:	100d883a 	mov	r6,r2
  804008:	08090e80 	call	8090e8 <__subdf3>
  80400c:	d9801817 	ldw	r6,96(sp)
  804010:	1823883a 	mov	r17,r3
  804014:	d8801415 	stw	r2,80(sp)
  804018:	302d883a 	mov	r22,r6
  80401c:	d9800517 	ldw	r6,20(sp)
  804020:	9cc00c04 	addi	r19,r19,48
  804024:	dc401515 	stw	r17,84(sp)
  804028:	d8c01917 	ldw	r3,100(sp)
  80402c:	34c00005 	stb	r19,0(r6)
  804030:	d8800517 	ldw	r2,20(sp)
  804034:	d9401917 	ldw	r5,100(sp)
  804038:	d9801417 	ldw	r6,80(sp)
  80403c:	b009883a 	mov	r4,r22
  804040:	880f883a 	mov	r7,r17
  804044:	182f883a 	mov	r23,r3
  804048:	17000044 	addi	fp,r2,1
  80404c:	08099080 	call	809908 <__gtdf2>
  804050:	00804e16 	blt	zero,r2,80418c <_dtoa_r+0x1158>
  804054:	d9801417 	ldw	r6,80(sp)
  804058:	0005883a 	mov	r2,zero
  80405c:	00cffc34 	movhi	r3,16368
  804060:	180b883a 	mov	r5,r3
  804064:	880f883a 	mov	r7,r17
  804068:	1009883a 	mov	r4,r2
  80406c:	08090e80 	call	8090e8 <__subdf3>
  804070:	d9401917 	ldw	r5,100(sp)
  804074:	180f883a 	mov	r7,r3
  804078:	b009883a 	mov	r4,r22
  80407c:	100d883a 	mov	r6,r2
  804080:	08099080 	call	809908 <__gtdf2>
  804084:	00bda216 	blt	zero,r2,803710 <_dtoa_r+0x6dc>
  804088:	d8c00317 	ldw	r3,12(sp)
  80408c:	00800044 	movi	r2,1
  804090:	10c01216 	blt	r2,r3,8040dc <_dtoa_r+0x10a8>
  804094:	003d4506 	br	8035ac <_dtoa_r+0x578>
  804098:	d9801417 	ldw	r6,80(sp)
  80409c:	0005883a 	mov	r2,zero
  8040a0:	00cffc34 	movhi	r3,16368
  8040a4:	180b883a 	mov	r5,r3
  8040a8:	880f883a 	mov	r7,r17
  8040ac:	1009883a 	mov	r4,r2
  8040b0:	08090e80 	call	8090e8 <__subdf3>
  8040b4:	d9c01b17 	ldw	r7,108(sp)
  8040b8:	180b883a 	mov	r5,r3
  8040bc:	1009883a 	mov	r4,r2
  8040c0:	b00d883a 	mov	r6,r22
  8040c4:	0809a180 	call	809a18 <__ltdf2>
  8040c8:	103d9116 	blt	r2,zero,803710 <_dtoa_r+0x6dc>
  8040cc:	d9800517 	ldw	r6,20(sp)
  8040d0:	d9000317 	ldw	r4,12(sp)
  8040d4:	3105883a 	add	r2,r6,r4
  8040d8:	e0bd3426 	beq	fp,r2,8035ac <_dtoa_r+0x578>
  8040dc:	04500934 	movhi	r17,16420
  8040e0:	0021883a 	mov	r16,zero
  8040e4:	b80b883a 	mov	r5,r23
  8040e8:	b009883a 	mov	r4,r22
  8040ec:	800d883a 	mov	r6,r16
  8040f0:	880f883a 	mov	r7,r17
  8040f4:	08091dc0 	call	8091dc <__muldf3>
  8040f8:	d9401517 	ldw	r5,84(sp)
  8040fc:	d9001417 	ldw	r4,80(sp)
  804100:	880f883a 	mov	r7,r17
  804104:	000d883a 	mov	r6,zero
  804108:	d8801a15 	stw	r2,104(sp)
  80410c:	d8c01b15 	stw	r3,108(sp)
  804110:	08091dc0 	call	8091dc <__muldf3>
  804114:	180b883a 	mov	r5,r3
  804118:	1009883a 	mov	r4,r2
  80411c:	1823883a 	mov	r17,r3
  804120:	1021883a 	mov	r16,r2
  804124:	0809b980 	call	809b98 <__fixdfsi>
  804128:	1009883a 	mov	r4,r2
  80412c:	102b883a 	mov	r21,r2
  804130:	0809aa00 	call	809aa0 <__floatsidf>
  804134:	880b883a 	mov	r5,r17
  804138:	8009883a 	mov	r4,r16
  80413c:	180f883a 	mov	r7,r3
  804140:	100d883a 	mov	r6,r2
  804144:	08090e80 	call	8090e8 <__subdf3>
  804148:	1021883a 	mov	r16,r2
  80414c:	d9001b17 	ldw	r4,108(sp)
  804150:	1823883a 	mov	r17,r3
  804154:	dc001415 	stw	r16,80(sp)
  804158:	ad400c04 	addi	r21,r21,48
  80415c:	dc401515 	stw	r17,84(sp)
  804160:	d8801a17 	ldw	r2,104(sp)
  804164:	e5400005 	stb	r21,0(fp)
  804168:	202f883a 	mov	r23,r4
  80416c:	d9c01b17 	ldw	r7,108(sp)
  804170:	d9001417 	ldw	r4,80(sp)
  804174:	880b883a 	mov	r5,r17
  804178:	100d883a 	mov	r6,r2
  80417c:	102d883a 	mov	r22,r2
  804180:	e7000044 	addi	fp,fp,1
  804184:	0809a180 	call	809a18 <__ltdf2>
  804188:	103fc30e 	bge	r2,zero,804098 <_dtoa_r+0x1064>
  80418c:	d9000417 	ldw	r4,16(sp)
  804190:	d9000d15 	stw	r4,52(sp)
  804194:	003d7106 	br	80375c <_dtoa_r+0x728>
  804198:	d9801717 	ldw	r6,92(sp)
  80419c:	00800084 	movi	r2,2
  8041a0:	11bde60e 	bge	r2,r6,80393c <_dtoa_r+0x908>
  8041a4:	203cfb1e 	bne	r4,zero,803594 <_dtoa_r+0x560>
  8041a8:	d9001617 	ldw	r4,88(sp)
  8041ac:	900b883a 	mov	r5,r18
  8041b0:	01800144 	movi	r6,5
  8041b4:	000f883a 	mov	r7,zero
  8041b8:	0806f1c0 	call	806f1c <__multadd>
  8041bc:	d9000717 	ldw	r4,28(sp)
  8041c0:	100b883a 	mov	r5,r2
  8041c4:	1025883a 	mov	r18,r2
  8041c8:	08063580 	call	806358 <__mcmp>
  8041cc:	00bcf10e 	bge	zero,r2,803594 <_dtoa_r+0x560>
  8041d0:	d8c00d17 	ldw	r3,52(sp)
  8041d4:	d9000517 	ldw	r4,20(sp)
  8041d8:	d8000615 	stw	zero,24(sp)
  8041dc:	18c00044 	addi	r3,r3,1
  8041e0:	d8c00d15 	stw	r3,52(sp)
  8041e4:	00800c44 	movi	r2,49
  8041e8:	27000044 	addi	fp,r4,1
  8041ec:	20800005 	stb	r2,0(r4)
  8041f0:	003e8906 	br	803c18 <_dtoa_r+0xbe4>
  8041f4:	d8c00517 	ldw	r3,20(sp)
  8041f8:	003bc206 	br	803104 <_dtoa_r+0xd0>
  8041fc:	01802074 	movhi	r6,129
  804200:	31b3a504 	addi	r6,r6,-12652
  804204:	30c00917 	ldw	r3,36(r6)
  804208:	30800817 	ldw	r2,32(r6)
  80420c:	d9001217 	ldw	r4,72(sp)
  804210:	d9401317 	ldw	r5,76(sp)
  804214:	180f883a 	mov	r7,r3
  804218:	100d883a 	mov	r6,r2
  80421c:	08095a00 	call	8095a0 <__divdf3>
  804220:	948003cc 	andi	r18,r18,15
  804224:	058000c4 	movi	r22,3
  804228:	1029883a 	mov	r20,r2
  80422c:	182b883a 	mov	r21,r3
  804230:	003c8906 	br	803458 <_dtoa_r+0x424>
  804234:	d9001017 	ldw	r4,64(sp)
  804238:	d9800917 	ldw	r6,36(sp)
  80423c:	0025883a 	mov	r18,zero
  804240:	1105c83a 	sub	r2,r2,r4
  804244:	2089883a 	add	r4,r4,r2
  804248:	308d883a 	add	r6,r6,r2
  80424c:	d9001015 	stw	r4,64(sp)
  804250:	d9800915 	stw	r6,36(sp)
  804254:	003e3206 	br	803b20 <_dtoa_r+0xaec>
  804258:	28800044 	addi	r2,r5,1
  80425c:	27000044 	addi	fp,r4,1
  804260:	20800005 	stb	r2,0(r4)
  804264:	003e6c06 	br	803c18 <_dtoa_r+0xbe4>
  804268:	d8800f17 	ldw	r2,60(sp)
  80426c:	00bce016 	blt	zero,r2,8035f0 <_dtoa_r+0x5bc>
  804270:	d9800f17 	ldw	r6,60(sp)
  804274:	303cc51e 	bne	r6,zero,80358c <_dtoa_r+0x558>
  804278:	0005883a 	mov	r2,zero
  80427c:	00d00534 	movhi	r3,16404
  804280:	980b883a 	mov	r5,r19
  804284:	180f883a 	mov	r7,r3
  804288:	9009883a 	mov	r4,r18
  80428c:	100d883a 	mov	r6,r2
  804290:	08091dc0 	call	8091dc <__muldf3>
  804294:	180b883a 	mov	r5,r3
  804298:	a80f883a 	mov	r7,r21
  80429c:	1009883a 	mov	r4,r2
  8042a0:	a00d883a 	mov	r6,r20
  8042a4:	08099900 	call	809990 <__gedf2>
  8042a8:	103cb80e 	bge	r2,zero,80358c <_dtoa_r+0x558>
  8042ac:	0027883a 	mov	r19,zero
  8042b0:	0025883a 	mov	r18,zero
  8042b4:	003fc606 	br	8041d0 <_dtoa_r+0x119c>
  8042b8:	99400117 	ldw	r5,4(r19)
  8042bc:	d9001617 	ldw	r4,88(sp)
  8042c0:	080677c0 	call	80677c <_Balloc>
  8042c4:	99800417 	ldw	r6,16(r19)
  8042c8:	11000304 	addi	r4,r2,12
  8042cc:	99400304 	addi	r5,r19,12
  8042d0:	318d883a 	add	r6,r6,r6
  8042d4:	318d883a 	add	r6,r6,r6
  8042d8:	31800204 	addi	r6,r6,8
  8042dc:	1023883a 	mov	r17,r2
  8042e0:	0805fe40 	call	805fe4 <memcpy>
  8042e4:	d9001617 	ldw	r4,88(sp)
  8042e8:	880b883a 	mov	r5,r17
  8042ec:	01800044 	movi	r6,1
  8042f0:	0806b400 	call	806b40 <__lshift>
  8042f4:	100b883a 	mov	r5,r2
  8042f8:	003d9c06 	br	80396c <_dtoa_r+0x938>
  8042fc:	00800e44 	movi	r2,57
  804300:	b8807026 	beq	r23,r2,8044c4 <_dtoa_r+0x1490>
  804304:	b8800044 	addi	r2,r23,1
  804308:	b7000044 	addi	fp,r22,1
  80430c:	b0800005 	stb	r2,0(r22)
  804310:	003e4106 	br	803c18 <_dtoa_r+0xbe4>
  804314:	d8800317 	ldw	r2,12(sp)
  804318:	01802074 	movhi	r6,129
  80431c:	31b37304 	addi	r6,r6,-12852
  804320:	b009883a 	mov	r4,r22
  804324:	100e90fa 	slli	r7,r2,3
  804328:	b80b883a 	mov	r5,r23
  80432c:	398f883a 	add	r7,r7,r6
  804330:	38bffe17 	ldw	r2,-8(r7)
  804334:	d9800517 	ldw	r6,20(sp)
  804338:	38ffff17 	ldw	r3,-4(r7)
  80433c:	37000044 	addi	fp,r6,1
  804340:	180f883a 	mov	r7,r3
  804344:	100d883a 	mov	r6,r2
  804348:	08091dc0 	call	8091dc <__muldf3>
  80434c:	a80b883a 	mov	r5,r21
  804350:	a009883a 	mov	r4,r20
  804354:	182f883a 	mov	r23,r3
  804358:	102d883a 	mov	r22,r2
  80435c:	0809b980 	call	809b98 <__fixdfsi>
  804360:	1009883a 	mov	r4,r2
  804364:	1027883a 	mov	r19,r2
  804368:	0809aa00 	call	809aa0 <__floatsidf>
  80436c:	a80b883a 	mov	r5,r21
  804370:	a009883a 	mov	r4,r20
  804374:	180f883a 	mov	r7,r3
  804378:	100d883a 	mov	r6,r2
  80437c:	08090e80 	call	8090e8 <__subdf3>
  804380:	180b883a 	mov	r5,r3
  804384:	d8c00517 	ldw	r3,20(sp)
  804388:	9cc00c04 	addi	r19,r19,48
  80438c:	1009883a 	mov	r4,r2
  804390:	1cc00005 	stb	r19,0(r3)
  804394:	2021883a 	mov	r16,r4
  804398:	d9000317 	ldw	r4,12(sp)
  80439c:	00800044 	movi	r2,1
  8043a0:	2823883a 	mov	r17,r5
  8043a4:	20802226 	beq	r4,r2,804430 <_dtoa_r+0x13fc>
  8043a8:	1029883a 	mov	r20,r2
  8043ac:	0005883a 	mov	r2,zero
  8043b0:	00d00934 	movhi	r3,16420
  8043b4:	180f883a 	mov	r7,r3
  8043b8:	100d883a 	mov	r6,r2
  8043bc:	880b883a 	mov	r5,r17
  8043c0:	8009883a 	mov	r4,r16
  8043c4:	08091dc0 	call	8091dc <__muldf3>
  8043c8:	180b883a 	mov	r5,r3
  8043cc:	1009883a 	mov	r4,r2
  8043d0:	1823883a 	mov	r17,r3
  8043d4:	1021883a 	mov	r16,r2
  8043d8:	0809b980 	call	809b98 <__fixdfsi>
  8043dc:	1009883a 	mov	r4,r2
  8043e0:	102b883a 	mov	r21,r2
  8043e4:	0809aa00 	call	809aa0 <__floatsidf>
  8043e8:	880b883a 	mov	r5,r17
  8043ec:	8009883a 	mov	r4,r16
  8043f0:	180f883a 	mov	r7,r3
  8043f4:	100d883a 	mov	r6,r2
  8043f8:	08090e80 	call	8090e8 <__subdf3>
  8043fc:	180b883a 	mov	r5,r3
  804400:	d8c00517 	ldw	r3,20(sp)
  804404:	1009883a 	mov	r4,r2
  804408:	ad400c04 	addi	r21,r21,48
  80440c:	1d05883a 	add	r2,r3,r20
  804410:	15400005 	stb	r21,0(r2)
  804414:	2021883a 	mov	r16,r4
  804418:	d9000317 	ldw	r4,12(sp)
  80441c:	a5000044 	addi	r20,r20,1
  804420:	2823883a 	mov	r17,r5
  804424:	a13fe11e 	bne	r20,r4,8043ac <_dtoa_r+0x1378>
  804428:	e505883a 	add	r2,fp,r20
  80442c:	173fffc4 	addi	fp,r2,-1
  804430:	0025883a 	mov	r18,zero
  804434:	04cff834 	movhi	r19,16352
  804438:	b009883a 	mov	r4,r22
  80443c:	b80b883a 	mov	r5,r23
  804440:	900d883a 	mov	r6,r18
  804444:	980f883a 	mov	r7,r19
  804448:	08091680 	call	809168 <__adddf3>
  80444c:	180b883a 	mov	r5,r3
  804450:	1009883a 	mov	r4,r2
  804454:	800d883a 	mov	r6,r16
  804458:	880f883a 	mov	r7,r17
  80445c:	0809a180 	call	809a18 <__ltdf2>
  804460:	103cab16 	blt	r2,zero,803710 <_dtoa_r+0x6dc>
  804464:	0009883a 	mov	r4,zero
  804468:	980b883a 	mov	r5,r19
  80446c:	b80f883a 	mov	r7,r23
  804470:	b00d883a 	mov	r6,r22
  804474:	08090e80 	call	8090e8 <__subdf3>
  804478:	180b883a 	mov	r5,r3
  80447c:	880f883a 	mov	r7,r17
  804480:	1009883a 	mov	r4,r2
  804484:	800d883a 	mov	r6,r16
  804488:	08099080 	call	809908 <__gtdf2>
  80448c:	00bc470e 	bge	zero,r2,8035ac <_dtoa_r+0x578>
  804490:	00c00c04 	movi	r3,48
  804494:	e73fffc4 	addi	fp,fp,-1
  804498:	e0800007 	ldb	r2,0(fp)
  80449c:	10fffd26 	beq	r2,r3,804494 <_dtoa_r+0x1460>
  8044a0:	d9800417 	ldw	r6,16(sp)
  8044a4:	e7000044 	addi	fp,fp,1
  8044a8:	d9800d15 	stw	r6,52(sp)
  8044ac:	003cab06 	br	80375c <_dtoa_r+0x728>
  8044b0:	d8c00f17 	ldw	r3,60(sp)
  8044b4:	d9001117 	ldw	r4,68(sp)
  8044b8:	20e1c83a 	sub	r16,r4,r3
  8044bc:	0007883a 	mov	r3,zero
  8044c0:	003d9b06 	br	803b30 <_dtoa_r+0xafc>
  8044c4:	00800e44 	movi	r2,57
  8044c8:	b0800005 	stb	r2,0(r22)
  8044cc:	b5800044 	addi	r22,r22,1
  8044d0:	003dc106 	br	803bd8 <_dtoa_r+0xba4>
  8044d4:	05800084 	movi	r22,2
  8044d8:	003bf706 	br	8034b8 <_dtoa_r+0x484>
  8044dc:	d9000f17 	ldw	r4,60(sp)
  8044e0:	013c000e 	bge	zero,r4,8034e4 <_dtoa_r+0x4b0>
  8044e4:	d9800e17 	ldw	r6,56(sp)
  8044e8:	01bc300e 	bge	zero,r6,8035ac <_dtoa_r+0x578>
  8044ec:	0005883a 	mov	r2,zero
  8044f0:	00d00934 	movhi	r3,16420
  8044f4:	a80b883a 	mov	r5,r21
  8044f8:	180f883a 	mov	r7,r3
  8044fc:	a009883a 	mov	r4,r20
  804500:	100d883a 	mov	r6,r2
  804504:	08091dc0 	call	8091dc <__muldf3>
  804508:	b1000044 	addi	r4,r22,1
  80450c:	1021883a 	mov	r16,r2
  804510:	1823883a 	mov	r17,r3
  804514:	0809aa00 	call	809aa0 <__floatsidf>
  804518:	880b883a 	mov	r5,r17
  80451c:	8009883a 	mov	r4,r16
  804520:	180f883a 	mov	r7,r3
  804524:	100d883a 	mov	r6,r2
  804528:	08091dc0 	call	8091dc <__muldf3>
  80452c:	0011883a 	mov	r8,zero
  804530:	02500734 	movhi	r9,16412
  804534:	180b883a 	mov	r5,r3
  804538:	480f883a 	mov	r7,r9
  80453c:	1009883a 	mov	r4,r2
  804540:	400d883a 	mov	r6,r8
  804544:	08091680 	call	809168 <__adddf3>
  804548:	102d883a 	mov	r22,r2
  80454c:	00bf3034 	movhi	r2,64704
  804550:	10ef883a 	add	r23,r2,r3
  804554:	d8800d17 	ldw	r2,52(sp)
  804558:	d8c00e17 	ldw	r3,56(sp)
  80455c:	8029883a 	mov	r20,r16
  804560:	10bfffc4 	addi	r2,r2,-1
  804564:	882b883a 	mov	r21,r17
  804568:	d8800415 	stw	r2,16(sp)
  80456c:	d8c00315 	stw	r3,12(sp)
  804570:	003e8306 	br	803f80 <_dtoa_r+0xf4c>
  804574:	d8800117 	ldw	r2,4(sp)
  804578:	dc001117 	ldw	r16,68(sp)
  80457c:	dc801017 	ldw	r18,64(sp)
  804580:	00c00d84 	movi	r3,54
  804584:	1887c83a 	sub	r3,r3,r2
  804588:	003d6906 	br	803b30 <_dtoa_r+0xafc>
  80458c:	01800044 	movi	r6,1
  804590:	3021883a 	mov	r16,r6
  804594:	d9800f15 	stw	r6,60(sp)
  804598:	d9802615 	stw	r6,152(sp)
  80459c:	d9800e15 	stw	r6,56(sp)
  8045a0:	003b9306 	br	8033f0 <_dtoa_r+0x3bc>
  8045a4:	b021883a 	mov	r16,r22
  8045a8:	dd800f15 	stw	r22,60(sp)
  8045ac:	003b9006 	br	8033f0 <_dtoa_r+0x3bc>
  8045b0:	103e221e 	bne	r2,zero,803e3c <_dtoa_r+0xe08>
  8045b4:	b880004c 	andi	r2,r23,1
  8045b8:	1005003a 	cmpeq	r2,r2,zero
  8045bc:	103e1f1e 	bne	r2,zero,803e3c <_dtoa_r+0xe08>
  8045c0:	003e1b06 	br	803e30 <_dtoa_r+0xdfc>
  8045c4:	d9001617 	ldw	r4,88(sp)
  8045c8:	980b883a 	mov	r5,r19
  8045cc:	01800284 	movi	r6,10
  8045d0:	000f883a 	mov	r7,zero
  8045d4:	0806f1c0 	call	806f1c <__multadd>
  8045d8:	d8c00e17 	ldw	r3,56(sp)
  8045dc:	1027883a 	mov	r19,r2
  8045e0:	d8c00f15 	stw	r3,60(sp)
  8045e4:	003cd306 	br	803934 <_dtoa_r+0x900>

008045e8 <_fflush_r>:
  8045e8:	defffb04 	addi	sp,sp,-20
  8045ec:	dcc00315 	stw	r19,12(sp)
  8045f0:	dc800215 	stw	r18,8(sp)
  8045f4:	dfc00415 	stw	ra,16(sp)
  8045f8:	dc400115 	stw	r17,4(sp)
  8045fc:	dc000015 	stw	r16,0(sp)
  804600:	2027883a 	mov	r19,r4
  804604:	2825883a 	mov	r18,r5
  804608:	20000226 	beq	r4,zero,804614 <_fflush_r+0x2c>
  80460c:	20800e17 	ldw	r2,56(r4)
  804610:	10005626 	beq	r2,zero,80476c <_fflush_r+0x184>
  804614:	9100030b 	ldhu	r4,12(r18)
  804618:	20ffffcc 	andi	r3,r4,65535
  80461c:	18e0001c 	xori	r3,r3,32768
  804620:	18e00004 	addi	r3,r3,-32768
  804624:	1880020c 	andi	r2,r3,8
  804628:	1000261e 	bne	r2,zero,8046c4 <_fflush_r+0xdc>
  80462c:	90c00117 	ldw	r3,4(r18)
  804630:	20820014 	ori	r2,r4,2048
  804634:	9080030d 	sth	r2,12(r18)
  804638:	1009883a 	mov	r4,r2
  80463c:	00c0400e 	bge	zero,r3,804740 <_fflush_r+0x158>
  804640:	92000a17 	ldw	r8,40(r18)
  804644:	40004026 	beq	r8,zero,804748 <_fflush_r+0x160>
  804648:	2084000c 	andi	r2,r4,4096
  80464c:	10005326 	beq	r2,zero,80479c <_fflush_r+0x1b4>
  804650:	94001417 	ldw	r16,80(r18)
  804654:	9080030b 	ldhu	r2,12(r18)
  804658:	1080010c 	andi	r2,r2,4
  80465c:	1000481e 	bne	r2,zero,804780 <_fflush_r+0x198>
  804660:	91400717 	ldw	r5,28(r18)
  804664:	9809883a 	mov	r4,r19
  804668:	800d883a 	mov	r6,r16
  80466c:	000f883a 	mov	r7,zero
  804670:	403ee83a 	callr	r8
  804674:	8080261e 	bne	r16,r2,804710 <_fflush_r+0x128>
  804678:	9080030b 	ldhu	r2,12(r18)
  80467c:	91000417 	ldw	r4,16(r18)
  804680:	90000115 	stw	zero,4(r18)
  804684:	10bdffcc 	andi	r2,r2,63487
  804688:	10ffffcc 	andi	r3,r2,65535
  80468c:	18c4000c 	andi	r3,r3,4096
  804690:	9080030d 	sth	r2,12(r18)
  804694:	91000015 	stw	r4,0(r18)
  804698:	18002b26 	beq	r3,zero,804748 <_fflush_r+0x160>
  80469c:	0007883a 	mov	r3,zero
  8046a0:	1805883a 	mov	r2,r3
  8046a4:	94001415 	stw	r16,80(r18)
  8046a8:	dfc00417 	ldw	ra,16(sp)
  8046ac:	dcc00317 	ldw	r19,12(sp)
  8046b0:	dc800217 	ldw	r18,8(sp)
  8046b4:	dc400117 	ldw	r17,4(sp)
  8046b8:	dc000017 	ldw	r16,0(sp)
  8046bc:	dec00504 	addi	sp,sp,20
  8046c0:	f800283a 	ret
  8046c4:	94400417 	ldw	r17,16(r18)
  8046c8:	88001f26 	beq	r17,zero,804748 <_fflush_r+0x160>
  8046cc:	90800017 	ldw	r2,0(r18)
  8046d0:	18c000cc 	andi	r3,r3,3
  8046d4:	94400015 	stw	r17,0(r18)
  8046d8:	1461c83a 	sub	r16,r2,r17
  8046dc:	18002526 	beq	r3,zero,804774 <_fflush_r+0x18c>
  8046e0:	0005883a 	mov	r2,zero
  8046e4:	90800215 	stw	r2,8(r18)
  8046e8:	0400170e 	bge	zero,r16,804748 <_fflush_r+0x160>
  8046ec:	90c00917 	ldw	r3,36(r18)
  8046f0:	91400717 	ldw	r5,28(r18)
  8046f4:	880d883a 	mov	r6,r17
  8046f8:	800f883a 	mov	r7,r16
  8046fc:	9809883a 	mov	r4,r19
  804700:	183ee83a 	callr	r3
  804704:	88a3883a 	add	r17,r17,r2
  804708:	80a1c83a 	sub	r16,r16,r2
  80470c:	00bff616 	blt	zero,r2,8046e8 <_fflush_r+0x100>
  804710:	9080030b 	ldhu	r2,12(r18)
  804714:	00ffffc4 	movi	r3,-1
  804718:	10801014 	ori	r2,r2,64
  80471c:	9080030d 	sth	r2,12(r18)
  804720:	1805883a 	mov	r2,r3
  804724:	dfc00417 	ldw	ra,16(sp)
  804728:	dcc00317 	ldw	r19,12(sp)
  80472c:	dc800217 	ldw	r18,8(sp)
  804730:	dc400117 	ldw	r17,4(sp)
  804734:	dc000017 	ldw	r16,0(sp)
  804738:	dec00504 	addi	sp,sp,20
  80473c:	f800283a 	ret
  804740:	90800f17 	ldw	r2,60(r18)
  804744:	00bfbe16 	blt	zero,r2,804640 <_fflush_r+0x58>
  804748:	0007883a 	mov	r3,zero
  80474c:	1805883a 	mov	r2,r3
  804750:	dfc00417 	ldw	ra,16(sp)
  804754:	dcc00317 	ldw	r19,12(sp)
  804758:	dc800217 	ldw	r18,8(sp)
  80475c:	dc400117 	ldw	r17,4(sp)
  804760:	dc000017 	ldw	r16,0(sp)
  804764:	dec00504 	addi	sp,sp,20
  804768:	f800283a 	ret
  80476c:	08048800 	call	804880 <__sinit>
  804770:	003fa806 	br	804614 <_fflush_r+0x2c>
  804774:	90800517 	ldw	r2,20(r18)
  804778:	90800215 	stw	r2,8(r18)
  80477c:	003fda06 	br	8046e8 <_fflush_r+0x100>
  804780:	90800117 	ldw	r2,4(r18)
  804784:	90c00c17 	ldw	r3,48(r18)
  804788:	80a1c83a 	sub	r16,r16,r2
  80478c:	183fb426 	beq	r3,zero,804660 <_fflush_r+0x78>
  804790:	90800f17 	ldw	r2,60(r18)
  804794:	80a1c83a 	sub	r16,r16,r2
  804798:	003fb106 	br	804660 <_fflush_r+0x78>
  80479c:	91400717 	ldw	r5,28(r18)
  8047a0:	9809883a 	mov	r4,r19
  8047a4:	000d883a 	mov	r6,zero
  8047a8:	01c00044 	movi	r7,1
  8047ac:	403ee83a 	callr	r8
  8047b0:	1021883a 	mov	r16,r2
  8047b4:	00bfffc4 	movi	r2,-1
  8047b8:	80800226 	beq	r16,r2,8047c4 <_fflush_r+0x1dc>
  8047bc:	92000a17 	ldw	r8,40(r18)
  8047c0:	003fa406 	br	804654 <_fflush_r+0x6c>
  8047c4:	98c00017 	ldw	r3,0(r19)
  8047c8:	00800744 	movi	r2,29
  8047cc:	18bfde26 	beq	r3,r2,804748 <_fflush_r+0x160>
  8047d0:	9080030b 	ldhu	r2,12(r18)
  8047d4:	8007883a 	mov	r3,r16
  8047d8:	10801014 	ori	r2,r2,64
  8047dc:	9080030d 	sth	r2,12(r18)
  8047e0:	003fcf06 	br	804720 <_fflush_r+0x138>

008047e4 <fflush>:
  8047e4:	01402034 	movhi	r5,128
  8047e8:	29517a04 	addi	r5,r5,17896
  8047ec:	2007883a 	mov	r3,r4
  8047f0:	20000526 	beq	r4,zero,804808 <fflush+0x24>
  8047f4:	00802074 	movhi	r2,129
  8047f8:	10ba9304 	addi	r2,r2,-5556
  8047fc:	11000017 	ldw	r4,0(r2)
  804800:	180b883a 	mov	r5,r3
  804804:	08045e81 	jmpi	8045e8 <_fflush_r>
  804808:	00802074 	movhi	r2,129
  80480c:	10ba9404 	addi	r2,r2,-5552
  804810:	11000017 	ldw	r4,0(r2)
  804814:	08053e81 	jmpi	8053e8 <_fwalk_reent>

00804818 <std>:
  804818:	00802034 	movhi	r2,128
  80481c:	109e5704 	addi	r2,r2,31068
  804820:	20800b15 	stw	r2,44(r4)
  804824:	00802034 	movhi	r2,128
  804828:	109e9204 	addi	r2,r2,31304
  80482c:	20800815 	stw	r2,32(r4)
  804830:	00c02034 	movhi	r3,128
  804834:	18de7304 	addi	r3,r3,31180
  804838:	00802034 	movhi	r2,128
  80483c:	109e5904 	addi	r2,r2,31076
  804840:	2140030d 	sth	r5,12(r4)
  804844:	2180038d 	sth	r6,14(r4)
  804848:	20c00915 	stw	r3,36(r4)
  80484c:	20800a15 	stw	r2,40(r4)
  804850:	20000015 	stw	zero,0(r4)
  804854:	20000115 	stw	zero,4(r4)
  804858:	20000215 	stw	zero,8(r4)
  80485c:	20000415 	stw	zero,16(r4)
  804860:	20000515 	stw	zero,20(r4)
  804864:	20000615 	stw	zero,24(r4)
  804868:	21000715 	stw	r4,28(r4)
  80486c:	f800283a 	ret

00804870 <__sfp_lock_acquire>:
  804870:	f800283a 	ret

00804874 <__sfp_lock_release>:
  804874:	f800283a 	ret

00804878 <__sinit_lock_acquire>:
  804878:	f800283a 	ret

0080487c <__sinit_lock_release>:
  80487c:	f800283a 	ret

00804880 <__sinit>:
  804880:	20800e17 	ldw	r2,56(r4)
  804884:	defffd04 	addi	sp,sp,-12
  804888:	dc400115 	stw	r17,4(sp)
  80488c:	dc000015 	stw	r16,0(sp)
  804890:	dfc00215 	stw	ra,8(sp)
  804894:	04400044 	movi	r17,1
  804898:	01400104 	movi	r5,4
  80489c:	000d883a 	mov	r6,zero
  8048a0:	2021883a 	mov	r16,r4
  8048a4:	2200bb04 	addi	r8,r4,748
  8048a8:	200f883a 	mov	r7,r4
  8048ac:	10000526 	beq	r2,zero,8048c4 <__sinit+0x44>
  8048b0:	dfc00217 	ldw	ra,8(sp)
  8048b4:	dc400117 	ldw	r17,4(sp)
  8048b8:	dc000017 	ldw	r16,0(sp)
  8048bc:	dec00304 	addi	sp,sp,12
  8048c0:	f800283a 	ret
  8048c4:	21000117 	ldw	r4,4(r4)
  8048c8:	00802034 	movhi	r2,128
  8048cc:	10925904 	addi	r2,r2,18788
  8048d0:	00c000c4 	movi	r3,3
  8048d4:	80800f15 	stw	r2,60(r16)
  8048d8:	80c0b915 	stw	r3,740(r16)
  8048dc:	8200ba15 	stw	r8,744(r16)
  8048e0:	84400e15 	stw	r17,56(r16)
  8048e4:	8000b815 	stw	zero,736(r16)
  8048e8:	08048180 	call	804818 <std>
  8048ec:	81000217 	ldw	r4,8(r16)
  8048f0:	880d883a 	mov	r6,r17
  8048f4:	800f883a 	mov	r7,r16
  8048f8:	01400284 	movi	r5,10
  8048fc:	08048180 	call	804818 <std>
  804900:	81000317 	ldw	r4,12(r16)
  804904:	800f883a 	mov	r7,r16
  804908:	01400484 	movi	r5,18
  80490c:	01800084 	movi	r6,2
  804910:	dfc00217 	ldw	ra,8(sp)
  804914:	dc400117 	ldw	r17,4(sp)
  804918:	dc000017 	ldw	r16,0(sp)
  80491c:	dec00304 	addi	sp,sp,12
  804920:	08048181 	jmpi	804818 <std>

00804924 <__fp_lock>:
  804924:	0005883a 	mov	r2,zero
  804928:	f800283a 	ret

0080492c <__fp_unlock>:
  80492c:	0005883a 	mov	r2,zero
  804930:	f800283a 	ret

00804934 <__fp_unlock_all>:
  804934:	00802074 	movhi	r2,129
  804938:	10ba9304 	addi	r2,r2,-5556
  80493c:	11000017 	ldw	r4,0(r2)
  804940:	01402034 	movhi	r5,128
  804944:	29524b04 	addi	r5,r5,18732
  804948:	08054b01 	jmpi	8054b0 <_fwalk>

0080494c <__fp_lock_all>:
  80494c:	00802074 	movhi	r2,129
  804950:	10ba9304 	addi	r2,r2,-5556
  804954:	11000017 	ldw	r4,0(r2)
  804958:	01402034 	movhi	r5,128
  80495c:	29524904 	addi	r5,r5,18724
  804960:	08054b01 	jmpi	8054b0 <_fwalk>

00804964 <_cleanup_r>:
  804964:	01402034 	movhi	r5,128
  804968:	295f8904 	addi	r5,r5,32292
  80496c:	08054b01 	jmpi	8054b0 <_fwalk>

00804970 <_cleanup>:
  804970:	00802074 	movhi	r2,129
  804974:	10ba9404 	addi	r2,r2,-5552
  804978:	11000017 	ldw	r4,0(r2)
  80497c:	08049641 	jmpi	804964 <_cleanup_r>

00804980 <__sfmoreglue>:
  804980:	defffc04 	addi	sp,sp,-16
  804984:	dc000015 	stw	r16,0(sp)
  804988:	2821883a 	mov	r16,r5
  80498c:	dc400115 	stw	r17,4(sp)
  804990:	01401704 	movi	r5,92
  804994:	2023883a 	mov	r17,r4
  804998:	8009883a 	mov	r4,r16
  80499c:	dfc00315 	stw	ra,12(sp)
  8049a0:	dcc00215 	stw	r19,8(sp)
  8049a4:	0800b9c0 	call	800b9c <__mulsi3>
  8049a8:	11400304 	addi	r5,r2,12
  8049ac:	8809883a 	mov	r4,r17
  8049b0:	1027883a 	mov	r19,r2
  8049b4:	08057c00 	call	8057c0 <_malloc_r>
  8049b8:	10c00304 	addi	r3,r2,12
  8049bc:	1023883a 	mov	r17,r2
  8049c0:	1809883a 	mov	r4,r3
  8049c4:	980d883a 	mov	r6,r19
  8049c8:	000b883a 	mov	r5,zero
  8049cc:	10000b26 	beq	r2,zero,8049fc <__sfmoreglue+0x7c>
  8049d0:	14000115 	stw	r16,4(r2)
  8049d4:	10c00215 	stw	r3,8(r2)
  8049d8:	10000015 	stw	zero,0(r2)
  8049dc:	08061640 	call	806164 <memset>
  8049e0:	8805883a 	mov	r2,r17
  8049e4:	dfc00317 	ldw	ra,12(sp)
  8049e8:	dcc00217 	ldw	r19,8(sp)
  8049ec:	dc400117 	ldw	r17,4(sp)
  8049f0:	dc000017 	ldw	r16,0(sp)
  8049f4:	dec00404 	addi	sp,sp,16
  8049f8:	f800283a 	ret
  8049fc:	0023883a 	mov	r17,zero
  804a00:	8805883a 	mov	r2,r17
  804a04:	dfc00317 	ldw	ra,12(sp)
  804a08:	dcc00217 	ldw	r19,8(sp)
  804a0c:	dc400117 	ldw	r17,4(sp)
  804a10:	dc000017 	ldw	r16,0(sp)
  804a14:	dec00404 	addi	sp,sp,16
  804a18:	f800283a 	ret

00804a1c <__sfp>:
  804a1c:	defffd04 	addi	sp,sp,-12
  804a20:	00802074 	movhi	r2,129
  804a24:	10ba9404 	addi	r2,r2,-5552
  804a28:	dc000015 	stw	r16,0(sp)
  804a2c:	14000017 	ldw	r16,0(r2)
  804a30:	dc400115 	stw	r17,4(sp)
  804a34:	dfc00215 	stw	ra,8(sp)
  804a38:	80800e17 	ldw	r2,56(r16)
  804a3c:	2023883a 	mov	r17,r4
  804a40:	10002626 	beq	r2,zero,804adc <__sfp+0xc0>
  804a44:	8400b804 	addi	r16,r16,736
  804a48:	80800117 	ldw	r2,4(r16)
  804a4c:	81000217 	ldw	r4,8(r16)
  804a50:	10ffffc4 	addi	r3,r2,-1
  804a54:	18000916 	blt	r3,zero,804a7c <__sfp+0x60>
  804a58:	2080030f 	ldh	r2,12(r4)
  804a5c:	10000b26 	beq	r2,zero,804a8c <__sfp+0x70>
  804a60:	017fffc4 	movi	r5,-1
  804a64:	00000206 	br	804a70 <__sfp+0x54>
  804a68:	2080030f 	ldh	r2,12(r4)
  804a6c:	10000726 	beq	r2,zero,804a8c <__sfp+0x70>
  804a70:	18ffffc4 	addi	r3,r3,-1
  804a74:	21001704 	addi	r4,r4,92
  804a78:	197ffb1e 	bne	r3,r5,804a68 <__sfp+0x4c>
  804a7c:	80800017 	ldw	r2,0(r16)
  804a80:	10001926 	beq	r2,zero,804ae8 <__sfp+0xcc>
  804a84:	1021883a 	mov	r16,r2
  804a88:	003fef06 	br	804a48 <__sfp+0x2c>
  804a8c:	00bfffc4 	movi	r2,-1
  804a90:	00c00044 	movi	r3,1
  804a94:	2080038d 	sth	r2,14(r4)
  804a98:	20c0030d 	sth	r3,12(r4)
  804a9c:	20000015 	stw	zero,0(r4)
  804aa0:	20000215 	stw	zero,8(r4)
  804aa4:	20000115 	stw	zero,4(r4)
  804aa8:	20000415 	stw	zero,16(r4)
  804aac:	20000515 	stw	zero,20(r4)
  804ab0:	20000615 	stw	zero,24(r4)
  804ab4:	20000c15 	stw	zero,48(r4)
  804ab8:	20000d15 	stw	zero,52(r4)
  804abc:	20001115 	stw	zero,68(r4)
  804ac0:	20001215 	stw	zero,72(r4)
  804ac4:	2005883a 	mov	r2,r4
  804ac8:	dfc00217 	ldw	ra,8(sp)
  804acc:	dc400117 	ldw	r17,4(sp)
  804ad0:	dc000017 	ldw	r16,0(sp)
  804ad4:	dec00304 	addi	sp,sp,12
  804ad8:	f800283a 	ret
  804adc:	8009883a 	mov	r4,r16
  804ae0:	08048800 	call	804880 <__sinit>
  804ae4:	003fd706 	br	804a44 <__sfp+0x28>
  804ae8:	8809883a 	mov	r4,r17
  804aec:	01400104 	movi	r5,4
  804af0:	08049800 	call	804980 <__sfmoreglue>
  804af4:	80800015 	stw	r2,0(r16)
  804af8:	103fe21e 	bne	r2,zero,804a84 <__sfp+0x68>
  804afc:	00800304 	movi	r2,12
  804b00:	0009883a 	mov	r4,zero
  804b04:	88800015 	stw	r2,0(r17)
  804b08:	003fee06 	br	804ac4 <__sfp+0xa8>

00804b0c <_malloc_trim_r>:
  804b0c:	defffb04 	addi	sp,sp,-20
  804b10:	dcc00315 	stw	r19,12(sp)
  804b14:	04c02074 	movhi	r19,129
  804b18:	9cf50f04 	addi	r19,r19,-11204
  804b1c:	dc800215 	stw	r18,8(sp)
  804b20:	dc400115 	stw	r17,4(sp)
  804b24:	dc000015 	stw	r16,0(sp)
  804b28:	2823883a 	mov	r17,r5
  804b2c:	2025883a 	mov	r18,r4
  804b30:	dfc00415 	stw	ra,16(sp)
  804b34:	080a8640 	call	80a864 <__malloc_lock>
  804b38:	98800217 	ldw	r2,8(r19)
  804b3c:	9009883a 	mov	r4,r18
  804b40:	000b883a 	mov	r5,zero
  804b44:	10c00117 	ldw	r3,4(r2)
  804b48:	00bfff04 	movi	r2,-4
  804b4c:	18a0703a 	and	r16,r3,r2
  804b50:	8463c83a 	sub	r17,r16,r17
  804b54:	8c43fbc4 	addi	r17,r17,4079
  804b58:	8822d33a 	srli	r17,r17,12
  804b5c:	0083ffc4 	movi	r2,4095
  804b60:	8c7fffc4 	addi	r17,r17,-1
  804b64:	8822933a 	slli	r17,r17,12
  804b68:	1440060e 	bge	r2,r17,804b84 <_malloc_trim_r+0x78>
  804b6c:	08078ec0 	call	8078ec <_sbrk_r>
  804b70:	98c00217 	ldw	r3,8(r19)
  804b74:	9009883a 	mov	r4,r18
  804b78:	044bc83a 	sub	r5,zero,r17
  804b7c:	80c7883a 	add	r3,r16,r3
  804b80:	10c00926 	beq	r2,r3,804ba8 <_malloc_trim_r+0x9c>
  804b84:	080a8840 	call	80a884 <__malloc_unlock>
  804b88:	0005883a 	mov	r2,zero
  804b8c:	dfc00417 	ldw	ra,16(sp)
  804b90:	dcc00317 	ldw	r19,12(sp)
  804b94:	dc800217 	ldw	r18,8(sp)
  804b98:	dc400117 	ldw	r17,4(sp)
  804b9c:	dc000017 	ldw	r16,0(sp)
  804ba0:	dec00504 	addi	sp,sp,20
  804ba4:	f800283a 	ret
  804ba8:	9009883a 	mov	r4,r18
  804bac:	08078ec0 	call	8078ec <_sbrk_r>
  804bb0:	844dc83a 	sub	r6,r16,r17
  804bb4:	00ffffc4 	movi	r3,-1
  804bb8:	9009883a 	mov	r4,r18
  804bbc:	000b883a 	mov	r5,zero
  804bc0:	01c02074 	movhi	r7,129
  804bc4:	39c14704 	addi	r7,r7,1308
  804bc8:	31800054 	ori	r6,r6,1
  804bcc:	10c00926 	beq	r2,r3,804bf4 <_malloc_trim_r+0xe8>
  804bd0:	38800017 	ldw	r2,0(r7)
  804bd4:	98c00217 	ldw	r3,8(r19)
  804bd8:	9009883a 	mov	r4,r18
  804bdc:	1445c83a 	sub	r2,r2,r17
  804be0:	38800015 	stw	r2,0(r7)
  804be4:	19800115 	stw	r6,4(r3)
  804be8:	080a8840 	call	80a884 <__malloc_unlock>
  804bec:	00800044 	movi	r2,1
  804bf0:	003fe606 	br	804b8c <_malloc_trim_r+0x80>
  804bf4:	08078ec0 	call	8078ec <_sbrk_r>
  804bf8:	99800217 	ldw	r6,8(r19)
  804bfc:	100f883a 	mov	r7,r2
  804c00:	9009883a 	mov	r4,r18
  804c04:	1187c83a 	sub	r3,r2,r6
  804c08:	008003c4 	movi	r2,15
  804c0c:	19400054 	ori	r5,r3,1
  804c10:	10ffdc0e 	bge	r2,r3,804b84 <_malloc_trim_r+0x78>
  804c14:	00802074 	movhi	r2,129
  804c18:	10ba9804 	addi	r2,r2,-5536
  804c1c:	10c00017 	ldw	r3,0(r2)
  804c20:	00802074 	movhi	r2,129
  804c24:	10814704 	addi	r2,r2,1308
  804c28:	31400115 	stw	r5,4(r6)
  804c2c:	38c7c83a 	sub	r3,r7,r3
  804c30:	10c00015 	stw	r3,0(r2)
  804c34:	003fd306 	br	804b84 <_malloc_trim_r+0x78>

00804c38 <_free_r>:
  804c38:	defffd04 	addi	sp,sp,-12
  804c3c:	dc400115 	stw	r17,4(sp)
  804c40:	dc000015 	stw	r16,0(sp)
  804c44:	dfc00215 	stw	ra,8(sp)
  804c48:	2821883a 	mov	r16,r5
  804c4c:	2023883a 	mov	r17,r4
  804c50:	28005a26 	beq	r5,zero,804dbc <_free_r+0x184>
  804c54:	080a8640 	call	80a864 <__malloc_lock>
  804c58:	823ffe04 	addi	r8,r16,-8
  804c5c:	41400117 	ldw	r5,4(r8)
  804c60:	00bfff84 	movi	r2,-2
  804c64:	02802074 	movhi	r10,129
  804c68:	52b50f04 	addi	r10,r10,-11204
  804c6c:	288e703a 	and	r7,r5,r2
  804c70:	41cd883a 	add	r6,r8,r7
  804c74:	30c00117 	ldw	r3,4(r6)
  804c78:	51000217 	ldw	r4,8(r10)
  804c7c:	00bfff04 	movi	r2,-4
  804c80:	1892703a 	and	r9,r3,r2
  804c84:	5017883a 	mov	r11,r10
  804c88:	31006726 	beq	r6,r4,804e28 <_free_r+0x1f0>
  804c8c:	2880004c 	andi	r2,r5,1
  804c90:	1005003a 	cmpeq	r2,r2,zero
  804c94:	32400115 	stw	r9,4(r6)
  804c98:	10001a1e 	bne	r2,zero,804d04 <_free_r+0xcc>
  804c9c:	000b883a 	mov	r5,zero
  804ca0:	3247883a 	add	r3,r6,r9
  804ca4:	18800117 	ldw	r2,4(r3)
  804ca8:	1080004c 	andi	r2,r2,1
  804cac:	1000231e 	bne	r2,zero,804d3c <_free_r+0x104>
  804cb0:	280ac03a 	cmpne	r5,r5,zero
  804cb4:	3a4f883a 	add	r7,r7,r9
  804cb8:	2800451e 	bne	r5,zero,804dd0 <_free_r+0x198>
  804cbc:	31000217 	ldw	r4,8(r6)
  804cc0:	00802074 	movhi	r2,129
  804cc4:	10b51104 	addi	r2,r2,-11196
  804cc8:	20807b26 	beq	r4,r2,804eb8 <_free_r+0x280>
  804ccc:	30800317 	ldw	r2,12(r6)
  804cd0:	3a07883a 	add	r3,r7,r8
  804cd4:	19c00015 	stw	r7,0(r3)
  804cd8:	11000215 	stw	r4,8(r2)
  804cdc:	20800315 	stw	r2,12(r4)
  804ce0:	38800054 	ori	r2,r7,1
  804ce4:	40800115 	stw	r2,4(r8)
  804ce8:	28001a26 	beq	r5,zero,804d54 <_free_r+0x11c>
  804cec:	8809883a 	mov	r4,r17
  804cf0:	dfc00217 	ldw	ra,8(sp)
  804cf4:	dc400117 	ldw	r17,4(sp)
  804cf8:	dc000017 	ldw	r16,0(sp)
  804cfc:	dec00304 	addi	sp,sp,12
  804d00:	080a8841 	jmpi	80a884 <__malloc_unlock>
  804d04:	80bffe17 	ldw	r2,-8(r16)
  804d08:	50c00204 	addi	r3,r10,8
  804d0c:	4091c83a 	sub	r8,r8,r2
  804d10:	41000217 	ldw	r4,8(r8)
  804d14:	388f883a 	add	r7,r7,r2
  804d18:	20c06126 	beq	r4,r3,804ea0 <_free_r+0x268>
  804d1c:	40800317 	ldw	r2,12(r8)
  804d20:	3247883a 	add	r3,r6,r9
  804d24:	000b883a 	mov	r5,zero
  804d28:	11000215 	stw	r4,8(r2)
  804d2c:	20800315 	stw	r2,12(r4)
  804d30:	18800117 	ldw	r2,4(r3)
  804d34:	1080004c 	andi	r2,r2,1
  804d38:	103fdd26 	beq	r2,zero,804cb0 <_free_r+0x78>
  804d3c:	38800054 	ori	r2,r7,1
  804d40:	3a07883a 	add	r3,r7,r8
  804d44:	280ac03a 	cmpne	r5,r5,zero
  804d48:	40800115 	stw	r2,4(r8)
  804d4c:	19c00015 	stw	r7,0(r3)
  804d50:	283fe61e 	bne	r5,zero,804cec <_free_r+0xb4>
  804d54:	00807fc4 	movi	r2,511
  804d58:	11c01f2e 	bgeu	r2,r7,804dd8 <_free_r+0x1a0>
  804d5c:	3806d27a 	srli	r3,r7,9
  804d60:	1800481e 	bne	r3,zero,804e84 <_free_r+0x24c>
  804d64:	3804d0fa 	srli	r2,r7,3
  804d68:	100690fa 	slli	r3,r2,3
  804d6c:	1acd883a 	add	r6,r3,r11
  804d70:	31400217 	ldw	r5,8(r6)
  804d74:	31405926 	beq	r6,r5,804edc <_free_r+0x2a4>
  804d78:	28800117 	ldw	r2,4(r5)
  804d7c:	00ffff04 	movi	r3,-4
  804d80:	10c4703a 	and	r2,r2,r3
  804d84:	3880022e 	bgeu	r7,r2,804d90 <_free_r+0x158>
  804d88:	29400217 	ldw	r5,8(r5)
  804d8c:	317ffa1e 	bne	r6,r5,804d78 <_free_r+0x140>
  804d90:	29800317 	ldw	r6,12(r5)
  804d94:	41800315 	stw	r6,12(r8)
  804d98:	41400215 	stw	r5,8(r8)
  804d9c:	8809883a 	mov	r4,r17
  804da0:	2a000315 	stw	r8,12(r5)
  804da4:	32000215 	stw	r8,8(r6)
  804da8:	dfc00217 	ldw	ra,8(sp)
  804dac:	dc400117 	ldw	r17,4(sp)
  804db0:	dc000017 	ldw	r16,0(sp)
  804db4:	dec00304 	addi	sp,sp,12
  804db8:	080a8841 	jmpi	80a884 <__malloc_unlock>
  804dbc:	dfc00217 	ldw	ra,8(sp)
  804dc0:	dc400117 	ldw	r17,4(sp)
  804dc4:	dc000017 	ldw	r16,0(sp)
  804dc8:	dec00304 	addi	sp,sp,12
  804dcc:	f800283a 	ret
  804dd0:	31000217 	ldw	r4,8(r6)
  804dd4:	003fbd06 	br	804ccc <_free_r+0x94>
  804dd8:	3806d0fa 	srli	r3,r7,3
  804ddc:	00800044 	movi	r2,1
  804de0:	51400117 	ldw	r5,4(r10)
  804de4:	180890fa 	slli	r4,r3,3
  804de8:	1807d0ba 	srai	r3,r3,2
  804dec:	22c9883a 	add	r4,r4,r11
  804df0:	21800217 	ldw	r6,8(r4)
  804df4:	10c4983a 	sll	r2,r2,r3
  804df8:	41000315 	stw	r4,12(r8)
  804dfc:	41800215 	stw	r6,8(r8)
  804e00:	288ab03a 	or	r5,r5,r2
  804e04:	22000215 	stw	r8,8(r4)
  804e08:	8809883a 	mov	r4,r17
  804e0c:	51400115 	stw	r5,4(r10)
  804e10:	32000315 	stw	r8,12(r6)
  804e14:	dfc00217 	ldw	ra,8(sp)
  804e18:	dc400117 	ldw	r17,4(sp)
  804e1c:	dc000017 	ldw	r16,0(sp)
  804e20:	dec00304 	addi	sp,sp,12
  804e24:	080a8841 	jmpi	80a884 <__malloc_unlock>
  804e28:	2880004c 	andi	r2,r5,1
  804e2c:	3a4d883a 	add	r6,r7,r9
  804e30:	1000071e 	bne	r2,zero,804e50 <_free_r+0x218>
  804e34:	80bffe17 	ldw	r2,-8(r16)
  804e38:	4091c83a 	sub	r8,r8,r2
  804e3c:	41000317 	ldw	r4,12(r8)
  804e40:	40c00217 	ldw	r3,8(r8)
  804e44:	308d883a 	add	r6,r6,r2
  804e48:	20c00215 	stw	r3,8(r4)
  804e4c:	19000315 	stw	r4,12(r3)
  804e50:	00802074 	movhi	r2,129
  804e54:	10ba9704 	addi	r2,r2,-5540
  804e58:	11000017 	ldw	r4,0(r2)
  804e5c:	30c00054 	ori	r3,r6,1
  804e60:	52000215 	stw	r8,8(r10)
  804e64:	40c00115 	stw	r3,4(r8)
  804e68:	313fa036 	bltu	r6,r4,804cec <_free_r+0xb4>
  804e6c:	00802074 	movhi	r2,129
  804e70:	10813d04 	addi	r2,r2,1268
  804e74:	11400017 	ldw	r5,0(r2)
  804e78:	8809883a 	mov	r4,r17
  804e7c:	0804b0c0 	call	804b0c <_malloc_trim_r>
  804e80:	003f9a06 	br	804cec <_free_r+0xb4>
  804e84:	00800104 	movi	r2,4
  804e88:	10c0072e 	bgeu	r2,r3,804ea8 <_free_r+0x270>
  804e8c:	00800504 	movi	r2,20
  804e90:	10c01936 	bltu	r2,r3,804ef8 <_free_r+0x2c0>
  804e94:	188016c4 	addi	r2,r3,91
  804e98:	100690fa 	slli	r3,r2,3
  804e9c:	003fb306 	br	804d6c <_free_r+0x134>
  804ea0:	01400044 	movi	r5,1
  804ea4:	003f7e06 	br	804ca0 <_free_r+0x68>
  804ea8:	3804d1ba 	srli	r2,r7,6
  804eac:	10800e04 	addi	r2,r2,56
  804eb0:	100690fa 	slli	r3,r2,3
  804eb4:	003fad06 	br	804d6c <_free_r+0x134>
  804eb8:	22000315 	stw	r8,12(r4)
  804ebc:	22000215 	stw	r8,8(r4)
  804ec0:	3a05883a 	add	r2,r7,r8
  804ec4:	38c00054 	ori	r3,r7,1
  804ec8:	11c00015 	stw	r7,0(r2)
  804ecc:	41000215 	stw	r4,8(r8)
  804ed0:	40c00115 	stw	r3,4(r8)
  804ed4:	41000315 	stw	r4,12(r8)
  804ed8:	003f8406 	br	804cec <_free_r+0xb4>
  804edc:	1005d0ba 	srai	r2,r2,2
  804ee0:	00c00044 	movi	r3,1
  804ee4:	51000117 	ldw	r4,4(r10)
  804ee8:	1886983a 	sll	r3,r3,r2
  804eec:	20c8b03a 	or	r4,r4,r3
  804ef0:	51000115 	stw	r4,4(r10)
  804ef4:	003fa706 	br	804d94 <_free_r+0x15c>
  804ef8:	00801504 	movi	r2,84
  804efc:	10c00436 	bltu	r2,r3,804f10 <_free_r+0x2d8>
  804f00:	3804d33a 	srli	r2,r7,12
  804f04:	10801b84 	addi	r2,r2,110
  804f08:	100690fa 	slli	r3,r2,3
  804f0c:	003f9706 	br	804d6c <_free_r+0x134>
  804f10:	00805504 	movi	r2,340
  804f14:	10c00436 	bltu	r2,r3,804f28 <_free_r+0x2f0>
  804f18:	3804d3fa 	srli	r2,r7,15
  804f1c:	10801dc4 	addi	r2,r2,119
  804f20:	100690fa 	slli	r3,r2,3
  804f24:	003f9106 	br	804d6c <_free_r+0x134>
  804f28:	00815504 	movi	r2,1364
  804f2c:	10c0032e 	bgeu	r2,r3,804f3c <_free_r+0x304>
  804f30:	00801f84 	movi	r2,126
  804f34:	00c0fc04 	movi	r3,1008
  804f38:	003f8c06 	br	804d6c <_free_r+0x134>
  804f3c:	3804d4ba 	srli	r2,r7,18
  804f40:	10801f04 	addi	r2,r2,124
  804f44:	100690fa 	slli	r3,r2,3
  804f48:	003f8806 	br	804d6c <_free_r+0x134>

00804f4c <__sfvwrite_r>:
  804f4c:	30800217 	ldw	r2,8(r6)
  804f50:	defff504 	addi	sp,sp,-44
  804f54:	df000915 	stw	fp,36(sp)
  804f58:	dd800715 	stw	r22,28(sp)
  804f5c:	dc800315 	stw	r18,12(sp)
  804f60:	dfc00a15 	stw	ra,40(sp)
  804f64:	ddc00815 	stw	r23,32(sp)
  804f68:	dd400615 	stw	r21,24(sp)
  804f6c:	dd000515 	stw	r20,20(sp)
  804f70:	dcc00415 	stw	r19,16(sp)
  804f74:	dc400215 	stw	r17,8(sp)
  804f78:	dc000115 	stw	r16,4(sp)
  804f7c:	302d883a 	mov	r22,r6
  804f80:	2039883a 	mov	fp,r4
  804f84:	2825883a 	mov	r18,r5
  804f88:	10001c26 	beq	r2,zero,804ffc <__sfvwrite_r+0xb0>
  804f8c:	29c0030b 	ldhu	r7,12(r5)
  804f90:	3880020c 	andi	r2,r7,8
  804f94:	10002726 	beq	r2,zero,805034 <__sfvwrite_r+0xe8>
  804f98:	28800417 	ldw	r2,16(r5)
  804f9c:	10002526 	beq	r2,zero,805034 <__sfvwrite_r+0xe8>
  804fa0:	3880008c 	andi	r2,r7,2
  804fa4:	b5400017 	ldw	r21,0(r22)
  804fa8:	10002826 	beq	r2,zero,80504c <__sfvwrite_r+0x100>
  804fac:	0021883a 	mov	r16,zero
  804fb0:	0023883a 	mov	r17,zero
  804fb4:	880d883a 	mov	r6,r17
  804fb8:	e009883a 	mov	r4,fp
  804fbc:	00810004 	movi	r2,1024
  804fc0:	80006e26 	beq	r16,zero,80517c <__sfvwrite_r+0x230>
  804fc4:	800f883a 	mov	r7,r16
  804fc8:	91400717 	ldw	r5,28(r18)
  804fcc:	1400012e 	bgeu	r2,r16,804fd4 <__sfvwrite_r+0x88>
  804fd0:	100f883a 	mov	r7,r2
  804fd4:	90c00917 	ldw	r3,36(r18)
  804fd8:	183ee83a 	callr	r3
  804fdc:	1007883a 	mov	r3,r2
  804fe0:	80a1c83a 	sub	r16,r16,r2
  804fe4:	88a3883a 	add	r17,r17,r2
  804fe8:	00806d0e 	bge	zero,r2,8051a0 <__sfvwrite_r+0x254>
  804fec:	b0800217 	ldw	r2,8(r22)
  804ff0:	10c5c83a 	sub	r2,r2,r3
  804ff4:	b0800215 	stw	r2,8(r22)
  804ff8:	103fee1e 	bne	r2,zero,804fb4 <__sfvwrite_r+0x68>
  804ffc:	0009883a 	mov	r4,zero
  805000:	2005883a 	mov	r2,r4
  805004:	dfc00a17 	ldw	ra,40(sp)
  805008:	df000917 	ldw	fp,36(sp)
  80500c:	ddc00817 	ldw	r23,32(sp)
  805010:	dd800717 	ldw	r22,28(sp)
  805014:	dd400617 	ldw	r21,24(sp)
  805018:	dd000517 	ldw	r20,20(sp)
  80501c:	dcc00417 	ldw	r19,16(sp)
  805020:	dc800317 	ldw	r18,12(sp)
  805024:	dc400217 	ldw	r17,8(sp)
  805028:	dc000117 	ldw	r16,4(sp)
  80502c:	dec00b04 	addi	sp,sp,44
  805030:	f800283a 	ret
  805034:	0802cb40 	call	802cb4 <__swsetup_r>
  805038:	1000e41e 	bne	r2,zero,8053cc <__sfvwrite_r+0x480>
  80503c:	91c0030b 	ldhu	r7,12(r18)
  805040:	b5400017 	ldw	r21,0(r22)
  805044:	3880008c 	andi	r2,r7,2
  805048:	103fd81e 	bne	r2,zero,804fac <__sfvwrite_r+0x60>
  80504c:	3880004c 	andi	r2,r7,1
  805050:	1005003a 	cmpeq	r2,r2,zero
  805054:	10005726 	beq	r2,zero,8051b4 <__sfvwrite_r+0x268>
  805058:	0029883a 	mov	r20,zero
  80505c:	002f883a 	mov	r23,zero
  805060:	a0004226 	beq	r20,zero,80516c <__sfvwrite_r+0x220>
  805064:	3880800c 	andi	r2,r7,512
  805068:	94000217 	ldw	r16,8(r18)
  80506c:	10008b26 	beq	r2,zero,80529c <__sfvwrite_r+0x350>
  805070:	800d883a 	mov	r6,r16
  805074:	a400a536 	bltu	r20,r16,80530c <__sfvwrite_r+0x3c0>
  805078:	3881200c 	andi	r2,r7,1152
  80507c:	10002726 	beq	r2,zero,80511c <__sfvwrite_r+0x1d0>
  805080:	90800517 	ldw	r2,20(r18)
  805084:	92000417 	ldw	r8,16(r18)
  805088:	91400017 	ldw	r5,0(r18)
  80508c:	1087883a 	add	r3,r2,r2
  805090:	1887883a 	add	r3,r3,r2
  805094:	1808d7fa 	srli	r4,r3,31
  805098:	2a21c83a 	sub	r16,r5,r8
  80509c:	80800044 	addi	r2,r16,1
  8050a0:	20c9883a 	add	r4,r4,r3
  8050a4:	2027d07a 	srai	r19,r4,1
  8050a8:	a085883a 	add	r2,r20,r2
  8050ac:	980d883a 	mov	r6,r19
  8050b0:	9880022e 	bgeu	r19,r2,8050bc <__sfvwrite_r+0x170>
  8050b4:	1027883a 	mov	r19,r2
  8050b8:	100d883a 	mov	r6,r2
  8050bc:	3881000c 	andi	r2,r7,1024
  8050c0:	1000b826 	beq	r2,zero,8053a4 <__sfvwrite_r+0x458>
  8050c4:	300b883a 	mov	r5,r6
  8050c8:	e009883a 	mov	r4,fp
  8050cc:	08057c00 	call	8057c0 <_malloc_r>
  8050d0:	10003126 	beq	r2,zero,805198 <__sfvwrite_r+0x24c>
  8050d4:	91400417 	ldw	r5,16(r18)
  8050d8:	1009883a 	mov	r4,r2
  8050dc:	800d883a 	mov	r6,r16
  8050e0:	1023883a 	mov	r17,r2
  8050e4:	0805fe40 	call	805fe4 <memcpy>
  8050e8:	90c0030b 	ldhu	r3,12(r18)
  8050ec:	00beffc4 	movi	r2,-1025
  8050f0:	1886703a 	and	r3,r3,r2
  8050f4:	18c02014 	ori	r3,r3,128
  8050f8:	90c0030d 	sth	r3,12(r18)
  8050fc:	9c07c83a 	sub	r3,r19,r16
  805100:	8c05883a 	add	r2,r17,r16
  805104:	a00d883a 	mov	r6,r20
  805108:	a021883a 	mov	r16,r20
  80510c:	90800015 	stw	r2,0(r18)
  805110:	90c00215 	stw	r3,8(r18)
  805114:	94400415 	stw	r17,16(r18)
  805118:	94c00515 	stw	r19,20(r18)
  80511c:	91000017 	ldw	r4,0(r18)
  805120:	b80b883a 	mov	r5,r23
  805124:	a023883a 	mov	r17,r20
  805128:	08060840 	call	806084 <memmove>
  80512c:	90c00217 	ldw	r3,8(r18)
  805130:	90800017 	ldw	r2,0(r18)
  805134:	a027883a 	mov	r19,r20
  805138:	1c07c83a 	sub	r3,r3,r16
  80513c:	1405883a 	add	r2,r2,r16
  805140:	90c00215 	stw	r3,8(r18)
  805144:	a021883a 	mov	r16,r20
  805148:	90800015 	stw	r2,0(r18)
  80514c:	b0800217 	ldw	r2,8(r22)
  805150:	1405c83a 	sub	r2,r2,r16
  805154:	b0800215 	stw	r2,8(r22)
  805158:	103fa826 	beq	r2,zero,804ffc <__sfvwrite_r+0xb0>
  80515c:	a469c83a 	sub	r20,r20,r17
  805160:	91c0030b 	ldhu	r7,12(r18)
  805164:	bcef883a 	add	r23,r23,r19
  805168:	a03fbe1e 	bne	r20,zero,805064 <__sfvwrite_r+0x118>
  80516c:	adc00017 	ldw	r23,0(r21)
  805170:	ad000117 	ldw	r20,4(r21)
  805174:	ad400204 	addi	r21,r21,8
  805178:	003fb906 	br	805060 <__sfvwrite_r+0x114>
  80517c:	ac400017 	ldw	r17,0(r21)
  805180:	ac000117 	ldw	r16,4(r21)
  805184:	ad400204 	addi	r21,r21,8
  805188:	003f8a06 	br	804fb4 <__sfvwrite_r+0x68>
  80518c:	91400417 	ldw	r5,16(r18)
  805190:	e009883a 	mov	r4,fp
  805194:	0804c380 	call	804c38 <_free_r>
  805198:	00800304 	movi	r2,12
  80519c:	e0800015 	stw	r2,0(fp)
  8051a0:	9080030b 	ldhu	r2,12(r18)
  8051a4:	013fffc4 	movi	r4,-1
  8051a8:	10801014 	ori	r2,r2,64
  8051ac:	9080030d 	sth	r2,12(r18)
  8051b0:	003f9306 	br	805000 <__sfvwrite_r+0xb4>
  8051b4:	0027883a 	mov	r19,zero
  8051b8:	002f883a 	mov	r23,zero
  8051bc:	d8000015 	stw	zero,0(sp)
  8051c0:	0029883a 	mov	r20,zero
  8051c4:	98001e26 	beq	r19,zero,805240 <__sfvwrite_r+0x2f4>
  8051c8:	d8c00017 	ldw	r3,0(sp)
  8051cc:	1804c03a 	cmpne	r2,r3,zero
  8051d0:	10005e26 	beq	r2,zero,80534c <__sfvwrite_r+0x400>
  8051d4:	9821883a 	mov	r16,r19
  8051d8:	a4c0012e 	bgeu	r20,r19,8051e0 <__sfvwrite_r+0x294>
  8051dc:	a021883a 	mov	r16,r20
  8051e0:	91000017 	ldw	r4,0(r18)
  8051e4:	90800417 	ldw	r2,16(r18)
  8051e8:	91800217 	ldw	r6,8(r18)
  8051ec:	91c00517 	ldw	r7,20(r18)
  8051f0:	1100022e 	bgeu	r2,r4,8051fc <__sfvwrite_r+0x2b0>
  8051f4:	31e3883a 	add	r17,r6,r7
  8051f8:	8c001616 	blt	r17,r16,805254 <__sfvwrite_r+0x308>
  8051fc:	81c03816 	blt	r16,r7,8052e0 <__sfvwrite_r+0x394>
  805200:	90c00917 	ldw	r3,36(r18)
  805204:	91400717 	ldw	r5,28(r18)
  805208:	e009883a 	mov	r4,fp
  80520c:	b80d883a 	mov	r6,r23
  805210:	183ee83a 	callr	r3
  805214:	1023883a 	mov	r17,r2
  805218:	00bfe10e 	bge	zero,r2,8051a0 <__sfvwrite_r+0x254>
  80521c:	a469c83a 	sub	r20,r20,r17
  805220:	a0001826 	beq	r20,zero,805284 <__sfvwrite_r+0x338>
  805224:	b0800217 	ldw	r2,8(r22)
  805228:	1445c83a 	sub	r2,r2,r17
  80522c:	b0800215 	stw	r2,8(r22)
  805230:	103f7226 	beq	r2,zero,804ffc <__sfvwrite_r+0xb0>
  805234:	9c67c83a 	sub	r19,r19,r17
  805238:	bc6f883a 	add	r23,r23,r17
  80523c:	983fe21e 	bne	r19,zero,8051c8 <__sfvwrite_r+0x27c>
  805240:	adc00017 	ldw	r23,0(r21)
  805244:	acc00117 	ldw	r19,4(r21)
  805248:	ad400204 	addi	r21,r21,8
  80524c:	d8000015 	stw	zero,0(sp)
  805250:	003fdc06 	br	8051c4 <__sfvwrite_r+0x278>
  805254:	b80b883a 	mov	r5,r23
  805258:	880d883a 	mov	r6,r17
  80525c:	08060840 	call	806084 <memmove>
  805260:	90c00017 	ldw	r3,0(r18)
  805264:	e009883a 	mov	r4,fp
  805268:	900b883a 	mov	r5,r18
  80526c:	1c47883a 	add	r3,r3,r17
  805270:	90c00015 	stw	r3,0(r18)
  805274:	08045e80 	call	8045e8 <_fflush_r>
  805278:	103fc91e 	bne	r2,zero,8051a0 <__sfvwrite_r+0x254>
  80527c:	a469c83a 	sub	r20,r20,r17
  805280:	a03fe81e 	bne	r20,zero,805224 <__sfvwrite_r+0x2d8>
  805284:	e009883a 	mov	r4,fp
  805288:	900b883a 	mov	r5,r18
  80528c:	08045e80 	call	8045e8 <_fflush_r>
  805290:	103fc31e 	bne	r2,zero,8051a0 <__sfvwrite_r+0x254>
  805294:	d8000015 	stw	zero,0(sp)
  805298:	003fe206 	br	805224 <__sfvwrite_r+0x2d8>
  80529c:	91000017 	ldw	r4,0(r18)
  8052a0:	90800417 	ldw	r2,16(r18)
  8052a4:	1100022e 	bgeu	r2,r4,8052b0 <__sfvwrite_r+0x364>
  8052a8:	8023883a 	mov	r17,r16
  8052ac:	85003136 	bltu	r16,r20,805374 <__sfvwrite_r+0x428>
  8052b0:	91c00517 	ldw	r7,20(r18)
  8052b4:	a1c01836 	bltu	r20,r7,805318 <__sfvwrite_r+0x3cc>
  8052b8:	90c00917 	ldw	r3,36(r18)
  8052bc:	91400717 	ldw	r5,28(r18)
  8052c0:	e009883a 	mov	r4,fp
  8052c4:	b80d883a 	mov	r6,r23
  8052c8:	183ee83a 	callr	r3
  8052cc:	1021883a 	mov	r16,r2
  8052d0:	00bfb30e 	bge	zero,r2,8051a0 <__sfvwrite_r+0x254>
  8052d4:	1023883a 	mov	r17,r2
  8052d8:	1027883a 	mov	r19,r2
  8052dc:	003f9b06 	br	80514c <__sfvwrite_r+0x200>
  8052e0:	b80b883a 	mov	r5,r23
  8052e4:	800d883a 	mov	r6,r16
  8052e8:	08060840 	call	806084 <memmove>
  8052ec:	90c00217 	ldw	r3,8(r18)
  8052f0:	90800017 	ldw	r2,0(r18)
  8052f4:	8023883a 	mov	r17,r16
  8052f8:	1c07c83a 	sub	r3,r3,r16
  8052fc:	1405883a 	add	r2,r2,r16
  805300:	90c00215 	stw	r3,8(r18)
  805304:	90800015 	stw	r2,0(r18)
  805308:	003fc406 	br	80521c <__sfvwrite_r+0x2d0>
  80530c:	a00d883a 	mov	r6,r20
  805310:	a021883a 	mov	r16,r20
  805314:	003f8106 	br	80511c <__sfvwrite_r+0x1d0>
  805318:	b80b883a 	mov	r5,r23
  80531c:	a00d883a 	mov	r6,r20
  805320:	08060840 	call	806084 <memmove>
  805324:	90c00217 	ldw	r3,8(r18)
  805328:	90800017 	ldw	r2,0(r18)
  80532c:	a021883a 	mov	r16,r20
  805330:	1d07c83a 	sub	r3,r3,r20
  805334:	1505883a 	add	r2,r2,r20
  805338:	a023883a 	mov	r17,r20
  80533c:	a027883a 	mov	r19,r20
  805340:	90c00215 	stw	r3,8(r18)
  805344:	90800015 	stw	r2,0(r18)
  805348:	003f8006 	br	80514c <__sfvwrite_r+0x200>
  80534c:	b809883a 	mov	r4,r23
  805350:	01400284 	movi	r5,10
  805354:	980d883a 	mov	r6,r19
  805358:	0805f000 	call	805f00 <memchr>
  80535c:	10001726 	beq	r2,zero,8053bc <__sfvwrite_r+0x470>
  805360:	15c5c83a 	sub	r2,r2,r23
  805364:	15000044 	addi	r20,r2,1
  805368:	00800044 	movi	r2,1
  80536c:	d8800015 	stw	r2,0(sp)
  805370:	003f9806 	br	8051d4 <__sfvwrite_r+0x288>
  805374:	b80b883a 	mov	r5,r23
  805378:	800d883a 	mov	r6,r16
  80537c:	08060840 	call	806084 <memmove>
  805380:	90c00017 	ldw	r3,0(r18)
  805384:	e009883a 	mov	r4,fp
  805388:	900b883a 	mov	r5,r18
  80538c:	1c07883a 	add	r3,r3,r16
  805390:	90c00015 	stw	r3,0(r18)
  805394:	8027883a 	mov	r19,r16
  805398:	08045e80 	call	8045e8 <_fflush_r>
  80539c:	103f6b26 	beq	r2,zero,80514c <__sfvwrite_r+0x200>
  8053a0:	003f7f06 	br	8051a0 <__sfvwrite_r+0x254>
  8053a4:	400b883a 	mov	r5,r8
  8053a8:	e009883a 	mov	r4,fp
  8053ac:	08072880 	call	807288 <_realloc_r>
  8053b0:	103f7626 	beq	r2,zero,80518c <__sfvwrite_r+0x240>
  8053b4:	1023883a 	mov	r17,r2
  8053b8:	003f5006 	br	8050fc <__sfvwrite_r+0x1b0>
  8053bc:	00c00044 	movi	r3,1
  8053c0:	9d000044 	addi	r20,r19,1
  8053c4:	d8c00015 	stw	r3,0(sp)
  8053c8:	003f8206 	br	8051d4 <__sfvwrite_r+0x288>
  8053cc:	9080030b 	ldhu	r2,12(r18)
  8053d0:	00c00244 	movi	r3,9
  8053d4:	013fffc4 	movi	r4,-1
  8053d8:	10801014 	ori	r2,r2,64
  8053dc:	9080030d 	sth	r2,12(r18)
  8053e0:	e0c00015 	stw	r3,0(fp)
  8053e4:	003f0606 	br	805000 <__sfvwrite_r+0xb4>

008053e8 <_fwalk_reent>:
  8053e8:	defff704 	addi	sp,sp,-36
  8053ec:	dcc00315 	stw	r19,12(sp)
  8053f0:	24c0b804 	addi	r19,r4,736
  8053f4:	dd800615 	stw	r22,24(sp)
  8053f8:	dd400515 	stw	r21,20(sp)
  8053fc:	dfc00815 	stw	ra,32(sp)
  805400:	ddc00715 	stw	r23,28(sp)
  805404:	dd000415 	stw	r20,16(sp)
  805408:	dc800215 	stw	r18,8(sp)
  80540c:	dc400115 	stw	r17,4(sp)
  805410:	dc000015 	stw	r16,0(sp)
  805414:	202b883a 	mov	r21,r4
  805418:	282d883a 	mov	r22,r5
  80541c:	08048700 	call	804870 <__sfp_lock_acquire>
  805420:	98002126 	beq	r19,zero,8054a8 <_fwalk_reent+0xc0>
  805424:	002f883a 	mov	r23,zero
  805428:	9c800117 	ldw	r18,4(r19)
  80542c:	9c000217 	ldw	r16,8(r19)
  805430:	90bfffc4 	addi	r2,r18,-1
  805434:	10000d16 	blt	r2,zero,80546c <_fwalk_reent+0x84>
  805438:	0023883a 	mov	r17,zero
  80543c:	053fffc4 	movi	r20,-1
  805440:	8080030f 	ldh	r2,12(r16)
  805444:	8c400044 	addi	r17,r17,1
  805448:	10000626 	beq	r2,zero,805464 <_fwalk_reent+0x7c>
  80544c:	8080038f 	ldh	r2,14(r16)
  805450:	800b883a 	mov	r5,r16
  805454:	a809883a 	mov	r4,r21
  805458:	15000226 	beq	r2,r20,805464 <_fwalk_reent+0x7c>
  80545c:	b03ee83a 	callr	r22
  805460:	b8aeb03a 	or	r23,r23,r2
  805464:	84001704 	addi	r16,r16,92
  805468:	947ff51e 	bne	r18,r17,805440 <_fwalk_reent+0x58>
  80546c:	9cc00017 	ldw	r19,0(r19)
  805470:	983fed1e 	bne	r19,zero,805428 <_fwalk_reent+0x40>
  805474:	08048740 	call	804874 <__sfp_lock_release>
  805478:	b805883a 	mov	r2,r23
  80547c:	dfc00817 	ldw	ra,32(sp)
  805480:	ddc00717 	ldw	r23,28(sp)
  805484:	dd800617 	ldw	r22,24(sp)
  805488:	dd400517 	ldw	r21,20(sp)
  80548c:	dd000417 	ldw	r20,16(sp)
  805490:	dcc00317 	ldw	r19,12(sp)
  805494:	dc800217 	ldw	r18,8(sp)
  805498:	dc400117 	ldw	r17,4(sp)
  80549c:	dc000017 	ldw	r16,0(sp)
  8054a0:	dec00904 	addi	sp,sp,36
  8054a4:	f800283a 	ret
  8054a8:	002f883a 	mov	r23,zero
  8054ac:	003ff106 	br	805474 <_fwalk_reent+0x8c>

008054b0 <_fwalk>:
  8054b0:	defff804 	addi	sp,sp,-32
  8054b4:	dcc00315 	stw	r19,12(sp)
  8054b8:	24c0b804 	addi	r19,r4,736
  8054bc:	dd400515 	stw	r21,20(sp)
  8054c0:	dfc00715 	stw	ra,28(sp)
  8054c4:	dd800615 	stw	r22,24(sp)
  8054c8:	dd000415 	stw	r20,16(sp)
  8054cc:	dc800215 	stw	r18,8(sp)
  8054d0:	dc400115 	stw	r17,4(sp)
  8054d4:	dc000015 	stw	r16,0(sp)
  8054d8:	282b883a 	mov	r21,r5
  8054dc:	08048700 	call	804870 <__sfp_lock_acquire>
  8054e0:	98001f26 	beq	r19,zero,805560 <_fwalk+0xb0>
  8054e4:	002d883a 	mov	r22,zero
  8054e8:	9c800117 	ldw	r18,4(r19)
  8054ec:	9c000217 	ldw	r16,8(r19)
  8054f0:	90bfffc4 	addi	r2,r18,-1
  8054f4:	10000c16 	blt	r2,zero,805528 <_fwalk+0x78>
  8054f8:	0023883a 	mov	r17,zero
  8054fc:	053fffc4 	movi	r20,-1
  805500:	8080030f 	ldh	r2,12(r16)
  805504:	8c400044 	addi	r17,r17,1
  805508:	10000526 	beq	r2,zero,805520 <_fwalk+0x70>
  80550c:	8080038f 	ldh	r2,14(r16)
  805510:	8009883a 	mov	r4,r16
  805514:	15000226 	beq	r2,r20,805520 <_fwalk+0x70>
  805518:	a83ee83a 	callr	r21
  80551c:	b0acb03a 	or	r22,r22,r2
  805520:	84001704 	addi	r16,r16,92
  805524:	947ff61e 	bne	r18,r17,805500 <_fwalk+0x50>
  805528:	9cc00017 	ldw	r19,0(r19)
  80552c:	983fee1e 	bne	r19,zero,8054e8 <_fwalk+0x38>
  805530:	08048740 	call	804874 <__sfp_lock_release>
  805534:	b005883a 	mov	r2,r22
  805538:	dfc00717 	ldw	ra,28(sp)
  80553c:	dd800617 	ldw	r22,24(sp)
  805540:	dd400517 	ldw	r21,20(sp)
  805544:	dd000417 	ldw	r20,16(sp)
  805548:	dcc00317 	ldw	r19,12(sp)
  80554c:	dc800217 	ldw	r18,8(sp)
  805550:	dc400117 	ldw	r17,4(sp)
  805554:	dc000017 	ldw	r16,0(sp)
  805558:	dec00804 	addi	sp,sp,32
  80555c:	f800283a 	ret
  805560:	002d883a 	mov	r22,zero
  805564:	003ff206 	br	805530 <_fwalk+0x80>

00805568 <__locale_charset>:
  805568:	d0a00317 	ldw	r2,-32756(gp)
  80556c:	f800283a 	ret

00805570 <_localeconv_r>:
  805570:	00802074 	movhi	r2,129
  805574:	10b36704 	addi	r2,r2,-12900
  805578:	f800283a 	ret

0080557c <localeconv>:
  80557c:	00802074 	movhi	r2,129
  805580:	10ba9304 	addi	r2,r2,-5556
  805584:	11000017 	ldw	r4,0(r2)
  805588:	08055701 	jmpi	805570 <_localeconv_r>

0080558c <_setlocale_r>:
  80558c:	defffc04 	addi	sp,sp,-16
  805590:	00c02074 	movhi	r3,129
  805594:	18f36204 	addi	r3,r3,-12920
  805598:	dc800215 	stw	r18,8(sp)
  80559c:	dc400115 	stw	r17,4(sp)
  8055a0:	dc000015 	stw	r16,0(sp)
  8055a4:	2023883a 	mov	r17,r4
  8055a8:	2825883a 	mov	r18,r5
  8055ac:	dfc00315 	stw	ra,12(sp)
  8055b0:	3021883a 	mov	r16,r6
  8055b4:	3009883a 	mov	r4,r6
  8055b8:	180b883a 	mov	r5,r3
  8055bc:	30000926 	beq	r6,zero,8055e4 <_setlocale_r+0x58>
  8055c0:	0807aa80 	call	807aa8 <strcmp>
  8055c4:	8009883a 	mov	r4,r16
  8055c8:	01402074 	movhi	r5,129
  8055cc:	29734d04 	addi	r5,r5,-13004
  8055d0:	10000b1e 	bne	r2,zero,805600 <_setlocale_r+0x74>
  8055d4:	8c000d15 	stw	r16,52(r17)
  8055d8:	8c800c15 	stw	r18,48(r17)
  8055dc:	00c02074 	movhi	r3,129
  8055e0:	18f36204 	addi	r3,r3,-12920
  8055e4:	1805883a 	mov	r2,r3
  8055e8:	dfc00317 	ldw	ra,12(sp)
  8055ec:	dc800217 	ldw	r18,8(sp)
  8055f0:	dc400117 	ldw	r17,4(sp)
  8055f4:	dc000017 	ldw	r16,0(sp)
  8055f8:	dec00404 	addi	sp,sp,16
  8055fc:	f800283a 	ret
  805600:	0807aa80 	call	807aa8 <strcmp>
  805604:	0007883a 	mov	r3,zero
  805608:	103ff226 	beq	r2,zero,8055d4 <_setlocale_r+0x48>
  80560c:	003ff506 	br	8055e4 <_setlocale_r+0x58>

00805610 <setlocale>:
  805610:	01802074 	movhi	r6,129
  805614:	31ba9304 	addi	r6,r6,-5556
  805618:	2007883a 	mov	r3,r4
  80561c:	31000017 	ldw	r4,0(r6)
  805620:	280d883a 	mov	r6,r5
  805624:	180b883a 	mov	r5,r3
  805628:	080558c1 	jmpi	80558c <_setlocale_r>

0080562c <__smakebuf_r>:
  80562c:	2880030b 	ldhu	r2,12(r5)
  805630:	deffed04 	addi	sp,sp,-76
  805634:	dc401015 	stw	r17,64(sp)
  805638:	1080008c 	andi	r2,r2,2
  80563c:	dc000f15 	stw	r16,60(sp)
  805640:	dfc01215 	stw	ra,72(sp)
  805644:	dc801115 	stw	r18,68(sp)
  805648:	2821883a 	mov	r16,r5
  80564c:	2023883a 	mov	r17,r4
  805650:	10000b26 	beq	r2,zero,805680 <__smakebuf_r+0x54>
  805654:	28c010c4 	addi	r3,r5,67
  805658:	00800044 	movi	r2,1
  80565c:	28800515 	stw	r2,20(r5)
  805660:	28c00415 	stw	r3,16(r5)
  805664:	28c00015 	stw	r3,0(r5)
  805668:	dfc01217 	ldw	ra,72(sp)
  80566c:	dc801117 	ldw	r18,68(sp)
  805670:	dc401017 	ldw	r17,64(sp)
  805674:	dc000f17 	ldw	r16,60(sp)
  805678:	dec01304 	addi	sp,sp,76
  80567c:	f800283a 	ret
  805680:	2940038f 	ldh	r5,14(r5)
  805684:	28002116 	blt	r5,zero,80570c <__smakebuf_r+0xe0>
  805688:	d80d883a 	mov	r6,sp
  80568c:	0807e380 	call	807e38 <_fstat_r>
  805690:	10001e16 	blt	r2,zero,80570c <__smakebuf_r+0xe0>
  805694:	d8800117 	ldw	r2,4(sp)
  805698:	00e00014 	movui	r3,32768
  80569c:	113c000c 	andi	r4,r2,61440
  8056a0:	20c03126 	beq	r4,r3,805768 <__smakebuf_r+0x13c>
  8056a4:	8080030b 	ldhu	r2,12(r16)
  8056a8:	00c80004 	movi	r3,8192
  8056ac:	10820014 	ori	r2,r2,2048
  8056b0:	8080030d 	sth	r2,12(r16)
  8056b4:	20c01e26 	beq	r4,r3,805730 <__smakebuf_r+0x104>
  8056b8:	04810004 	movi	r18,1024
  8056bc:	8809883a 	mov	r4,r17
  8056c0:	900b883a 	mov	r5,r18
  8056c4:	08057c00 	call	8057c0 <_malloc_r>
  8056c8:	1009883a 	mov	r4,r2
  8056cc:	10003126 	beq	r2,zero,805794 <__smakebuf_r+0x168>
  8056d0:	80c0030b 	ldhu	r3,12(r16)
  8056d4:	00802034 	movhi	r2,128
  8056d8:	10925904 	addi	r2,r2,18788
  8056dc:	88800f15 	stw	r2,60(r17)
  8056e0:	18c02014 	ori	r3,r3,128
  8056e4:	84800515 	stw	r18,20(r16)
  8056e8:	80c0030d 	sth	r3,12(r16)
  8056ec:	81000415 	stw	r4,16(r16)
  8056f0:	81000015 	stw	r4,0(r16)
  8056f4:	dfc01217 	ldw	ra,72(sp)
  8056f8:	dc801117 	ldw	r18,68(sp)
  8056fc:	dc401017 	ldw	r17,64(sp)
  805700:	dc000f17 	ldw	r16,60(sp)
  805704:	dec01304 	addi	sp,sp,76
  805708:	f800283a 	ret
  80570c:	80c0030b 	ldhu	r3,12(r16)
  805710:	1880200c 	andi	r2,r3,128
  805714:	10000426 	beq	r2,zero,805728 <__smakebuf_r+0xfc>
  805718:	04801004 	movi	r18,64
  80571c:	18820014 	ori	r2,r3,2048
  805720:	8080030d 	sth	r2,12(r16)
  805724:	003fe506 	br	8056bc <__smakebuf_r+0x90>
  805728:	04810004 	movi	r18,1024
  80572c:	003ffb06 	br	80571c <__smakebuf_r+0xf0>
  805730:	8140038f 	ldh	r5,14(r16)
  805734:	8809883a 	mov	r4,r17
  805738:	0807eac0 	call	807eac <_isatty_r>
  80573c:	103fde26 	beq	r2,zero,8056b8 <__smakebuf_r+0x8c>
  805740:	8080030b 	ldhu	r2,12(r16)
  805744:	80c010c4 	addi	r3,r16,67
  805748:	04810004 	movi	r18,1024
  80574c:	10800054 	ori	r2,r2,1
  805750:	8080030d 	sth	r2,12(r16)
  805754:	00800044 	movi	r2,1
  805758:	80c00415 	stw	r3,16(r16)
  80575c:	80800515 	stw	r2,20(r16)
  805760:	80c00015 	stw	r3,0(r16)
  805764:	003fd506 	br	8056bc <__smakebuf_r+0x90>
  805768:	80c00a17 	ldw	r3,40(r16)
  80576c:	00802034 	movhi	r2,128
  805770:	109e5904 	addi	r2,r2,31076
  805774:	18bfcb1e 	bne	r3,r2,8056a4 <__smakebuf_r+0x78>
  805778:	8080030b 	ldhu	r2,12(r16)
  80577c:	00c10004 	movi	r3,1024
  805780:	1825883a 	mov	r18,r3
  805784:	10c4b03a 	or	r2,r2,r3
  805788:	8080030d 	sth	r2,12(r16)
  80578c:	80c01315 	stw	r3,76(r16)
  805790:	003fca06 	br	8056bc <__smakebuf_r+0x90>
  805794:	8100030b 	ldhu	r4,12(r16)
  805798:	2080800c 	andi	r2,r4,512
  80579c:	103fb21e 	bne	r2,zero,805668 <__smakebuf_r+0x3c>
  8057a0:	80c010c4 	addi	r3,r16,67
  8057a4:	21000094 	ori	r4,r4,2
  8057a8:	00800044 	movi	r2,1
  8057ac:	80800515 	stw	r2,20(r16)
  8057b0:	8100030d 	sth	r4,12(r16)
  8057b4:	80c00415 	stw	r3,16(r16)
  8057b8:	80c00015 	stw	r3,0(r16)
  8057bc:	003faa06 	br	805668 <__smakebuf_r+0x3c>

008057c0 <_malloc_r>:
  8057c0:	defff604 	addi	sp,sp,-40
  8057c4:	28c002c4 	addi	r3,r5,11
  8057c8:	00800584 	movi	r2,22
  8057cc:	dc800215 	stw	r18,8(sp)
  8057d0:	dfc00915 	stw	ra,36(sp)
  8057d4:	df000815 	stw	fp,32(sp)
  8057d8:	ddc00715 	stw	r23,28(sp)
  8057dc:	dd800615 	stw	r22,24(sp)
  8057e0:	dd400515 	stw	r21,20(sp)
  8057e4:	dd000415 	stw	r20,16(sp)
  8057e8:	dcc00315 	stw	r19,12(sp)
  8057ec:	dc400115 	stw	r17,4(sp)
  8057f0:	dc000015 	stw	r16,0(sp)
  8057f4:	2025883a 	mov	r18,r4
  8057f8:	10c01236 	bltu	r2,r3,805844 <_malloc_r+0x84>
  8057fc:	04400404 	movi	r17,16
  805800:	8940142e 	bgeu	r17,r5,805854 <_malloc_r+0x94>
  805804:	00800304 	movi	r2,12
  805808:	0007883a 	mov	r3,zero
  80580c:	90800015 	stw	r2,0(r18)
  805810:	1805883a 	mov	r2,r3
  805814:	dfc00917 	ldw	ra,36(sp)
  805818:	df000817 	ldw	fp,32(sp)
  80581c:	ddc00717 	ldw	r23,28(sp)
  805820:	dd800617 	ldw	r22,24(sp)
  805824:	dd400517 	ldw	r21,20(sp)
  805828:	dd000417 	ldw	r20,16(sp)
  80582c:	dcc00317 	ldw	r19,12(sp)
  805830:	dc800217 	ldw	r18,8(sp)
  805834:	dc400117 	ldw	r17,4(sp)
  805838:	dc000017 	ldw	r16,0(sp)
  80583c:	dec00a04 	addi	sp,sp,40
  805840:	f800283a 	ret
  805844:	00bffe04 	movi	r2,-8
  805848:	18a2703a 	and	r17,r3,r2
  80584c:	883fed16 	blt	r17,zero,805804 <_malloc_r+0x44>
  805850:	897fec36 	bltu	r17,r5,805804 <_malloc_r+0x44>
  805854:	9009883a 	mov	r4,r18
  805858:	080a8640 	call	80a864 <__malloc_lock>
  80585c:	00807dc4 	movi	r2,503
  805860:	14402b2e 	bgeu	r2,r17,805910 <_malloc_r+0x150>
  805864:	8806d27a 	srli	r3,r17,9
  805868:	18003f1e 	bne	r3,zero,805968 <_malloc_r+0x1a8>
  80586c:	880cd0fa 	srli	r6,r17,3
  805870:	300490fa 	slli	r2,r6,3
  805874:	02c02074 	movhi	r11,129
  805878:	5af50f04 	addi	r11,r11,-11204
  80587c:	12cb883a 	add	r5,r2,r11
  805880:	2c000317 	ldw	r16,12(r5)
  805884:	580f883a 	mov	r7,r11
  805888:	2c00041e 	bne	r5,r16,80589c <_malloc_r+0xdc>
  80588c:	00000a06 	br	8058b8 <_malloc_r+0xf8>
  805890:	1800860e 	bge	r3,zero,805aac <_malloc_r+0x2ec>
  805894:	84000317 	ldw	r16,12(r16)
  805898:	2c000726 	beq	r5,r16,8058b8 <_malloc_r+0xf8>
  80589c:	80800117 	ldw	r2,4(r16)
  8058a0:	00ffff04 	movi	r3,-4
  8058a4:	10c8703a 	and	r4,r2,r3
  8058a8:	2447c83a 	sub	r3,r4,r17
  8058ac:	008003c4 	movi	r2,15
  8058b0:	10fff70e 	bge	r2,r3,805890 <_malloc_r+0xd0>
  8058b4:	31bfffc4 	addi	r6,r6,-1
  8058b8:	32400044 	addi	r9,r6,1
  8058bc:	02802074 	movhi	r10,129
  8058c0:	52b51104 	addi	r10,r10,-11196
  8058c4:	54000217 	ldw	r16,8(r10)
  8058c8:	8280a026 	beq	r16,r10,805b4c <_malloc_r+0x38c>
  8058cc:	80800117 	ldw	r2,4(r16)
  8058d0:	00ffff04 	movi	r3,-4
  8058d4:	10ca703a 	and	r5,r2,r3
  8058d8:	2c4dc83a 	sub	r6,r5,r17
  8058dc:	008003c4 	movi	r2,15
  8058e0:	11808316 	blt	r2,r6,805af0 <_malloc_r+0x330>
  8058e4:	52800315 	stw	r10,12(r10)
  8058e8:	52800215 	stw	r10,8(r10)
  8058ec:	30002916 	blt	r6,zero,805994 <_malloc_r+0x1d4>
  8058f0:	8147883a 	add	r3,r16,r5
  8058f4:	18800117 	ldw	r2,4(r3)
  8058f8:	9009883a 	mov	r4,r18
  8058fc:	10800054 	ori	r2,r2,1
  805900:	18800115 	stw	r2,4(r3)
  805904:	080a8840 	call	80a884 <__malloc_unlock>
  805908:	80c00204 	addi	r3,r16,8
  80590c:	003fc006 	br	805810 <_malloc_r+0x50>
  805910:	02c02074 	movhi	r11,129
  805914:	5af50f04 	addi	r11,r11,-11204
  805918:	8ac5883a 	add	r2,r17,r11
  80591c:	14000317 	ldw	r16,12(r2)
  805920:	580f883a 	mov	r7,r11
  805924:	8806d0fa 	srli	r3,r17,3
  805928:	14006c26 	beq	r2,r16,805adc <_malloc_r+0x31c>
  80592c:	80c00117 	ldw	r3,4(r16)
  805930:	00bfff04 	movi	r2,-4
  805934:	81800317 	ldw	r6,12(r16)
  805938:	1886703a 	and	r3,r3,r2
  80593c:	80c7883a 	add	r3,r16,r3
  805940:	18800117 	ldw	r2,4(r3)
  805944:	81400217 	ldw	r5,8(r16)
  805948:	9009883a 	mov	r4,r18
  80594c:	10800054 	ori	r2,r2,1
  805950:	18800115 	stw	r2,4(r3)
  805954:	31400215 	stw	r5,8(r6)
  805958:	29800315 	stw	r6,12(r5)
  80595c:	080a8840 	call	80a884 <__malloc_unlock>
  805960:	80c00204 	addi	r3,r16,8
  805964:	003faa06 	br	805810 <_malloc_r+0x50>
  805968:	00800104 	movi	r2,4
  80596c:	10c0052e 	bgeu	r2,r3,805984 <_malloc_r+0x1c4>
  805970:	00800504 	movi	r2,20
  805974:	10c07836 	bltu	r2,r3,805b58 <_malloc_r+0x398>
  805978:	198016c4 	addi	r6,r3,91
  80597c:	300490fa 	slli	r2,r6,3
  805980:	003fbc06 	br	805874 <_malloc_r+0xb4>
  805984:	8804d1ba 	srli	r2,r17,6
  805988:	11800e04 	addi	r6,r2,56
  80598c:	300490fa 	slli	r2,r6,3
  805990:	003fb806 	br	805874 <_malloc_r+0xb4>
  805994:	00807fc4 	movi	r2,511
  805998:	1140bb36 	bltu	r2,r5,805c88 <_malloc_r+0x4c8>
  80599c:	2806d0fa 	srli	r3,r5,3
  8059a0:	573ffe04 	addi	fp,r10,-8
  8059a4:	00800044 	movi	r2,1
  8059a8:	180890fa 	slli	r4,r3,3
  8059ac:	1807d0ba 	srai	r3,r3,2
  8059b0:	e1c00117 	ldw	r7,4(fp)
  8059b4:	5909883a 	add	r4,r11,r4
  8059b8:	21400217 	ldw	r5,8(r4)
  8059bc:	10c4983a 	sll	r2,r2,r3
  8059c0:	81000315 	stw	r4,12(r16)
  8059c4:	81400215 	stw	r5,8(r16)
  8059c8:	388eb03a 	or	r7,r7,r2
  8059cc:	2c000315 	stw	r16,12(r5)
  8059d0:	24000215 	stw	r16,8(r4)
  8059d4:	e1c00115 	stw	r7,4(fp)
  8059d8:	4807883a 	mov	r3,r9
  8059dc:	4800cd16 	blt	r9,zero,805d14 <_malloc_r+0x554>
  8059e0:	1807d0ba 	srai	r3,r3,2
  8059e4:	00800044 	movi	r2,1
  8059e8:	10c8983a 	sll	r4,r2,r3
  8059ec:	39004436 	bltu	r7,r4,805b00 <_malloc_r+0x340>
  8059f0:	21c4703a 	and	r2,r4,r7
  8059f4:	10000a1e 	bne	r2,zero,805a20 <_malloc_r+0x260>
  8059f8:	2109883a 	add	r4,r4,r4
  8059fc:	00bfff04 	movi	r2,-4
  805a00:	4884703a 	and	r2,r9,r2
  805a04:	3906703a 	and	r3,r7,r4
  805a08:	12400104 	addi	r9,r2,4
  805a0c:	1800041e 	bne	r3,zero,805a20 <_malloc_r+0x260>
  805a10:	2109883a 	add	r4,r4,r4
  805a14:	3904703a 	and	r2,r7,r4
  805a18:	4a400104 	addi	r9,r9,4
  805a1c:	103ffc26 	beq	r2,zero,805a10 <_malloc_r+0x250>
  805a20:	480490fa 	slli	r2,r9,3
  805a24:	4819883a 	mov	r12,r9
  805a28:	023fff04 	movi	r8,-4
  805a2c:	589b883a 	add	r13,r11,r2
  805a30:	6807883a 	mov	r3,r13
  805a34:	014003c4 	movi	r5,15
  805a38:	1c000317 	ldw	r16,12(r3)
  805a3c:	1c00041e 	bne	r3,r16,805a50 <_malloc_r+0x290>
  805a40:	0000a706 	br	805ce0 <_malloc_r+0x520>
  805a44:	3000ab0e 	bge	r6,zero,805cf4 <_malloc_r+0x534>
  805a48:	84000317 	ldw	r16,12(r16)
  805a4c:	1c00a426 	beq	r3,r16,805ce0 <_malloc_r+0x520>
  805a50:	80800117 	ldw	r2,4(r16)
  805a54:	1204703a 	and	r2,r2,r8
  805a58:	144dc83a 	sub	r6,r2,r17
  805a5c:	29bff90e 	bge	r5,r6,805a44 <_malloc_r+0x284>
  805a60:	81000317 	ldw	r4,12(r16)
  805a64:	80c00217 	ldw	r3,8(r16)
  805a68:	89400054 	ori	r5,r17,1
  805a6c:	8445883a 	add	r2,r16,r17
  805a70:	20c00215 	stw	r3,8(r4)
  805a74:	19000315 	stw	r4,12(r3)
  805a78:	81400115 	stw	r5,4(r16)
  805a7c:	1187883a 	add	r3,r2,r6
  805a80:	31000054 	ori	r4,r6,1
  805a84:	50800315 	stw	r2,12(r10)
  805a88:	50800215 	stw	r2,8(r10)
  805a8c:	19800015 	stw	r6,0(r3)
  805a90:	11000115 	stw	r4,4(r2)
  805a94:	12800215 	stw	r10,8(r2)
  805a98:	12800315 	stw	r10,12(r2)
  805a9c:	9009883a 	mov	r4,r18
  805aa0:	080a8840 	call	80a884 <__malloc_unlock>
  805aa4:	80c00204 	addi	r3,r16,8
  805aa8:	003f5906 	br	805810 <_malloc_r+0x50>
  805aac:	8109883a 	add	r4,r16,r4
  805ab0:	20800117 	ldw	r2,4(r4)
  805ab4:	80c00217 	ldw	r3,8(r16)
  805ab8:	81400317 	ldw	r5,12(r16)
  805abc:	10800054 	ori	r2,r2,1
  805ac0:	20800115 	stw	r2,4(r4)
  805ac4:	28c00215 	stw	r3,8(r5)
  805ac8:	19400315 	stw	r5,12(r3)
  805acc:	9009883a 	mov	r4,r18
  805ad0:	080a8840 	call	80a884 <__malloc_unlock>
  805ad4:	80c00204 	addi	r3,r16,8
  805ad8:	003f4d06 	br	805810 <_malloc_r+0x50>
  805adc:	80800204 	addi	r2,r16,8
  805ae0:	14000317 	ldw	r16,12(r2)
  805ae4:	143f911e 	bne	r2,r16,80592c <_malloc_r+0x16c>
  805ae8:	1a400084 	addi	r9,r3,2
  805aec:	003f7306 	br	8058bc <_malloc_r+0xfc>
  805af0:	88c00054 	ori	r3,r17,1
  805af4:	8445883a 	add	r2,r16,r17
  805af8:	80c00115 	stw	r3,4(r16)
  805afc:	003fdf06 	br	805a7c <_malloc_r+0x2bc>
  805b00:	e4000217 	ldw	r16,8(fp)
  805b04:	00bfff04 	movi	r2,-4
  805b08:	80c00117 	ldw	r3,4(r16)
  805b0c:	802d883a 	mov	r22,r16
  805b10:	18aa703a 	and	r21,r3,r2
  805b14:	ac401636 	bltu	r21,r17,805b70 <_malloc_r+0x3b0>
  805b18:	ac49c83a 	sub	r4,r21,r17
  805b1c:	008003c4 	movi	r2,15
  805b20:	1100130e 	bge	r2,r4,805b70 <_malloc_r+0x3b0>
  805b24:	88800054 	ori	r2,r17,1
  805b28:	8447883a 	add	r3,r16,r17
  805b2c:	80800115 	stw	r2,4(r16)
  805b30:	20800054 	ori	r2,r4,1
  805b34:	18800115 	stw	r2,4(r3)
  805b38:	e0c00215 	stw	r3,8(fp)
  805b3c:	9009883a 	mov	r4,r18
  805b40:	080a8840 	call	80a884 <__malloc_unlock>
  805b44:	80c00204 	addi	r3,r16,8
  805b48:	003f3106 	br	805810 <_malloc_r+0x50>
  805b4c:	39c00117 	ldw	r7,4(r7)
  805b50:	573ffe04 	addi	fp,r10,-8
  805b54:	003fa006 	br	8059d8 <_malloc_r+0x218>
  805b58:	00801504 	movi	r2,84
  805b5c:	10c06736 	bltu	r2,r3,805cfc <_malloc_r+0x53c>
  805b60:	8804d33a 	srli	r2,r17,12
  805b64:	11801b84 	addi	r6,r2,110
  805b68:	300490fa 	slli	r2,r6,3
  805b6c:	003f4106 	br	805874 <_malloc_r+0xb4>
  805b70:	d0a6aa17 	ldw	r2,-25944(gp)
  805b74:	d0e00517 	ldw	r3,-32748(gp)
  805b78:	053fffc4 	movi	r20,-1
  805b7c:	10800404 	addi	r2,r2,16
  805b80:	88a7883a 	add	r19,r17,r2
  805b84:	1d000326 	beq	r3,r20,805b94 <_malloc_r+0x3d4>
  805b88:	98c3ffc4 	addi	r3,r19,4095
  805b8c:	00bc0004 	movi	r2,-4096
  805b90:	18a6703a 	and	r19,r3,r2
  805b94:	9009883a 	mov	r4,r18
  805b98:	980b883a 	mov	r5,r19
  805b9c:	08078ec0 	call	8078ec <_sbrk_r>
  805ba0:	1009883a 	mov	r4,r2
  805ba4:	15000426 	beq	r2,r20,805bb8 <_malloc_r+0x3f8>
  805ba8:	854b883a 	add	r5,r16,r21
  805bac:	1029883a 	mov	r20,r2
  805bb0:	11405a2e 	bgeu	r2,r5,805d1c <_malloc_r+0x55c>
  805bb4:	87000c26 	beq	r16,fp,805be8 <_malloc_r+0x428>
  805bb8:	e4000217 	ldw	r16,8(fp)
  805bbc:	80c00117 	ldw	r3,4(r16)
  805bc0:	00bfff04 	movi	r2,-4
  805bc4:	1884703a 	and	r2,r3,r2
  805bc8:	14400336 	bltu	r2,r17,805bd8 <_malloc_r+0x418>
  805bcc:	1449c83a 	sub	r4,r2,r17
  805bd0:	008003c4 	movi	r2,15
  805bd4:	113fd316 	blt	r2,r4,805b24 <_malloc_r+0x364>
  805bd8:	9009883a 	mov	r4,r18
  805bdc:	080a8840 	call	80a884 <__malloc_unlock>
  805be0:	0007883a 	mov	r3,zero
  805be4:	003f0a06 	br	805810 <_malloc_r+0x50>
  805be8:	05c02074 	movhi	r23,129
  805bec:	bdc14704 	addi	r23,r23,1308
  805bf0:	b8800017 	ldw	r2,0(r23)
  805bf4:	988d883a 	add	r6,r19,r2
  805bf8:	b9800015 	stw	r6,0(r23)
  805bfc:	d0e00517 	ldw	r3,-32748(gp)
  805c00:	00bfffc4 	movi	r2,-1
  805c04:	18808e26 	beq	r3,r2,805e40 <_malloc_r+0x680>
  805c08:	2145c83a 	sub	r2,r4,r5
  805c0c:	3085883a 	add	r2,r6,r2
  805c10:	b8800015 	stw	r2,0(r23)
  805c14:	20c001cc 	andi	r3,r4,7
  805c18:	18005f1e 	bne	r3,zero,805d98 <_malloc_r+0x5d8>
  805c1c:	000b883a 	mov	r5,zero
  805c20:	a4c5883a 	add	r2,r20,r19
  805c24:	1083ffcc 	andi	r2,r2,4095
  805c28:	00c40004 	movi	r3,4096
  805c2c:	1887c83a 	sub	r3,r3,r2
  805c30:	28e7883a 	add	r19,r5,r3
  805c34:	9009883a 	mov	r4,r18
  805c38:	980b883a 	mov	r5,r19
  805c3c:	08078ec0 	call	8078ec <_sbrk_r>
  805c40:	1007883a 	mov	r3,r2
  805c44:	00bfffc4 	movi	r2,-1
  805c48:	18807a26 	beq	r3,r2,805e34 <_malloc_r+0x674>
  805c4c:	1d05c83a 	sub	r2,r3,r20
  805c50:	9885883a 	add	r2,r19,r2
  805c54:	10c00054 	ori	r3,r2,1
  805c58:	b8800017 	ldw	r2,0(r23)
  805c5c:	a021883a 	mov	r16,r20
  805c60:	a0c00115 	stw	r3,4(r20)
  805c64:	9885883a 	add	r2,r19,r2
  805c68:	b8800015 	stw	r2,0(r23)
  805c6c:	e5000215 	stw	r20,8(fp)
  805c70:	b7003626 	beq	r22,fp,805d4c <_malloc_r+0x58c>
  805c74:	018003c4 	movi	r6,15
  805c78:	35404b36 	bltu	r6,r21,805da8 <_malloc_r+0x5e8>
  805c7c:	00800044 	movi	r2,1
  805c80:	a0800115 	stw	r2,4(r20)
  805c84:	003fcd06 	br	805bbc <_malloc_r+0x3fc>
  805c88:	2808d27a 	srli	r4,r5,9
  805c8c:	2000371e 	bne	r4,zero,805d6c <_malloc_r+0x5ac>
  805c90:	2808d0fa 	srli	r4,r5,3
  805c94:	200690fa 	slli	r3,r4,3
  805c98:	1ad1883a 	add	r8,r3,r11
  805c9c:	41800217 	ldw	r6,8(r8)
  805ca0:	41805b26 	beq	r8,r6,805e10 <_malloc_r+0x650>
  805ca4:	30800117 	ldw	r2,4(r6)
  805ca8:	00ffff04 	movi	r3,-4
  805cac:	10c4703a 	and	r2,r2,r3
  805cb0:	2880022e 	bgeu	r5,r2,805cbc <_malloc_r+0x4fc>
  805cb4:	31800217 	ldw	r6,8(r6)
  805cb8:	41bffa1e 	bne	r8,r6,805ca4 <_malloc_r+0x4e4>
  805cbc:	32000317 	ldw	r8,12(r6)
  805cc0:	39c00117 	ldw	r7,4(r7)
  805cc4:	82000315 	stw	r8,12(r16)
  805cc8:	81800215 	stw	r6,8(r16)
  805ccc:	07002074 	movhi	fp,129
  805cd0:	e7350f04 	addi	fp,fp,-11204
  805cd4:	34000315 	stw	r16,12(r6)
  805cd8:	44000215 	stw	r16,8(r8)
  805cdc:	003f3e06 	br	8059d8 <_malloc_r+0x218>
  805ce0:	63000044 	addi	r12,r12,1
  805ce4:	608000cc 	andi	r2,r12,3
  805ce8:	10005d26 	beq	r2,zero,805e60 <_malloc_r+0x6a0>
  805cec:	18c00204 	addi	r3,r3,8
  805cf0:	003f5106 	br	805a38 <_malloc_r+0x278>
  805cf4:	8089883a 	add	r4,r16,r2
  805cf8:	003f6d06 	br	805ab0 <_malloc_r+0x2f0>
  805cfc:	00805504 	movi	r2,340
  805d00:	10c02036 	bltu	r2,r3,805d84 <_malloc_r+0x5c4>
  805d04:	8804d3fa 	srli	r2,r17,15
  805d08:	11801dc4 	addi	r6,r2,119
  805d0c:	300490fa 	slli	r2,r6,3
  805d10:	003ed806 	br	805874 <_malloc_r+0xb4>
  805d14:	48c000c4 	addi	r3,r9,3
  805d18:	003f3106 	br	8059e0 <_malloc_r+0x220>
  805d1c:	05c02074 	movhi	r23,129
  805d20:	bdc14704 	addi	r23,r23,1308
  805d24:	b8800017 	ldw	r2,0(r23)
  805d28:	988d883a 	add	r6,r19,r2
  805d2c:	b9800015 	stw	r6,0(r23)
  805d30:	293fb21e 	bne	r5,r4,805bfc <_malloc_r+0x43c>
  805d34:	2083ffcc 	andi	r2,r4,4095
  805d38:	103fb01e 	bne	r2,zero,805bfc <_malloc_r+0x43c>
  805d3c:	e4000217 	ldw	r16,8(fp)
  805d40:	9d45883a 	add	r2,r19,r21
  805d44:	10800054 	ori	r2,r2,1
  805d48:	80800115 	stw	r2,4(r16)
  805d4c:	b8c00017 	ldw	r3,0(r23)
  805d50:	d0a6ab17 	ldw	r2,-25940(gp)
  805d54:	10c0012e 	bgeu	r2,r3,805d5c <_malloc_r+0x59c>
  805d58:	d0e6ab15 	stw	r3,-25940(gp)
  805d5c:	d0a6ac17 	ldw	r2,-25936(gp)
  805d60:	10ff962e 	bgeu	r2,r3,805bbc <_malloc_r+0x3fc>
  805d64:	d0e6ac15 	stw	r3,-25936(gp)
  805d68:	003f9406 	br	805bbc <_malloc_r+0x3fc>
  805d6c:	00800104 	movi	r2,4
  805d70:	11001e36 	bltu	r2,r4,805dec <_malloc_r+0x62c>
  805d74:	2804d1ba 	srli	r2,r5,6
  805d78:	11000e04 	addi	r4,r2,56
  805d7c:	200690fa 	slli	r3,r4,3
  805d80:	003fc506 	br	805c98 <_malloc_r+0x4d8>
  805d84:	00815504 	movi	r2,1364
  805d88:	10c01d2e 	bgeu	r2,r3,805e00 <_malloc_r+0x640>
  805d8c:	01801f84 	movi	r6,126
  805d90:	0080fc04 	movi	r2,1008
  805d94:	003eb706 	br	805874 <_malloc_r+0xb4>
  805d98:	00800204 	movi	r2,8
  805d9c:	10cbc83a 	sub	r5,r2,r3
  805da0:	2169883a 	add	r20,r4,r5
  805da4:	003f9e06 	br	805c20 <_malloc_r+0x460>
  805da8:	00bffe04 	movi	r2,-8
  805dac:	a93ffd04 	addi	r4,r21,-12
  805db0:	2088703a 	and	r4,r4,r2
  805db4:	b10b883a 	add	r5,r22,r4
  805db8:	00c00144 	movi	r3,5
  805dbc:	28c00215 	stw	r3,8(r5)
  805dc0:	28c00115 	stw	r3,4(r5)
  805dc4:	b0800117 	ldw	r2,4(r22)
  805dc8:	1080004c 	andi	r2,r2,1
  805dcc:	2084b03a 	or	r2,r4,r2
  805dd0:	b0800115 	stw	r2,4(r22)
  805dd4:	313fdd2e 	bgeu	r6,r4,805d4c <_malloc_r+0x58c>
  805dd8:	b1400204 	addi	r5,r22,8
  805ddc:	9009883a 	mov	r4,r18
  805de0:	0804c380 	call	804c38 <_free_r>
  805de4:	e4000217 	ldw	r16,8(fp)
  805de8:	003fd806 	br	805d4c <_malloc_r+0x58c>
  805dec:	00800504 	movi	r2,20
  805df0:	11001536 	bltu	r2,r4,805e48 <_malloc_r+0x688>
  805df4:	210016c4 	addi	r4,r4,91
  805df8:	200690fa 	slli	r3,r4,3
  805dfc:	003fa606 	br	805c98 <_malloc_r+0x4d8>
  805e00:	8804d4ba 	srli	r2,r17,18
  805e04:	11801f04 	addi	r6,r2,124
  805e08:	300490fa 	slli	r2,r6,3
  805e0c:	003e9906 	br	805874 <_malloc_r+0xb4>
  805e10:	2009d0ba 	srai	r4,r4,2
  805e14:	01402074 	movhi	r5,129
  805e18:	29750f04 	addi	r5,r5,-11204
  805e1c:	00c00044 	movi	r3,1
  805e20:	28800117 	ldw	r2,4(r5)
  805e24:	1906983a 	sll	r3,r3,r4
  805e28:	10c4b03a 	or	r2,r2,r3
  805e2c:	28800115 	stw	r2,4(r5)
  805e30:	003fa306 	br	805cc0 <_malloc_r+0x500>
  805e34:	0027883a 	mov	r19,zero
  805e38:	00c00044 	movi	r3,1
  805e3c:	003f8606 	br	805c58 <_malloc_r+0x498>
  805e40:	d1200515 	stw	r4,-32748(gp)
  805e44:	003f7306 	br	805c14 <_malloc_r+0x454>
  805e48:	00801504 	movi	r2,84
  805e4c:	11001936 	bltu	r2,r4,805eb4 <_malloc_r+0x6f4>
  805e50:	2804d33a 	srli	r2,r5,12
  805e54:	11001b84 	addi	r4,r2,110
  805e58:	200690fa 	slli	r3,r4,3
  805e5c:	003f8e06 	br	805c98 <_malloc_r+0x4d8>
  805e60:	480b883a 	mov	r5,r9
  805e64:	6807883a 	mov	r3,r13
  805e68:	288000cc 	andi	r2,r5,3
  805e6c:	18fffe04 	addi	r3,r3,-8
  805e70:	297fffc4 	addi	r5,r5,-1
  805e74:	10001526 	beq	r2,zero,805ecc <_malloc_r+0x70c>
  805e78:	18800217 	ldw	r2,8(r3)
  805e7c:	10fffa26 	beq	r2,r3,805e68 <_malloc_r+0x6a8>
  805e80:	2109883a 	add	r4,r4,r4
  805e84:	393f1e36 	bltu	r7,r4,805b00 <_malloc_r+0x340>
  805e88:	203f1d26 	beq	r4,zero,805b00 <_malloc_r+0x340>
  805e8c:	21c4703a 	and	r2,r4,r7
  805e90:	10000226 	beq	r2,zero,805e9c <_malloc_r+0x6dc>
  805e94:	6013883a 	mov	r9,r12
  805e98:	003ee106 	br	805a20 <_malloc_r+0x260>
  805e9c:	2109883a 	add	r4,r4,r4
  805ea0:	3904703a 	and	r2,r7,r4
  805ea4:	63000104 	addi	r12,r12,4
  805ea8:	103ffc26 	beq	r2,zero,805e9c <_malloc_r+0x6dc>
  805eac:	6013883a 	mov	r9,r12
  805eb0:	003edb06 	br	805a20 <_malloc_r+0x260>
  805eb4:	00805504 	movi	r2,340
  805eb8:	11000836 	bltu	r2,r4,805edc <_malloc_r+0x71c>
  805ebc:	2804d3fa 	srli	r2,r5,15
  805ec0:	11001dc4 	addi	r4,r2,119
  805ec4:	200690fa 	slli	r3,r4,3
  805ec8:	003f7306 	br	805c98 <_malloc_r+0x4d8>
  805ecc:	0104303a 	nor	r2,zero,r4
  805ed0:	388e703a 	and	r7,r7,r2
  805ed4:	e1c00115 	stw	r7,4(fp)
  805ed8:	003fe906 	br	805e80 <_malloc_r+0x6c0>
  805edc:	00815504 	movi	r2,1364
  805ee0:	1100032e 	bgeu	r2,r4,805ef0 <_malloc_r+0x730>
  805ee4:	01001f84 	movi	r4,126
  805ee8:	00c0fc04 	movi	r3,1008
  805eec:	003f6a06 	br	805c98 <_malloc_r+0x4d8>
  805ef0:	2804d4ba 	srli	r2,r5,18
  805ef4:	11001f04 	addi	r4,r2,124
  805ef8:	200690fa 	slli	r3,r4,3
  805efc:	003f6606 	br	805c98 <_malloc_r+0x4d8>

00805f00 <memchr>:
  805f00:	008000c4 	movi	r2,3
  805f04:	29403fcc 	andi	r5,r5,255
  805f08:	2007883a 	mov	r3,r4
  805f0c:	1180022e 	bgeu	r2,r6,805f18 <memchr+0x18>
  805f10:	2084703a 	and	r2,r4,r2
  805f14:	10000b26 	beq	r2,zero,805f44 <memchr+0x44>
  805f18:	313fffc4 	addi	r4,r6,-1
  805f1c:	3000051e 	bne	r6,zero,805f34 <memchr+0x34>
  805f20:	00002c06 	br	805fd4 <memchr+0xd4>
  805f24:	213fffc4 	addi	r4,r4,-1
  805f28:	00bfffc4 	movi	r2,-1
  805f2c:	18c00044 	addi	r3,r3,1
  805f30:	20802826 	beq	r4,r2,805fd4 <memchr+0xd4>
  805f34:	18800003 	ldbu	r2,0(r3)
  805f38:	28bffa1e 	bne	r5,r2,805f24 <memchr+0x24>
  805f3c:	1805883a 	mov	r2,r3
  805f40:	f800283a 	ret
  805f44:	0011883a 	mov	r8,zero
  805f48:	0007883a 	mov	r3,zero
  805f4c:	01c00104 	movi	r7,4
  805f50:	4004923a 	slli	r2,r8,8
  805f54:	18c00044 	addi	r3,r3,1
  805f58:	1151883a 	add	r8,r2,r5
  805f5c:	19fffc1e 	bne	r3,r7,805f50 <memchr+0x50>
  805f60:	02bfbff4 	movhi	r10,65279
  805f64:	52bfbfc4 	addi	r10,r10,-257
  805f68:	02602074 	movhi	r9,32897
  805f6c:	4a602004 	addi	r9,r9,-32640
  805f70:	02c000c4 	movi	r11,3
  805f74:	20800017 	ldw	r2,0(r4)
  805f78:	31bfff04 	addi	r6,r6,-4
  805f7c:	200f883a 	mov	r7,r4
  805f80:	1204f03a 	xor	r2,r2,r8
  805f84:	1287883a 	add	r3,r2,r10
  805f88:	1a46703a 	and	r3,r3,r9
  805f8c:	0084303a 	nor	r2,zero,r2
  805f90:	10c4703a 	and	r2,r2,r3
  805f94:	10000b26 	beq	r2,zero,805fc4 <memchr+0xc4>
  805f98:	20800003 	ldbu	r2,0(r4)
  805f9c:	28800f26 	beq	r5,r2,805fdc <memchr+0xdc>
  805fa0:	20800043 	ldbu	r2,1(r4)
  805fa4:	21c00044 	addi	r7,r4,1
  805fa8:	28800c26 	beq	r5,r2,805fdc <memchr+0xdc>
  805fac:	20800083 	ldbu	r2,2(r4)
  805fb0:	21c00084 	addi	r7,r4,2
  805fb4:	28800926 	beq	r5,r2,805fdc <memchr+0xdc>
  805fb8:	208000c3 	ldbu	r2,3(r4)
  805fbc:	21c000c4 	addi	r7,r4,3
  805fc0:	28800626 	beq	r5,r2,805fdc <memchr+0xdc>
  805fc4:	21000104 	addi	r4,r4,4
  805fc8:	59bfea36 	bltu	r11,r6,805f74 <memchr+0x74>
  805fcc:	2007883a 	mov	r3,r4
  805fd0:	003fd106 	br	805f18 <memchr+0x18>
  805fd4:	0005883a 	mov	r2,zero
  805fd8:	f800283a 	ret
  805fdc:	3805883a 	mov	r2,r7
  805fe0:	f800283a 	ret

00805fe4 <memcpy>:
  805fe4:	01c003c4 	movi	r7,15
  805fe8:	2007883a 	mov	r3,r4
  805fec:	3980032e 	bgeu	r7,r6,805ffc <memcpy+0x18>
  805ff0:	2904b03a 	or	r2,r5,r4
  805ff4:	108000cc 	andi	r2,r2,3
  805ff8:	10000926 	beq	r2,zero,806020 <memcpy+0x3c>
  805ffc:	30000626 	beq	r6,zero,806018 <memcpy+0x34>
  806000:	30cd883a 	add	r6,r6,r3
  806004:	28800003 	ldbu	r2,0(r5)
  806008:	29400044 	addi	r5,r5,1
  80600c:	18800005 	stb	r2,0(r3)
  806010:	18c00044 	addi	r3,r3,1
  806014:	30fffb1e 	bne	r6,r3,806004 <memcpy+0x20>
  806018:	2005883a 	mov	r2,r4
  80601c:	f800283a 	ret
  806020:	3811883a 	mov	r8,r7
  806024:	200f883a 	mov	r7,r4
  806028:	28c00017 	ldw	r3,0(r5)
  80602c:	31bffc04 	addi	r6,r6,-16
  806030:	38c00015 	stw	r3,0(r7)
  806034:	28800117 	ldw	r2,4(r5)
  806038:	38800115 	stw	r2,4(r7)
  80603c:	28c00217 	ldw	r3,8(r5)
  806040:	38c00215 	stw	r3,8(r7)
  806044:	28800317 	ldw	r2,12(r5)
  806048:	29400404 	addi	r5,r5,16
  80604c:	38800315 	stw	r2,12(r7)
  806050:	39c00404 	addi	r7,r7,16
  806054:	41bff436 	bltu	r8,r6,806028 <memcpy+0x44>
  806058:	008000c4 	movi	r2,3
  80605c:	1180072e 	bgeu	r2,r6,80607c <memcpy+0x98>
  806060:	1007883a 	mov	r3,r2
  806064:	28800017 	ldw	r2,0(r5)
  806068:	31bfff04 	addi	r6,r6,-4
  80606c:	29400104 	addi	r5,r5,4
  806070:	38800015 	stw	r2,0(r7)
  806074:	39c00104 	addi	r7,r7,4
  806078:	19bffa36 	bltu	r3,r6,806064 <memcpy+0x80>
  80607c:	3807883a 	mov	r3,r7
  806080:	003fde06 	br	805ffc <memcpy+0x18>

00806084 <memmove>:
  806084:	2807883a 	mov	r3,r5
  806088:	2011883a 	mov	r8,r4
  80608c:	29000c2e 	bgeu	r5,r4,8060c0 <memmove+0x3c>
  806090:	298f883a 	add	r7,r5,r6
  806094:	21c00a2e 	bgeu	r4,r7,8060c0 <memmove+0x3c>
  806098:	30000726 	beq	r6,zero,8060b8 <memmove+0x34>
  80609c:	2187883a 	add	r3,r4,r6
  8060a0:	198dc83a 	sub	r6,r3,r6
  8060a4:	39ffffc4 	addi	r7,r7,-1
  8060a8:	38800003 	ldbu	r2,0(r7)
  8060ac:	18ffffc4 	addi	r3,r3,-1
  8060b0:	18800005 	stb	r2,0(r3)
  8060b4:	19bffb1e 	bne	r3,r6,8060a4 <memmove+0x20>
  8060b8:	2005883a 	mov	r2,r4
  8060bc:	f800283a 	ret
  8060c0:	01c003c4 	movi	r7,15
  8060c4:	39800a36 	bltu	r7,r6,8060f0 <memmove+0x6c>
  8060c8:	303ffb26 	beq	r6,zero,8060b8 <memmove+0x34>
  8060cc:	400f883a 	mov	r7,r8
  8060d0:	320d883a 	add	r6,r6,r8
  8060d4:	28800003 	ldbu	r2,0(r5)
  8060d8:	29400044 	addi	r5,r5,1
  8060dc:	38800005 	stb	r2,0(r7)
  8060e0:	39c00044 	addi	r7,r7,1
  8060e4:	39bffb1e 	bne	r7,r6,8060d4 <memmove+0x50>
  8060e8:	2005883a 	mov	r2,r4
  8060ec:	f800283a 	ret
  8060f0:	1904b03a 	or	r2,r3,r4
  8060f4:	108000cc 	andi	r2,r2,3
  8060f8:	103ff31e 	bne	r2,zero,8060c8 <memmove+0x44>
  8060fc:	3811883a 	mov	r8,r7
  806100:	180b883a 	mov	r5,r3
  806104:	200f883a 	mov	r7,r4
  806108:	28c00017 	ldw	r3,0(r5)
  80610c:	31bffc04 	addi	r6,r6,-16
  806110:	38c00015 	stw	r3,0(r7)
  806114:	28800117 	ldw	r2,4(r5)
  806118:	38800115 	stw	r2,4(r7)
  80611c:	28c00217 	ldw	r3,8(r5)
  806120:	38c00215 	stw	r3,8(r7)
  806124:	28800317 	ldw	r2,12(r5)
  806128:	29400404 	addi	r5,r5,16
  80612c:	38800315 	stw	r2,12(r7)
  806130:	39c00404 	addi	r7,r7,16
  806134:	41bff436 	bltu	r8,r6,806108 <memmove+0x84>
  806138:	008000c4 	movi	r2,3
  80613c:	1180072e 	bgeu	r2,r6,80615c <memmove+0xd8>
  806140:	1007883a 	mov	r3,r2
  806144:	28800017 	ldw	r2,0(r5)
  806148:	31bfff04 	addi	r6,r6,-4
  80614c:	29400104 	addi	r5,r5,4
  806150:	38800015 	stw	r2,0(r7)
  806154:	39c00104 	addi	r7,r7,4
  806158:	19bffa36 	bltu	r3,r6,806144 <memmove+0xc0>
  80615c:	3811883a 	mov	r8,r7
  806160:	003fd906 	br	8060c8 <memmove+0x44>

00806164 <memset>:
  806164:	008000c4 	movi	r2,3
  806168:	29403fcc 	andi	r5,r5,255
  80616c:	2007883a 	mov	r3,r4
  806170:	1180022e 	bgeu	r2,r6,80617c <memset+0x18>
  806174:	2084703a 	and	r2,r4,r2
  806178:	10000826 	beq	r2,zero,80619c <memset+0x38>
  80617c:	30000526 	beq	r6,zero,806194 <memset+0x30>
  806180:	2805883a 	mov	r2,r5
  806184:	30cd883a 	add	r6,r6,r3
  806188:	18800005 	stb	r2,0(r3)
  80618c:	18c00044 	addi	r3,r3,1
  806190:	19bffd1e 	bne	r3,r6,806188 <memset+0x24>
  806194:	2005883a 	mov	r2,r4
  806198:	f800283a 	ret
  80619c:	2804923a 	slli	r2,r5,8
  8061a0:	020003c4 	movi	r8,15
  8061a4:	200f883a 	mov	r7,r4
  8061a8:	2884b03a 	or	r2,r5,r2
  8061ac:	1006943a 	slli	r3,r2,16
  8061b0:	10c6b03a 	or	r3,r2,r3
  8061b4:	41800a2e 	bgeu	r8,r6,8061e0 <memset+0x7c>
  8061b8:	4005883a 	mov	r2,r8
  8061bc:	31bffc04 	addi	r6,r6,-16
  8061c0:	38c00015 	stw	r3,0(r7)
  8061c4:	38c00115 	stw	r3,4(r7)
  8061c8:	38c00215 	stw	r3,8(r7)
  8061cc:	38c00315 	stw	r3,12(r7)
  8061d0:	39c00404 	addi	r7,r7,16
  8061d4:	11bff936 	bltu	r2,r6,8061bc <memset+0x58>
  8061d8:	008000c4 	movi	r2,3
  8061dc:	1180052e 	bgeu	r2,r6,8061f4 <memset+0x90>
  8061e0:	31bfff04 	addi	r6,r6,-4
  8061e4:	008000c4 	movi	r2,3
  8061e8:	38c00015 	stw	r3,0(r7)
  8061ec:	39c00104 	addi	r7,r7,4
  8061f0:	11bffb36 	bltu	r2,r6,8061e0 <memset+0x7c>
  8061f4:	3807883a 	mov	r3,r7
  8061f8:	003fe006 	br	80617c <memset+0x18>

008061fc <_Bfree>:
  8061fc:	28000826 	beq	r5,zero,806220 <_Bfree+0x24>
  806200:	28800117 	ldw	r2,4(r5)
  806204:	21001317 	ldw	r4,76(r4)
  806208:	1085883a 	add	r2,r2,r2
  80620c:	1085883a 	add	r2,r2,r2
  806210:	1105883a 	add	r2,r2,r4
  806214:	10c00017 	ldw	r3,0(r2)
  806218:	28c00015 	stw	r3,0(r5)
  80621c:	11400015 	stw	r5,0(r2)
  806220:	f800283a 	ret

00806224 <__hi0bits>:
  806224:	20bfffec 	andhi	r2,r4,65535
  806228:	10001426 	beq	r2,zero,80627c <__hi0bits+0x58>
  80622c:	0007883a 	mov	r3,zero
  806230:	20bfc02c 	andhi	r2,r4,65280
  806234:	1000021e 	bne	r2,zero,806240 <__hi0bits+0x1c>
  806238:	2008923a 	slli	r4,r4,8
  80623c:	18c00204 	addi	r3,r3,8
  806240:	20bc002c 	andhi	r2,r4,61440
  806244:	1000021e 	bne	r2,zero,806250 <__hi0bits+0x2c>
  806248:	2008913a 	slli	r4,r4,4
  80624c:	18c00104 	addi	r3,r3,4
  806250:	20b0002c 	andhi	r2,r4,49152
  806254:	1000031e 	bne	r2,zero,806264 <__hi0bits+0x40>
  806258:	2105883a 	add	r2,r4,r4
  80625c:	18c00084 	addi	r3,r3,2
  806260:	1089883a 	add	r4,r2,r2
  806264:	20000316 	blt	r4,zero,806274 <__hi0bits+0x50>
  806268:	2090002c 	andhi	r2,r4,16384
  80626c:	10000626 	beq	r2,zero,806288 <__hi0bits+0x64>
  806270:	18c00044 	addi	r3,r3,1
  806274:	1805883a 	mov	r2,r3
  806278:	f800283a 	ret
  80627c:	2008943a 	slli	r4,r4,16
  806280:	00c00404 	movi	r3,16
  806284:	003fea06 	br	806230 <__hi0bits+0xc>
  806288:	00c00804 	movi	r3,32
  80628c:	1805883a 	mov	r2,r3
  806290:	f800283a 	ret

00806294 <__lo0bits>:
  806294:	20c00017 	ldw	r3,0(r4)
  806298:	188001cc 	andi	r2,r3,7
  80629c:	10000a26 	beq	r2,zero,8062c8 <__lo0bits+0x34>
  8062a0:	1880004c 	andi	r2,r3,1
  8062a4:	1005003a 	cmpeq	r2,r2,zero
  8062a8:	10002126 	beq	r2,zero,806330 <__lo0bits+0x9c>
  8062ac:	1880008c 	andi	r2,r3,2
  8062b0:	1000251e 	bne	r2,zero,806348 <__lo0bits+0xb4>
  8062b4:	1804d0ba 	srli	r2,r3,2
  8062b8:	01400084 	movi	r5,2
  8062bc:	20800015 	stw	r2,0(r4)
  8062c0:	2805883a 	mov	r2,r5
  8062c4:	f800283a 	ret
  8062c8:	18bfffcc 	andi	r2,r3,65535
  8062cc:	10001526 	beq	r2,zero,806324 <__lo0bits+0x90>
  8062d0:	000b883a 	mov	r5,zero
  8062d4:	18803fcc 	andi	r2,r3,255
  8062d8:	1000021e 	bne	r2,zero,8062e4 <__lo0bits+0x50>
  8062dc:	1806d23a 	srli	r3,r3,8
  8062e0:	29400204 	addi	r5,r5,8
  8062e4:	188003cc 	andi	r2,r3,15
  8062e8:	1000021e 	bne	r2,zero,8062f4 <__lo0bits+0x60>
  8062ec:	1806d13a 	srli	r3,r3,4
  8062f0:	29400104 	addi	r5,r5,4
  8062f4:	188000cc 	andi	r2,r3,3
  8062f8:	1000021e 	bne	r2,zero,806304 <__lo0bits+0x70>
  8062fc:	1806d0ba 	srli	r3,r3,2
  806300:	29400084 	addi	r5,r5,2
  806304:	1880004c 	andi	r2,r3,1
  806308:	1000031e 	bne	r2,zero,806318 <__lo0bits+0x84>
  80630c:	1806d07a 	srli	r3,r3,1
  806310:	18000a26 	beq	r3,zero,80633c <__lo0bits+0xa8>
  806314:	29400044 	addi	r5,r5,1
  806318:	2805883a 	mov	r2,r5
  80631c:	20c00015 	stw	r3,0(r4)
  806320:	f800283a 	ret
  806324:	1806d43a 	srli	r3,r3,16
  806328:	01400404 	movi	r5,16
  80632c:	003fe906 	br	8062d4 <__lo0bits+0x40>
  806330:	000b883a 	mov	r5,zero
  806334:	2805883a 	mov	r2,r5
  806338:	f800283a 	ret
  80633c:	01400804 	movi	r5,32
  806340:	2805883a 	mov	r2,r5
  806344:	f800283a 	ret
  806348:	1804d07a 	srli	r2,r3,1
  80634c:	01400044 	movi	r5,1
  806350:	20800015 	stw	r2,0(r4)
  806354:	003fda06 	br	8062c0 <__lo0bits+0x2c>

00806358 <__mcmp>:
  806358:	20800417 	ldw	r2,16(r4)
  80635c:	28c00417 	ldw	r3,16(r5)
  806360:	10cfc83a 	sub	r7,r2,r3
  806364:	38000c1e 	bne	r7,zero,806398 <__mcmp+0x40>
  806368:	18c5883a 	add	r2,r3,r3
  80636c:	1085883a 	add	r2,r2,r2
  806370:	10c00504 	addi	r3,r2,20
  806374:	21000504 	addi	r4,r4,20
  806378:	28cb883a 	add	r5,r5,r3
  80637c:	2085883a 	add	r2,r4,r2
  806380:	10bfff04 	addi	r2,r2,-4
  806384:	297fff04 	addi	r5,r5,-4
  806388:	11800017 	ldw	r6,0(r2)
  80638c:	28c00017 	ldw	r3,0(r5)
  806390:	30c0031e 	bne	r6,r3,8063a0 <__mcmp+0x48>
  806394:	20bffa36 	bltu	r4,r2,806380 <__mcmp+0x28>
  806398:	3805883a 	mov	r2,r7
  80639c:	f800283a 	ret
  8063a0:	30c00336 	bltu	r6,r3,8063b0 <__mcmp+0x58>
  8063a4:	01c00044 	movi	r7,1
  8063a8:	3805883a 	mov	r2,r7
  8063ac:	f800283a 	ret
  8063b0:	01ffffc4 	movi	r7,-1
  8063b4:	003ff806 	br	806398 <__mcmp+0x40>

008063b8 <__ulp>:
  8063b8:	295ffc2c 	andhi	r5,r5,32752
  8063bc:	013f3034 	movhi	r4,64704
  8063c0:	290b883a 	add	r5,r5,r4
  8063c4:	0145c83a 	sub	r2,zero,r5
  8063c8:	1007d53a 	srai	r3,r2,20
  8063cc:	000d883a 	mov	r6,zero
  8063d0:	0140040e 	bge	zero,r5,8063e4 <__ulp+0x2c>
  8063d4:	280f883a 	mov	r7,r5
  8063d8:	3807883a 	mov	r3,r7
  8063dc:	3005883a 	mov	r2,r6
  8063e0:	f800283a 	ret
  8063e4:	008004c4 	movi	r2,19
  8063e8:	193ffb04 	addi	r4,r3,-20
  8063ec:	10c00c0e 	bge	r2,r3,806420 <__ulp+0x68>
  8063f0:	008007c4 	movi	r2,31
  8063f4:	1107c83a 	sub	r3,r2,r4
  8063f8:	00800784 	movi	r2,30
  8063fc:	01400044 	movi	r5,1
  806400:	11000216 	blt	r2,r4,80640c <__ulp+0x54>
  806404:	00800044 	movi	r2,1
  806408:	10ca983a 	sll	r5,r2,r3
  80640c:	000f883a 	mov	r7,zero
  806410:	280d883a 	mov	r6,r5
  806414:	3807883a 	mov	r3,r7
  806418:	3005883a 	mov	r2,r6
  80641c:	f800283a 	ret
  806420:	00800234 	movhi	r2,8
  806424:	10cfd83a 	sra	r7,r2,r3
  806428:	000d883a 	mov	r6,zero
  80642c:	3005883a 	mov	r2,r6
  806430:	3807883a 	mov	r3,r7
  806434:	f800283a 	ret

00806438 <__b2d>:
  806438:	20800417 	ldw	r2,16(r4)
  80643c:	defff904 	addi	sp,sp,-28
  806440:	dd000415 	stw	r20,16(sp)
  806444:	1085883a 	add	r2,r2,r2
  806448:	25000504 	addi	r20,r4,20
  80644c:	1085883a 	add	r2,r2,r2
  806450:	dc000015 	stw	r16,0(sp)
  806454:	a0a1883a 	add	r16,r20,r2
  806458:	dd400515 	stw	r21,20(sp)
  80645c:	857fff17 	ldw	r21,-4(r16)
  806460:	dc400115 	stw	r17,4(sp)
  806464:	dfc00615 	stw	ra,24(sp)
  806468:	a809883a 	mov	r4,r21
  80646c:	2823883a 	mov	r17,r5
  806470:	dcc00315 	stw	r19,12(sp)
  806474:	dc800215 	stw	r18,8(sp)
  806478:	08062240 	call	806224 <__hi0bits>
  80647c:	100b883a 	mov	r5,r2
  806480:	00800804 	movi	r2,32
  806484:	1145c83a 	sub	r2,r2,r5
  806488:	88800015 	stw	r2,0(r17)
  80648c:	00800284 	movi	r2,10
  806490:	80ffff04 	addi	r3,r16,-4
  806494:	11401416 	blt	r2,r5,8064e8 <__b2d+0xb0>
  806498:	008002c4 	movi	r2,11
  80649c:	1149c83a 	sub	r4,r2,r5
  8064a0:	a0c02736 	bltu	r20,r3,806540 <__b2d+0x108>
  8064a4:	000d883a 	mov	r6,zero
  8064a8:	28800544 	addi	r2,r5,21
  8064ac:	a906d83a 	srl	r3,r21,r4
  8064b0:	a884983a 	sll	r2,r21,r2
  8064b4:	1ccffc34 	orhi	r19,r3,16368
  8064b8:	11a4b03a 	or	r18,r2,r6
  8064bc:	9005883a 	mov	r2,r18
  8064c0:	9807883a 	mov	r3,r19
  8064c4:	dfc00617 	ldw	ra,24(sp)
  8064c8:	dd400517 	ldw	r21,20(sp)
  8064cc:	dd000417 	ldw	r20,16(sp)
  8064d0:	dcc00317 	ldw	r19,12(sp)
  8064d4:	dc800217 	ldw	r18,8(sp)
  8064d8:	dc400117 	ldw	r17,4(sp)
  8064dc:	dc000017 	ldw	r16,0(sp)
  8064e0:	dec00704 	addi	sp,sp,28
  8064e4:	f800283a 	ret
  8064e8:	a0c00e36 	bltu	r20,r3,806524 <__b2d+0xec>
  8064ec:	293ffd44 	addi	r4,r5,-11
  8064f0:	000d883a 	mov	r6,zero
  8064f4:	20000f26 	beq	r4,zero,806534 <__b2d+0xfc>
  8064f8:	00800804 	movi	r2,32
  8064fc:	110bc83a 	sub	r5,r2,r4
  806500:	a0c01236 	bltu	r20,r3,80654c <__b2d+0x114>
  806504:	000f883a 	mov	r7,zero
  806508:	a904983a 	sll	r2,r21,r4
  80650c:	3146d83a 	srl	r3,r6,r5
  806510:	3108983a 	sll	r4,r6,r4
  806514:	108ffc34 	orhi	r2,r2,16368
  806518:	18a6b03a 	or	r19,r3,r2
  80651c:	3924b03a 	or	r18,r7,r4
  806520:	003fe606 	br	8064bc <__b2d+0x84>
  806524:	293ffd44 	addi	r4,r5,-11
  806528:	81bffe17 	ldw	r6,-8(r16)
  80652c:	80fffe04 	addi	r3,r16,-8
  806530:	203ff11e 	bne	r4,zero,8064f8 <__b2d+0xc0>
  806534:	accffc34 	orhi	r19,r21,16368
  806538:	3025883a 	mov	r18,r6
  80653c:	003fdf06 	br	8064bc <__b2d+0x84>
  806540:	18bfff17 	ldw	r2,-4(r3)
  806544:	110cd83a 	srl	r6,r2,r4
  806548:	003fd706 	br	8064a8 <__b2d+0x70>
  80654c:	18bfff17 	ldw	r2,-4(r3)
  806550:	114ed83a 	srl	r7,r2,r5
  806554:	003fec06 	br	806508 <__b2d+0xd0>

00806558 <__ratio>:
  806558:	defff904 	addi	sp,sp,-28
  80655c:	dc400215 	stw	r17,8(sp)
  806560:	2823883a 	mov	r17,r5
  806564:	d80b883a 	mov	r5,sp
  806568:	dfc00615 	stw	ra,24(sp)
  80656c:	dd000515 	stw	r20,20(sp)
  806570:	dcc00415 	stw	r19,16(sp)
  806574:	dc800315 	stw	r18,12(sp)
  806578:	2025883a 	mov	r18,r4
  80657c:	08064380 	call	806438 <__b2d>
  806580:	8809883a 	mov	r4,r17
  806584:	d9400104 	addi	r5,sp,4
  806588:	1027883a 	mov	r19,r2
  80658c:	1829883a 	mov	r20,r3
  806590:	08064380 	call	806438 <__b2d>
  806594:	89000417 	ldw	r4,16(r17)
  806598:	91c00417 	ldw	r7,16(r18)
  80659c:	d9800117 	ldw	r6,4(sp)
  8065a0:	180b883a 	mov	r5,r3
  8065a4:	390fc83a 	sub	r7,r7,r4
  8065a8:	1009883a 	mov	r4,r2
  8065ac:	d8800017 	ldw	r2,0(sp)
  8065b0:	380e917a 	slli	r7,r7,5
  8065b4:	2011883a 	mov	r8,r4
  8065b8:	1185c83a 	sub	r2,r2,r6
  8065bc:	11c5883a 	add	r2,r2,r7
  8065c0:	1006953a 	slli	r3,r2,20
  8065c4:	2813883a 	mov	r9,r5
  8065c8:	00800d0e 	bge	zero,r2,806600 <__ratio+0xa8>
  8065cc:	1d29883a 	add	r20,r3,r20
  8065d0:	a00b883a 	mov	r5,r20
  8065d4:	480f883a 	mov	r7,r9
  8065d8:	9809883a 	mov	r4,r19
  8065dc:	400d883a 	mov	r6,r8
  8065e0:	08095a00 	call	8095a0 <__divdf3>
  8065e4:	dfc00617 	ldw	ra,24(sp)
  8065e8:	dd000517 	ldw	r20,20(sp)
  8065ec:	dcc00417 	ldw	r19,16(sp)
  8065f0:	dc800317 	ldw	r18,12(sp)
  8065f4:	dc400217 	ldw	r17,8(sp)
  8065f8:	dec00704 	addi	sp,sp,28
  8065fc:	f800283a 	ret
  806600:	28d3c83a 	sub	r9,r5,r3
  806604:	003ff206 	br	8065d0 <__ratio+0x78>

00806608 <_mprec_log10>:
  806608:	defffe04 	addi	sp,sp,-8
  80660c:	008005c4 	movi	r2,23
  806610:	dc000015 	stw	r16,0(sp)
  806614:	dfc00115 	stw	ra,4(sp)
  806618:	2021883a 	mov	r16,r4
  80661c:	11000c16 	blt	r2,r4,806650 <_mprec_log10+0x48>
  806620:	200490fa 	slli	r2,r4,3
  806624:	00c02074 	movhi	r3,129
  806628:	18f37304 	addi	r3,r3,-12852
  80662c:	10c5883a 	add	r2,r2,r3
  806630:	12400117 	ldw	r9,4(r2)
  806634:	12000017 	ldw	r8,0(r2)
  806638:	4807883a 	mov	r3,r9
  80663c:	4005883a 	mov	r2,r8
  806640:	dfc00117 	ldw	ra,4(sp)
  806644:	dc000017 	ldw	r16,0(sp)
  806648:	dec00204 	addi	sp,sp,8
  80664c:	f800283a 	ret
  806650:	0011883a 	mov	r8,zero
  806654:	024ffc34 	movhi	r9,16368
  806658:	0005883a 	mov	r2,zero
  80665c:	00d00934 	movhi	r3,16420
  806660:	480b883a 	mov	r5,r9
  806664:	4009883a 	mov	r4,r8
  806668:	180f883a 	mov	r7,r3
  80666c:	100d883a 	mov	r6,r2
  806670:	08091dc0 	call	8091dc <__muldf3>
  806674:	843fffc4 	addi	r16,r16,-1
  806678:	1011883a 	mov	r8,r2
  80667c:	1813883a 	mov	r9,r3
  806680:	803ff51e 	bne	r16,zero,806658 <_mprec_log10+0x50>
  806684:	4005883a 	mov	r2,r8
  806688:	4807883a 	mov	r3,r9
  80668c:	dfc00117 	ldw	ra,4(sp)
  806690:	dc000017 	ldw	r16,0(sp)
  806694:	dec00204 	addi	sp,sp,8
  806698:	f800283a 	ret

0080669c <__copybits>:
  80669c:	297fffc4 	addi	r5,r5,-1
  8066a0:	30800417 	ldw	r2,16(r6)
  8066a4:	280bd17a 	srai	r5,r5,5
  8066a8:	31800504 	addi	r6,r6,20
  8066ac:	1085883a 	add	r2,r2,r2
  8066b0:	294b883a 	add	r5,r5,r5
  8066b4:	294b883a 	add	r5,r5,r5
  8066b8:	1085883a 	add	r2,r2,r2
  8066bc:	290b883a 	add	r5,r5,r4
  8066c0:	3087883a 	add	r3,r6,r2
  8066c4:	29400104 	addi	r5,r5,4
  8066c8:	30c0052e 	bgeu	r6,r3,8066e0 <__copybits+0x44>
  8066cc:	30800017 	ldw	r2,0(r6)
  8066d0:	31800104 	addi	r6,r6,4
  8066d4:	20800015 	stw	r2,0(r4)
  8066d8:	21000104 	addi	r4,r4,4
  8066dc:	30fffb36 	bltu	r6,r3,8066cc <__copybits+0x30>
  8066e0:	2140032e 	bgeu	r4,r5,8066f0 <__copybits+0x54>
  8066e4:	20000015 	stw	zero,0(r4)
  8066e8:	21000104 	addi	r4,r4,4
  8066ec:	217ffd36 	bltu	r4,r5,8066e4 <__copybits+0x48>
  8066f0:	f800283a 	ret

008066f4 <__any_on>:
  8066f4:	20800417 	ldw	r2,16(r4)
  8066f8:	2807d17a 	srai	r3,r5,5
  8066fc:	21000504 	addi	r4,r4,20
  806700:	10c00d0e 	bge	r2,r3,806738 <__any_on+0x44>
  806704:	1085883a 	add	r2,r2,r2
  806708:	1085883a 	add	r2,r2,r2
  80670c:	208d883a 	add	r6,r4,r2
  806710:	2180182e 	bgeu	r4,r6,806774 <__any_on+0x80>
  806714:	30bfff17 	ldw	r2,-4(r6)
  806718:	30ffff04 	addi	r3,r6,-4
  80671c:	1000041e 	bne	r2,zero,806730 <__any_on+0x3c>
  806720:	20c0142e 	bgeu	r4,r3,806774 <__any_on+0x80>
  806724:	18ffff04 	addi	r3,r3,-4
  806728:	18800017 	ldw	r2,0(r3)
  80672c:	103ffc26 	beq	r2,zero,806720 <__any_on+0x2c>
  806730:	00800044 	movi	r2,1
  806734:	f800283a 	ret
  806738:	18800a0e 	bge	r3,r2,806764 <__any_on+0x70>
  80673c:	294007cc 	andi	r5,r5,31
  806740:	28000826 	beq	r5,zero,806764 <__any_on+0x70>
  806744:	18c5883a 	add	r2,r3,r3
  806748:	1085883a 	add	r2,r2,r2
  80674c:	208d883a 	add	r6,r4,r2
  806750:	30c00017 	ldw	r3,0(r6)
  806754:	1944d83a 	srl	r2,r3,r5
  806758:	1144983a 	sll	r2,r2,r5
  80675c:	18bff41e 	bne	r3,r2,806730 <__any_on+0x3c>
  806760:	003feb06 	br	806710 <__any_on+0x1c>
  806764:	18c5883a 	add	r2,r3,r3
  806768:	1085883a 	add	r2,r2,r2
  80676c:	208d883a 	add	r6,r4,r2
  806770:	003fe706 	br	806710 <__any_on+0x1c>
  806774:	0005883a 	mov	r2,zero
  806778:	f800283a 	ret

0080677c <_Balloc>:
  80677c:	20c01317 	ldw	r3,76(r4)
  806780:	defffb04 	addi	sp,sp,-20
  806784:	dcc00315 	stw	r19,12(sp)
  806788:	dc800215 	stw	r18,8(sp)
  80678c:	dfc00415 	stw	ra,16(sp)
  806790:	2825883a 	mov	r18,r5
  806794:	dc400115 	stw	r17,4(sp)
  806798:	dc000015 	stw	r16,0(sp)
  80679c:	2027883a 	mov	r19,r4
  8067a0:	01800404 	movi	r6,16
  8067a4:	01400104 	movi	r5,4
  8067a8:	18001726 	beq	r3,zero,806808 <_Balloc+0x8c>
  8067ac:	01400044 	movi	r5,1
  8067b0:	9485883a 	add	r2,r18,r18
  8067b4:	2ca2983a 	sll	r17,r5,r18
  8067b8:	1085883a 	add	r2,r2,r2
  8067bc:	10c7883a 	add	r3,r2,r3
  8067c0:	1c000017 	ldw	r16,0(r3)
  8067c4:	8c4d883a 	add	r6,r17,r17
  8067c8:	318d883a 	add	r6,r6,r6
  8067cc:	9809883a 	mov	r4,r19
  8067d0:	31800504 	addi	r6,r6,20
  8067d4:	80001226 	beq	r16,zero,806820 <_Balloc+0xa4>
  8067d8:	80800017 	ldw	r2,0(r16)
  8067dc:	18800015 	stw	r2,0(r3)
  8067e0:	80000415 	stw	zero,16(r16)
  8067e4:	80000315 	stw	zero,12(r16)
  8067e8:	8005883a 	mov	r2,r16
  8067ec:	dfc00417 	ldw	ra,16(sp)
  8067f0:	dcc00317 	ldw	r19,12(sp)
  8067f4:	dc800217 	ldw	r18,8(sp)
  8067f8:	dc400117 	ldw	r17,4(sp)
  8067fc:	dc000017 	ldw	r16,0(sp)
  806800:	dec00504 	addi	sp,sp,20
  806804:	f800283a 	ret
  806808:	0807bdc0 	call	807bdc <_calloc_r>
  80680c:	1007883a 	mov	r3,r2
  806810:	0021883a 	mov	r16,zero
  806814:	98801315 	stw	r2,76(r19)
  806818:	103fe41e 	bne	r2,zero,8067ac <_Balloc+0x30>
  80681c:	003ff206 	br	8067e8 <_Balloc+0x6c>
  806820:	0807bdc0 	call	807bdc <_calloc_r>
  806824:	103ff026 	beq	r2,zero,8067e8 <_Balloc+0x6c>
  806828:	1021883a 	mov	r16,r2
  80682c:	14800115 	stw	r18,4(r2)
  806830:	14400215 	stw	r17,8(r2)
  806834:	003fea06 	br	8067e0 <_Balloc+0x64>

00806838 <__d2b>:
  806838:	defff504 	addi	sp,sp,-44
  80683c:	dcc00515 	stw	r19,20(sp)
  806840:	04c00044 	movi	r19,1
  806844:	dc000215 	stw	r16,8(sp)
  806848:	2821883a 	mov	r16,r5
  80684c:	980b883a 	mov	r5,r19
  806850:	ddc00915 	stw	r23,36(sp)
  806854:	dd800815 	stw	r22,32(sp)
  806858:	dd400715 	stw	r21,28(sp)
  80685c:	dd000615 	stw	r20,24(sp)
  806860:	dc800415 	stw	r18,16(sp)
  806864:	dc400315 	stw	r17,12(sp)
  806868:	dfc00a15 	stw	ra,40(sp)
  80686c:	3023883a 	mov	r17,r6
  806870:	382d883a 	mov	r22,r7
  806874:	ddc00b17 	ldw	r23,44(sp)
  806878:	080677c0 	call	80677c <_Balloc>
  80687c:	1025883a 	mov	r18,r2
  806880:	00a00034 	movhi	r2,32768
  806884:	10bfffc4 	addi	r2,r2,-1
  806888:	8888703a 	and	r4,r17,r2
  80688c:	202ad53a 	srli	r21,r4,20
  806890:	00800434 	movhi	r2,16
  806894:	10bfffc4 	addi	r2,r2,-1
  806898:	8886703a 	and	r3,r17,r2
  80689c:	a829003a 	cmpeq	r20,r21,zero
  8068a0:	800b883a 	mov	r5,r16
  8068a4:	d8c00115 	stw	r3,4(sp)
  8068a8:	94000504 	addi	r16,r18,20
  8068ac:	a000021e 	bne	r20,zero,8068b8 <__d2b+0x80>
  8068b0:	18c00434 	orhi	r3,r3,16
  8068b4:	d8c00115 	stw	r3,4(sp)
  8068b8:	28002726 	beq	r5,zero,806958 <__d2b+0x120>
  8068bc:	d809883a 	mov	r4,sp
  8068c0:	d9400015 	stw	r5,0(sp)
  8068c4:	08062940 	call	806294 <__lo0bits>
  8068c8:	100d883a 	mov	r6,r2
  8068cc:	10003526 	beq	r2,zero,8069a4 <__d2b+0x16c>
  8068d0:	d8c00117 	ldw	r3,4(sp)
  8068d4:	00800804 	movi	r2,32
  8068d8:	1185c83a 	sub	r2,r2,r6
  8068dc:	d9000017 	ldw	r4,0(sp)
  8068e0:	1886983a 	sll	r3,r3,r2
  8068e4:	1906b03a 	or	r3,r3,r4
  8068e8:	90c00515 	stw	r3,20(r18)
  8068ec:	d8c00117 	ldw	r3,4(sp)
  8068f0:	1986d83a 	srl	r3,r3,r6
  8068f4:	d8c00115 	stw	r3,4(sp)
  8068f8:	180b003a 	cmpeq	r5,r3,zero
  8068fc:	00800084 	movi	r2,2
  806900:	114bc83a 	sub	r5,r2,r5
  806904:	80c00115 	stw	r3,4(r16)
  806908:	91400415 	stw	r5,16(r18)
  80690c:	a0001a1e 	bne	r20,zero,806978 <__d2b+0x140>
  806910:	3545883a 	add	r2,r6,r21
  806914:	10bef344 	addi	r2,r2,-1075
  806918:	00c00d44 	movi	r3,53
  80691c:	b0800015 	stw	r2,0(r22)
  806920:	1987c83a 	sub	r3,r3,r6
  806924:	b8c00015 	stw	r3,0(r23)
  806928:	9005883a 	mov	r2,r18
  80692c:	dfc00a17 	ldw	ra,40(sp)
  806930:	ddc00917 	ldw	r23,36(sp)
  806934:	dd800817 	ldw	r22,32(sp)
  806938:	dd400717 	ldw	r21,28(sp)
  80693c:	dd000617 	ldw	r20,24(sp)
  806940:	dcc00517 	ldw	r19,20(sp)
  806944:	dc800417 	ldw	r18,16(sp)
  806948:	dc400317 	ldw	r17,12(sp)
  80694c:	dc000217 	ldw	r16,8(sp)
  806950:	dec00b04 	addi	sp,sp,44
  806954:	f800283a 	ret
  806958:	d9000104 	addi	r4,sp,4
  80695c:	08062940 	call	806294 <__lo0bits>
  806960:	11800804 	addi	r6,r2,32
  806964:	d8800117 	ldw	r2,4(sp)
  806968:	94c00415 	stw	r19,16(r18)
  80696c:	980b883a 	mov	r5,r19
  806970:	90800515 	stw	r2,20(r18)
  806974:	a03fe626 	beq	r20,zero,806910 <__d2b+0xd8>
  806978:	2945883a 	add	r2,r5,r5
  80697c:	1085883a 	add	r2,r2,r2
  806980:	1405883a 	add	r2,r2,r16
  806984:	113fff17 	ldw	r4,-4(r2)
  806988:	30fef384 	addi	r3,r6,-1074
  80698c:	2820917a 	slli	r16,r5,5
  806990:	b0c00015 	stw	r3,0(r22)
  806994:	08062240 	call	806224 <__hi0bits>
  806998:	80a1c83a 	sub	r16,r16,r2
  80699c:	bc000015 	stw	r16,0(r23)
  8069a0:	003fe106 	br	806928 <__d2b+0xf0>
  8069a4:	d8800017 	ldw	r2,0(sp)
  8069a8:	90800515 	stw	r2,20(r18)
  8069ac:	d8c00117 	ldw	r3,4(sp)
  8069b0:	003fd106 	br	8068f8 <__d2b+0xc0>

008069b4 <__mdiff>:
  8069b4:	defffb04 	addi	sp,sp,-20
  8069b8:	dc000015 	stw	r16,0(sp)
  8069bc:	2821883a 	mov	r16,r5
  8069c0:	dc800215 	stw	r18,8(sp)
  8069c4:	300b883a 	mov	r5,r6
  8069c8:	2025883a 	mov	r18,r4
  8069cc:	8009883a 	mov	r4,r16
  8069d0:	dc400115 	stw	r17,4(sp)
  8069d4:	dfc00415 	stw	ra,16(sp)
  8069d8:	dcc00315 	stw	r19,12(sp)
  8069dc:	3023883a 	mov	r17,r6
  8069e0:	08063580 	call	806358 <__mcmp>
  8069e4:	10004226 	beq	r2,zero,806af0 <__mdiff+0x13c>
  8069e8:	10005016 	blt	r2,zero,806b2c <__mdiff+0x178>
  8069ec:	0027883a 	mov	r19,zero
  8069f0:	81400117 	ldw	r5,4(r16)
  8069f4:	9009883a 	mov	r4,r18
  8069f8:	080677c0 	call	80677c <_Balloc>
  8069fc:	1019883a 	mov	r12,r2
  806a00:	82800417 	ldw	r10,16(r16)
  806a04:	88800417 	ldw	r2,16(r17)
  806a08:	81800504 	addi	r6,r16,20
  806a0c:	5287883a 	add	r3,r10,r10
  806a10:	1085883a 	add	r2,r2,r2
  806a14:	18c7883a 	add	r3,r3,r3
  806a18:	1085883a 	add	r2,r2,r2
  806a1c:	8a000504 	addi	r8,r17,20
  806a20:	64c00315 	stw	r19,12(r12)
  806a24:	30db883a 	add	r13,r6,r3
  806a28:	4097883a 	add	r11,r8,r2
  806a2c:	61c00504 	addi	r7,r12,20
  806a30:	0013883a 	mov	r9,zero
  806a34:	31000017 	ldw	r4,0(r6)
  806a38:	41400017 	ldw	r5,0(r8)
  806a3c:	42000104 	addi	r8,r8,4
  806a40:	20bfffcc 	andi	r2,r4,65535
  806a44:	28ffffcc 	andi	r3,r5,65535
  806a48:	10c5c83a 	sub	r2,r2,r3
  806a4c:	1245883a 	add	r2,r2,r9
  806a50:	2008d43a 	srli	r4,r4,16
  806a54:	280ad43a 	srli	r5,r5,16
  806a58:	1007d43a 	srai	r3,r2,16
  806a5c:	3880000d 	sth	r2,0(r7)
  806a60:	2149c83a 	sub	r4,r4,r5
  806a64:	20c9883a 	add	r4,r4,r3
  806a68:	3900008d 	sth	r4,2(r7)
  806a6c:	31800104 	addi	r6,r6,4
  806a70:	39c00104 	addi	r7,r7,4
  806a74:	2013d43a 	srai	r9,r4,16
  806a78:	42ffee36 	bltu	r8,r11,806a34 <__mdiff+0x80>
  806a7c:	33400c2e 	bgeu	r6,r13,806ab0 <__mdiff+0xfc>
  806a80:	30800017 	ldw	r2,0(r6)
  806a84:	31800104 	addi	r6,r6,4
  806a88:	10ffffcc 	andi	r3,r2,65535
  806a8c:	1a47883a 	add	r3,r3,r9
  806a90:	1004d43a 	srli	r2,r2,16
  806a94:	1809d43a 	srai	r4,r3,16
  806a98:	38c0000d 	sth	r3,0(r7)
  806a9c:	1105883a 	add	r2,r2,r4
  806aa0:	3880008d 	sth	r2,2(r7)
  806aa4:	1013d43a 	srai	r9,r2,16
  806aa8:	39c00104 	addi	r7,r7,4
  806aac:	337ff436 	bltu	r6,r13,806a80 <__mdiff+0xcc>
  806ab0:	38bfff17 	ldw	r2,-4(r7)
  806ab4:	38ffff04 	addi	r3,r7,-4
  806ab8:	1000041e 	bne	r2,zero,806acc <__mdiff+0x118>
  806abc:	18ffff04 	addi	r3,r3,-4
  806ac0:	18800017 	ldw	r2,0(r3)
  806ac4:	52bfffc4 	addi	r10,r10,-1
  806ac8:	103ffc26 	beq	r2,zero,806abc <__mdiff+0x108>
  806acc:	6005883a 	mov	r2,r12
  806ad0:	62800415 	stw	r10,16(r12)
  806ad4:	dfc00417 	ldw	ra,16(sp)
  806ad8:	dcc00317 	ldw	r19,12(sp)
  806adc:	dc800217 	ldw	r18,8(sp)
  806ae0:	dc400117 	ldw	r17,4(sp)
  806ae4:	dc000017 	ldw	r16,0(sp)
  806ae8:	dec00504 	addi	sp,sp,20
  806aec:	f800283a 	ret
  806af0:	9009883a 	mov	r4,r18
  806af4:	000b883a 	mov	r5,zero
  806af8:	080677c0 	call	80677c <_Balloc>
  806afc:	1019883a 	mov	r12,r2
  806b00:	00800044 	movi	r2,1
  806b04:	60800415 	stw	r2,16(r12)
  806b08:	6005883a 	mov	r2,r12
  806b0c:	60000515 	stw	zero,20(r12)
  806b10:	dfc00417 	ldw	ra,16(sp)
  806b14:	dcc00317 	ldw	r19,12(sp)
  806b18:	dc800217 	ldw	r18,8(sp)
  806b1c:	dc400117 	ldw	r17,4(sp)
  806b20:	dc000017 	ldw	r16,0(sp)
  806b24:	dec00504 	addi	sp,sp,20
  806b28:	f800283a 	ret
  806b2c:	880d883a 	mov	r6,r17
  806b30:	04c00044 	movi	r19,1
  806b34:	8023883a 	mov	r17,r16
  806b38:	3021883a 	mov	r16,r6
  806b3c:	003fac06 	br	8069f0 <__mdiff+0x3c>

00806b40 <__lshift>:
  806b40:	defff904 	addi	sp,sp,-28
  806b44:	28800417 	ldw	r2,16(r5)
  806b48:	dc000015 	stw	r16,0(sp)
  806b4c:	3021d17a 	srai	r16,r6,5
  806b50:	28c00217 	ldw	r3,8(r5)
  806b54:	10800044 	addi	r2,r2,1
  806b58:	dc400115 	stw	r17,4(sp)
  806b5c:	80a3883a 	add	r17,r16,r2
  806b60:	dd400515 	stw	r21,20(sp)
  806b64:	dd000415 	stw	r20,16(sp)
  806b68:	dc800215 	stw	r18,8(sp)
  806b6c:	dfc00615 	stw	ra,24(sp)
  806b70:	2825883a 	mov	r18,r5
  806b74:	dcc00315 	stw	r19,12(sp)
  806b78:	3029883a 	mov	r20,r6
  806b7c:	202b883a 	mov	r21,r4
  806b80:	29400117 	ldw	r5,4(r5)
  806b84:	1c40030e 	bge	r3,r17,806b94 <__lshift+0x54>
  806b88:	18c7883a 	add	r3,r3,r3
  806b8c:	29400044 	addi	r5,r5,1
  806b90:	1c7ffd16 	blt	r3,r17,806b88 <__lshift+0x48>
  806b94:	a809883a 	mov	r4,r21
  806b98:	080677c0 	call	80677c <_Balloc>
  806b9c:	1027883a 	mov	r19,r2
  806ba0:	11400504 	addi	r5,r2,20
  806ba4:	0400090e 	bge	zero,r16,806bcc <__lshift+0x8c>
  806ba8:	2805883a 	mov	r2,r5
  806bac:	0007883a 	mov	r3,zero
  806bb0:	18c00044 	addi	r3,r3,1
  806bb4:	10000015 	stw	zero,0(r2)
  806bb8:	10800104 	addi	r2,r2,4
  806bbc:	80fffc1e 	bne	r16,r3,806bb0 <__lshift+0x70>
  806bc0:	8405883a 	add	r2,r16,r16
  806bc4:	1085883a 	add	r2,r2,r2
  806bc8:	288b883a 	add	r5,r5,r2
  806bcc:	90800417 	ldw	r2,16(r18)
  806bd0:	91000504 	addi	r4,r18,20
  806bd4:	a18007cc 	andi	r6,r20,31
  806bd8:	1085883a 	add	r2,r2,r2
  806bdc:	1085883a 	add	r2,r2,r2
  806be0:	208f883a 	add	r7,r4,r2
  806be4:	30001e26 	beq	r6,zero,806c60 <__lshift+0x120>
  806be8:	00800804 	movi	r2,32
  806bec:	1191c83a 	sub	r8,r2,r6
  806bf0:	0007883a 	mov	r3,zero
  806bf4:	20800017 	ldw	r2,0(r4)
  806bf8:	1184983a 	sll	r2,r2,r6
  806bfc:	1884b03a 	or	r2,r3,r2
  806c00:	28800015 	stw	r2,0(r5)
  806c04:	20c00017 	ldw	r3,0(r4)
  806c08:	21000104 	addi	r4,r4,4
  806c0c:	29400104 	addi	r5,r5,4
  806c10:	1a06d83a 	srl	r3,r3,r8
  806c14:	21fff736 	bltu	r4,r7,806bf4 <__lshift+0xb4>
  806c18:	28c00015 	stw	r3,0(r5)
  806c1c:	18000126 	beq	r3,zero,806c24 <__lshift+0xe4>
  806c20:	8c400044 	addi	r17,r17,1
  806c24:	88bfffc4 	addi	r2,r17,-1
  806c28:	98800415 	stw	r2,16(r19)
  806c2c:	a809883a 	mov	r4,r21
  806c30:	900b883a 	mov	r5,r18
  806c34:	08061fc0 	call	8061fc <_Bfree>
  806c38:	9805883a 	mov	r2,r19
  806c3c:	dfc00617 	ldw	ra,24(sp)
  806c40:	dd400517 	ldw	r21,20(sp)
  806c44:	dd000417 	ldw	r20,16(sp)
  806c48:	dcc00317 	ldw	r19,12(sp)
  806c4c:	dc800217 	ldw	r18,8(sp)
  806c50:	dc400117 	ldw	r17,4(sp)
  806c54:	dc000017 	ldw	r16,0(sp)
  806c58:	dec00704 	addi	sp,sp,28
  806c5c:	f800283a 	ret
  806c60:	20800017 	ldw	r2,0(r4)
  806c64:	21000104 	addi	r4,r4,4
  806c68:	28800015 	stw	r2,0(r5)
  806c6c:	29400104 	addi	r5,r5,4
  806c70:	21ffec2e 	bgeu	r4,r7,806c24 <__lshift+0xe4>
  806c74:	20800017 	ldw	r2,0(r4)
  806c78:	21000104 	addi	r4,r4,4
  806c7c:	28800015 	stw	r2,0(r5)
  806c80:	29400104 	addi	r5,r5,4
  806c84:	21fff636 	bltu	r4,r7,806c60 <__lshift+0x120>
  806c88:	003fe606 	br	806c24 <__lshift+0xe4>

00806c8c <__multiply>:
  806c8c:	defff004 	addi	sp,sp,-64
  806c90:	dc800815 	stw	r18,32(sp)
  806c94:	dc400715 	stw	r17,28(sp)
  806c98:	2c800417 	ldw	r18,16(r5)
  806c9c:	34400417 	ldw	r17,16(r6)
  806ca0:	dcc00915 	stw	r19,36(sp)
  806ca4:	dc000615 	stw	r16,24(sp)
  806ca8:	dfc00f15 	stw	ra,60(sp)
  806cac:	df000e15 	stw	fp,56(sp)
  806cb0:	ddc00d15 	stw	r23,52(sp)
  806cb4:	dd800c15 	stw	r22,48(sp)
  806cb8:	dd400b15 	stw	r21,44(sp)
  806cbc:	dd000a15 	stw	r20,40(sp)
  806cc0:	2821883a 	mov	r16,r5
  806cc4:	3027883a 	mov	r19,r6
  806cc8:	9440040e 	bge	r18,r17,806cdc <__multiply+0x50>
  806ccc:	8825883a 	mov	r18,r17
  806cd0:	2c400417 	ldw	r17,16(r5)
  806cd4:	2827883a 	mov	r19,r5
  806cd8:	3021883a 	mov	r16,r6
  806cdc:	80800217 	ldw	r2,8(r16)
  806ce0:	9447883a 	add	r3,r18,r17
  806ce4:	d8c00415 	stw	r3,16(sp)
  806ce8:	81400117 	ldw	r5,4(r16)
  806cec:	10c0010e 	bge	r2,r3,806cf4 <__multiply+0x68>
  806cf0:	29400044 	addi	r5,r5,1
  806cf4:	080677c0 	call	80677c <_Balloc>
  806cf8:	d8800515 	stw	r2,20(sp)
  806cfc:	d9000417 	ldw	r4,16(sp)
  806d00:	d8c00517 	ldw	r3,20(sp)
  806d04:	2105883a 	add	r2,r4,r4
  806d08:	1085883a 	add	r2,r2,r2
  806d0c:	19000504 	addi	r4,r3,20
  806d10:	2085883a 	add	r2,r4,r2
  806d14:	d8800315 	stw	r2,12(sp)
  806d18:	2080052e 	bgeu	r4,r2,806d30 <__multiply+0xa4>
  806d1c:	2005883a 	mov	r2,r4
  806d20:	d8c00317 	ldw	r3,12(sp)
  806d24:	10000015 	stw	zero,0(r2)
  806d28:	10800104 	addi	r2,r2,4
  806d2c:	10fffc36 	bltu	r2,r3,806d20 <__multiply+0x94>
  806d30:	8c45883a 	add	r2,r17,r17
  806d34:	9487883a 	add	r3,r18,r18
  806d38:	9dc00504 	addi	r23,r19,20
  806d3c:	1085883a 	add	r2,r2,r2
  806d40:	84000504 	addi	r16,r16,20
  806d44:	18c7883a 	add	r3,r3,r3
  806d48:	b885883a 	add	r2,r23,r2
  806d4c:	dc000015 	stw	r16,0(sp)
  806d50:	d8800215 	stw	r2,8(sp)
  806d54:	80f9883a 	add	fp,r16,r3
  806d58:	b880432e 	bgeu	r23,r2,806e68 <__multiply+0x1dc>
  806d5c:	d9000115 	stw	r4,4(sp)
  806d60:	b9000017 	ldw	r4,0(r23)
  806d64:	253fffcc 	andi	r20,r4,65535
  806d68:	a0001a26 	beq	r20,zero,806dd4 <__multiply+0x148>
  806d6c:	dcc00017 	ldw	r19,0(sp)
  806d70:	dc800117 	ldw	r18,4(sp)
  806d74:	002b883a 	mov	r21,zero
  806d78:	9c400017 	ldw	r17,0(r19)
  806d7c:	94000017 	ldw	r16,0(r18)
  806d80:	a009883a 	mov	r4,r20
  806d84:	897fffcc 	andi	r5,r17,65535
  806d88:	0800b9c0 	call	800b9c <__mulsi3>
  806d8c:	880ad43a 	srli	r5,r17,16
  806d90:	80ffffcc 	andi	r3,r16,65535
  806d94:	a8c7883a 	add	r3,r21,r3
  806d98:	a009883a 	mov	r4,r20
  806d9c:	10e3883a 	add	r17,r2,r3
  806da0:	8020d43a 	srli	r16,r16,16
  806da4:	0800b9c0 	call	800b9c <__mulsi3>
  806da8:	8806d43a 	srli	r3,r17,16
  806dac:	1405883a 	add	r2,r2,r16
  806db0:	9cc00104 	addi	r19,r19,4
  806db4:	1887883a 	add	r3,r3,r2
  806db8:	90c0008d 	sth	r3,2(r18)
  806dbc:	9440000d 	sth	r17,0(r18)
  806dc0:	182ad43a 	srli	r21,r3,16
  806dc4:	94800104 	addi	r18,r18,4
  806dc8:	9f3feb36 	bltu	r19,fp,806d78 <__multiply+0xec>
  806dcc:	95400015 	stw	r21,0(r18)
  806dd0:	b9000017 	ldw	r4,0(r23)
  806dd4:	202ad43a 	srli	r21,r4,16
  806dd8:	a8001c26 	beq	r21,zero,806e4c <__multiply+0x1c0>
  806ddc:	d9000117 	ldw	r4,4(sp)
  806de0:	dd000017 	ldw	r20,0(sp)
  806de4:	002d883a 	mov	r22,zero
  806de8:	24c00017 	ldw	r19,0(r4)
  806dec:	2025883a 	mov	r18,r4
  806df0:	9823883a 	mov	r17,r19
  806df4:	a4000017 	ldw	r16,0(r20)
  806df8:	a809883a 	mov	r4,r21
  806dfc:	a5000104 	addi	r20,r20,4
  806e00:	817fffcc 	andi	r5,r16,65535
  806e04:	0800b9c0 	call	800b9c <__mulsi3>
  806e08:	8806d43a 	srli	r3,r17,16
  806e0c:	800ad43a 	srli	r5,r16,16
  806e10:	94c0000d 	sth	r19,0(r18)
  806e14:	b0c7883a 	add	r3,r22,r3
  806e18:	10e1883a 	add	r16,r2,r3
  806e1c:	9400008d 	sth	r16,2(r18)
  806e20:	a809883a 	mov	r4,r21
  806e24:	94800104 	addi	r18,r18,4
  806e28:	0800b9c0 	call	800b9c <__mulsi3>
  806e2c:	94400017 	ldw	r17,0(r18)
  806e30:	8020d43a 	srli	r16,r16,16
  806e34:	88ffffcc 	andi	r3,r17,65535
  806e38:	10c5883a 	add	r2,r2,r3
  806e3c:	80a7883a 	add	r19,r16,r2
  806e40:	982cd43a 	srli	r22,r19,16
  806e44:	a73feb36 	bltu	r20,fp,806df4 <__multiply+0x168>
  806e48:	94c00015 	stw	r19,0(r18)
  806e4c:	d8800217 	ldw	r2,8(sp)
  806e50:	bdc00104 	addi	r23,r23,4
  806e54:	b880042e 	bgeu	r23,r2,806e68 <__multiply+0x1dc>
  806e58:	d8c00117 	ldw	r3,4(sp)
  806e5c:	18c00104 	addi	r3,r3,4
  806e60:	d8c00115 	stw	r3,4(sp)
  806e64:	003fbe06 	br	806d60 <__multiply+0xd4>
  806e68:	d9000417 	ldw	r4,16(sp)
  806e6c:	01000c0e 	bge	zero,r4,806ea0 <__multiply+0x214>
  806e70:	d8c00317 	ldw	r3,12(sp)
  806e74:	18bfff17 	ldw	r2,-4(r3)
  806e78:	18ffff04 	addi	r3,r3,-4
  806e7c:	10000326 	beq	r2,zero,806e8c <__multiply+0x200>
  806e80:	00000706 	br	806ea0 <__multiply+0x214>
  806e84:	18800017 	ldw	r2,0(r3)
  806e88:	1000051e 	bne	r2,zero,806ea0 <__multiply+0x214>
  806e8c:	d9000417 	ldw	r4,16(sp)
  806e90:	18ffff04 	addi	r3,r3,-4
  806e94:	213fffc4 	addi	r4,r4,-1
  806e98:	d9000415 	stw	r4,16(sp)
  806e9c:	203ff91e 	bne	r4,zero,806e84 <__multiply+0x1f8>
  806ea0:	d8800417 	ldw	r2,16(sp)
  806ea4:	d8c00517 	ldw	r3,20(sp)
  806ea8:	18800415 	stw	r2,16(r3)
  806eac:	1805883a 	mov	r2,r3
  806eb0:	dfc00f17 	ldw	ra,60(sp)
  806eb4:	df000e17 	ldw	fp,56(sp)
  806eb8:	ddc00d17 	ldw	r23,52(sp)
  806ebc:	dd800c17 	ldw	r22,48(sp)
  806ec0:	dd400b17 	ldw	r21,44(sp)
  806ec4:	dd000a17 	ldw	r20,40(sp)
  806ec8:	dcc00917 	ldw	r19,36(sp)
  806ecc:	dc800817 	ldw	r18,32(sp)
  806ed0:	dc400717 	ldw	r17,28(sp)
  806ed4:	dc000617 	ldw	r16,24(sp)
  806ed8:	dec01004 	addi	sp,sp,64
  806edc:	f800283a 	ret

00806ee0 <__i2b>:
  806ee0:	defffd04 	addi	sp,sp,-12
  806ee4:	dc000015 	stw	r16,0(sp)
  806ee8:	04000044 	movi	r16,1
  806eec:	dc800115 	stw	r18,4(sp)
  806ef0:	2825883a 	mov	r18,r5
  806ef4:	800b883a 	mov	r5,r16
  806ef8:	dfc00215 	stw	ra,8(sp)
  806efc:	080677c0 	call	80677c <_Balloc>
  806f00:	14000415 	stw	r16,16(r2)
  806f04:	14800515 	stw	r18,20(r2)
  806f08:	dfc00217 	ldw	ra,8(sp)
  806f0c:	dc800117 	ldw	r18,4(sp)
  806f10:	dc000017 	ldw	r16,0(sp)
  806f14:	dec00304 	addi	sp,sp,12
  806f18:	f800283a 	ret

00806f1c <__multadd>:
  806f1c:	defff604 	addi	sp,sp,-40
  806f20:	dd800615 	stw	r22,24(sp)
  806f24:	2d800417 	ldw	r22,16(r5)
  806f28:	df000815 	stw	fp,32(sp)
  806f2c:	ddc00715 	stw	r23,28(sp)
  806f30:	dd400515 	stw	r21,20(sp)
  806f34:	dd000415 	stw	r20,16(sp)
  806f38:	dcc00315 	stw	r19,12(sp)
  806f3c:	dc800215 	stw	r18,8(sp)
  806f40:	dfc00915 	stw	ra,36(sp)
  806f44:	dc400115 	stw	r17,4(sp)
  806f48:	dc000015 	stw	r16,0(sp)
  806f4c:	282f883a 	mov	r23,r5
  806f50:	2039883a 	mov	fp,r4
  806f54:	302b883a 	mov	r21,r6
  806f58:	3829883a 	mov	r20,r7
  806f5c:	2c800504 	addi	r18,r5,20
  806f60:	0027883a 	mov	r19,zero
  806f64:	94400017 	ldw	r17,0(r18)
  806f68:	a80b883a 	mov	r5,r21
  806f6c:	9cc00044 	addi	r19,r19,1
  806f70:	893fffcc 	andi	r4,r17,65535
  806f74:	0800b9c0 	call	800b9c <__mulsi3>
  806f78:	8808d43a 	srli	r4,r17,16
  806f7c:	1521883a 	add	r16,r2,r20
  806f80:	a80b883a 	mov	r5,r21
  806f84:	0800b9c0 	call	800b9c <__mulsi3>
  806f88:	8008d43a 	srli	r4,r16,16
  806f8c:	843fffcc 	andi	r16,r16,65535
  806f90:	1105883a 	add	r2,r2,r4
  806f94:	1006943a 	slli	r3,r2,16
  806f98:	1028d43a 	srli	r20,r2,16
  806f9c:	1c07883a 	add	r3,r3,r16
  806fa0:	90c00015 	stw	r3,0(r18)
  806fa4:	94800104 	addi	r18,r18,4
  806fa8:	9dbfee16 	blt	r19,r22,806f64 <__multadd+0x48>
  806fac:	a0000826 	beq	r20,zero,806fd0 <__multadd+0xb4>
  806fb0:	b8800217 	ldw	r2,8(r23)
  806fb4:	b080130e 	bge	r22,r2,807004 <__multadd+0xe8>
  806fb8:	b585883a 	add	r2,r22,r22
  806fbc:	1085883a 	add	r2,r2,r2
  806fc0:	15c5883a 	add	r2,r2,r23
  806fc4:	b0c00044 	addi	r3,r22,1
  806fc8:	15000515 	stw	r20,20(r2)
  806fcc:	b8c00415 	stw	r3,16(r23)
  806fd0:	b805883a 	mov	r2,r23
  806fd4:	dfc00917 	ldw	ra,36(sp)
  806fd8:	df000817 	ldw	fp,32(sp)
  806fdc:	ddc00717 	ldw	r23,28(sp)
  806fe0:	dd800617 	ldw	r22,24(sp)
  806fe4:	dd400517 	ldw	r21,20(sp)
  806fe8:	dd000417 	ldw	r20,16(sp)
  806fec:	dcc00317 	ldw	r19,12(sp)
  806ff0:	dc800217 	ldw	r18,8(sp)
  806ff4:	dc400117 	ldw	r17,4(sp)
  806ff8:	dc000017 	ldw	r16,0(sp)
  806ffc:	dec00a04 	addi	sp,sp,40
  807000:	f800283a 	ret
  807004:	b9400117 	ldw	r5,4(r23)
  807008:	e009883a 	mov	r4,fp
  80700c:	29400044 	addi	r5,r5,1
  807010:	080677c0 	call	80677c <_Balloc>
  807014:	b9800417 	ldw	r6,16(r23)
  807018:	b9400304 	addi	r5,r23,12
  80701c:	11000304 	addi	r4,r2,12
  807020:	318d883a 	add	r6,r6,r6
  807024:	318d883a 	add	r6,r6,r6
  807028:	31800204 	addi	r6,r6,8
  80702c:	1023883a 	mov	r17,r2
  807030:	0805fe40 	call	805fe4 <memcpy>
  807034:	b80b883a 	mov	r5,r23
  807038:	e009883a 	mov	r4,fp
  80703c:	08061fc0 	call	8061fc <_Bfree>
  807040:	882f883a 	mov	r23,r17
  807044:	003fdc06 	br	806fb8 <__multadd+0x9c>

00807048 <__pow5mult>:
  807048:	defffa04 	addi	sp,sp,-24
  80704c:	308000cc 	andi	r2,r6,3
  807050:	dd000415 	stw	r20,16(sp)
  807054:	dcc00315 	stw	r19,12(sp)
  807058:	dc000015 	stw	r16,0(sp)
  80705c:	dfc00515 	stw	ra,20(sp)
  807060:	dc800215 	stw	r18,8(sp)
  807064:	dc400115 	stw	r17,4(sp)
  807068:	3021883a 	mov	r16,r6
  80706c:	2027883a 	mov	r19,r4
  807070:	2829883a 	mov	r20,r5
  807074:	10002b1e 	bne	r2,zero,807124 <__pow5mult+0xdc>
  807078:	8025d0ba 	srai	r18,r16,2
  80707c:	90001b26 	beq	r18,zero,8070ec <__pow5mult+0xa4>
  807080:	9c001217 	ldw	r16,72(r19)
  807084:	8000081e 	bne	r16,zero,8070a8 <__pow5mult+0x60>
  807088:	00003006 	br	80714c <__pow5mult+0x104>
  80708c:	800b883a 	mov	r5,r16
  807090:	800d883a 	mov	r6,r16
  807094:	9809883a 	mov	r4,r19
  807098:	90001426 	beq	r18,zero,8070ec <__pow5mult+0xa4>
  80709c:	80800017 	ldw	r2,0(r16)
  8070a0:	10001b26 	beq	r2,zero,807110 <__pow5mult+0xc8>
  8070a4:	1021883a 	mov	r16,r2
  8070a8:	9080004c 	andi	r2,r18,1
  8070ac:	1005003a 	cmpeq	r2,r2,zero
  8070b0:	9025d07a 	srai	r18,r18,1
  8070b4:	800d883a 	mov	r6,r16
  8070b8:	9809883a 	mov	r4,r19
  8070bc:	a00b883a 	mov	r5,r20
  8070c0:	103ff21e 	bne	r2,zero,80708c <__pow5mult+0x44>
  8070c4:	0806c8c0 	call	806c8c <__multiply>
  8070c8:	a00b883a 	mov	r5,r20
  8070cc:	9809883a 	mov	r4,r19
  8070d0:	1023883a 	mov	r17,r2
  8070d4:	08061fc0 	call	8061fc <_Bfree>
  8070d8:	8829883a 	mov	r20,r17
  8070dc:	800b883a 	mov	r5,r16
  8070e0:	800d883a 	mov	r6,r16
  8070e4:	9809883a 	mov	r4,r19
  8070e8:	903fec1e 	bne	r18,zero,80709c <__pow5mult+0x54>
  8070ec:	a005883a 	mov	r2,r20
  8070f0:	dfc00517 	ldw	ra,20(sp)
  8070f4:	dd000417 	ldw	r20,16(sp)
  8070f8:	dcc00317 	ldw	r19,12(sp)
  8070fc:	dc800217 	ldw	r18,8(sp)
  807100:	dc400117 	ldw	r17,4(sp)
  807104:	dc000017 	ldw	r16,0(sp)
  807108:	dec00604 	addi	sp,sp,24
  80710c:	f800283a 	ret
  807110:	0806c8c0 	call	806c8c <__multiply>
  807114:	80800015 	stw	r2,0(r16)
  807118:	1021883a 	mov	r16,r2
  80711c:	10000015 	stw	zero,0(r2)
  807120:	003fe106 	br	8070a8 <__pow5mult+0x60>
  807124:	1085883a 	add	r2,r2,r2
  807128:	00c02074 	movhi	r3,129
  80712c:	18f3b904 	addi	r3,r3,-12572
  807130:	1085883a 	add	r2,r2,r2
  807134:	10c5883a 	add	r2,r2,r3
  807138:	11bfff17 	ldw	r6,-4(r2)
  80713c:	000f883a 	mov	r7,zero
  807140:	0806f1c0 	call	806f1c <__multadd>
  807144:	1029883a 	mov	r20,r2
  807148:	003fcb06 	br	807078 <__pow5mult+0x30>
  80714c:	9809883a 	mov	r4,r19
  807150:	01409c44 	movi	r5,625
  807154:	0806ee00 	call	806ee0 <__i2b>
  807158:	98801215 	stw	r2,72(r19)
  80715c:	1021883a 	mov	r16,r2
  807160:	10000015 	stw	zero,0(r2)
  807164:	003fd006 	br	8070a8 <__pow5mult+0x60>

00807168 <__s2b>:
  807168:	defff904 	addi	sp,sp,-28
  80716c:	dcc00315 	stw	r19,12(sp)
  807170:	dc800215 	stw	r18,8(sp)
  807174:	2827883a 	mov	r19,r5
  807178:	2025883a 	mov	r18,r4
  80717c:	01400244 	movi	r5,9
  807180:	39000204 	addi	r4,r7,8
  807184:	dd000415 	stw	r20,16(sp)
  807188:	dc400115 	stw	r17,4(sp)
  80718c:	dfc00615 	stw	ra,24(sp)
  807190:	dd400515 	stw	r21,20(sp)
  807194:	dc000015 	stw	r16,0(sp)
  807198:	3829883a 	mov	r20,r7
  80719c:	3023883a 	mov	r17,r6
  8071a0:	0809e800 	call	809e80 <__divsi3>
  8071a4:	00c00044 	movi	r3,1
  8071a8:	1880350e 	bge	r3,r2,807280 <__s2b+0x118>
  8071ac:	000b883a 	mov	r5,zero
  8071b0:	18c7883a 	add	r3,r3,r3
  8071b4:	29400044 	addi	r5,r5,1
  8071b8:	18bffd16 	blt	r3,r2,8071b0 <__s2b+0x48>
  8071bc:	9009883a 	mov	r4,r18
  8071c0:	080677c0 	call	80677c <_Balloc>
  8071c4:	1011883a 	mov	r8,r2
  8071c8:	d8800717 	ldw	r2,28(sp)
  8071cc:	00c00044 	movi	r3,1
  8071d0:	01800244 	movi	r6,9
  8071d4:	40800515 	stw	r2,20(r8)
  8071d8:	40c00415 	stw	r3,16(r8)
  8071dc:	3440260e 	bge	r6,r17,807278 <__s2b+0x110>
  8071e0:	3021883a 	mov	r16,r6
  8071e4:	99ab883a 	add	r21,r19,r6
  8071e8:	9c05883a 	add	r2,r19,r16
  8071ec:	11c00007 	ldb	r7,0(r2)
  8071f0:	400b883a 	mov	r5,r8
  8071f4:	9009883a 	mov	r4,r18
  8071f8:	39fff404 	addi	r7,r7,-48
  8071fc:	01800284 	movi	r6,10
  807200:	0806f1c0 	call	806f1c <__multadd>
  807204:	84000044 	addi	r16,r16,1
  807208:	1011883a 	mov	r8,r2
  80720c:	8c3ff61e 	bne	r17,r16,8071e8 <__s2b+0x80>
  807210:	ac45883a 	add	r2,r21,r17
  807214:	117ffe04 	addi	r5,r2,-8
  807218:	880d883a 	mov	r6,r17
  80721c:	35000c0e 	bge	r6,r20,807250 <__s2b+0xe8>
  807220:	a185c83a 	sub	r2,r20,r6
  807224:	2821883a 	mov	r16,r5
  807228:	28a3883a 	add	r17,r5,r2
  80722c:	81c00007 	ldb	r7,0(r16)
  807230:	400b883a 	mov	r5,r8
  807234:	9009883a 	mov	r4,r18
  807238:	39fff404 	addi	r7,r7,-48
  80723c:	01800284 	movi	r6,10
  807240:	0806f1c0 	call	806f1c <__multadd>
  807244:	84000044 	addi	r16,r16,1
  807248:	1011883a 	mov	r8,r2
  80724c:	847ff71e 	bne	r16,r17,80722c <__s2b+0xc4>
  807250:	4005883a 	mov	r2,r8
  807254:	dfc00617 	ldw	ra,24(sp)
  807258:	dd400517 	ldw	r21,20(sp)
  80725c:	dd000417 	ldw	r20,16(sp)
  807260:	dcc00317 	ldw	r19,12(sp)
  807264:	dc800217 	ldw	r18,8(sp)
  807268:	dc400117 	ldw	r17,4(sp)
  80726c:	dc000017 	ldw	r16,0(sp)
  807270:	dec00704 	addi	sp,sp,28
  807274:	f800283a 	ret
  807278:	99400284 	addi	r5,r19,10
  80727c:	003fe706 	br	80721c <__s2b+0xb4>
  807280:	000b883a 	mov	r5,zero
  807284:	003fcd06 	br	8071bc <__s2b+0x54>

00807288 <_realloc_r>:
  807288:	defff404 	addi	sp,sp,-48
  80728c:	dd800815 	stw	r22,32(sp)
  807290:	dc800415 	stw	r18,16(sp)
  807294:	dc400315 	stw	r17,12(sp)
  807298:	dfc00b15 	stw	ra,44(sp)
  80729c:	df000a15 	stw	fp,40(sp)
  8072a0:	ddc00915 	stw	r23,36(sp)
  8072a4:	dd400715 	stw	r21,28(sp)
  8072a8:	dd000615 	stw	r20,24(sp)
  8072ac:	dcc00515 	stw	r19,20(sp)
  8072b0:	dc000215 	stw	r16,8(sp)
  8072b4:	2825883a 	mov	r18,r5
  8072b8:	3023883a 	mov	r17,r6
  8072bc:	202d883a 	mov	r22,r4
  8072c0:	2800c926 	beq	r5,zero,8075e8 <_realloc_r+0x360>
  8072c4:	080a8640 	call	80a864 <__malloc_lock>
  8072c8:	943ffe04 	addi	r16,r18,-8
  8072cc:	88c002c4 	addi	r3,r17,11
  8072d0:	00800584 	movi	r2,22
  8072d4:	82000117 	ldw	r8,4(r16)
  8072d8:	10c01b2e 	bgeu	r2,r3,807348 <_realloc_r+0xc0>
  8072dc:	00bffe04 	movi	r2,-8
  8072e0:	188e703a 	and	r7,r3,r2
  8072e4:	3839883a 	mov	fp,r7
  8072e8:	38001a16 	blt	r7,zero,807354 <_realloc_r+0xcc>
  8072ec:	e4401936 	bltu	fp,r17,807354 <_realloc_r+0xcc>
  8072f0:	013fff04 	movi	r4,-4
  8072f4:	4126703a 	and	r19,r8,r4
  8072f8:	99c02616 	blt	r19,r7,807394 <_realloc_r+0x10c>
  8072fc:	802b883a 	mov	r21,r16
  807300:	9829883a 	mov	r20,r19
  807304:	84000204 	addi	r16,r16,8
  807308:	a80f883a 	mov	r7,r21
  80730c:	a70dc83a 	sub	r6,r20,fp
  807310:	008003c4 	movi	r2,15
  807314:	1180c136 	bltu	r2,r6,80761c <_realloc_r+0x394>
  807318:	38800117 	ldw	r2,4(r7)
  80731c:	a549883a 	add	r4,r20,r21
  807320:	1080004c 	andi	r2,r2,1
  807324:	a084b03a 	or	r2,r20,r2
  807328:	38800115 	stw	r2,4(r7)
  80732c:	20c00117 	ldw	r3,4(r4)
  807330:	18c00054 	ori	r3,r3,1
  807334:	20c00115 	stw	r3,4(r4)
  807338:	b009883a 	mov	r4,r22
  80733c:	080a8840 	call	80a884 <__malloc_unlock>
  807340:	8023883a 	mov	r17,r16
  807344:	00000606 	br	807360 <_realloc_r+0xd8>
  807348:	01c00404 	movi	r7,16
  80734c:	3839883a 	mov	fp,r7
  807350:	e47fe72e 	bgeu	fp,r17,8072f0 <_realloc_r+0x68>
  807354:	00800304 	movi	r2,12
  807358:	0023883a 	mov	r17,zero
  80735c:	b0800015 	stw	r2,0(r22)
  807360:	8805883a 	mov	r2,r17
  807364:	dfc00b17 	ldw	ra,44(sp)
  807368:	df000a17 	ldw	fp,40(sp)
  80736c:	ddc00917 	ldw	r23,36(sp)
  807370:	dd800817 	ldw	r22,32(sp)
  807374:	dd400717 	ldw	r21,28(sp)
  807378:	dd000617 	ldw	r20,24(sp)
  80737c:	dcc00517 	ldw	r19,20(sp)
  807380:	dc800417 	ldw	r18,16(sp)
  807384:	dc400317 	ldw	r17,12(sp)
  807388:	dc000217 	ldw	r16,8(sp)
  80738c:	dec00c04 	addi	sp,sp,48
  807390:	f800283a 	ret
  807394:	00802074 	movhi	r2,129
  807398:	10b50f04 	addi	r2,r2,-11204
  80739c:	12400217 	ldw	r9,8(r2)
  8073a0:	84cd883a 	add	r6,r16,r19
  8073a4:	802b883a 	mov	r21,r16
  8073a8:	3240b926 	beq	r6,r9,807690 <_realloc_r+0x408>
  8073ac:	31400117 	ldw	r5,4(r6)
  8073b0:	00bfff84 	movi	r2,-2
  8073b4:	2884703a 	and	r2,r5,r2
  8073b8:	1185883a 	add	r2,r2,r6
  8073bc:	10c00117 	ldw	r3,4(r2)
  8073c0:	18c0004c 	andi	r3,r3,1
  8073c4:	1807003a 	cmpeq	r3,r3,zero
  8073c8:	1800a326 	beq	r3,zero,807658 <_realloc_r+0x3d0>
  8073cc:	2908703a 	and	r4,r5,r4
  8073d0:	9929883a 	add	r20,r19,r4
  8073d4:	a1c0a30e 	bge	r20,r7,807664 <_realloc_r+0x3dc>
  8073d8:	4080004c 	andi	r2,r8,1
  8073dc:	1000551e 	bne	r2,zero,807534 <_realloc_r+0x2ac>
  8073e0:	80800017 	ldw	r2,0(r16)
  8073e4:	80afc83a 	sub	r23,r16,r2
  8073e8:	b8c00117 	ldw	r3,4(r23)
  8073ec:	00bfff04 	movi	r2,-4
  8073f0:	1884703a 	and	r2,r3,r2
  8073f4:	30002e26 	beq	r6,zero,8074b0 <_realloc_r+0x228>
  8073f8:	3240b926 	beq	r6,r9,8076e0 <_realloc_r+0x458>
  8073fc:	98a9883a 	add	r20,r19,r2
  807400:	2509883a 	add	r4,r4,r20
  807404:	d9000015 	stw	r4,0(sp)
  807408:	21c02a16 	blt	r4,r7,8074b4 <_realloc_r+0x22c>
  80740c:	30800317 	ldw	r2,12(r6)
  807410:	30c00217 	ldw	r3,8(r6)
  807414:	01400904 	movi	r5,36
  807418:	99bfff04 	addi	r6,r19,-4
  80741c:	18800315 	stw	r2,12(r3)
  807420:	10c00215 	stw	r3,8(r2)
  807424:	b9000317 	ldw	r4,12(r23)
  807428:	b8800217 	ldw	r2,8(r23)
  80742c:	b82b883a 	mov	r21,r23
  807430:	bc000204 	addi	r16,r23,8
  807434:	20800215 	stw	r2,8(r4)
  807438:	11000315 	stw	r4,12(r2)
  80743c:	2980e436 	bltu	r5,r6,8077d0 <_realloc_r+0x548>
  807440:	008004c4 	movi	r2,19
  807444:	9009883a 	mov	r4,r18
  807448:	8011883a 	mov	r8,r16
  80744c:	11800f2e 	bgeu	r2,r6,80748c <_realloc_r+0x204>
  807450:	90800017 	ldw	r2,0(r18)
  807454:	ba000404 	addi	r8,r23,16
  807458:	91000204 	addi	r4,r18,8
  80745c:	b8800215 	stw	r2,8(r23)
  807460:	90c00117 	ldw	r3,4(r18)
  807464:	008006c4 	movi	r2,27
  807468:	b8c00315 	stw	r3,12(r23)
  80746c:	1180072e 	bgeu	r2,r6,80748c <_realloc_r+0x204>
  807470:	90c00217 	ldw	r3,8(r18)
  807474:	ba000604 	addi	r8,r23,24
  807478:	91000404 	addi	r4,r18,16
  80747c:	b8c00415 	stw	r3,16(r23)
  807480:	90800317 	ldw	r2,12(r18)
  807484:	b8800515 	stw	r2,20(r23)
  807488:	3140e726 	beq	r6,r5,807828 <_realloc_r+0x5a0>
  80748c:	20800017 	ldw	r2,0(r4)
  807490:	dd000017 	ldw	r20,0(sp)
  807494:	b80f883a 	mov	r7,r23
  807498:	40800015 	stw	r2,0(r8)
  80749c:	20c00117 	ldw	r3,4(r4)
  8074a0:	40c00115 	stw	r3,4(r8)
  8074a4:	20800217 	ldw	r2,8(r4)
  8074a8:	40800215 	stw	r2,8(r8)
  8074ac:	003f9706 	br	80730c <_realloc_r+0x84>
  8074b0:	98a9883a 	add	r20,r19,r2
  8074b4:	a1c01f16 	blt	r20,r7,807534 <_realloc_r+0x2ac>
  8074b8:	b8c00317 	ldw	r3,12(r23)
  8074bc:	b8800217 	ldw	r2,8(r23)
  8074c0:	99bfff04 	addi	r6,r19,-4
  8074c4:	01400904 	movi	r5,36
  8074c8:	b82b883a 	mov	r21,r23
  8074cc:	18800215 	stw	r2,8(r3)
  8074d0:	10c00315 	stw	r3,12(r2)
  8074d4:	bc000204 	addi	r16,r23,8
  8074d8:	2980c336 	bltu	r5,r6,8077e8 <_realloc_r+0x560>
  8074dc:	008004c4 	movi	r2,19
  8074e0:	9009883a 	mov	r4,r18
  8074e4:	8011883a 	mov	r8,r16
  8074e8:	11800f2e 	bgeu	r2,r6,807528 <_realloc_r+0x2a0>
  8074ec:	90800017 	ldw	r2,0(r18)
  8074f0:	ba000404 	addi	r8,r23,16
  8074f4:	91000204 	addi	r4,r18,8
  8074f8:	b8800215 	stw	r2,8(r23)
  8074fc:	90c00117 	ldw	r3,4(r18)
  807500:	008006c4 	movi	r2,27
  807504:	b8c00315 	stw	r3,12(r23)
  807508:	1180072e 	bgeu	r2,r6,807528 <_realloc_r+0x2a0>
  80750c:	90c00217 	ldw	r3,8(r18)
  807510:	ba000604 	addi	r8,r23,24
  807514:	91000404 	addi	r4,r18,16
  807518:	b8c00415 	stw	r3,16(r23)
  80751c:	90800317 	ldw	r2,12(r18)
  807520:	b8800515 	stw	r2,20(r23)
  807524:	3140c726 	beq	r6,r5,807844 <_realloc_r+0x5bc>
  807528:	20800017 	ldw	r2,0(r4)
  80752c:	b80f883a 	mov	r7,r23
  807530:	003fd906 	br	807498 <_realloc_r+0x210>
  807534:	880b883a 	mov	r5,r17
  807538:	b009883a 	mov	r4,r22
  80753c:	08057c00 	call	8057c0 <_malloc_r>
  807540:	1023883a 	mov	r17,r2
  807544:	10002526 	beq	r2,zero,8075dc <_realloc_r+0x354>
  807548:	80800117 	ldw	r2,4(r16)
  80754c:	00ffff84 	movi	r3,-2
  807550:	893ffe04 	addi	r4,r17,-8
  807554:	10c4703a 	and	r2,r2,r3
  807558:	8085883a 	add	r2,r16,r2
  80755c:	20809526 	beq	r4,r2,8077b4 <_realloc_r+0x52c>
  807560:	99bfff04 	addi	r6,r19,-4
  807564:	01c00904 	movi	r7,36
  807568:	39804536 	bltu	r7,r6,807680 <_realloc_r+0x3f8>
  80756c:	008004c4 	movi	r2,19
  807570:	9009883a 	mov	r4,r18
  807574:	880b883a 	mov	r5,r17
  807578:	11800f2e 	bgeu	r2,r6,8075b8 <_realloc_r+0x330>
  80757c:	90800017 	ldw	r2,0(r18)
  807580:	89400204 	addi	r5,r17,8
  807584:	91000204 	addi	r4,r18,8
  807588:	88800015 	stw	r2,0(r17)
  80758c:	90c00117 	ldw	r3,4(r18)
  807590:	008006c4 	movi	r2,27
  807594:	88c00115 	stw	r3,4(r17)
  807598:	1180072e 	bgeu	r2,r6,8075b8 <_realloc_r+0x330>
  80759c:	90c00217 	ldw	r3,8(r18)
  8075a0:	89400404 	addi	r5,r17,16
  8075a4:	91000404 	addi	r4,r18,16
  8075a8:	88c00215 	stw	r3,8(r17)
  8075ac:	90800317 	ldw	r2,12(r18)
  8075b0:	88800315 	stw	r2,12(r17)
  8075b4:	31c09126 	beq	r6,r7,8077fc <_realloc_r+0x574>
  8075b8:	20800017 	ldw	r2,0(r4)
  8075bc:	28800015 	stw	r2,0(r5)
  8075c0:	20c00117 	ldw	r3,4(r4)
  8075c4:	28c00115 	stw	r3,4(r5)
  8075c8:	20800217 	ldw	r2,8(r4)
  8075cc:	28800215 	stw	r2,8(r5)
  8075d0:	900b883a 	mov	r5,r18
  8075d4:	b009883a 	mov	r4,r22
  8075d8:	0804c380 	call	804c38 <_free_r>
  8075dc:	b009883a 	mov	r4,r22
  8075e0:	080a8840 	call	80a884 <__malloc_unlock>
  8075e4:	003f5e06 	br	807360 <_realloc_r+0xd8>
  8075e8:	300b883a 	mov	r5,r6
  8075ec:	dfc00b17 	ldw	ra,44(sp)
  8075f0:	df000a17 	ldw	fp,40(sp)
  8075f4:	ddc00917 	ldw	r23,36(sp)
  8075f8:	dd800817 	ldw	r22,32(sp)
  8075fc:	dd400717 	ldw	r21,28(sp)
  807600:	dd000617 	ldw	r20,24(sp)
  807604:	dcc00517 	ldw	r19,20(sp)
  807608:	dc800417 	ldw	r18,16(sp)
  80760c:	dc400317 	ldw	r17,12(sp)
  807610:	dc000217 	ldw	r16,8(sp)
  807614:	dec00c04 	addi	sp,sp,48
  807618:	08057c01 	jmpi	8057c0 <_malloc_r>
  80761c:	38800117 	ldw	r2,4(r7)
  807620:	e54b883a 	add	r5,fp,r21
  807624:	31000054 	ori	r4,r6,1
  807628:	1080004c 	andi	r2,r2,1
  80762c:	1704b03a 	or	r2,r2,fp
  807630:	38800115 	stw	r2,4(r7)
  807634:	29000115 	stw	r4,4(r5)
  807638:	2987883a 	add	r3,r5,r6
  80763c:	18800117 	ldw	r2,4(r3)
  807640:	29400204 	addi	r5,r5,8
  807644:	b009883a 	mov	r4,r22
  807648:	10800054 	ori	r2,r2,1
  80764c:	18800115 	stw	r2,4(r3)
  807650:	0804c380 	call	804c38 <_free_r>
  807654:	003f3806 	br	807338 <_realloc_r+0xb0>
  807658:	000d883a 	mov	r6,zero
  80765c:	0009883a 	mov	r4,zero
  807660:	003f5d06 	br	8073d8 <_realloc_r+0x150>
  807664:	30c00217 	ldw	r3,8(r6)
  807668:	30800317 	ldw	r2,12(r6)
  80766c:	800f883a 	mov	r7,r16
  807670:	84000204 	addi	r16,r16,8
  807674:	10c00215 	stw	r3,8(r2)
  807678:	18800315 	stw	r2,12(r3)
  80767c:	003f2306 	br	80730c <_realloc_r+0x84>
  807680:	8809883a 	mov	r4,r17
  807684:	900b883a 	mov	r5,r18
  807688:	08060840 	call	806084 <memmove>
  80768c:	003fd006 	br	8075d0 <_realloc_r+0x348>
  807690:	30800117 	ldw	r2,4(r6)
  807694:	e0c00404 	addi	r3,fp,16
  807698:	1108703a 	and	r4,r2,r4
  80769c:	9905883a 	add	r2,r19,r4
  8076a0:	10ff4d16 	blt	r2,r3,8073d8 <_realloc_r+0x150>
  8076a4:	1705c83a 	sub	r2,r2,fp
  8076a8:	870b883a 	add	r5,r16,fp
  8076ac:	10800054 	ori	r2,r2,1
  8076b0:	28800115 	stw	r2,4(r5)
  8076b4:	80c00117 	ldw	r3,4(r16)
  8076b8:	00802074 	movhi	r2,129
  8076bc:	10b50f04 	addi	r2,r2,-11204
  8076c0:	b009883a 	mov	r4,r22
  8076c4:	18c0004c 	andi	r3,r3,1
  8076c8:	e0c6b03a 	or	r3,fp,r3
  8076cc:	11400215 	stw	r5,8(r2)
  8076d0:	80c00115 	stw	r3,4(r16)
  8076d4:	080a8840 	call	80a884 <__malloc_unlock>
  8076d8:	84400204 	addi	r17,r16,8
  8076dc:	003f2006 	br	807360 <_realloc_r+0xd8>
  8076e0:	98a9883a 	add	r20,r19,r2
  8076e4:	2509883a 	add	r4,r4,r20
  8076e8:	e0800404 	addi	r2,fp,16
  8076ec:	d9000115 	stw	r4,4(sp)
  8076f0:	20bf7016 	blt	r4,r2,8074b4 <_realloc_r+0x22c>
  8076f4:	b8c00317 	ldw	r3,12(r23)
  8076f8:	b8800217 	ldw	r2,8(r23)
  8076fc:	99bfff04 	addi	r6,r19,-4
  807700:	01400904 	movi	r5,36
  807704:	18800215 	stw	r2,8(r3)
  807708:	10c00315 	stw	r3,12(r2)
  80770c:	bc400204 	addi	r17,r23,8
  807710:	29804136 	bltu	r5,r6,807818 <_realloc_r+0x590>
  807714:	008004c4 	movi	r2,19
  807718:	9009883a 	mov	r4,r18
  80771c:	880f883a 	mov	r7,r17
  807720:	11800f2e 	bgeu	r2,r6,807760 <_realloc_r+0x4d8>
  807724:	90800017 	ldw	r2,0(r18)
  807728:	b9c00404 	addi	r7,r23,16
  80772c:	91000204 	addi	r4,r18,8
  807730:	b8800215 	stw	r2,8(r23)
  807734:	90c00117 	ldw	r3,4(r18)
  807738:	008006c4 	movi	r2,27
  80773c:	b8c00315 	stw	r3,12(r23)
  807740:	1180072e 	bgeu	r2,r6,807760 <_realloc_r+0x4d8>
  807744:	90c00217 	ldw	r3,8(r18)
  807748:	b9c00604 	addi	r7,r23,24
  80774c:	91000404 	addi	r4,r18,16
  807750:	b8c00415 	stw	r3,16(r23)
  807754:	90800317 	ldw	r2,12(r18)
  807758:	b8800515 	stw	r2,20(r23)
  80775c:	31404026 	beq	r6,r5,807860 <_realloc_r+0x5d8>
  807760:	20800017 	ldw	r2,0(r4)
  807764:	38800015 	stw	r2,0(r7)
  807768:	20c00117 	ldw	r3,4(r4)
  80776c:	38c00115 	stw	r3,4(r7)
  807770:	20800217 	ldw	r2,8(r4)
  807774:	38800215 	stw	r2,8(r7)
  807778:	d8c00117 	ldw	r3,4(sp)
  80777c:	bf0b883a 	add	r5,r23,fp
  807780:	b009883a 	mov	r4,r22
  807784:	1f05c83a 	sub	r2,r3,fp
  807788:	10800054 	ori	r2,r2,1
  80778c:	28800115 	stw	r2,4(r5)
  807790:	b8c00117 	ldw	r3,4(r23)
  807794:	00802074 	movhi	r2,129
  807798:	10b50f04 	addi	r2,r2,-11204
  80779c:	11400215 	stw	r5,8(r2)
  8077a0:	18c0004c 	andi	r3,r3,1
  8077a4:	e0c6b03a 	or	r3,fp,r3
  8077a8:	b8c00115 	stw	r3,4(r23)
  8077ac:	080a8840 	call	80a884 <__malloc_unlock>
  8077b0:	003eeb06 	br	807360 <_realloc_r+0xd8>
  8077b4:	20800117 	ldw	r2,4(r4)
  8077b8:	00ffff04 	movi	r3,-4
  8077bc:	800f883a 	mov	r7,r16
  8077c0:	10c4703a 	and	r2,r2,r3
  8077c4:	98a9883a 	add	r20,r19,r2
  8077c8:	84000204 	addi	r16,r16,8
  8077cc:	003ecf06 	br	80730c <_realloc_r+0x84>
  8077d0:	900b883a 	mov	r5,r18
  8077d4:	8009883a 	mov	r4,r16
  8077d8:	08060840 	call	806084 <memmove>
  8077dc:	dd000017 	ldw	r20,0(sp)
  8077e0:	b80f883a 	mov	r7,r23
  8077e4:	003ec906 	br	80730c <_realloc_r+0x84>
  8077e8:	900b883a 	mov	r5,r18
  8077ec:	8009883a 	mov	r4,r16
  8077f0:	08060840 	call	806084 <memmove>
  8077f4:	b80f883a 	mov	r7,r23
  8077f8:	003ec406 	br	80730c <_realloc_r+0x84>
  8077fc:	90c00417 	ldw	r3,16(r18)
  807800:	89400604 	addi	r5,r17,24
  807804:	91000604 	addi	r4,r18,24
  807808:	88c00415 	stw	r3,16(r17)
  80780c:	90800517 	ldw	r2,20(r18)
  807810:	88800515 	stw	r2,20(r17)
  807814:	003f6806 	br	8075b8 <_realloc_r+0x330>
  807818:	900b883a 	mov	r5,r18
  80781c:	8809883a 	mov	r4,r17
  807820:	08060840 	call	806084 <memmove>
  807824:	003fd406 	br	807778 <_realloc_r+0x4f0>
  807828:	90c00417 	ldw	r3,16(r18)
  80782c:	91000604 	addi	r4,r18,24
  807830:	ba000804 	addi	r8,r23,32
  807834:	b8c00615 	stw	r3,24(r23)
  807838:	90800517 	ldw	r2,20(r18)
  80783c:	b8800715 	stw	r2,28(r23)
  807840:	003f1206 	br	80748c <_realloc_r+0x204>
  807844:	90c00417 	ldw	r3,16(r18)
  807848:	91000604 	addi	r4,r18,24
  80784c:	ba000804 	addi	r8,r23,32
  807850:	b8c00615 	stw	r3,24(r23)
  807854:	90800517 	ldw	r2,20(r18)
  807858:	b8800715 	stw	r2,28(r23)
  80785c:	003f3206 	br	807528 <_realloc_r+0x2a0>
  807860:	90c00417 	ldw	r3,16(r18)
  807864:	91000604 	addi	r4,r18,24
  807868:	b9c00804 	addi	r7,r23,32
  80786c:	b8c00615 	stw	r3,24(r23)
  807870:	90800517 	ldw	r2,20(r18)
  807874:	b8800715 	stw	r2,28(r23)
  807878:	003fb906 	br	807760 <_realloc_r+0x4d8>

0080787c <__isinfd>:
  80787c:	200d883a 	mov	r6,r4
  807880:	0109c83a 	sub	r4,zero,r4
  807884:	2188b03a 	or	r4,r4,r6
  807888:	2008d7fa 	srli	r4,r4,31
  80788c:	00a00034 	movhi	r2,32768
  807890:	10bfffc4 	addi	r2,r2,-1
  807894:	1144703a 	and	r2,r2,r5
  807898:	2088b03a 	or	r4,r4,r2
  80789c:	009ffc34 	movhi	r2,32752
  8078a0:	1105c83a 	sub	r2,r2,r4
  8078a4:	0087c83a 	sub	r3,zero,r2
  8078a8:	10c4b03a 	or	r2,r2,r3
  8078ac:	1004d7fa 	srli	r2,r2,31
  8078b0:	00c00044 	movi	r3,1
  8078b4:	1885c83a 	sub	r2,r3,r2
  8078b8:	f800283a 	ret

008078bc <__isnand>:
  8078bc:	200d883a 	mov	r6,r4
  8078c0:	0109c83a 	sub	r4,zero,r4
  8078c4:	2188b03a 	or	r4,r4,r6
  8078c8:	2008d7fa 	srli	r4,r4,31
  8078cc:	00a00034 	movhi	r2,32768
  8078d0:	10bfffc4 	addi	r2,r2,-1
  8078d4:	1144703a 	and	r2,r2,r5
  8078d8:	2088b03a 	or	r4,r4,r2
  8078dc:	009ffc34 	movhi	r2,32752
  8078e0:	1105c83a 	sub	r2,r2,r4
  8078e4:	1004d7fa 	srli	r2,r2,31
  8078e8:	f800283a 	ret

008078ec <_sbrk_r>:
  8078ec:	defffd04 	addi	sp,sp,-12
  8078f0:	dc000015 	stw	r16,0(sp)
  8078f4:	04002074 	movhi	r16,129
  8078f8:	84014004 	addi	r16,r16,1280
  8078fc:	dc400115 	stw	r17,4(sp)
  807900:	80000015 	stw	zero,0(r16)
  807904:	2023883a 	mov	r17,r4
  807908:	2809883a 	mov	r4,r5
  80790c:	dfc00215 	stw	ra,8(sp)
  807910:	080aaa00 	call	80aaa0 <sbrk>
  807914:	1007883a 	mov	r3,r2
  807918:	00bfffc4 	movi	r2,-1
  80791c:	18800626 	beq	r3,r2,807938 <_sbrk_r+0x4c>
  807920:	1805883a 	mov	r2,r3
  807924:	dfc00217 	ldw	ra,8(sp)
  807928:	dc400117 	ldw	r17,4(sp)
  80792c:	dc000017 	ldw	r16,0(sp)
  807930:	dec00304 	addi	sp,sp,12
  807934:	f800283a 	ret
  807938:	80800017 	ldw	r2,0(r16)
  80793c:	103ff826 	beq	r2,zero,807920 <_sbrk_r+0x34>
  807940:	88800015 	stw	r2,0(r17)
  807944:	1805883a 	mov	r2,r3
  807948:	dfc00217 	ldw	ra,8(sp)
  80794c:	dc400117 	ldw	r17,4(sp)
  807950:	dc000017 	ldw	r16,0(sp)
  807954:	dec00304 	addi	sp,sp,12
  807958:	f800283a 	ret

0080795c <__sclose>:
  80795c:	2940038f 	ldh	r5,14(r5)
  807960:	0807ca41 	jmpi	807ca4 <_close_r>

00807964 <__sseek>:
  807964:	defffe04 	addi	sp,sp,-8
  807968:	dc000015 	stw	r16,0(sp)
  80796c:	2821883a 	mov	r16,r5
  807970:	2940038f 	ldh	r5,14(r5)
  807974:	dfc00115 	stw	ra,4(sp)
  807978:	0807f1c0 	call	807f1c <_lseek_r>
  80797c:	1007883a 	mov	r3,r2
  807980:	00bfffc4 	movi	r2,-1
  807984:	18800926 	beq	r3,r2,8079ac <__sseek+0x48>
  807988:	8080030b 	ldhu	r2,12(r16)
  80798c:	80c01415 	stw	r3,80(r16)
  807990:	10840014 	ori	r2,r2,4096
  807994:	8080030d 	sth	r2,12(r16)
  807998:	1805883a 	mov	r2,r3
  80799c:	dfc00117 	ldw	ra,4(sp)
  8079a0:	dc000017 	ldw	r16,0(sp)
  8079a4:	dec00204 	addi	sp,sp,8
  8079a8:	f800283a 	ret
  8079ac:	8080030b 	ldhu	r2,12(r16)
  8079b0:	10bbffcc 	andi	r2,r2,61439
  8079b4:	8080030d 	sth	r2,12(r16)
  8079b8:	1805883a 	mov	r2,r3
  8079bc:	dfc00117 	ldw	ra,4(sp)
  8079c0:	dc000017 	ldw	r16,0(sp)
  8079c4:	dec00204 	addi	sp,sp,8
  8079c8:	f800283a 	ret

008079cc <__swrite>:
  8079cc:	2880030b 	ldhu	r2,12(r5)
  8079d0:	defffb04 	addi	sp,sp,-20
  8079d4:	dcc00315 	stw	r19,12(sp)
  8079d8:	1080400c 	andi	r2,r2,256
  8079dc:	dc800215 	stw	r18,8(sp)
  8079e0:	dc400115 	stw	r17,4(sp)
  8079e4:	dc000015 	stw	r16,0(sp)
  8079e8:	3027883a 	mov	r19,r6
  8079ec:	3825883a 	mov	r18,r7
  8079f0:	dfc00415 	stw	ra,16(sp)
  8079f4:	2821883a 	mov	r16,r5
  8079f8:	000d883a 	mov	r6,zero
  8079fc:	01c00084 	movi	r7,2
  807a00:	2023883a 	mov	r17,r4
  807a04:	10000226 	beq	r2,zero,807a10 <__swrite+0x44>
  807a08:	2940038f 	ldh	r5,14(r5)
  807a0c:	0807f1c0 	call	807f1c <_lseek_r>
  807a10:	8080030b 	ldhu	r2,12(r16)
  807a14:	8140038f 	ldh	r5,14(r16)
  807a18:	8809883a 	mov	r4,r17
  807a1c:	10bbffcc 	andi	r2,r2,61439
  807a20:	980d883a 	mov	r6,r19
  807a24:	900f883a 	mov	r7,r18
  807a28:	8080030d 	sth	r2,12(r16)
  807a2c:	dfc00417 	ldw	ra,16(sp)
  807a30:	dcc00317 	ldw	r19,12(sp)
  807a34:	dc800217 	ldw	r18,8(sp)
  807a38:	dc400117 	ldw	r17,4(sp)
  807a3c:	dc000017 	ldw	r16,0(sp)
  807a40:	dec00504 	addi	sp,sp,20
  807a44:	0807b641 	jmpi	807b64 <_write_r>

00807a48 <__sread>:
  807a48:	defffe04 	addi	sp,sp,-8
  807a4c:	dc000015 	stw	r16,0(sp)
  807a50:	2821883a 	mov	r16,r5
  807a54:	2940038f 	ldh	r5,14(r5)
  807a58:	dfc00115 	stw	ra,4(sp)
  807a5c:	0807f940 	call	807f94 <_read_r>
  807a60:	1007883a 	mov	r3,r2
  807a64:	10000816 	blt	r2,zero,807a88 <__sread+0x40>
  807a68:	80801417 	ldw	r2,80(r16)
  807a6c:	10c5883a 	add	r2,r2,r3
  807a70:	80801415 	stw	r2,80(r16)
  807a74:	1805883a 	mov	r2,r3
  807a78:	dfc00117 	ldw	ra,4(sp)
  807a7c:	dc000017 	ldw	r16,0(sp)
  807a80:	dec00204 	addi	sp,sp,8
  807a84:	f800283a 	ret
  807a88:	8080030b 	ldhu	r2,12(r16)
  807a8c:	10bbffcc 	andi	r2,r2,61439
  807a90:	8080030d 	sth	r2,12(r16)
  807a94:	1805883a 	mov	r2,r3
  807a98:	dfc00117 	ldw	ra,4(sp)
  807a9c:	dc000017 	ldw	r16,0(sp)
  807aa0:	dec00204 	addi	sp,sp,8
  807aa4:	f800283a 	ret

00807aa8 <strcmp>:
  807aa8:	2144b03a 	or	r2,r4,r5
  807aac:	108000cc 	andi	r2,r2,3
  807ab0:	10001d1e 	bne	r2,zero,807b28 <strcmp+0x80>
  807ab4:	200f883a 	mov	r7,r4
  807ab8:	28800017 	ldw	r2,0(r5)
  807abc:	21000017 	ldw	r4,0(r4)
  807ac0:	280d883a 	mov	r6,r5
  807ac4:	2080161e 	bne	r4,r2,807b20 <strcmp+0x78>
  807ac8:	023fbff4 	movhi	r8,65279
  807acc:	423fbfc4 	addi	r8,r8,-257
  807ad0:	2207883a 	add	r3,r4,r8
  807ad4:	01602074 	movhi	r5,32897
  807ad8:	29602004 	addi	r5,r5,-32640
  807adc:	1946703a 	and	r3,r3,r5
  807ae0:	0104303a 	nor	r2,zero,r4
  807ae4:	10c4703a 	and	r2,r2,r3
  807ae8:	10001c1e 	bne	r2,zero,807b5c <strcmp+0xb4>
  807aec:	4013883a 	mov	r9,r8
  807af0:	2811883a 	mov	r8,r5
  807af4:	00000106 	br	807afc <strcmp+0x54>
  807af8:	1800181e 	bne	r3,zero,807b5c <strcmp+0xb4>
  807afc:	39c00104 	addi	r7,r7,4
  807b00:	39000017 	ldw	r4,0(r7)
  807b04:	31800104 	addi	r6,r6,4
  807b08:	31400017 	ldw	r5,0(r6)
  807b0c:	2245883a 	add	r2,r4,r9
  807b10:	1204703a 	and	r2,r2,r8
  807b14:	0106303a 	nor	r3,zero,r4
  807b18:	1886703a 	and	r3,r3,r2
  807b1c:	217ff626 	beq	r4,r5,807af8 <strcmp+0x50>
  807b20:	3809883a 	mov	r4,r7
  807b24:	300b883a 	mov	r5,r6
  807b28:	20c00007 	ldb	r3,0(r4)
  807b2c:	1800051e 	bne	r3,zero,807b44 <strcmp+0x9c>
  807b30:	00000606 	br	807b4c <strcmp+0xa4>
  807b34:	21000044 	addi	r4,r4,1
  807b38:	20c00007 	ldb	r3,0(r4)
  807b3c:	29400044 	addi	r5,r5,1
  807b40:	18000226 	beq	r3,zero,807b4c <strcmp+0xa4>
  807b44:	28800007 	ldb	r2,0(r5)
  807b48:	18bffa26 	beq	r3,r2,807b34 <strcmp+0x8c>
  807b4c:	20c00003 	ldbu	r3,0(r4)
  807b50:	28800003 	ldbu	r2,0(r5)
  807b54:	1885c83a 	sub	r2,r3,r2
  807b58:	f800283a 	ret
  807b5c:	0005883a 	mov	r2,zero
  807b60:	f800283a 	ret

00807b64 <_write_r>:
  807b64:	defffd04 	addi	sp,sp,-12
  807b68:	dc000015 	stw	r16,0(sp)
  807b6c:	04002074 	movhi	r16,129
  807b70:	84014004 	addi	r16,r16,1280
  807b74:	dc400115 	stw	r17,4(sp)
  807b78:	80000015 	stw	zero,0(r16)
  807b7c:	2023883a 	mov	r17,r4
  807b80:	2809883a 	mov	r4,r5
  807b84:	300b883a 	mov	r5,r6
  807b88:	380d883a 	mov	r6,r7
  807b8c:	dfc00215 	stw	ra,8(sp)
  807b90:	080ab5c0 	call	80ab5c <write>
  807b94:	1007883a 	mov	r3,r2
  807b98:	00bfffc4 	movi	r2,-1
  807b9c:	18800626 	beq	r3,r2,807bb8 <_write_r+0x54>
  807ba0:	1805883a 	mov	r2,r3
  807ba4:	dfc00217 	ldw	ra,8(sp)
  807ba8:	dc400117 	ldw	r17,4(sp)
  807bac:	dc000017 	ldw	r16,0(sp)
  807bb0:	dec00304 	addi	sp,sp,12
  807bb4:	f800283a 	ret
  807bb8:	80800017 	ldw	r2,0(r16)
  807bbc:	103ff826 	beq	r2,zero,807ba0 <_write_r+0x3c>
  807bc0:	88800015 	stw	r2,0(r17)
  807bc4:	1805883a 	mov	r2,r3
  807bc8:	dfc00217 	ldw	ra,8(sp)
  807bcc:	dc400117 	ldw	r17,4(sp)
  807bd0:	dc000017 	ldw	r16,0(sp)
  807bd4:	dec00304 	addi	sp,sp,12
  807bd8:	f800283a 	ret

00807bdc <_calloc_r>:
  807bdc:	defffe04 	addi	sp,sp,-8
  807be0:	dc400015 	stw	r17,0(sp)
  807be4:	2023883a 	mov	r17,r4
  807be8:	2809883a 	mov	r4,r5
  807bec:	300b883a 	mov	r5,r6
  807bf0:	dfc00115 	stw	ra,4(sp)
  807bf4:	0800b9c0 	call	800b9c <__mulsi3>
  807bf8:	100b883a 	mov	r5,r2
  807bfc:	8809883a 	mov	r4,r17
  807c00:	08057c00 	call	8057c0 <_malloc_r>
  807c04:	1023883a 	mov	r17,r2
  807c08:	01c00904 	movi	r7,36
  807c0c:	10000d26 	beq	r2,zero,807c44 <_calloc_r+0x68>
  807c10:	10ffff17 	ldw	r3,-4(r2)
  807c14:	1009883a 	mov	r4,r2
  807c18:	00bfff04 	movi	r2,-4
  807c1c:	1886703a 	and	r3,r3,r2
  807c20:	1887883a 	add	r3,r3,r2
  807c24:	180d883a 	mov	r6,r3
  807c28:	000b883a 	mov	r5,zero
  807c2c:	38c01736 	bltu	r7,r3,807c8c <_calloc_r+0xb0>
  807c30:	008004c4 	movi	r2,19
  807c34:	10c00836 	bltu	r2,r3,807c58 <_calloc_r+0x7c>
  807c38:	20000215 	stw	zero,8(r4)
  807c3c:	20000015 	stw	zero,0(r4)
  807c40:	20000115 	stw	zero,4(r4)
  807c44:	8805883a 	mov	r2,r17
  807c48:	dfc00117 	ldw	ra,4(sp)
  807c4c:	dc400017 	ldw	r17,0(sp)
  807c50:	dec00204 	addi	sp,sp,8
  807c54:	f800283a 	ret
  807c58:	008006c4 	movi	r2,27
  807c5c:	88000015 	stw	zero,0(r17)
  807c60:	88000115 	stw	zero,4(r17)
  807c64:	89000204 	addi	r4,r17,8
  807c68:	10fff32e 	bgeu	r2,r3,807c38 <_calloc_r+0x5c>
  807c6c:	88000215 	stw	zero,8(r17)
  807c70:	88000315 	stw	zero,12(r17)
  807c74:	89000404 	addi	r4,r17,16
  807c78:	19ffef1e 	bne	r3,r7,807c38 <_calloc_r+0x5c>
  807c7c:	89000604 	addi	r4,r17,24
  807c80:	88000415 	stw	zero,16(r17)
  807c84:	88000515 	stw	zero,20(r17)
  807c88:	003feb06 	br	807c38 <_calloc_r+0x5c>
  807c8c:	08061640 	call	806164 <memset>
  807c90:	8805883a 	mov	r2,r17
  807c94:	dfc00117 	ldw	ra,4(sp)
  807c98:	dc400017 	ldw	r17,0(sp)
  807c9c:	dec00204 	addi	sp,sp,8
  807ca0:	f800283a 	ret

00807ca4 <_close_r>:
  807ca4:	defffd04 	addi	sp,sp,-12
  807ca8:	dc000015 	stw	r16,0(sp)
  807cac:	04002074 	movhi	r16,129
  807cb0:	84014004 	addi	r16,r16,1280
  807cb4:	dc400115 	stw	r17,4(sp)
  807cb8:	80000015 	stw	zero,0(r16)
  807cbc:	2023883a 	mov	r17,r4
  807cc0:	2809883a 	mov	r4,r5
  807cc4:	dfc00215 	stw	ra,8(sp)
  807cc8:	080a1d00 	call	80a1d0 <close>
  807ccc:	1007883a 	mov	r3,r2
  807cd0:	00bfffc4 	movi	r2,-1
  807cd4:	18800626 	beq	r3,r2,807cf0 <_close_r+0x4c>
  807cd8:	1805883a 	mov	r2,r3
  807cdc:	dfc00217 	ldw	ra,8(sp)
  807ce0:	dc400117 	ldw	r17,4(sp)
  807ce4:	dc000017 	ldw	r16,0(sp)
  807ce8:	dec00304 	addi	sp,sp,12
  807cec:	f800283a 	ret
  807cf0:	80800017 	ldw	r2,0(r16)
  807cf4:	103ff826 	beq	r2,zero,807cd8 <_close_r+0x34>
  807cf8:	88800015 	stw	r2,0(r17)
  807cfc:	1805883a 	mov	r2,r3
  807d00:	dfc00217 	ldw	ra,8(sp)
  807d04:	dc400117 	ldw	r17,4(sp)
  807d08:	dc000017 	ldw	r16,0(sp)
  807d0c:	dec00304 	addi	sp,sp,12
  807d10:	f800283a 	ret

00807d14 <_fclose_r>:
  807d14:	defffc04 	addi	sp,sp,-16
  807d18:	dc400115 	stw	r17,4(sp)
  807d1c:	dc000015 	stw	r16,0(sp)
  807d20:	dfc00315 	stw	ra,12(sp)
  807d24:	dc800215 	stw	r18,8(sp)
  807d28:	2821883a 	mov	r16,r5
  807d2c:	2023883a 	mov	r17,r4
  807d30:	28002926 	beq	r5,zero,807dd8 <_fclose_r+0xc4>
  807d34:	08048700 	call	804870 <__sfp_lock_acquire>
  807d38:	88000226 	beq	r17,zero,807d44 <_fclose_r+0x30>
  807d3c:	88800e17 	ldw	r2,56(r17)
  807d40:	10002d26 	beq	r2,zero,807df8 <_fclose_r+0xe4>
  807d44:	8080030f 	ldh	r2,12(r16)
  807d48:	10002226 	beq	r2,zero,807dd4 <_fclose_r+0xc0>
  807d4c:	8809883a 	mov	r4,r17
  807d50:	800b883a 	mov	r5,r16
  807d54:	08045e80 	call	8045e8 <_fflush_r>
  807d58:	1025883a 	mov	r18,r2
  807d5c:	80800b17 	ldw	r2,44(r16)
  807d60:	10000426 	beq	r2,zero,807d74 <_fclose_r+0x60>
  807d64:	81400717 	ldw	r5,28(r16)
  807d68:	8809883a 	mov	r4,r17
  807d6c:	103ee83a 	callr	r2
  807d70:	10002a16 	blt	r2,zero,807e1c <_fclose_r+0x108>
  807d74:	8080030b 	ldhu	r2,12(r16)
  807d78:	1080200c 	andi	r2,r2,128
  807d7c:	1000231e 	bne	r2,zero,807e0c <_fclose_r+0xf8>
  807d80:	81400c17 	ldw	r5,48(r16)
  807d84:	28000526 	beq	r5,zero,807d9c <_fclose_r+0x88>
  807d88:	80801004 	addi	r2,r16,64
  807d8c:	28800226 	beq	r5,r2,807d98 <_fclose_r+0x84>
  807d90:	8809883a 	mov	r4,r17
  807d94:	0804c380 	call	804c38 <_free_r>
  807d98:	80000c15 	stw	zero,48(r16)
  807d9c:	81401117 	ldw	r5,68(r16)
  807da0:	28000326 	beq	r5,zero,807db0 <_fclose_r+0x9c>
  807da4:	8809883a 	mov	r4,r17
  807da8:	0804c380 	call	804c38 <_free_r>
  807dac:	80001115 	stw	zero,68(r16)
  807db0:	8000030d 	sth	zero,12(r16)
  807db4:	08048740 	call	804874 <__sfp_lock_release>
  807db8:	9005883a 	mov	r2,r18
  807dbc:	dfc00317 	ldw	ra,12(sp)
  807dc0:	dc800217 	ldw	r18,8(sp)
  807dc4:	dc400117 	ldw	r17,4(sp)
  807dc8:	dc000017 	ldw	r16,0(sp)
  807dcc:	dec00404 	addi	sp,sp,16
  807dd0:	f800283a 	ret
  807dd4:	08048740 	call	804874 <__sfp_lock_release>
  807dd8:	0025883a 	mov	r18,zero
  807ddc:	9005883a 	mov	r2,r18
  807de0:	dfc00317 	ldw	ra,12(sp)
  807de4:	dc800217 	ldw	r18,8(sp)
  807de8:	dc400117 	ldw	r17,4(sp)
  807dec:	dc000017 	ldw	r16,0(sp)
  807df0:	dec00404 	addi	sp,sp,16
  807df4:	f800283a 	ret
  807df8:	8809883a 	mov	r4,r17
  807dfc:	08048800 	call	804880 <__sinit>
  807e00:	8080030f 	ldh	r2,12(r16)
  807e04:	103fd11e 	bne	r2,zero,807d4c <_fclose_r+0x38>
  807e08:	003ff206 	br	807dd4 <_fclose_r+0xc0>
  807e0c:	81400417 	ldw	r5,16(r16)
  807e10:	8809883a 	mov	r4,r17
  807e14:	0804c380 	call	804c38 <_free_r>
  807e18:	003fd906 	br	807d80 <_fclose_r+0x6c>
  807e1c:	04bfffc4 	movi	r18,-1
  807e20:	003fd406 	br	807d74 <_fclose_r+0x60>

00807e24 <fclose>:
  807e24:	00802074 	movhi	r2,129
  807e28:	10ba9304 	addi	r2,r2,-5556
  807e2c:	200b883a 	mov	r5,r4
  807e30:	11000017 	ldw	r4,0(r2)
  807e34:	0807d141 	jmpi	807d14 <_fclose_r>

00807e38 <_fstat_r>:
  807e38:	defffd04 	addi	sp,sp,-12
  807e3c:	dc000015 	stw	r16,0(sp)
  807e40:	04002074 	movhi	r16,129
  807e44:	84014004 	addi	r16,r16,1280
  807e48:	dc400115 	stw	r17,4(sp)
  807e4c:	80000015 	stw	zero,0(r16)
  807e50:	2023883a 	mov	r17,r4
  807e54:	2809883a 	mov	r4,r5
  807e58:	300b883a 	mov	r5,r6
  807e5c:	dfc00215 	stw	ra,8(sp)
  807e60:	080a35c0 	call	80a35c <fstat>
  807e64:	1007883a 	mov	r3,r2
  807e68:	00bfffc4 	movi	r2,-1
  807e6c:	18800626 	beq	r3,r2,807e88 <_fstat_r+0x50>
  807e70:	1805883a 	mov	r2,r3
  807e74:	dfc00217 	ldw	ra,8(sp)
  807e78:	dc400117 	ldw	r17,4(sp)
  807e7c:	dc000017 	ldw	r16,0(sp)
  807e80:	dec00304 	addi	sp,sp,12
  807e84:	f800283a 	ret
  807e88:	80800017 	ldw	r2,0(r16)
  807e8c:	103ff826 	beq	r2,zero,807e70 <_fstat_r+0x38>
  807e90:	88800015 	stw	r2,0(r17)
  807e94:	1805883a 	mov	r2,r3
  807e98:	dfc00217 	ldw	ra,8(sp)
  807e9c:	dc400117 	ldw	r17,4(sp)
  807ea0:	dc000017 	ldw	r16,0(sp)
  807ea4:	dec00304 	addi	sp,sp,12
  807ea8:	f800283a 	ret

00807eac <_isatty_r>:
  807eac:	defffd04 	addi	sp,sp,-12
  807eb0:	dc000015 	stw	r16,0(sp)
  807eb4:	04002074 	movhi	r16,129
  807eb8:	84014004 	addi	r16,r16,1280
  807ebc:	dc400115 	stw	r17,4(sp)
  807ec0:	80000015 	stw	zero,0(r16)
  807ec4:	2023883a 	mov	r17,r4
  807ec8:	2809883a 	mov	r4,r5
  807ecc:	dfc00215 	stw	ra,8(sp)
  807ed0:	080a4940 	call	80a494 <isatty>
  807ed4:	1007883a 	mov	r3,r2
  807ed8:	00bfffc4 	movi	r2,-1
  807edc:	18800626 	beq	r3,r2,807ef8 <_isatty_r+0x4c>
  807ee0:	1805883a 	mov	r2,r3
  807ee4:	dfc00217 	ldw	ra,8(sp)
  807ee8:	dc400117 	ldw	r17,4(sp)
  807eec:	dc000017 	ldw	r16,0(sp)
  807ef0:	dec00304 	addi	sp,sp,12
  807ef4:	f800283a 	ret
  807ef8:	80800017 	ldw	r2,0(r16)
  807efc:	103ff826 	beq	r2,zero,807ee0 <_isatty_r+0x34>
  807f00:	88800015 	stw	r2,0(r17)
  807f04:	1805883a 	mov	r2,r3
  807f08:	dfc00217 	ldw	ra,8(sp)
  807f0c:	dc400117 	ldw	r17,4(sp)
  807f10:	dc000017 	ldw	r16,0(sp)
  807f14:	dec00304 	addi	sp,sp,12
  807f18:	f800283a 	ret

00807f1c <_lseek_r>:
  807f1c:	defffd04 	addi	sp,sp,-12
  807f20:	dc000015 	stw	r16,0(sp)
  807f24:	04002074 	movhi	r16,129
  807f28:	84014004 	addi	r16,r16,1280
  807f2c:	dc400115 	stw	r17,4(sp)
  807f30:	80000015 	stw	zero,0(r16)
  807f34:	2023883a 	mov	r17,r4
  807f38:	2809883a 	mov	r4,r5
  807f3c:	300b883a 	mov	r5,r6
  807f40:	380d883a 	mov	r6,r7
  807f44:	dfc00215 	stw	ra,8(sp)
  807f48:	080a6a40 	call	80a6a4 <lseek>
  807f4c:	1007883a 	mov	r3,r2
  807f50:	00bfffc4 	movi	r2,-1
  807f54:	18800626 	beq	r3,r2,807f70 <_lseek_r+0x54>
  807f58:	1805883a 	mov	r2,r3
  807f5c:	dfc00217 	ldw	ra,8(sp)
  807f60:	dc400117 	ldw	r17,4(sp)
  807f64:	dc000017 	ldw	r16,0(sp)
  807f68:	dec00304 	addi	sp,sp,12
  807f6c:	f800283a 	ret
  807f70:	80800017 	ldw	r2,0(r16)
  807f74:	103ff826 	beq	r2,zero,807f58 <_lseek_r+0x3c>
  807f78:	88800015 	stw	r2,0(r17)
  807f7c:	1805883a 	mov	r2,r3
  807f80:	dfc00217 	ldw	ra,8(sp)
  807f84:	dc400117 	ldw	r17,4(sp)
  807f88:	dc000017 	ldw	r16,0(sp)
  807f8c:	dec00304 	addi	sp,sp,12
  807f90:	f800283a 	ret

00807f94 <_read_r>:
  807f94:	defffd04 	addi	sp,sp,-12
  807f98:	dc000015 	stw	r16,0(sp)
  807f9c:	04002074 	movhi	r16,129
  807fa0:	84014004 	addi	r16,r16,1280
  807fa4:	dc400115 	stw	r17,4(sp)
  807fa8:	80000015 	stw	zero,0(r16)
  807fac:	2023883a 	mov	r17,r4
  807fb0:	2809883a 	mov	r4,r5
  807fb4:	300b883a 	mov	r5,r6
  807fb8:	380d883a 	mov	r6,r7
  807fbc:	dfc00215 	stw	ra,8(sp)
  807fc0:	080a8a40 	call	80a8a4 <read>
  807fc4:	1007883a 	mov	r3,r2
  807fc8:	00bfffc4 	movi	r2,-1
  807fcc:	18800626 	beq	r3,r2,807fe8 <_read_r+0x54>
  807fd0:	1805883a 	mov	r2,r3
  807fd4:	dfc00217 	ldw	ra,8(sp)
  807fd8:	dc400117 	ldw	r17,4(sp)
  807fdc:	dc000017 	ldw	r16,0(sp)
  807fe0:	dec00304 	addi	sp,sp,12
  807fe4:	f800283a 	ret
  807fe8:	80800017 	ldw	r2,0(r16)
  807fec:	103ff826 	beq	r2,zero,807fd0 <_read_r+0x3c>
  807ff0:	88800015 	stw	r2,0(r17)
  807ff4:	1805883a 	mov	r2,r3
  807ff8:	dfc00217 	ldw	ra,8(sp)
  807ffc:	dc400117 	ldw	r17,4(sp)
  808000:	dc000017 	ldw	r16,0(sp)
  808004:	dec00304 	addi	sp,sp,12
  808008:	f800283a 	ret

0080800c <__udivdi3>:
  80800c:	defff104 	addi	sp,sp,-60
  808010:	0015883a 	mov	r10,zero
  808014:	2005883a 	mov	r2,r4
  808018:	3011883a 	mov	r8,r6
  80801c:	df000d15 	stw	fp,52(sp)
  808020:	dd400a15 	stw	r21,40(sp)
  808024:	dcc00815 	stw	r19,32(sp)
  808028:	dfc00e15 	stw	ra,56(sp)
  80802c:	ddc00c15 	stw	r23,48(sp)
  808030:	dd800b15 	stw	r22,44(sp)
  808034:	dd000915 	stw	r20,36(sp)
  808038:	dc800715 	stw	r18,28(sp)
  80803c:	dc400615 	stw	r17,24(sp)
  808040:	dc000515 	stw	r16,20(sp)
  808044:	da800315 	stw	r10,12(sp)
  808048:	4027883a 	mov	r19,r8
  80804c:	1039883a 	mov	fp,r2
  808050:	282b883a 	mov	r21,r5
  808054:	da800415 	stw	r10,16(sp)
  808058:	3800401e 	bne	r7,zero,80815c <__udivdi3+0x150>
  80805c:	2a006536 	bltu	r5,r8,8081f4 <__udivdi3+0x1e8>
  808060:	4000b526 	beq	r8,zero,808338 <__udivdi3+0x32c>
  808064:	00bfffd4 	movui	r2,65535
  808068:	14c0ad36 	bltu	r2,r19,808320 <__udivdi3+0x314>
  80806c:	00803fc4 	movi	r2,255
  808070:	14c15e36 	bltu	r2,r19,8085ec <__udivdi3+0x5e0>
  808074:	000b883a 	mov	r5,zero
  808078:	0005883a 	mov	r2,zero
  80807c:	9884d83a 	srl	r2,r19,r2
  808080:	01002074 	movhi	r4,129
  808084:	2133c104 	addi	r4,r4,-12540
  808088:	01800804 	movi	r6,32
  80808c:	1105883a 	add	r2,r2,r4
  808090:	10c00003 	ldbu	r3,0(r2)
  808094:	28c7883a 	add	r3,r5,r3
  808098:	30e9c83a 	sub	r20,r6,r3
  80809c:	a0010a1e 	bne	r20,zero,8084c8 <__udivdi3+0x4bc>
  8080a0:	982ed43a 	srli	r23,r19,16
  8080a4:	acebc83a 	sub	r21,r21,r19
  8080a8:	9dbfffcc 	andi	r22,r19,65535
  8080ac:	05000044 	movi	r20,1
  8080b0:	a809883a 	mov	r4,r21
  8080b4:	b80b883a 	mov	r5,r23
  8080b8:	0809f400 	call	809f40 <__udivsi3>
  8080bc:	100b883a 	mov	r5,r2
  8080c0:	b009883a 	mov	r4,r22
  8080c4:	1021883a 	mov	r16,r2
  8080c8:	0800b9c0 	call	800b9c <__mulsi3>
  8080cc:	a809883a 	mov	r4,r21
  8080d0:	b80b883a 	mov	r5,r23
  8080d4:	1023883a 	mov	r17,r2
  8080d8:	0809f480 	call	809f48 <__umodsi3>
  8080dc:	1004943a 	slli	r2,r2,16
  8080e0:	e006d43a 	srli	r3,fp,16
  8080e4:	10c4b03a 	or	r2,r2,r3
  8080e8:	1440042e 	bgeu	r2,r17,8080fc <__udivdi3+0xf0>
  8080ec:	14c5883a 	add	r2,r2,r19
  8080f0:	843fffc4 	addi	r16,r16,-1
  8080f4:	14c00136 	bltu	r2,r19,8080fc <__udivdi3+0xf0>
  8080f8:	14415c36 	bltu	r2,r17,80866c <__udivdi3+0x660>
  8080fc:	1463c83a 	sub	r17,r2,r17
  808100:	8809883a 	mov	r4,r17
  808104:	b80b883a 	mov	r5,r23
  808108:	0809f400 	call	809f40 <__udivsi3>
  80810c:	100b883a 	mov	r5,r2
  808110:	b009883a 	mov	r4,r22
  808114:	102b883a 	mov	r21,r2
  808118:	0800b9c0 	call	800b9c <__mulsi3>
  80811c:	8809883a 	mov	r4,r17
  808120:	b80b883a 	mov	r5,r23
  808124:	1025883a 	mov	r18,r2
  808128:	0809f480 	call	809f48 <__umodsi3>
  80812c:	1004943a 	slli	r2,r2,16
  808130:	e0ffffcc 	andi	r3,fp,65535
  808134:	10c4b03a 	or	r2,r2,r3
  808138:	1480042e 	bgeu	r2,r18,80814c <__udivdi3+0x140>
  80813c:	9885883a 	add	r2,r19,r2
  808140:	ad7fffc4 	addi	r21,r21,-1
  808144:	14c00136 	bltu	r2,r19,80814c <__udivdi3+0x140>
  808148:	14813c36 	bltu	r2,r18,80863c <__udivdi3+0x630>
  80814c:	8004943a 	slli	r2,r16,16
  808150:	a009883a 	mov	r4,r20
  808154:	a884b03a 	or	r2,r21,r2
  808158:	00001506 	br	8081b0 <__udivdi3+0x1a4>
  80815c:	380d883a 	mov	r6,r7
  808160:	29c06c36 	bltu	r5,r7,808314 <__udivdi3+0x308>
  808164:	00bfffd4 	movui	r2,65535
  808168:	11c06436 	bltu	r2,r7,8082fc <__udivdi3+0x2f0>
  80816c:	00803fc4 	movi	r2,255
  808170:	11c11836 	bltu	r2,r7,8085d4 <__udivdi3+0x5c8>
  808174:	000b883a 	mov	r5,zero
  808178:	0005883a 	mov	r2,zero
  80817c:	3084d83a 	srl	r2,r6,r2
  808180:	01002074 	movhi	r4,129
  808184:	2133c104 	addi	r4,r4,-12540
  808188:	01c00804 	movi	r7,32
  80818c:	1105883a 	add	r2,r2,r4
  808190:	10c00003 	ldbu	r3,0(r2)
  808194:	28c7883a 	add	r3,r5,r3
  808198:	38edc83a 	sub	r22,r7,r3
  80819c:	b000731e 	bne	r22,zero,80836c <__udivdi3+0x360>
  8081a0:	35400136 	bltu	r6,r21,8081a8 <__udivdi3+0x19c>
  8081a4:	e4c05b36 	bltu	fp,r19,808314 <__udivdi3+0x308>
  8081a8:	00800044 	movi	r2,1
  8081ac:	0009883a 	mov	r4,zero
  8081b0:	d8800315 	stw	r2,12(sp)
  8081b4:	d9400317 	ldw	r5,12(sp)
  8081b8:	2007883a 	mov	r3,r4
  8081bc:	d9000415 	stw	r4,16(sp)
  8081c0:	2805883a 	mov	r2,r5
  8081c4:	dfc00e17 	ldw	ra,56(sp)
  8081c8:	df000d17 	ldw	fp,52(sp)
  8081cc:	ddc00c17 	ldw	r23,48(sp)
  8081d0:	dd800b17 	ldw	r22,44(sp)
  8081d4:	dd400a17 	ldw	r21,40(sp)
  8081d8:	dd000917 	ldw	r20,36(sp)
  8081dc:	dcc00817 	ldw	r19,32(sp)
  8081e0:	dc800717 	ldw	r18,28(sp)
  8081e4:	dc400617 	ldw	r17,24(sp)
  8081e8:	dc000517 	ldw	r16,20(sp)
  8081ec:	dec00f04 	addi	sp,sp,60
  8081f0:	f800283a 	ret
  8081f4:	00bfffd4 	movui	r2,65535
  8081f8:	12005636 	bltu	r2,r8,808354 <__udivdi3+0x348>
  8081fc:	00803fc4 	movi	r2,255
  808200:	12010036 	bltu	r2,r8,808604 <__udivdi3+0x5f8>
  808204:	000b883a 	mov	r5,zero
  808208:	0005883a 	mov	r2,zero
  80820c:	9884d83a 	srl	r2,r19,r2
  808210:	01002074 	movhi	r4,129
  808214:	2133c104 	addi	r4,r4,-12540
  808218:	01800804 	movi	r6,32
  80821c:	1105883a 	add	r2,r2,r4
  808220:	10c00003 	ldbu	r3,0(r2)
  808224:	28c7883a 	add	r3,r5,r3
  808228:	30cbc83a 	sub	r5,r6,r3
  80822c:	28000626 	beq	r5,zero,808248 <__udivdi3+0x23c>
  808230:	3145c83a 	sub	r2,r6,r5
  808234:	e084d83a 	srl	r2,fp,r2
  808238:	a946983a 	sll	r3,r21,r5
  80823c:	e178983a 	sll	fp,fp,r5
  808240:	9966983a 	sll	r19,r19,r5
  808244:	18aab03a 	or	r21,r3,r2
  808248:	982ed43a 	srli	r23,r19,16
  80824c:	a809883a 	mov	r4,r21
  808250:	9cbfffcc 	andi	r18,r19,65535
  808254:	b80b883a 	mov	r5,r23
  808258:	0809f400 	call	809f40 <__udivsi3>
  80825c:	100b883a 	mov	r5,r2
  808260:	9009883a 	mov	r4,r18
  808264:	1021883a 	mov	r16,r2
  808268:	0800b9c0 	call	800b9c <__mulsi3>
  80826c:	a809883a 	mov	r4,r21
  808270:	b80b883a 	mov	r5,r23
  808274:	1023883a 	mov	r17,r2
  808278:	0809f480 	call	809f48 <__umodsi3>
  80827c:	1004943a 	slli	r2,r2,16
  808280:	e006d43a 	srli	r3,fp,16
  808284:	10c4b03a 	or	r2,r2,r3
  808288:	1440042e 	bgeu	r2,r17,80829c <__udivdi3+0x290>
  80828c:	14c5883a 	add	r2,r2,r19
  808290:	843fffc4 	addi	r16,r16,-1
  808294:	14c00136 	bltu	r2,r19,80829c <__udivdi3+0x290>
  808298:	1440ea36 	bltu	r2,r17,808644 <__udivdi3+0x638>
  80829c:	1463c83a 	sub	r17,r2,r17
  8082a0:	8809883a 	mov	r4,r17
  8082a4:	b80b883a 	mov	r5,r23
  8082a8:	0809f400 	call	809f40 <__udivsi3>
  8082ac:	100b883a 	mov	r5,r2
  8082b0:	9009883a 	mov	r4,r18
  8082b4:	102b883a 	mov	r21,r2
  8082b8:	0800b9c0 	call	800b9c <__mulsi3>
  8082bc:	8809883a 	mov	r4,r17
  8082c0:	b80b883a 	mov	r5,r23
  8082c4:	1025883a 	mov	r18,r2
  8082c8:	0809f480 	call	809f48 <__umodsi3>
  8082cc:	1004943a 	slli	r2,r2,16
  8082d0:	e0ffffcc 	andi	r3,fp,65535
  8082d4:	10c4b03a 	or	r2,r2,r3
  8082d8:	1480042e 	bgeu	r2,r18,8082ec <__udivdi3+0x2e0>
  8082dc:	9885883a 	add	r2,r19,r2
  8082e0:	ad7fffc4 	addi	r21,r21,-1
  8082e4:	14c00136 	bltu	r2,r19,8082ec <__udivdi3+0x2e0>
  8082e8:	1480d936 	bltu	r2,r18,808650 <__udivdi3+0x644>
  8082ec:	8004943a 	slli	r2,r16,16
  8082f0:	0009883a 	mov	r4,zero
  8082f4:	a884b03a 	or	r2,r21,r2
  8082f8:	003fad06 	br	8081b0 <__udivdi3+0x1a4>
  8082fc:	00804034 	movhi	r2,256
  808300:	10bfffc4 	addi	r2,r2,-1
  808304:	11c0b636 	bltu	r2,r7,8085e0 <__udivdi3+0x5d4>
  808308:	01400404 	movi	r5,16
  80830c:	2805883a 	mov	r2,r5
  808310:	003f9a06 	br	80817c <__udivdi3+0x170>
  808314:	0005883a 	mov	r2,zero
  808318:	0009883a 	mov	r4,zero
  80831c:	003fa406 	br	8081b0 <__udivdi3+0x1a4>
  808320:	00804034 	movhi	r2,256
  808324:	10bfffc4 	addi	r2,r2,-1
  808328:	14c0b336 	bltu	r2,r19,8085f8 <__udivdi3+0x5ec>
  80832c:	01400404 	movi	r5,16
  808330:	2805883a 	mov	r2,r5
  808334:	003f5106 	br	80807c <__udivdi3+0x70>
  808338:	01000044 	movi	r4,1
  80833c:	000b883a 	mov	r5,zero
  808340:	0809f400 	call	809f40 <__udivsi3>
  808344:	1027883a 	mov	r19,r2
  808348:	00bfffd4 	movui	r2,65535
  80834c:	14fff436 	bltu	r2,r19,808320 <__udivdi3+0x314>
  808350:	003f4606 	br	80806c <__udivdi3+0x60>
  808354:	00804034 	movhi	r2,256
  808358:	10bfffc4 	addi	r2,r2,-1
  80835c:	1200ac36 	bltu	r2,r8,808610 <__udivdi3+0x604>
  808360:	01400404 	movi	r5,16
  808364:	2805883a 	mov	r2,r5
  808368:	003fa806 	br	80820c <__udivdi3+0x200>
  80836c:	3d85c83a 	sub	r2,r7,r22
  808370:	3588983a 	sll	r4,r6,r22
  808374:	9886d83a 	srl	r3,r19,r2
  808378:	a8a2d83a 	srl	r17,r21,r2
  80837c:	e084d83a 	srl	r2,fp,r2
  808380:	20eeb03a 	or	r23,r4,r3
  808384:	b824d43a 	srli	r18,r23,16
  808388:	ad86983a 	sll	r3,r21,r22
  80838c:	8809883a 	mov	r4,r17
  808390:	900b883a 	mov	r5,r18
  808394:	1886b03a 	or	r3,r3,r2
  808398:	d8c00115 	stw	r3,4(sp)
  80839c:	bc3fffcc 	andi	r16,r23,65535
  8083a0:	0809f400 	call	809f40 <__udivsi3>
  8083a4:	100b883a 	mov	r5,r2
  8083a8:	8009883a 	mov	r4,r16
  8083ac:	1029883a 	mov	r20,r2
  8083b0:	0800b9c0 	call	800b9c <__mulsi3>
  8083b4:	900b883a 	mov	r5,r18
  8083b8:	8809883a 	mov	r4,r17
  8083bc:	102b883a 	mov	r21,r2
  8083c0:	0809f480 	call	809f48 <__umodsi3>
  8083c4:	d9400117 	ldw	r5,4(sp)
  8083c8:	1004943a 	slli	r2,r2,16
  8083cc:	9da6983a 	sll	r19,r19,r22
  8083d0:	2806d43a 	srli	r3,r5,16
  8083d4:	10c4b03a 	or	r2,r2,r3
  8083d8:	1540032e 	bgeu	r2,r21,8083e8 <__udivdi3+0x3dc>
  8083dc:	15c5883a 	add	r2,r2,r23
  8083e0:	a53fffc4 	addi	r20,r20,-1
  8083e4:	15c0912e 	bgeu	r2,r23,80862c <__udivdi3+0x620>
  8083e8:	1563c83a 	sub	r17,r2,r21
  8083ec:	8809883a 	mov	r4,r17
  8083f0:	900b883a 	mov	r5,r18
  8083f4:	0809f400 	call	809f40 <__udivsi3>
  8083f8:	100b883a 	mov	r5,r2
  8083fc:	8009883a 	mov	r4,r16
  808400:	102b883a 	mov	r21,r2
  808404:	0800b9c0 	call	800b9c <__mulsi3>
  808408:	8809883a 	mov	r4,r17
  80840c:	900b883a 	mov	r5,r18
  808410:	1021883a 	mov	r16,r2
  808414:	0809f480 	call	809f48 <__umodsi3>
  808418:	da800117 	ldw	r10,4(sp)
  80841c:	1004943a 	slli	r2,r2,16
  808420:	50ffffcc 	andi	r3,r10,65535
  808424:	10c6b03a 	or	r3,r2,r3
  808428:	1c00032e 	bgeu	r3,r16,808438 <__udivdi3+0x42c>
  80842c:	1dc7883a 	add	r3,r3,r23
  808430:	ad7fffc4 	addi	r21,r21,-1
  808434:	1dc0792e 	bgeu	r3,r23,80861c <__udivdi3+0x610>
  808438:	a004943a 	slli	r2,r20,16
  80843c:	982ed43a 	srli	r23,r19,16
  808440:	9cffffcc 	andi	r19,r19,65535
  808444:	a8a4b03a 	or	r18,r21,r2
  808448:	947fffcc 	andi	r17,r18,65535
  80844c:	902ad43a 	srli	r21,r18,16
  808450:	8809883a 	mov	r4,r17
  808454:	980b883a 	mov	r5,r19
  808458:	1c21c83a 	sub	r16,r3,r16
  80845c:	0800b9c0 	call	800b9c <__mulsi3>
  808460:	8809883a 	mov	r4,r17
  808464:	b80b883a 	mov	r5,r23
  808468:	1029883a 	mov	r20,r2
  80846c:	0800b9c0 	call	800b9c <__mulsi3>
  808470:	980b883a 	mov	r5,r19
  808474:	a809883a 	mov	r4,r21
  808478:	1023883a 	mov	r17,r2
  80847c:	0800b9c0 	call	800b9c <__mulsi3>
  808480:	a809883a 	mov	r4,r21
  808484:	b80b883a 	mov	r5,r23
  808488:	1027883a 	mov	r19,r2
  80848c:	0800b9c0 	call	800b9c <__mulsi3>
  808490:	1009883a 	mov	r4,r2
  808494:	a004d43a 	srli	r2,r20,16
  808498:	8ce3883a 	add	r17,r17,r19
  80849c:	1447883a 	add	r3,r2,r17
  8084a0:	1cc0022e 	bgeu	r3,r19,8084ac <__udivdi3+0x4a0>
  8084a4:	00800074 	movhi	r2,1
  8084a8:	2089883a 	add	r4,r4,r2
  8084ac:	1804d43a 	srli	r2,r3,16
  8084b0:	2085883a 	add	r2,r4,r2
  8084b4:	80804436 	bltu	r16,r2,8085c8 <__udivdi3+0x5bc>
  8084b8:	80803e26 	beq	r16,r2,8085b4 <__udivdi3+0x5a8>
  8084bc:	9005883a 	mov	r2,r18
  8084c0:	0009883a 	mov	r4,zero
  8084c4:	003f3a06 	br	8081b0 <__udivdi3+0x1a4>
  8084c8:	9d26983a 	sll	r19,r19,r20
  8084cc:	3505c83a 	sub	r2,r6,r20
  8084d0:	a8a2d83a 	srl	r17,r21,r2
  8084d4:	982ed43a 	srli	r23,r19,16
  8084d8:	e084d83a 	srl	r2,fp,r2
  8084dc:	ad06983a 	sll	r3,r21,r20
  8084e0:	8809883a 	mov	r4,r17
  8084e4:	b80b883a 	mov	r5,r23
  8084e8:	1886b03a 	or	r3,r3,r2
  8084ec:	d8c00015 	stw	r3,0(sp)
  8084f0:	9dbfffcc 	andi	r22,r19,65535
  8084f4:	0809f400 	call	809f40 <__udivsi3>
  8084f8:	100b883a 	mov	r5,r2
  8084fc:	b009883a 	mov	r4,r22
  808500:	d8800215 	stw	r2,8(sp)
  808504:	0800b9c0 	call	800b9c <__mulsi3>
  808508:	8809883a 	mov	r4,r17
  80850c:	b80b883a 	mov	r5,r23
  808510:	102b883a 	mov	r21,r2
  808514:	0809f480 	call	809f48 <__umodsi3>
  808518:	d9000017 	ldw	r4,0(sp)
  80851c:	1004943a 	slli	r2,r2,16
  808520:	2006d43a 	srli	r3,r4,16
  808524:	10c4b03a 	or	r2,r2,r3
  808528:	1540052e 	bgeu	r2,r21,808540 <__udivdi3+0x534>
  80852c:	d9400217 	ldw	r5,8(sp)
  808530:	14c5883a 	add	r2,r2,r19
  808534:	297fffc4 	addi	r5,r5,-1
  808538:	d9400215 	stw	r5,8(sp)
  80853c:	14c0462e 	bgeu	r2,r19,808658 <__udivdi3+0x64c>
  808540:	1563c83a 	sub	r17,r2,r21
  808544:	8809883a 	mov	r4,r17
  808548:	b80b883a 	mov	r5,r23
  80854c:	0809f400 	call	809f40 <__udivsi3>
  808550:	100b883a 	mov	r5,r2
  808554:	b009883a 	mov	r4,r22
  808558:	1025883a 	mov	r18,r2
  80855c:	0800b9c0 	call	800b9c <__mulsi3>
  808560:	8809883a 	mov	r4,r17
  808564:	b80b883a 	mov	r5,r23
  808568:	1021883a 	mov	r16,r2
  80856c:	0809f480 	call	809f48 <__umodsi3>
  808570:	da800017 	ldw	r10,0(sp)
  808574:	1004943a 	slli	r2,r2,16
  808578:	50ffffcc 	andi	r3,r10,65535
  80857c:	10c6b03a 	or	r3,r2,r3
  808580:	1c00062e 	bgeu	r3,r16,80859c <__udivdi3+0x590>
  808584:	1cc7883a 	add	r3,r3,r19
  808588:	94bfffc4 	addi	r18,r18,-1
  80858c:	1cc00336 	bltu	r3,r19,80859c <__udivdi3+0x590>
  808590:	1c00022e 	bgeu	r3,r16,80859c <__udivdi3+0x590>
  808594:	94bfffc4 	addi	r18,r18,-1
  808598:	1cc7883a 	add	r3,r3,r19
  80859c:	d9000217 	ldw	r4,8(sp)
  8085a0:	e538983a 	sll	fp,fp,r20
  8085a4:	1c2bc83a 	sub	r21,r3,r16
  8085a8:	2004943a 	slli	r2,r4,16
  8085ac:	90a8b03a 	or	r20,r18,r2
  8085b0:	003ebf06 	br	8080b0 <__udivdi3+0xa4>
  8085b4:	1804943a 	slli	r2,r3,16
  8085b8:	e588983a 	sll	r4,fp,r22
  8085bc:	a0ffffcc 	andi	r3,r20,65535
  8085c0:	10c5883a 	add	r2,r2,r3
  8085c4:	20bfbd2e 	bgeu	r4,r2,8084bc <__udivdi3+0x4b0>
  8085c8:	90bfffc4 	addi	r2,r18,-1
  8085cc:	0009883a 	mov	r4,zero
  8085d0:	003ef706 	br	8081b0 <__udivdi3+0x1a4>
  8085d4:	01400204 	movi	r5,8
  8085d8:	2805883a 	mov	r2,r5
  8085dc:	003ee706 	br	80817c <__udivdi3+0x170>
  8085e0:	01400604 	movi	r5,24
  8085e4:	2805883a 	mov	r2,r5
  8085e8:	003ee406 	br	80817c <__udivdi3+0x170>
  8085ec:	01400204 	movi	r5,8
  8085f0:	2805883a 	mov	r2,r5
  8085f4:	003ea106 	br	80807c <__udivdi3+0x70>
  8085f8:	01400604 	movi	r5,24
  8085fc:	2805883a 	mov	r2,r5
  808600:	003e9e06 	br	80807c <__udivdi3+0x70>
  808604:	01400204 	movi	r5,8
  808608:	2805883a 	mov	r2,r5
  80860c:	003eff06 	br	80820c <__udivdi3+0x200>
  808610:	01400604 	movi	r5,24
  808614:	2805883a 	mov	r2,r5
  808618:	003efc06 	br	80820c <__udivdi3+0x200>
  80861c:	1c3f862e 	bgeu	r3,r16,808438 <__udivdi3+0x42c>
  808620:	1dc7883a 	add	r3,r3,r23
  808624:	ad7fffc4 	addi	r21,r21,-1
  808628:	003f8306 	br	808438 <__udivdi3+0x42c>
  80862c:	157f6e2e 	bgeu	r2,r21,8083e8 <__udivdi3+0x3dc>
  808630:	a53fffc4 	addi	r20,r20,-1
  808634:	15c5883a 	add	r2,r2,r23
  808638:	003f6b06 	br	8083e8 <__udivdi3+0x3dc>
  80863c:	ad7fffc4 	addi	r21,r21,-1
  808640:	003ec206 	br	80814c <__udivdi3+0x140>
  808644:	843fffc4 	addi	r16,r16,-1
  808648:	14c5883a 	add	r2,r2,r19
  80864c:	003f1306 	br	80829c <__udivdi3+0x290>
  808650:	ad7fffc4 	addi	r21,r21,-1
  808654:	003f2506 	br	8082ec <__udivdi3+0x2e0>
  808658:	157fb92e 	bgeu	r2,r21,808540 <__udivdi3+0x534>
  80865c:	297fffc4 	addi	r5,r5,-1
  808660:	14c5883a 	add	r2,r2,r19
  808664:	d9400215 	stw	r5,8(sp)
  808668:	003fb506 	br	808540 <__udivdi3+0x534>
  80866c:	843fffc4 	addi	r16,r16,-1
  808670:	14c5883a 	add	r2,r2,r19
  808674:	003ea106 	br	8080fc <__udivdi3+0xf0>

00808678 <__umoddi3>:
  808678:	defff004 	addi	sp,sp,-64
  80867c:	3011883a 	mov	r8,r6
  808680:	000d883a 	mov	r6,zero
  808684:	dd400b15 	stw	r21,44(sp)
  808688:	dcc00915 	stw	r19,36(sp)
  80868c:	dc000615 	stw	r16,24(sp)
  808690:	dfc00f15 	stw	ra,60(sp)
  808694:	df000e15 	stw	fp,56(sp)
  808698:	ddc00d15 	stw	r23,52(sp)
  80869c:	dd800c15 	stw	r22,48(sp)
  8086a0:	dd000a15 	stw	r20,40(sp)
  8086a4:	dc800815 	stw	r18,32(sp)
  8086a8:	dc400715 	stw	r17,28(sp)
  8086ac:	2817883a 	mov	r11,r5
  8086b0:	d9800415 	stw	r6,16(sp)
  8086b4:	4027883a 	mov	r19,r8
  8086b8:	d9800515 	stw	r6,20(sp)
  8086bc:	2021883a 	mov	r16,r4
  8086c0:	282b883a 	mov	r21,r5
  8086c4:	38002c1e 	bne	r7,zero,808778 <__umoddi3+0x100>
  8086c8:	2a005636 	bltu	r5,r8,808824 <__umoddi3+0x1ac>
  8086cc:	40009a26 	beq	r8,zero,808938 <__umoddi3+0x2c0>
  8086d0:	00bfffd4 	movui	r2,65535
  8086d4:	14c09236 	bltu	r2,r19,808920 <__umoddi3+0x2a8>
  8086d8:	00803fc4 	movi	r2,255
  8086dc:	14c15c36 	bltu	r2,r19,808c50 <__umoddi3+0x5d8>
  8086e0:	000b883a 	mov	r5,zero
  8086e4:	0005883a 	mov	r2,zero
  8086e8:	9884d83a 	srl	r2,r19,r2
  8086ec:	01002074 	movhi	r4,129
  8086f0:	2133c104 	addi	r4,r4,-12540
  8086f4:	01800804 	movi	r6,32
  8086f8:	1105883a 	add	r2,r2,r4
  8086fc:	10c00003 	ldbu	r3,0(r2)
  808700:	28c7883a 	add	r3,r5,r3
  808704:	30e5c83a 	sub	r18,r6,r3
  808708:	9000a41e 	bne	r18,zero,80899c <__umoddi3+0x324>
  80870c:	982ed43a 	srli	r23,r19,16
  808710:	acebc83a 	sub	r21,r21,r19
  808714:	9d3fffcc 	andi	r20,r19,65535
  808718:	002d883a 	mov	r22,zero
  80871c:	a809883a 	mov	r4,r21
  808720:	b80b883a 	mov	r5,r23
  808724:	0809f400 	call	809f40 <__udivsi3>
  808728:	100b883a 	mov	r5,r2
  80872c:	a009883a 	mov	r4,r20
  808730:	0800b9c0 	call	800b9c <__mulsi3>
  808734:	a809883a 	mov	r4,r21
  808738:	b80b883a 	mov	r5,r23
  80873c:	1023883a 	mov	r17,r2
  808740:	0809f480 	call	809f48 <__umodsi3>
  808744:	1004943a 	slli	r2,r2,16
  808748:	8006d43a 	srli	r3,r16,16
  80874c:	10c4b03a 	or	r2,r2,r3
  808750:	1440032e 	bgeu	r2,r17,808760 <__umoddi3+0xe8>
  808754:	14c5883a 	add	r2,r2,r19
  808758:	14c00136 	bltu	r2,r19,808760 <__umoddi3+0xe8>
  80875c:	14415836 	bltu	r2,r17,808cc0 <__umoddi3+0x648>
  808760:	1463c83a 	sub	r17,r2,r17
  808764:	8809883a 	mov	r4,r17
  808768:	b80b883a 	mov	r5,r23
  80876c:	0809f400 	call	809f40 <__udivsi3>
  808770:	a009883a 	mov	r4,r20
  808774:	00005306 	br	8088c4 <__umoddi3+0x24c>
  808778:	380d883a 	mov	r6,r7
  80877c:	29c0132e 	bgeu	r5,r7,8087cc <__umoddi3+0x154>
  808780:	d9000415 	stw	r4,16(sp)
  808784:	d9400515 	stw	r5,20(sp)
  808788:	d9400417 	ldw	r5,16(sp)
  80878c:	5813883a 	mov	r9,r11
  808790:	2811883a 	mov	r8,r5
  808794:	4005883a 	mov	r2,r8
  808798:	4807883a 	mov	r3,r9
  80879c:	dfc00f17 	ldw	ra,60(sp)
  8087a0:	df000e17 	ldw	fp,56(sp)
  8087a4:	ddc00d17 	ldw	r23,52(sp)
  8087a8:	dd800c17 	ldw	r22,48(sp)
  8087ac:	dd400b17 	ldw	r21,44(sp)
  8087b0:	dd000a17 	ldw	r20,40(sp)
  8087b4:	dcc00917 	ldw	r19,36(sp)
  8087b8:	dc800817 	ldw	r18,32(sp)
  8087bc:	dc400717 	ldw	r17,28(sp)
  8087c0:	dc000617 	ldw	r16,24(sp)
  8087c4:	dec01004 	addi	sp,sp,64
  8087c8:	f800283a 	ret
  8087cc:	00bfffd4 	movui	r2,65535
  8087d0:	11c06636 	bltu	r2,r7,80896c <__umoddi3+0x2f4>
  8087d4:	00803fc4 	movi	r2,255
  8087d8:	11c12036 	bltu	r2,r7,808c5c <__umoddi3+0x5e4>
  8087dc:	000b883a 	mov	r5,zero
  8087e0:	0005883a 	mov	r2,zero
  8087e4:	3084d83a 	srl	r2,r6,r2
  8087e8:	01002074 	movhi	r4,129
  8087ec:	2133c104 	addi	r4,r4,-12540
  8087f0:	01c00804 	movi	r7,32
  8087f4:	1105883a 	add	r2,r2,r4
  8087f8:	10c00003 	ldbu	r3,0(r2)
  8087fc:	28c7883a 	add	r3,r5,r3
  808800:	38e5c83a 	sub	r18,r7,r3
  808804:	9000941e 	bne	r18,zero,808a58 <__umoddi3+0x3e0>
  808808:	35405e36 	bltu	r6,r21,808984 <__umoddi3+0x30c>
  80880c:	84c05d2e 	bgeu	r16,r19,808984 <__umoddi3+0x30c>
  808810:	8011883a 	mov	r8,r16
  808814:	a813883a 	mov	r9,r21
  808818:	dc000415 	stw	r16,16(sp)
  80881c:	dd400515 	stw	r21,20(sp)
  808820:	003fdc06 	br	808794 <__umoddi3+0x11c>
  808824:	00bfffd4 	movui	r2,65535
  808828:	12004a36 	bltu	r2,r8,808954 <__umoddi3+0x2dc>
  80882c:	00803fc4 	movi	r2,255
  808830:	12010d36 	bltu	r2,r8,808c68 <__umoddi3+0x5f0>
  808834:	000b883a 	mov	r5,zero
  808838:	0005883a 	mov	r2,zero
  80883c:	9884d83a 	srl	r2,r19,r2
  808840:	01002074 	movhi	r4,129
  808844:	2133c104 	addi	r4,r4,-12540
  808848:	01800804 	movi	r6,32
  80884c:	1105883a 	add	r2,r2,r4
  808850:	10c00003 	ldbu	r3,0(r2)
  808854:	28c7883a 	add	r3,r5,r3
  808858:	30c7c83a 	sub	r3,r6,r3
  80885c:	1800dc1e 	bne	r3,zero,808bd0 <__umoddi3+0x558>
  808860:	002d883a 	mov	r22,zero
  808864:	982ed43a 	srli	r23,r19,16
  808868:	a809883a 	mov	r4,r21
  80886c:	9cbfffcc 	andi	r18,r19,65535
  808870:	b80b883a 	mov	r5,r23
  808874:	0809f400 	call	809f40 <__udivsi3>
  808878:	100b883a 	mov	r5,r2
  80887c:	9009883a 	mov	r4,r18
  808880:	0800b9c0 	call	800b9c <__mulsi3>
  808884:	a809883a 	mov	r4,r21
  808888:	b80b883a 	mov	r5,r23
  80888c:	1023883a 	mov	r17,r2
  808890:	0809f480 	call	809f48 <__umodsi3>
  808894:	1004943a 	slli	r2,r2,16
  808898:	8006d43a 	srli	r3,r16,16
  80889c:	10c4b03a 	or	r2,r2,r3
  8088a0:	1440032e 	bgeu	r2,r17,8088b0 <__umoddi3+0x238>
  8088a4:	14c5883a 	add	r2,r2,r19
  8088a8:	14c00136 	bltu	r2,r19,8088b0 <__umoddi3+0x238>
  8088ac:	14410236 	bltu	r2,r17,808cb8 <__umoddi3+0x640>
  8088b0:	1463c83a 	sub	r17,r2,r17
  8088b4:	8809883a 	mov	r4,r17
  8088b8:	b80b883a 	mov	r5,r23
  8088bc:	0809f400 	call	809f40 <__udivsi3>
  8088c0:	9009883a 	mov	r4,r18
  8088c4:	100b883a 	mov	r5,r2
  8088c8:	0800b9c0 	call	800b9c <__mulsi3>
  8088cc:	8809883a 	mov	r4,r17
  8088d0:	b80b883a 	mov	r5,r23
  8088d4:	102b883a 	mov	r21,r2
  8088d8:	0809f480 	call	809f48 <__umodsi3>
  8088dc:	1004943a 	slli	r2,r2,16
  8088e0:	80ffffcc 	andi	r3,r16,65535
  8088e4:	10c4b03a 	or	r2,r2,r3
  8088e8:	1540042e 	bgeu	r2,r21,8088fc <__umoddi3+0x284>
  8088ec:	14c5883a 	add	r2,r2,r19
  8088f0:	14c00236 	bltu	r2,r19,8088fc <__umoddi3+0x284>
  8088f4:	1540012e 	bgeu	r2,r21,8088fc <__umoddi3+0x284>
  8088f8:	14c5883a 	add	r2,r2,r19
  8088fc:	1545c83a 	sub	r2,r2,r21
  808900:	1584d83a 	srl	r2,r2,r22
  808904:	0013883a 	mov	r9,zero
  808908:	d8800415 	stw	r2,16(sp)
  80890c:	d8c00417 	ldw	r3,16(sp)
  808910:	0005883a 	mov	r2,zero
  808914:	d8800515 	stw	r2,20(sp)
  808918:	1811883a 	mov	r8,r3
  80891c:	003f9d06 	br	808794 <__umoddi3+0x11c>
  808920:	00804034 	movhi	r2,256
  808924:	10bfffc4 	addi	r2,r2,-1
  808928:	14c0c636 	bltu	r2,r19,808c44 <__umoddi3+0x5cc>
  80892c:	01400404 	movi	r5,16
  808930:	2805883a 	mov	r2,r5
  808934:	003f6c06 	br	8086e8 <__umoddi3+0x70>
  808938:	01000044 	movi	r4,1
  80893c:	000b883a 	mov	r5,zero
  808940:	0809f400 	call	809f40 <__udivsi3>
  808944:	1027883a 	mov	r19,r2
  808948:	00bfffd4 	movui	r2,65535
  80894c:	14fff436 	bltu	r2,r19,808920 <__umoddi3+0x2a8>
  808950:	003f6106 	br	8086d8 <__umoddi3+0x60>
  808954:	00804034 	movhi	r2,256
  808958:	10bfffc4 	addi	r2,r2,-1
  80895c:	1200c536 	bltu	r2,r8,808c74 <__umoddi3+0x5fc>
  808960:	01400404 	movi	r5,16
  808964:	2805883a 	mov	r2,r5
  808968:	003fb406 	br	80883c <__umoddi3+0x1c4>
  80896c:	00804034 	movhi	r2,256
  808970:	10bfffc4 	addi	r2,r2,-1
  808974:	11c0c236 	bltu	r2,r7,808c80 <__umoddi3+0x608>
  808978:	01400404 	movi	r5,16
  80897c:	2805883a 	mov	r2,r5
  808980:	003f9806 	br	8087e4 <__umoddi3+0x16c>
  808984:	84c9c83a 	sub	r4,r16,r19
  808988:	8105803a 	cmpltu	r2,r16,r4
  80898c:	a987c83a 	sub	r3,r21,r6
  808990:	18abc83a 	sub	r21,r3,r2
  808994:	2021883a 	mov	r16,r4
  808998:	003f9d06 	br	808810 <__umoddi3+0x198>
  80899c:	9ca6983a 	sll	r19,r19,r18
  8089a0:	3485c83a 	sub	r2,r6,r18
  8089a4:	a8a2d83a 	srl	r17,r21,r2
  8089a8:	982ed43a 	srli	r23,r19,16
  8089ac:	ac86983a 	sll	r3,r21,r18
  8089b0:	8084d83a 	srl	r2,r16,r2
  8089b4:	8809883a 	mov	r4,r17
  8089b8:	b80b883a 	mov	r5,r23
  8089bc:	18b8b03a 	or	fp,r3,r2
  8089c0:	9d3fffcc 	andi	r20,r19,65535
  8089c4:	0809f400 	call	809f40 <__udivsi3>
  8089c8:	100b883a 	mov	r5,r2
  8089cc:	a009883a 	mov	r4,r20
  8089d0:	0800b9c0 	call	800b9c <__mulsi3>
  8089d4:	8809883a 	mov	r4,r17
  8089d8:	b80b883a 	mov	r5,r23
  8089dc:	102b883a 	mov	r21,r2
  8089e0:	0809f480 	call	809f48 <__umodsi3>
  8089e4:	1004943a 	slli	r2,r2,16
  8089e8:	e006d43a 	srli	r3,fp,16
  8089ec:	902d883a 	mov	r22,r18
  8089f0:	10c4b03a 	or	r2,r2,r3
  8089f4:	1540022e 	bgeu	r2,r21,808a00 <__umoddi3+0x388>
  8089f8:	14c5883a 	add	r2,r2,r19
  8089fc:	14c0ab2e 	bgeu	r2,r19,808cac <__umoddi3+0x634>
  808a00:	1563c83a 	sub	r17,r2,r21
  808a04:	8809883a 	mov	r4,r17
  808a08:	b80b883a 	mov	r5,r23
  808a0c:	0809f400 	call	809f40 <__udivsi3>
  808a10:	100b883a 	mov	r5,r2
  808a14:	a009883a 	mov	r4,r20
  808a18:	0800b9c0 	call	800b9c <__mulsi3>
  808a1c:	8809883a 	mov	r4,r17
  808a20:	b80b883a 	mov	r5,r23
  808a24:	102b883a 	mov	r21,r2
  808a28:	0809f480 	call	809f48 <__umodsi3>
  808a2c:	1004943a 	slli	r2,r2,16
  808a30:	e0ffffcc 	andi	r3,fp,65535
  808a34:	10c4b03a 	or	r2,r2,r3
  808a38:	1540042e 	bgeu	r2,r21,808a4c <__umoddi3+0x3d4>
  808a3c:	14c5883a 	add	r2,r2,r19
  808a40:	14c00236 	bltu	r2,r19,808a4c <__umoddi3+0x3d4>
  808a44:	1540012e 	bgeu	r2,r21,808a4c <__umoddi3+0x3d4>
  808a48:	14c5883a 	add	r2,r2,r19
  808a4c:	84a0983a 	sll	r16,r16,r18
  808a50:	156bc83a 	sub	r21,r2,r21
  808a54:	003f3106 	br	80871c <__umoddi3+0xa4>
  808a58:	3c8fc83a 	sub	r7,r7,r18
  808a5c:	3486983a 	sll	r3,r6,r18
  808a60:	99c4d83a 	srl	r2,r19,r7
  808a64:	a9e2d83a 	srl	r17,r21,r7
  808a68:	ac8c983a 	sll	r6,r21,r18
  808a6c:	18acb03a 	or	r22,r3,r2
  808a70:	b02ed43a 	srli	r23,r22,16
  808a74:	81c4d83a 	srl	r2,r16,r7
  808a78:	8809883a 	mov	r4,r17
  808a7c:	b80b883a 	mov	r5,r23
  808a80:	308cb03a 	or	r6,r6,r2
  808a84:	d9c00315 	stw	r7,12(sp)
  808a88:	d9800215 	stw	r6,8(sp)
  808a8c:	b53fffcc 	andi	r20,r22,65535
  808a90:	0809f400 	call	809f40 <__udivsi3>
  808a94:	100b883a 	mov	r5,r2
  808a98:	a009883a 	mov	r4,r20
  808a9c:	1039883a 	mov	fp,r2
  808aa0:	0800b9c0 	call	800b9c <__mulsi3>
  808aa4:	8809883a 	mov	r4,r17
  808aa8:	b80b883a 	mov	r5,r23
  808aac:	102b883a 	mov	r21,r2
  808ab0:	0809f480 	call	809f48 <__umodsi3>
  808ab4:	d9000217 	ldw	r4,8(sp)
  808ab8:	1004943a 	slli	r2,r2,16
  808abc:	9ca6983a 	sll	r19,r19,r18
  808ac0:	2006d43a 	srli	r3,r4,16
  808ac4:	84a0983a 	sll	r16,r16,r18
  808ac8:	dcc00015 	stw	r19,0(sp)
  808acc:	10c4b03a 	or	r2,r2,r3
  808ad0:	dc000115 	stw	r16,4(sp)
  808ad4:	1540032e 	bgeu	r2,r21,808ae4 <__umoddi3+0x46c>
  808ad8:	1585883a 	add	r2,r2,r22
  808adc:	e73fffc4 	addi	fp,fp,-1
  808ae0:	15806e2e 	bgeu	r2,r22,808c9c <__umoddi3+0x624>
  808ae4:	1563c83a 	sub	r17,r2,r21
  808ae8:	8809883a 	mov	r4,r17
  808aec:	b80b883a 	mov	r5,r23
  808af0:	0809f400 	call	809f40 <__udivsi3>
  808af4:	100b883a 	mov	r5,r2
  808af8:	a009883a 	mov	r4,r20
  808afc:	1021883a 	mov	r16,r2
  808b00:	0800b9c0 	call	800b9c <__mulsi3>
  808b04:	b80b883a 	mov	r5,r23
  808b08:	8809883a 	mov	r4,r17
  808b0c:	1029883a 	mov	r20,r2
  808b10:	0809f480 	call	809f48 <__umodsi3>
  808b14:	d9400217 	ldw	r5,8(sp)
  808b18:	1004943a 	slli	r2,r2,16
  808b1c:	28ffffcc 	andi	r3,r5,65535
  808b20:	10c4b03a 	or	r2,r2,r3
  808b24:	1500032e 	bgeu	r2,r20,808b34 <__umoddi3+0x4bc>
  808b28:	1585883a 	add	r2,r2,r22
  808b2c:	843fffc4 	addi	r16,r16,-1
  808b30:	1580562e 	bgeu	r2,r22,808c8c <__umoddi3+0x614>
  808b34:	d9800017 	ldw	r6,0(sp)
  808b38:	e022943a 	slli	r17,fp,16
  808b3c:	302ed43a 	srli	r23,r6,16
  808b40:	8462b03a 	or	r17,r16,r17
  808b44:	34ffffcc 	andi	r19,r6,65535
  808b48:	882ad43a 	srli	r21,r17,16
  808b4c:	8c7fffcc 	andi	r17,r17,65535
  808b50:	8809883a 	mov	r4,r17
  808b54:	980b883a 	mov	r5,r19
  808b58:	1521c83a 	sub	r16,r2,r20
  808b5c:	0800b9c0 	call	800b9c <__mulsi3>
  808b60:	8809883a 	mov	r4,r17
  808b64:	b80b883a 	mov	r5,r23
  808b68:	1029883a 	mov	r20,r2
  808b6c:	0800b9c0 	call	800b9c <__mulsi3>
  808b70:	980b883a 	mov	r5,r19
  808b74:	a809883a 	mov	r4,r21
  808b78:	1023883a 	mov	r17,r2
  808b7c:	0800b9c0 	call	800b9c <__mulsi3>
  808b80:	a809883a 	mov	r4,r21
  808b84:	b80b883a 	mov	r5,r23
  808b88:	1027883a 	mov	r19,r2
  808b8c:	0800b9c0 	call	800b9c <__mulsi3>
  808b90:	100b883a 	mov	r5,r2
  808b94:	a004d43a 	srli	r2,r20,16
  808b98:	8ce3883a 	add	r17,r17,r19
  808b9c:	1449883a 	add	r4,r2,r17
  808ba0:	24c0022e 	bgeu	r4,r19,808bac <__umoddi3+0x534>
  808ba4:	00800074 	movhi	r2,1
  808ba8:	288b883a 	add	r5,r5,r2
  808bac:	2004d43a 	srli	r2,r4,16
  808bb0:	2008943a 	slli	r4,r4,16
  808bb4:	a0ffffcc 	andi	r3,r20,65535
  808bb8:	288d883a 	add	r6,r5,r2
  808bbc:	20c9883a 	add	r4,r4,r3
  808bc0:	81800b36 	bltu	r16,r6,808bf0 <__umoddi3+0x578>
  808bc4:	81804026 	beq	r16,r6,808cc8 <__umoddi3+0x650>
  808bc8:	818dc83a 	sub	r6,r16,r6
  808bcc:	00000f06 	br	808c0c <__umoddi3+0x594>
  808bd0:	30c5c83a 	sub	r2,r6,r3
  808bd4:	182d883a 	mov	r22,r3
  808bd8:	8084d83a 	srl	r2,r16,r2
  808bdc:	a8c6983a 	sll	r3,r21,r3
  808be0:	9da6983a 	sll	r19,r19,r22
  808be4:	85a0983a 	sll	r16,r16,r22
  808be8:	18aab03a 	or	r21,r3,r2
  808bec:	003f1d06 	br	808864 <__umoddi3+0x1ec>
  808bf0:	d8c00017 	ldw	r3,0(sp)
  808bf4:	20c5c83a 	sub	r2,r4,r3
  808bf8:	2089803a 	cmpltu	r4,r4,r2
  808bfc:	3587c83a 	sub	r3,r6,r22
  808c00:	1907c83a 	sub	r3,r3,r4
  808c04:	80cdc83a 	sub	r6,r16,r3
  808c08:	1009883a 	mov	r4,r2
  808c0c:	d9400117 	ldw	r5,4(sp)
  808c10:	2905c83a 	sub	r2,r5,r4
  808c14:	2887803a 	cmpltu	r3,r5,r2
  808c18:	30c7c83a 	sub	r3,r6,r3
  808c1c:	d9800317 	ldw	r6,12(sp)
  808c20:	1484d83a 	srl	r2,r2,r18
  808c24:	1988983a 	sll	r4,r3,r6
  808c28:	1c86d83a 	srl	r3,r3,r18
  808c2c:	2088b03a 	or	r4,r4,r2
  808c30:	2011883a 	mov	r8,r4
  808c34:	1813883a 	mov	r9,r3
  808c38:	d9000415 	stw	r4,16(sp)
  808c3c:	d8c00515 	stw	r3,20(sp)
  808c40:	003ed406 	br	808794 <__umoddi3+0x11c>
  808c44:	01400604 	movi	r5,24
  808c48:	2805883a 	mov	r2,r5
  808c4c:	003ea606 	br	8086e8 <__umoddi3+0x70>
  808c50:	01400204 	movi	r5,8
  808c54:	2805883a 	mov	r2,r5
  808c58:	003ea306 	br	8086e8 <__umoddi3+0x70>
  808c5c:	01400204 	movi	r5,8
  808c60:	2805883a 	mov	r2,r5
  808c64:	003edf06 	br	8087e4 <__umoddi3+0x16c>
  808c68:	01400204 	movi	r5,8
  808c6c:	2805883a 	mov	r2,r5
  808c70:	003ef206 	br	80883c <__umoddi3+0x1c4>
  808c74:	01400604 	movi	r5,24
  808c78:	2805883a 	mov	r2,r5
  808c7c:	003eef06 	br	80883c <__umoddi3+0x1c4>
  808c80:	01400604 	movi	r5,24
  808c84:	2805883a 	mov	r2,r5
  808c88:	003ed606 	br	8087e4 <__umoddi3+0x16c>
  808c8c:	153fa92e 	bgeu	r2,r20,808b34 <__umoddi3+0x4bc>
  808c90:	843fffc4 	addi	r16,r16,-1
  808c94:	1585883a 	add	r2,r2,r22
  808c98:	003fa606 	br	808b34 <__umoddi3+0x4bc>
  808c9c:	157f912e 	bgeu	r2,r21,808ae4 <__umoddi3+0x46c>
  808ca0:	e73fffc4 	addi	fp,fp,-1
  808ca4:	1585883a 	add	r2,r2,r22
  808ca8:	003f8e06 	br	808ae4 <__umoddi3+0x46c>
  808cac:	157f542e 	bgeu	r2,r21,808a00 <__umoddi3+0x388>
  808cb0:	14c5883a 	add	r2,r2,r19
  808cb4:	003f5206 	br	808a00 <__umoddi3+0x388>
  808cb8:	14c5883a 	add	r2,r2,r19
  808cbc:	003efc06 	br	8088b0 <__umoddi3+0x238>
  808cc0:	14c5883a 	add	r2,r2,r19
  808cc4:	003ea606 	br	808760 <__umoddi3+0xe8>
  808cc8:	d8800117 	ldw	r2,4(sp)
  808ccc:	113fc836 	bltu	r2,r4,808bf0 <__umoddi3+0x578>
  808cd0:	000d883a 	mov	r6,zero
  808cd4:	003fcd06 	br	808c0c <__umoddi3+0x594>

00808cd8 <_fpadd_parts>:
  808cd8:	defff804 	addi	sp,sp,-32
  808cdc:	dcc00315 	stw	r19,12(sp)
  808ce0:	2027883a 	mov	r19,r4
  808ce4:	21000017 	ldw	r4,0(r4)
  808ce8:	00c00044 	movi	r3,1
  808cec:	dd400515 	stw	r21,20(sp)
  808cf0:	dd000415 	stw	r20,16(sp)
  808cf4:	ddc00715 	stw	r23,28(sp)
  808cf8:	dd800615 	stw	r22,24(sp)
  808cfc:	dc800215 	stw	r18,8(sp)
  808d00:	dc400115 	stw	r17,4(sp)
  808d04:	dc000015 	stw	r16,0(sp)
  808d08:	282b883a 	mov	r21,r5
  808d0c:	3029883a 	mov	r20,r6
  808d10:	1900632e 	bgeu	r3,r4,808ea0 <_fpadd_parts+0x1c8>
  808d14:	28800017 	ldw	r2,0(r5)
  808d18:	1880812e 	bgeu	r3,r2,808f20 <_fpadd_parts+0x248>
  808d1c:	00c00104 	movi	r3,4
  808d20:	20c0dc26 	beq	r4,r3,809094 <_fpadd_parts+0x3bc>
  808d24:	10c07e26 	beq	r2,r3,808f20 <_fpadd_parts+0x248>
  808d28:	00c00084 	movi	r3,2
  808d2c:	10c06726 	beq	r2,r3,808ecc <_fpadd_parts+0x1f4>
  808d30:	20c07b26 	beq	r4,r3,808f20 <_fpadd_parts+0x248>
  808d34:	9dc00217 	ldw	r23,8(r19)
  808d38:	28c00217 	ldw	r3,8(r5)
  808d3c:	9c400317 	ldw	r17,12(r19)
  808d40:	2bc00317 	ldw	r15,12(r5)
  808d44:	b8cdc83a 	sub	r6,r23,r3
  808d48:	9c800417 	ldw	r18,16(r19)
  808d4c:	2c000417 	ldw	r16,16(r5)
  808d50:	3009883a 	mov	r4,r6
  808d54:	30009716 	blt	r6,zero,808fb4 <_fpadd_parts+0x2dc>
  808d58:	00800fc4 	movi	r2,63
  808d5c:	11806b16 	blt	r2,r6,808f0c <_fpadd_parts+0x234>
  808d60:	0100a40e 	bge	zero,r4,808ff4 <_fpadd_parts+0x31c>
  808d64:	35bff804 	addi	r22,r6,-32
  808d68:	b000bc16 	blt	r22,zero,80905c <_fpadd_parts+0x384>
  808d6c:	8596d83a 	srl	r11,r16,r22
  808d70:	0019883a 	mov	r12,zero
  808d74:	0013883a 	mov	r9,zero
  808d78:	01000044 	movi	r4,1
  808d7c:	0015883a 	mov	r10,zero
  808d80:	b000be16 	blt	r22,zero,80907c <_fpadd_parts+0x3a4>
  808d84:	2590983a 	sll	r8,r4,r22
  808d88:	000f883a 	mov	r7,zero
  808d8c:	00bfffc4 	movi	r2,-1
  808d90:	3889883a 	add	r4,r7,r2
  808d94:	408b883a 	add	r5,r8,r2
  808d98:	21cd803a 	cmpltu	r6,r4,r7
  808d9c:	314b883a 	add	r5,r6,r5
  808da0:	7904703a 	and	r2,r15,r4
  808da4:	8146703a 	and	r3,r16,r5
  808da8:	10c4b03a 	or	r2,r2,r3
  808dac:	10000226 	beq	r2,zero,808db8 <_fpadd_parts+0xe0>
  808db0:	02400044 	movi	r9,1
  808db4:	0015883a 	mov	r10,zero
  808db8:	5a5eb03a 	or	r15,r11,r9
  808dbc:	62a0b03a 	or	r16,r12,r10
  808dc0:	99400117 	ldw	r5,4(r19)
  808dc4:	a8800117 	ldw	r2,4(r21)
  808dc8:	28806e26 	beq	r5,r2,808f84 <_fpadd_parts+0x2ac>
  808dcc:	28006626 	beq	r5,zero,808f68 <_fpadd_parts+0x290>
  808dd0:	7c45c83a 	sub	r2,r15,r17
  808dd4:	7889803a 	cmpltu	r4,r15,r2
  808dd8:	8487c83a 	sub	r3,r16,r18
  808ddc:	1909c83a 	sub	r4,r3,r4
  808de0:	100d883a 	mov	r6,r2
  808de4:	200f883a 	mov	r7,r4
  808de8:	38007716 	blt	r7,zero,808fc8 <_fpadd_parts+0x2f0>
  808dec:	a5c00215 	stw	r23,8(r20)
  808df0:	a1c00415 	stw	r7,16(r20)
  808df4:	a0000115 	stw	zero,4(r20)
  808df8:	a1800315 	stw	r6,12(r20)
  808dfc:	a2000317 	ldw	r8,12(r20)
  808e00:	a2400417 	ldw	r9,16(r20)
  808e04:	00bfffc4 	movi	r2,-1
  808e08:	408b883a 	add	r5,r8,r2
  808e0c:	2a09803a 	cmpltu	r4,r5,r8
  808e10:	488d883a 	add	r6,r9,r2
  808e14:	01c40034 	movhi	r7,4096
  808e18:	39ffffc4 	addi	r7,r7,-1
  808e1c:	218d883a 	add	r6,r4,r6
  808e20:	39801736 	bltu	r7,r6,808e80 <_fpadd_parts+0x1a8>
  808e24:	31c06526 	beq	r6,r7,808fbc <_fpadd_parts+0x2e4>
  808e28:	a3000217 	ldw	r12,8(r20)
  808e2c:	4209883a 	add	r4,r8,r8
  808e30:	00bfffc4 	movi	r2,-1
  808e34:	220f803a 	cmpltu	r7,r4,r8
  808e38:	4a4b883a 	add	r5,r9,r9
  808e3c:	394f883a 	add	r7,r7,r5
  808e40:	2095883a 	add	r10,r4,r2
  808e44:	3897883a 	add	r11,r7,r2
  808e48:	510d803a 	cmpltu	r6,r10,r4
  808e4c:	6099883a 	add	r12,r12,r2
  808e50:	32d7883a 	add	r11,r6,r11
  808e54:	00840034 	movhi	r2,4096
  808e58:	10bfffc4 	addi	r2,r2,-1
  808e5c:	2011883a 	mov	r8,r4
  808e60:	3813883a 	mov	r9,r7
  808e64:	a1000315 	stw	r4,12(r20)
  808e68:	a1c00415 	stw	r7,16(r20)
  808e6c:	a3000215 	stw	r12,8(r20)
  808e70:	12c00336 	bltu	r2,r11,808e80 <_fpadd_parts+0x1a8>
  808e74:	58bfed1e 	bne	r11,r2,808e2c <_fpadd_parts+0x154>
  808e78:	00bfff84 	movi	r2,-2
  808e7c:	12bfeb2e 	bgeu	r2,r10,808e2c <_fpadd_parts+0x154>
  808e80:	a2800417 	ldw	r10,16(r20)
  808e84:	008000c4 	movi	r2,3
  808e88:	00c80034 	movhi	r3,8192
  808e8c:	18ffffc4 	addi	r3,r3,-1
  808e90:	a2400317 	ldw	r9,12(r20)
  808e94:	a0800015 	stw	r2,0(r20)
  808e98:	1a802336 	bltu	r3,r10,808f28 <_fpadd_parts+0x250>
  808e9c:	a027883a 	mov	r19,r20
  808ea0:	9805883a 	mov	r2,r19
  808ea4:	ddc00717 	ldw	r23,28(sp)
  808ea8:	dd800617 	ldw	r22,24(sp)
  808eac:	dd400517 	ldw	r21,20(sp)
  808eb0:	dd000417 	ldw	r20,16(sp)
  808eb4:	dcc00317 	ldw	r19,12(sp)
  808eb8:	dc800217 	ldw	r18,8(sp)
  808ebc:	dc400117 	ldw	r17,4(sp)
  808ec0:	dc000017 	ldw	r16,0(sp)
  808ec4:	dec00804 	addi	sp,sp,32
  808ec8:	f800283a 	ret
  808ecc:	20fff41e 	bne	r4,r3,808ea0 <_fpadd_parts+0x1c8>
  808ed0:	31000015 	stw	r4,0(r6)
  808ed4:	98800117 	ldw	r2,4(r19)
  808ed8:	30800115 	stw	r2,4(r6)
  808edc:	98c00217 	ldw	r3,8(r19)
  808ee0:	30c00215 	stw	r3,8(r6)
  808ee4:	98800317 	ldw	r2,12(r19)
  808ee8:	30800315 	stw	r2,12(r6)
  808eec:	98c00417 	ldw	r3,16(r19)
  808ef0:	30c00415 	stw	r3,16(r6)
  808ef4:	98800117 	ldw	r2,4(r19)
  808ef8:	28c00117 	ldw	r3,4(r5)
  808efc:	3027883a 	mov	r19,r6
  808f00:	10c4703a 	and	r2,r2,r3
  808f04:	30800115 	stw	r2,4(r6)
  808f08:	003fe506 	br	808ea0 <_fpadd_parts+0x1c8>
  808f0c:	1dc02616 	blt	r3,r23,808fa8 <_fpadd_parts+0x2d0>
  808f10:	0023883a 	mov	r17,zero
  808f14:	182f883a 	mov	r23,r3
  808f18:	0025883a 	mov	r18,zero
  808f1c:	003fa806 	br	808dc0 <_fpadd_parts+0xe8>
  808f20:	a827883a 	mov	r19,r21
  808f24:	003fde06 	br	808ea0 <_fpadd_parts+0x1c8>
  808f28:	01800044 	movi	r6,1
  808f2c:	500497fa 	slli	r2,r10,31
  808f30:	4808d07a 	srli	r4,r9,1
  808f34:	518ad83a 	srl	r5,r10,r6
  808f38:	a2000217 	ldw	r8,8(r20)
  808f3c:	1108b03a 	or	r4,r2,r4
  808f40:	0007883a 	mov	r3,zero
  808f44:	4984703a 	and	r2,r9,r6
  808f48:	208cb03a 	or	r6,r4,r2
  808f4c:	28ceb03a 	or	r7,r5,r3
  808f50:	42000044 	addi	r8,r8,1
  808f54:	a027883a 	mov	r19,r20
  808f58:	a1c00415 	stw	r7,16(r20)
  808f5c:	a2000215 	stw	r8,8(r20)
  808f60:	a1800315 	stw	r6,12(r20)
  808f64:	003fce06 	br	808ea0 <_fpadd_parts+0x1c8>
  808f68:	8bc5c83a 	sub	r2,r17,r15
  808f6c:	8889803a 	cmpltu	r4,r17,r2
  808f70:	9407c83a 	sub	r3,r18,r16
  808f74:	1909c83a 	sub	r4,r3,r4
  808f78:	100d883a 	mov	r6,r2
  808f7c:	200f883a 	mov	r7,r4
  808f80:	003f9906 	br	808de8 <_fpadd_parts+0x110>
  808f84:	7c45883a 	add	r2,r15,r17
  808f88:	13c9803a 	cmpltu	r4,r2,r15
  808f8c:	8487883a 	add	r3,r16,r18
  808f90:	20c9883a 	add	r4,r4,r3
  808f94:	a1400115 	stw	r5,4(r20)
  808f98:	a5c00215 	stw	r23,8(r20)
  808f9c:	a0800315 	stw	r2,12(r20)
  808fa0:	a1000415 	stw	r4,16(r20)
  808fa4:	003fb606 	br	808e80 <_fpadd_parts+0x1a8>
  808fa8:	001f883a 	mov	r15,zero
  808fac:	0021883a 	mov	r16,zero
  808fb0:	003f8306 	br	808dc0 <_fpadd_parts+0xe8>
  808fb4:	018dc83a 	sub	r6,zero,r6
  808fb8:	003f6706 	br	808d58 <_fpadd_parts+0x80>
  808fbc:	00bfff84 	movi	r2,-2
  808fc0:	117faf36 	bltu	r2,r5,808e80 <_fpadd_parts+0x1a8>
  808fc4:	003f9806 	br	808e28 <_fpadd_parts+0x150>
  808fc8:	0005883a 	mov	r2,zero
  808fcc:	1189c83a 	sub	r4,r2,r6
  808fd0:	1105803a 	cmpltu	r2,r2,r4
  808fd4:	01cbc83a 	sub	r5,zero,r7
  808fd8:	2885c83a 	sub	r2,r5,r2
  808fdc:	01800044 	movi	r6,1
  808fe0:	a1800115 	stw	r6,4(r20)
  808fe4:	a5c00215 	stw	r23,8(r20)
  808fe8:	a1000315 	stw	r4,12(r20)
  808fec:	a0800415 	stw	r2,16(r20)
  808ff0:	003f8206 	br	808dfc <_fpadd_parts+0x124>
  808ff4:	203f7226 	beq	r4,zero,808dc0 <_fpadd_parts+0xe8>
  808ff8:	35bff804 	addi	r22,r6,-32
  808ffc:	b9af883a 	add	r23,r23,r6
  809000:	b0003116 	blt	r22,zero,8090c8 <_fpadd_parts+0x3f0>
  809004:	959ad83a 	srl	r13,r18,r22
  809008:	001d883a 	mov	r14,zero
  80900c:	000f883a 	mov	r7,zero
  809010:	01000044 	movi	r4,1
  809014:	0011883a 	mov	r8,zero
  809018:	b0002516 	blt	r22,zero,8090b0 <_fpadd_parts+0x3d8>
  80901c:	2594983a 	sll	r10,r4,r22
  809020:	0013883a 	mov	r9,zero
  809024:	00bfffc4 	movi	r2,-1
  809028:	4889883a 	add	r4,r9,r2
  80902c:	508b883a 	add	r5,r10,r2
  809030:	224d803a 	cmpltu	r6,r4,r9
  809034:	314b883a 	add	r5,r6,r5
  809038:	8904703a 	and	r2,r17,r4
  80903c:	9146703a 	and	r3,r18,r5
  809040:	10c4b03a 	or	r2,r2,r3
  809044:	10000226 	beq	r2,zero,809050 <_fpadd_parts+0x378>
  809048:	01c00044 	movi	r7,1
  80904c:	0011883a 	mov	r8,zero
  809050:	69e2b03a 	or	r17,r13,r7
  809054:	7224b03a 	or	r18,r14,r8
  809058:	003f5906 	br	808dc0 <_fpadd_parts+0xe8>
  80905c:	8407883a 	add	r3,r16,r16
  809060:	008007c4 	movi	r2,31
  809064:	1185c83a 	sub	r2,r2,r6
  809068:	1886983a 	sll	r3,r3,r2
  80906c:	7996d83a 	srl	r11,r15,r6
  809070:	8198d83a 	srl	r12,r16,r6
  809074:	1ad6b03a 	or	r11,r3,r11
  809078:	003f3e06 	br	808d74 <_fpadd_parts+0x9c>
  80907c:	2006d07a 	srli	r3,r4,1
  809080:	008007c4 	movi	r2,31
  809084:	1185c83a 	sub	r2,r2,r6
  809088:	1890d83a 	srl	r8,r3,r2
  80908c:	218e983a 	sll	r7,r4,r6
  809090:	003f3e06 	br	808d8c <_fpadd_parts+0xb4>
  809094:	113f821e 	bne	r2,r4,808ea0 <_fpadd_parts+0x1c8>
  809098:	28c00117 	ldw	r3,4(r5)
  80909c:	98800117 	ldw	r2,4(r19)
  8090a0:	10ff7f26 	beq	r2,r3,808ea0 <_fpadd_parts+0x1c8>
  8090a4:	04c02074 	movhi	r19,129
  8090a8:	9cf3bc04 	addi	r19,r19,-12560
  8090ac:	003f7c06 	br	808ea0 <_fpadd_parts+0x1c8>
  8090b0:	2006d07a 	srli	r3,r4,1
  8090b4:	008007c4 	movi	r2,31
  8090b8:	1185c83a 	sub	r2,r2,r6
  8090bc:	1894d83a 	srl	r10,r3,r2
  8090c0:	2192983a 	sll	r9,r4,r6
  8090c4:	003fd706 	br	809024 <_fpadd_parts+0x34c>
  8090c8:	9487883a 	add	r3,r18,r18
  8090cc:	008007c4 	movi	r2,31
  8090d0:	1185c83a 	sub	r2,r2,r6
  8090d4:	1886983a 	sll	r3,r3,r2
  8090d8:	899ad83a 	srl	r13,r17,r6
  8090dc:	919cd83a 	srl	r14,r18,r6
  8090e0:	1b5ab03a 	or	r13,r3,r13
  8090e4:	003fc906 	br	80900c <_fpadd_parts+0x334>

008090e8 <__subdf3>:
  8090e8:	deffea04 	addi	sp,sp,-88
  8090ec:	dcc01415 	stw	r19,80(sp)
  8090f0:	dcc00404 	addi	r19,sp,16
  8090f4:	2011883a 	mov	r8,r4
  8090f8:	2813883a 	mov	r9,r5
  8090fc:	dc401315 	stw	r17,76(sp)
  809100:	d809883a 	mov	r4,sp
  809104:	980b883a 	mov	r5,r19
  809108:	dc400904 	addi	r17,sp,36
  80910c:	dfc01515 	stw	ra,84(sp)
  809110:	da400115 	stw	r9,4(sp)
  809114:	d9c00315 	stw	r7,12(sp)
  809118:	da000015 	stw	r8,0(sp)
  80911c:	d9800215 	stw	r6,8(sp)
  809120:	0809fd00 	call	809fd0 <__unpack_d>
  809124:	d9000204 	addi	r4,sp,8
  809128:	880b883a 	mov	r5,r17
  80912c:	0809fd00 	call	809fd0 <__unpack_d>
  809130:	d8800a17 	ldw	r2,40(sp)
  809134:	880b883a 	mov	r5,r17
  809138:	9809883a 	mov	r4,r19
  80913c:	d9800e04 	addi	r6,sp,56
  809140:	1080005c 	xori	r2,r2,1
  809144:	d8800a15 	stw	r2,40(sp)
  809148:	0808cd80 	call	808cd8 <_fpadd_parts>
  80914c:	1009883a 	mov	r4,r2
  809150:	08008880 	call	800888 <__pack_d>
  809154:	dfc01517 	ldw	ra,84(sp)
  809158:	dcc01417 	ldw	r19,80(sp)
  80915c:	dc401317 	ldw	r17,76(sp)
  809160:	dec01604 	addi	sp,sp,88
  809164:	f800283a 	ret

00809168 <__adddf3>:
  809168:	deffea04 	addi	sp,sp,-88
  80916c:	dcc01415 	stw	r19,80(sp)
  809170:	dcc00404 	addi	r19,sp,16
  809174:	2011883a 	mov	r8,r4
  809178:	2813883a 	mov	r9,r5
  80917c:	dc401315 	stw	r17,76(sp)
  809180:	d809883a 	mov	r4,sp
  809184:	980b883a 	mov	r5,r19
  809188:	dc400904 	addi	r17,sp,36
  80918c:	dfc01515 	stw	ra,84(sp)
  809190:	da400115 	stw	r9,4(sp)
  809194:	d9c00315 	stw	r7,12(sp)
  809198:	da000015 	stw	r8,0(sp)
  80919c:	d9800215 	stw	r6,8(sp)
  8091a0:	0809fd00 	call	809fd0 <__unpack_d>
  8091a4:	d9000204 	addi	r4,sp,8
  8091a8:	880b883a 	mov	r5,r17
  8091ac:	0809fd00 	call	809fd0 <__unpack_d>
  8091b0:	d9800e04 	addi	r6,sp,56
  8091b4:	9809883a 	mov	r4,r19
  8091b8:	880b883a 	mov	r5,r17
  8091bc:	0808cd80 	call	808cd8 <_fpadd_parts>
  8091c0:	1009883a 	mov	r4,r2
  8091c4:	08008880 	call	800888 <__pack_d>
  8091c8:	dfc01517 	ldw	ra,84(sp)
  8091cc:	dcc01417 	ldw	r19,80(sp)
  8091d0:	dc401317 	ldw	r17,76(sp)
  8091d4:	dec01604 	addi	sp,sp,88
  8091d8:	f800283a 	ret

008091dc <__muldf3>:
  8091dc:	deffe004 	addi	sp,sp,-128
  8091e0:	dc401815 	stw	r17,96(sp)
  8091e4:	dc400404 	addi	r17,sp,16
  8091e8:	2011883a 	mov	r8,r4
  8091ec:	2813883a 	mov	r9,r5
  8091f0:	dc001715 	stw	r16,92(sp)
  8091f4:	d809883a 	mov	r4,sp
  8091f8:	880b883a 	mov	r5,r17
  8091fc:	dc000904 	addi	r16,sp,36
  809200:	dfc01f15 	stw	ra,124(sp)
  809204:	da400115 	stw	r9,4(sp)
  809208:	d9c00315 	stw	r7,12(sp)
  80920c:	da000015 	stw	r8,0(sp)
  809210:	d9800215 	stw	r6,8(sp)
  809214:	ddc01e15 	stw	r23,120(sp)
  809218:	dd801d15 	stw	r22,116(sp)
  80921c:	dd401c15 	stw	r21,112(sp)
  809220:	dd001b15 	stw	r20,108(sp)
  809224:	dcc01a15 	stw	r19,104(sp)
  809228:	dc801915 	stw	r18,100(sp)
  80922c:	0809fd00 	call	809fd0 <__unpack_d>
  809230:	d9000204 	addi	r4,sp,8
  809234:	800b883a 	mov	r5,r16
  809238:	0809fd00 	call	809fd0 <__unpack_d>
  80923c:	d9000417 	ldw	r4,16(sp)
  809240:	00800044 	movi	r2,1
  809244:	1100102e 	bgeu	r2,r4,809288 <__muldf3+0xac>
  809248:	d8c00917 	ldw	r3,36(sp)
  80924c:	10c0062e 	bgeu	r2,r3,809268 <__muldf3+0x8c>
  809250:	00800104 	movi	r2,4
  809254:	20800a26 	beq	r4,r2,809280 <__muldf3+0xa4>
  809258:	1880cc26 	beq	r3,r2,80958c <__muldf3+0x3b0>
  80925c:	00800084 	movi	r2,2
  809260:	20800926 	beq	r4,r2,809288 <__muldf3+0xac>
  809264:	1880191e 	bne	r3,r2,8092cc <__muldf3+0xf0>
  809268:	d8c00a17 	ldw	r3,40(sp)
  80926c:	d8800517 	ldw	r2,20(sp)
  809270:	8009883a 	mov	r4,r16
  809274:	10c4c03a 	cmpne	r2,r2,r3
  809278:	d8800a15 	stw	r2,40(sp)
  80927c:	00000706 	br	80929c <__muldf3+0xc0>
  809280:	00800084 	movi	r2,2
  809284:	1880c326 	beq	r3,r2,809594 <__muldf3+0x3b8>
  809288:	d8800517 	ldw	r2,20(sp)
  80928c:	d8c00a17 	ldw	r3,40(sp)
  809290:	8809883a 	mov	r4,r17
  809294:	10c4c03a 	cmpne	r2,r2,r3
  809298:	d8800515 	stw	r2,20(sp)
  80929c:	08008880 	call	800888 <__pack_d>
  8092a0:	dfc01f17 	ldw	ra,124(sp)
  8092a4:	ddc01e17 	ldw	r23,120(sp)
  8092a8:	dd801d17 	ldw	r22,116(sp)
  8092ac:	dd401c17 	ldw	r21,112(sp)
  8092b0:	dd001b17 	ldw	r20,108(sp)
  8092b4:	dcc01a17 	ldw	r19,104(sp)
  8092b8:	dc801917 	ldw	r18,100(sp)
  8092bc:	dc401817 	ldw	r17,96(sp)
  8092c0:	dc001717 	ldw	r16,92(sp)
  8092c4:	dec02004 	addi	sp,sp,128
  8092c8:	f800283a 	ret
  8092cc:	dd800717 	ldw	r22,28(sp)
  8092d0:	dc800c17 	ldw	r18,48(sp)
  8092d4:	002b883a 	mov	r21,zero
  8092d8:	0023883a 	mov	r17,zero
  8092dc:	a80b883a 	mov	r5,r21
  8092e0:	b00d883a 	mov	r6,r22
  8092e4:	880f883a 	mov	r7,r17
  8092e8:	ddc00817 	ldw	r23,32(sp)
  8092ec:	dcc00d17 	ldw	r19,52(sp)
  8092f0:	9009883a 	mov	r4,r18
  8092f4:	080053c0 	call	80053c <__muldi3>
  8092f8:	001b883a 	mov	r13,zero
  8092fc:	680f883a 	mov	r7,r13
  809300:	b009883a 	mov	r4,r22
  809304:	000b883a 	mov	r5,zero
  809308:	980d883a 	mov	r6,r19
  80930c:	b82d883a 	mov	r22,r23
  809310:	002f883a 	mov	r23,zero
  809314:	db401615 	stw	r13,88(sp)
  809318:	d8801315 	stw	r2,76(sp)
  80931c:	d8c01415 	stw	r3,80(sp)
  809320:	dcc01515 	stw	r19,84(sp)
  809324:	080053c0 	call	80053c <__muldi3>
  809328:	b00d883a 	mov	r6,r22
  80932c:	000b883a 	mov	r5,zero
  809330:	9009883a 	mov	r4,r18
  809334:	b80f883a 	mov	r7,r23
  809338:	1021883a 	mov	r16,r2
  80933c:	1823883a 	mov	r17,r3
  809340:	080053c0 	call	80053c <__muldi3>
  809344:	8085883a 	add	r2,r16,r2
  809348:	140d803a 	cmpltu	r6,r2,r16
  80934c:	88c7883a 	add	r3,r17,r3
  809350:	30cd883a 	add	r6,r6,r3
  809354:	1029883a 	mov	r20,r2
  809358:	302b883a 	mov	r21,r6
  80935c:	da801317 	ldw	r10,76(sp)
  809360:	dac01417 	ldw	r11,80(sp)
  809364:	db001517 	ldw	r12,84(sp)
  809368:	db401617 	ldw	r13,88(sp)
  80936c:	3440612e 	bgeu	r6,r17,8094f4 <__muldf3+0x318>
  809370:	0009883a 	mov	r4,zero
  809374:	5105883a 	add	r2,r10,r4
  809378:	128d803a 	cmpltu	r6,r2,r10
  80937c:	5d07883a 	add	r3,r11,r20
  809380:	30cd883a 	add	r6,r6,r3
  809384:	0021883a 	mov	r16,zero
  809388:	04400044 	movi	r17,1
  80938c:	1025883a 	mov	r18,r2
  809390:	3027883a 	mov	r19,r6
  809394:	32c06236 	bltu	r6,r11,809520 <__muldf3+0x344>
  809398:	59807a26 	beq	r11,r6,809584 <__muldf3+0x3a8>
  80939c:	680b883a 	mov	r5,r13
  8093a0:	b80f883a 	mov	r7,r23
  8093a4:	6009883a 	mov	r4,r12
  8093a8:	b00d883a 	mov	r6,r22
  8093ac:	080053c0 	call	80053c <__muldi3>
  8093b0:	1009883a 	mov	r4,r2
  8093b4:	000f883a 	mov	r7,zero
  8093b8:	1545883a 	add	r2,r2,r21
  8093bc:	1111803a 	cmpltu	r8,r2,r4
  8093c0:	19c7883a 	add	r3,r3,r7
  8093c4:	40c7883a 	add	r3,r8,r3
  8093c8:	88cb883a 	add	r5,r17,r3
  8093cc:	d8c00617 	ldw	r3,24(sp)
  8093d0:	8089883a 	add	r4,r16,r2
  8093d4:	d8800b17 	ldw	r2,44(sp)
  8093d8:	18c00104 	addi	r3,r3,4
  8093dc:	240d803a 	cmpltu	r6,r4,r16
  8093e0:	10c7883a 	add	r3,r2,r3
  8093e4:	2013883a 	mov	r9,r4
  8093e8:	d8800a17 	ldw	r2,40(sp)
  8093ec:	d9000517 	ldw	r4,20(sp)
  8093f0:	314d883a 	add	r6,r6,r5
  8093f4:	3015883a 	mov	r10,r6
  8093f8:	2088c03a 	cmpne	r4,r4,r2
  8093fc:	00880034 	movhi	r2,8192
  809400:	10bfffc4 	addi	r2,r2,-1
  809404:	d9000f15 	stw	r4,60(sp)
  809408:	d8c01015 	stw	r3,64(sp)
  80940c:	1180162e 	bgeu	r2,r6,809468 <__muldf3+0x28c>
  809410:	1811883a 	mov	r8,r3
  809414:	101f883a 	mov	r15,r2
  809418:	980497fa 	slli	r2,r19,31
  80941c:	9016d07a 	srli	r11,r18,1
  809420:	500697fa 	slli	r3,r10,31
  809424:	480cd07a 	srli	r6,r9,1
  809428:	500ed07a 	srli	r7,r10,1
  80942c:	12d6b03a 	or	r11,r2,r11
  809430:	00800044 	movi	r2,1
  809434:	198cb03a 	or	r6,r3,r6
  809438:	4888703a 	and	r4,r9,r2
  80943c:	9818d07a 	srli	r12,r19,1
  809440:	001b883a 	mov	r13,zero
  809444:	03a00034 	movhi	r14,32768
  809448:	3013883a 	mov	r9,r6
  80944c:	3815883a 	mov	r10,r7
  809450:	4091883a 	add	r8,r8,r2
  809454:	20000226 	beq	r4,zero,809460 <__muldf3+0x284>
  809458:	5b64b03a 	or	r18,r11,r13
  80945c:	63a6b03a 	or	r19,r12,r14
  809460:	7abfed36 	bltu	r15,r10,809418 <__muldf3+0x23c>
  809464:	da001015 	stw	r8,64(sp)
  809468:	00840034 	movhi	r2,4096
  80946c:	10bfffc4 	addi	r2,r2,-1
  809470:	12801436 	bltu	r2,r10,8094c4 <__muldf3+0x2e8>
  809474:	da001017 	ldw	r8,64(sp)
  809478:	101f883a 	mov	r15,r2
  80947c:	4a45883a 	add	r2,r9,r9
  809480:	124d803a 	cmpltu	r6,r2,r9
  809484:	5287883a 	add	r3,r10,r10
  809488:	9497883a 	add	r11,r18,r18
  80948c:	5c8f803a 	cmpltu	r7,r11,r18
  809490:	9cd9883a 	add	r12,r19,r19
  809494:	01000044 	movi	r4,1
  809498:	30cd883a 	add	r6,r6,r3
  80949c:	3b0f883a 	add	r7,r7,r12
  8094a0:	423fffc4 	addi	r8,r8,-1
  8094a4:	1013883a 	mov	r9,r2
  8094a8:	3015883a 	mov	r10,r6
  8094ac:	111ab03a 	or	r13,r2,r4
  8094b0:	98003016 	blt	r19,zero,809574 <__muldf3+0x398>
  8094b4:	5825883a 	mov	r18,r11
  8094b8:	3827883a 	mov	r19,r7
  8094bc:	7abfef2e 	bgeu	r15,r10,80947c <__muldf3+0x2a0>
  8094c0:	da001015 	stw	r8,64(sp)
  8094c4:	00803fc4 	movi	r2,255
  8094c8:	488e703a 	and	r7,r9,r2
  8094cc:	00802004 	movi	r2,128
  8094d0:	0007883a 	mov	r3,zero
  8094d4:	0011883a 	mov	r8,zero
  8094d8:	38801826 	beq	r7,r2,80953c <__muldf3+0x360>
  8094dc:	008000c4 	movi	r2,3
  8094e0:	d9000e04 	addi	r4,sp,56
  8094e4:	da801215 	stw	r10,72(sp)
  8094e8:	d8800e15 	stw	r2,56(sp)
  8094ec:	da401115 	stw	r9,68(sp)
  8094f0:	003f6a06 	br	80929c <__muldf3+0xc0>
  8094f4:	89802126 	beq	r17,r6,80957c <__muldf3+0x3a0>
  8094f8:	0009883a 	mov	r4,zero
  8094fc:	5105883a 	add	r2,r10,r4
  809500:	128d803a 	cmpltu	r6,r2,r10
  809504:	5d07883a 	add	r3,r11,r20
  809508:	30cd883a 	add	r6,r6,r3
  80950c:	0021883a 	mov	r16,zero
  809510:	0023883a 	mov	r17,zero
  809514:	1025883a 	mov	r18,r2
  809518:	3027883a 	mov	r19,r6
  80951c:	32ff9e2e 	bgeu	r6,r11,809398 <__muldf3+0x1bc>
  809520:	00800044 	movi	r2,1
  809524:	8089883a 	add	r4,r16,r2
  809528:	240d803a 	cmpltu	r6,r4,r16
  80952c:	344d883a 	add	r6,r6,r17
  809530:	2021883a 	mov	r16,r4
  809534:	3023883a 	mov	r17,r6
  809538:	003f9806 	br	80939c <__muldf3+0x1c0>
  80953c:	403fe71e 	bne	r8,zero,8094dc <__muldf3+0x300>
  809540:	01004004 	movi	r4,256
  809544:	4904703a 	and	r2,r9,r4
  809548:	10c4b03a 	or	r2,r2,r3
  80954c:	103fe31e 	bne	r2,zero,8094dc <__muldf3+0x300>
  809550:	94c4b03a 	or	r2,r18,r19
  809554:	103fe126 	beq	r2,zero,8094dc <__muldf3+0x300>
  809558:	49c5883a 	add	r2,r9,r7
  80955c:	1251803a 	cmpltu	r8,r2,r9
  809560:	4291883a 	add	r8,r8,r10
  809564:	013fc004 	movi	r4,-256
  809568:	1112703a 	and	r9,r2,r4
  80956c:	4015883a 	mov	r10,r8
  809570:	003fda06 	br	8094dc <__muldf3+0x300>
  809574:	6813883a 	mov	r9,r13
  809578:	003fce06 	br	8094b4 <__muldf3+0x2d8>
  80957c:	143f7c36 	bltu	r2,r16,809370 <__muldf3+0x194>
  809580:	003fdd06 	br	8094f8 <__muldf3+0x31c>
  809584:	12bf852e 	bgeu	r2,r10,80939c <__muldf3+0x1c0>
  809588:	003fe506 	br	809520 <__muldf3+0x344>
  80958c:	00800084 	movi	r2,2
  809590:	20bf351e 	bne	r4,r2,809268 <__muldf3+0x8c>
  809594:	01002074 	movhi	r4,129
  809598:	2133bc04 	addi	r4,r4,-12560
  80959c:	003f3f06 	br	80929c <__muldf3+0xc0>

008095a0 <__divdf3>:
  8095a0:	deffed04 	addi	sp,sp,-76
  8095a4:	dcc01115 	stw	r19,68(sp)
  8095a8:	dcc00404 	addi	r19,sp,16
  8095ac:	2011883a 	mov	r8,r4
  8095b0:	2813883a 	mov	r9,r5
  8095b4:	dc000e15 	stw	r16,56(sp)
  8095b8:	d809883a 	mov	r4,sp
  8095bc:	980b883a 	mov	r5,r19
  8095c0:	dc000904 	addi	r16,sp,36
  8095c4:	dfc01215 	stw	ra,72(sp)
  8095c8:	da400115 	stw	r9,4(sp)
  8095cc:	d9c00315 	stw	r7,12(sp)
  8095d0:	da000015 	stw	r8,0(sp)
  8095d4:	d9800215 	stw	r6,8(sp)
  8095d8:	dc801015 	stw	r18,64(sp)
  8095dc:	dc400f15 	stw	r17,60(sp)
  8095e0:	0809fd00 	call	809fd0 <__unpack_d>
  8095e4:	d9000204 	addi	r4,sp,8
  8095e8:	800b883a 	mov	r5,r16
  8095ec:	0809fd00 	call	809fd0 <__unpack_d>
  8095f0:	d9000417 	ldw	r4,16(sp)
  8095f4:	00800044 	movi	r2,1
  8095f8:	11000b2e 	bgeu	r2,r4,809628 <__divdf3+0x88>
  8095fc:	d9400917 	ldw	r5,36(sp)
  809600:	1140762e 	bgeu	r2,r5,8097dc <__divdf3+0x23c>
  809604:	d8800517 	ldw	r2,20(sp)
  809608:	d8c00a17 	ldw	r3,40(sp)
  80960c:	01800104 	movi	r6,4
  809610:	10c4f03a 	xor	r2,r2,r3
  809614:	d8800515 	stw	r2,20(sp)
  809618:	21800226 	beq	r4,r6,809624 <__divdf3+0x84>
  80961c:	00800084 	movi	r2,2
  809620:	2080141e 	bne	r4,r2,809674 <__divdf3+0xd4>
  809624:	29000926 	beq	r5,r4,80964c <__divdf3+0xac>
  809628:	9809883a 	mov	r4,r19
  80962c:	08008880 	call	800888 <__pack_d>
  809630:	dfc01217 	ldw	ra,72(sp)
  809634:	dcc01117 	ldw	r19,68(sp)
  809638:	dc801017 	ldw	r18,64(sp)
  80963c:	dc400f17 	ldw	r17,60(sp)
  809640:	dc000e17 	ldw	r16,56(sp)
  809644:	dec01304 	addi	sp,sp,76
  809648:	f800283a 	ret
  80964c:	01002074 	movhi	r4,129
  809650:	2133bc04 	addi	r4,r4,-12560
  809654:	08008880 	call	800888 <__pack_d>
  809658:	dfc01217 	ldw	ra,72(sp)
  80965c:	dcc01117 	ldw	r19,68(sp)
  809660:	dc801017 	ldw	r18,64(sp)
  809664:	dc400f17 	ldw	r17,60(sp)
  809668:	dc000e17 	ldw	r16,56(sp)
  80966c:	dec01304 	addi	sp,sp,76
  809670:	f800283a 	ret
  809674:	29805b26 	beq	r5,r6,8097e4 <__divdf3+0x244>
  809678:	28802d26 	beq	r5,r2,809730 <__divdf3+0x190>
  80967c:	d8c00617 	ldw	r3,24(sp)
  809680:	d8800b17 	ldw	r2,44(sp)
  809684:	d9c00817 	ldw	r7,32(sp)
  809688:	dc400d17 	ldw	r17,52(sp)
  80968c:	188bc83a 	sub	r5,r3,r2
  809690:	d9800717 	ldw	r6,28(sp)
  809694:	dc000c17 	ldw	r16,48(sp)
  809698:	d9400615 	stw	r5,24(sp)
  80969c:	3c403836 	bltu	r7,r17,809780 <__divdf3+0x1e0>
  8096a0:	89c03626 	beq	r17,r7,80977c <__divdf3+0x1dc>
  8096a4:	0015883a 	mov	r10,zero
  8096a8:	001d883a 	mov	r14,zero
  8096ac:	02c40034 	movhi	r11,4096
  8096b0:	001f883a 	mov	r15,zero
  8096b4:	003f883a 	mov	ra,zero
  8096b8:	04800f44 	movi	r18,61
  8096bc:	00000f06 	br	8096fc <__divdf3+0x15c>
  8096c0:	601d883a 	mov	r14,r12
  8096c4:	681f883a 	mov	r15,r13
  8096c8:	400d883a 	mov	r6,r8
  8096cc:	100f883a 	mov	r7,r2
  8096d0:	3191883a 	add	r8,r6,r6
  8096d4:	5808d07a 	srli	r4,r11,1
  8096d8:	4185803a 	cmpltu	r2,r8,r6
  8096dc:	39d3883a 	add	r9,r7,r7
  8096e0:	28c6b03a 	or	r3,r5,r3
  8096e4:	1245883a 	add	r2,r2,r9
  8096e8:	1815883a 	mov	r10,r3
  8096ec:	2017883a 	mov	r11,r4
  8096f0:	400d883a 	mov	r6,r8
  8096f4:	100f883a 	mov	r7,r2
  8096f8:	fc801726 	beq	ra,r18,809758 <__divdf3+0x1b8>
  8096fc:	580a97fa 	slli	r5,r11,31
  809700:	5006d07a 	srli	r3,r10,1
  809704:	ffc00044 	addi	ra,ra,1
  809708:	3c7ff136 	bltu	r7,r17,8096d0 <__divdf3+0x130>
  80970c:	3411c83a 	sub	r8,r6,r16
  809710:	3205803a 	cmpltu	r2,r6,r8
  809714:	3c53c83a 	sub	r9,r7,r17
  809718:	7298b03a 	or	r12,r14,r10
  80971c:	7adab03a 	or	r13,r15,r11
  809720:	4885c83a 	sub	r2,r9,r2
  809724:	89ffe61e 	bne	r17,r7,8096c0 <__divdf3+0x120>
  809728:	343fe936 	bltu	r6,r16,8096d0 <__divdf3+0x130>
  80972c:	003fe406 	br	8096c0 <__divdf3+0x120>
  809730:	9809883a 	mov	r4,r19
  809734:	d9800415 	stw	r6,16(sp)
  809738:	08008880 	call	800888 <__pack_d>
  80973c:	dfc01217 	ldw	ra,72(sp)
  809740:	dcc01117 	ldw	r19,68(sp)
  809744:	dc801017 	ldw	r18,64(sp)
  809748:	dc400f17 	ldw	r17,60(sp)
  80974c:	dc000e17 	ldw	r16,56(sp)
  809750:	dec01304 	addi	sp,sp,76
  809754:	f800283a 	ret
  809758:	00803fc4 	movi	r2,255
  80975c:	7090703a 	and	r8,r14,r2
  809760:	00802004 	movi	r2,128
  809764:	0007883a 	mov	r3,zero
  809768:	0013883a 	mov	r9,zero
  80976c:	40800d26 	beq	r8,r2,8097a4 <__divdf3+0x204>
  809770:	dbc00815 	stw	r15,32(sp)
  809774:	db800715 	stw	r14,28(sp)
  809778:	003fab06 	br	809628 <__divdf3+0x88>
  80977c:	343fc92e 	bgeu	r6,r16,8096a4 <__divdf3+0x104>
  809780:	3185883a 	add	r2,r6,r6
  809784:	1189803a 	cmpltu	r4,r2,r6
  809788:	39c7883a 	add	r3,r7,r7
  80978c:	20c9883a 	add	r4,r4,r3
  809790:	297fffc4 	addi	r5,r5,-1
  809794:	100d883a 	mov	r6,r2
  809798:	200f883a 	mov	r7,r4
  80979c:	d9400615 	stw	r5,24(sp)
  8097a0:	003fc006 	br	8096a4 <__divdf3+0x104>
  8097a4:	483ff21e 	bne	r9,zero,809770 <__divdf3+0x1d0>
  8097a8:	01004004 	movi	r4,256
  8097ac:	7104703a 	and	r2,r14,r4
  8097b0:	10c4b03a 	or	r2,r2,r3
  8097b4:	103fee1e 	bne	r2,zero,809770 <__divdf3+0x1d0>
  8097b8:	31c4b03a 	or	r2,r6,r7
  8097bc:	103fec26 	beq	r2,zero,809770 <__divdf3+0x1d0>
  8097c0:	7205883a 	add	r2,r14,r8
  8097c4:	1391803a 	cmpltu	r8,r2,r14
  8097c8:	43d1883a 	add	r8,r8,r15
  8097cc:	013fc004 	movi	r4,-256
  8097d0:	111c703a 	and	r14,r2,r4
  8097d4:	401f883a 	mov	r15,r8
  8097d8:	003fe506 	br	809770 <__divdf3+0x1d0>
  8097dc:	8009883a 	mov	r4,r16
  8097e0:	003f9206 	br	80962c <__divdf3+0x8c>
  8097e4:	9809883a 	mov	r4,r19
  8097e8:	d8000715 	stw	zero,28(sp)
  8097ec:	d8000815 	stw	zero,32(sp)
  8097f0:	d8000615 	stw	zero,24(sp)
  8097f4:	003f8d06 	br	80962c <__divdf3+0x8c>

008097f8 <__eqdf2>:
  8097f8:	deffef04 	addi	sp,sp,-68
  8097fc:	dc400f15 	stw	r17,60(sp)
  809800:	dc400404 	addi	r17,sp,16
  809804:	2005883a 	mov	r2,r4
  809808:	2807883a 	mov	r3,r5
  80980c:	dc000e15 	stw	r16,56(sp)
  809810:	d809883a 	mov	r4,sp
  809814:	880b883a 	mov	r5,r17
  809818:	dc000904 	addi	r16,sp,36
  80981c:	d8c00115 	stw	r3,4(sp)
  809820:	d8800015 	stw	r2,0(sp)
  809824:	d9800215 	stw	r6,8(sp)
  809828:	dfc01015 	stw	ra,64(sp)
  80982c:	d9c00315 	stw	r7,12(sp)
  809830:	0809fd00 	call	809fd0 <__unpack_d>
  809834:	d9000204 	addi	r4,sp,8
  809838:	800b883a 	mov	r5,r16
  80983c:	0809fd00 	call	809fd0 <__unpack_d>
  809840:	d8800417 	ldw	r2,16(sp)
  809844:	00c00044 	movi	r3,1
  809848:	180d883a 	mov	r6,r3
  80984c:	1880062e 	bgeu	r3,r2,809868 <__eqdf2+0x70>
  809850:	d8800917 	ldw	r2,36(sp)
  809854:	8809883a 	mov	r4,r17
  809858:	800b883a 	mov	r5,r16
  80985c:	1880022e 	bgeu	r3,r2,809868 <__eqdf2+0x70>
  809860:	080a1080 	call	80a108 <__fpcmp_parts_d>
  809864:	100d883a 	mov	r6,r2
  809868:	3005883a 	mov	r2,r6
  80986c:	dfc01017 	ldw	ra,64(sp)
  809870:	dc400f17 	ldw	r17,60(sp)
  809874:	dc000e17 	ldw	r16,56(sp)
  809878:	dec01104 	addi	sp,sp,68
  80987c:	f800283a 	ret

00809880 <__nedf2>:
  809880:	deffef04 	addi	sp,sp,-68
  809884:	dc400f15 	stw	r17,60(sp)
  809888:	dc400404 	addi	r17,sp,16
  80988c:	2005883a 	mov	r2,r4
  809890:	2807883a 	mov	r3,r5
  809894:	dc000e15 	stw	r16,56(sp)
  809898:	d809883a 	mov	r4,sp
  80989c:	880b883a 	mov	r5,r17
  8098a0:	dc000904 	addi	r16,sp,36
  8098a4:	d8c00115 	stw	r3,4(sp)
  8098a8:	d8800015 	stw	r2,0(sp)
  8098ac:	d9800215 	stw	r6,8(sp)
  8098b0:	dfc01015 	stw	ra,64(sp)
  8098b4:	d9c00315 	stw	r7,12(sp)
  8098b8:	0809fd00 	call	809fd0 <__unpack_d>
  8098bc:	d9000204 	addi	r4,sp,8
  8098c0:	800b883a 	mov	r5,r16
  8098c4:	0809fd00 	call	809fd0 <__unpack_d>
  8098c8:	d8800417 	ldw	r2,16(sp)
  8098cc:	00c00044 	movi	r3,1
  8098d0:	180d883a 	mov	r6,r3
  8098d4:	1880062e 	bgeu	r3,r2,8098f0 <__nedf2+0x70>
  8098d8:	d8800917 	ldw	r2,36(sp)
  8098dc:	8809883a 	mov	r4,r17
  8098e0:	800b883a 	mov	r5,r16
  8098e4:	1880022e 	bgeu	r3,r2,8098f0 <__nedf2+0x70>
  8098e8:	080a1080 	call	80a108 <__fpcmp_parts_d>
  8098ec:	100d883a 	mov	r6,r2
  8098f0:	3005883a 	mov	r2,r6
  8098f4:	dfc01017 	ldw	ra,64(sp)
  8098f8:	dc400f17 	ldw	r17,60(sp)
  8098fc:	dc000e17 	ldw	r16,56(sp)
  809900:	dec01104 	addi	sp,sp,68
  809904:	f800283a 	ret

00809908 <__gtdf2>:
  809908:	deffef04 	addi	sp,sp,-68
  80990c:	dc400f15 	stw	r17,60(sp)
  809910:	dc400404 	addi	r17,sp,16
  809914:	2005883a 	mov	r2,r4
  809918:	2807883a 	mov	r3,r5
  80991c:	dc000e15 	stw	r16,56(sp)
  809920:	d809883a 	mov	r4,sp
  809924:	880b883a 	mov	r5,r17
  809928:	dc000904 	addi	r16,sp,36
  80992c:	d8c00115 	stw	r3,4(sp)
  809930:	d8800015 	stw	r2,0(sp)
  809934:	d9800215 	stw	r6,8(sp)
  809938:	dfc01015 	stw	ra,64(sp)
  80993c:	d9c00315 	stw	r7,12(sp)
  809940:	0809fd00 	call	809fd0 <__unpack_d>
  809944:	d9000204 	addi	r4,sp,8
  809948:	800b883a 	mov	r5,r16
  80994c:	0809fd00 	call	809fd0 <__unpack_d>
  809950:	d8800417 	ldw	r2,16(sp)
  809954:	00c00044 	movi	r3,1
  809958:	01bfffc4 	movi	r6,-1
  80995c:	1880062e 	bgeu	r3,r2,809978 <__gtdf2+0x70>
  809960:	d8800917 	ldw	r2,36(sp)
  809964:	8809883a 	mov	r4,r17
  809968:	800b883a 	mov	r5,r16
  80996c:	1880022e 	bgeu	r3,r2,809978 <__gtdf2+0x70>
  809970:	080a1080 	call	80a108 <__fpcmp_parts_d>
  809974:	100d883a 	mov	r6,r2
  809978:	3005883a 	mov	r2,r6
  80997c:	dfc01017 	ldw	ra,64(sp)
  809980:	dc400f17 	ldw	r17,60(sp)
  809984:	dc000e17 	ldw	r16,56(sp)
  809988:	dec01104 	addi	sp,sp,68
  80998c:	f800283a 	ret

00809990 <__gedf2>:
  809990:	deffef04 	addi	sp,sp,-68
  809994:	dc400f15 	stw	r17,60(sp)
  809998:	dc400404 	addi	r17,sp,16
  80999c:	2005883a 	mov	r2,r4
  8099a0:	2807883a 	mov	r3,r5
  8099a4:	dc000e15 	stw	r16,56(sp)
  8099a8:	d809883a 	mov	r4,sp
  8099ac:	880b883a 	mov	r5,r17
  8099b0:	dc000904 	addi	r16,sp,36
  8099b4:	d8c00115 	stw	r3,4(sp)
  8099b8:	d8800015 	stw	r2,0(sp)
  8099bc:	d9800215 	stw	r6,8(sp)
  8099c0:	dfc01015 	stw	ra,64(sp)
  8099c4:	d9c00315 	stw	r7,12(sp)
  8099c8:	0809fd00 	call	809fd0 <__unpack_d>
  8099cc:	d9000204 	addi	r4,sp,8
  8099d0:	800b883a 	mov	r5,r16
  8099d4:	0809fd00 	call	809fd0 <__unpack_d>
  8099d8:	d8800417 	ldw	r2,16(sp)
  8099dc:	00c00044 	movi	r3,1
  8099e0:	01bfffc4 	movi	r6,-1
  8099e4:	1880062e 	bgeu	r3,r2,809a00 <__gedf2+0x70>
  8099e8:	d8800917 	ldw	r2,36(sp)
  8099ec:	8809883a 	mov	r4,r17
  8099f0:	800b883a 	mov	r5,r16
  8099f4:	1880022e 	bgeu	r3,r2,809a00 <__gedf2+0x70>
  8099f8:	080a1080 	call	80a108 <__fpcmp_parts_d>
  8099fc:	100d883a 	mov	r6,r2
  809a00:	3005883a 	mov	r2,r6
  809a04:	dfc01017 	ldw	ra,64(sp)
  809a08:	dc400f17 	ldw	r17,60(sp)
  809a0c:	dc000e17 	ldw	r16,56(sp)
  809a10:	dec01104 	addi	sp,sp,68
  809a14:	f800283a 	ret

00809a18 <__ltdf2>:
  809a18:	deffef04 	addi	sp,sp,-68
  809a1c:	dc400f15 	stw	r17,60(sp)
  809a20:	dc400404 	addi	r17,sp,16
  809a24:	2005883a 	mov	r2,r4
  809a28:	2807883a 	mov	r3,r5
  809a2c:	dc000e15 	stw	r16,56(sp)
  809a30:	d809883a 	mov	r4,sp
  809a34:	880b883a 	mov	r5,r17
  809a38:	dc000904 	addi	r16,sp,36
  809a3c:	d8c00115 	stw	r3,4(sp)
  809a40:	d8800015 	stw	r2,0(sp)
  809a44:	d9800215 	stw	r6,8(sp)
  809a48:	dfc01015 	stw	ra,64(sp)
  809a4c:	d9c00315 	stw	r7,12(sp)
  809a50:	0809fd00 	call	809fd0 <__unpack_d>
  809a54:	d9000204 	addi	r4,sp,8
  809a58:	800b883a 	mov	r5,r16
  809a5c:	0809fd00 	call	809fd0 <__unpack_d>
  809a60:	d8800417 	ldw	r2,16(sp)
  809a64:	00c00044 	movi	r3,1
  809a68:	180d883a 	mov	r6,r3
  809a6c:	1880062e 	bgeu	r3,r2,809a88 <__ltdf2+0x70>
  809a70:	d8800917 	ldw	r2,36(sp)
  809a74:	8809883a 	mov	r4,r17
  809a78:	800b883a 	mov	r5,r16
  809a7c:	1880022e 	bgeu	r3,r2,809a88 <__ltdf2+0x70>
  809a80:	080a1080 	call	80a108 <__fpcmp_parts_d>
  809a84:	100d883a 	mov	r6,r2
  809a88:	3005883a 	mov	r2,r6
  809a8c:	dfc01017 	ldw	ra,64(sp)
  809a90:	dc400f17 	ldw	r17,60(sp)
  809a94:	dc000e17 	ldw	r16,56(sp)
  809a98:	dec01104 	addi	sp,sp,68
  809a9c:	f800283a 	ret

00809aa0 <__floatsidf>:
  809aa0:	2006d7fa 	srli	r3,r4,31
  809aa4:	defff604 	addi	sp,sp,-40
  809aa8:	008000c4 	movi	r2,3
  809aac:	dfc00915 	stw	ra,36(sp)
  809ab0:	dcc00815 	stw	r19,32(sp)
  809ab4:	dc800715 	stw	r18,28(sp)
  809ab8:	dc400615 	stw	r17,24(sp)
  809abc:	dc000515 	stw	r16,20(sp)
  809ac0:	d8800015 	stw	r2,0(sp)
  809ac4:	d8c00115 	stw	r3,4(sp)
  809ac8:	20000f1e 	bne	r4,zero,809b08 <__floatsidf+0x68>
  809acc:	00800084 	movi	r2,2
  809ad0:	d8800015 	stw	r2,0(sp)
  809ad4:	d809883a 	mov	r4,sp
  809ad8:	08008880 	call	800888 <__pack_d>
  809adc:	1009883a 	mov	r4,r2
  809ae0:	180b883a 	mov	r5,r3
  809ae4:	2005883a 	mov	r2,r4
  809ae8:	2807883a 	mov	r3,r5
  809aec:	dfc00917 	ldw	ra,36(sp)
  809af0:	dcc00817 	ldw	r19,32(sp)
  809af4:	dc800717 	ldw	r18,28(sp)
  809af8:	dc400617 	ldw	r17,24(sp)
  809afc:	dc000517 	ldw	r16,20(sp)
  809b00:	dec00a04 	addi	sp,sp,40
  809b04:	f800283a 	ret
  809b08:	00800f04 	movi	r2,60
  809b0c:	1807003a 	cmpeq	r3,r3,zero
  809b10:	d8800215 	stw	r2,8(sp)
  809b14:	18001126 	beq	r3,zero,809b5c <__floatsidf+0xbc>
  809b18:	0027883a 	mov	r19,zero
  809b1c:	2025883a 	mov	r18,r4
  809b20:	d9000315 	stw	r4,12(sp)
  809b24:	dcc00415 	stw	r19,16(sp)
  809b28:	0809f500 	call	809f50 <__clzsi2>
  809b2c:	11000744 	addi	r4,r2,29
  809b30:	013fe80e 	bge	zero,r4,809ad4 <__floatsidf+0x34>
  809b34:	10bfff44 	addi	r2,r2,-3
  809b38:	10000c16 	blt	r2,zero,809b6c <__floatsidf+0xcc>
  809b3c:	90a2983a 	sll	r17,r18,r2
  809b40:	0021883a 	mov	r16,zero
  809b44:	d8800217 	ldw	r2,8(sp)
  809b48:	dc400415 	stw	r17,16(sp)
  809b4c:	dc000315 	stw	r16,12(sp)
  809b50:	1105c83a 	sub	r2,r2,r4
  809b54:	d8800215 	stw	r2,8(sp)
  809b58:	003fde06 	br	809ad4 <__floatsidf+0x34>
  809b5c:	00a00034 	movhi	r2,32768
  809b60:	20800a26 	beq	r4,r2,809b8c <__floatsidf+0xec>
  809b64:	0109c83a 	sub	r4,zero,r4
  809b68:	003feb06 	br	809b18 <__floatsidf+0x78>
  809b6c:	9006d07a 	srli	r3,r18,1
  809b70:	008007c4 	movi	r2,31
  809b74:	1105c83a 	sub	r2,r2,r4
  809b78:	1886d83a 	srl	r3,r3,r2
  809b7c:	9922983a 	sll	r17,r19,r4
  809b80:	9120983a 	sll	r16,r18,r4
  809b84:	1c62b03a 	or	r17,r3,r17
  809b88:	003fee06 	br	809b44 <__floatsidf+0xa4>
  809b8c:	0009883a 	mov	r4,zero
  809b90:	01707834 	movhi	r5,49632
  809b94:	003fd306 	br	809ae4 <__floatsidf+0x44>

00809b98 <__fixdfsi>:
  809b98:	defff804 	addi	sp,sp,-32
  809b9c:	2005883a 	mov	r2,r4
  809ba0:	2807883a 	mov	r3,r5
  809ba4:	d809883a 	mov	r4,sp
  809ba8:	d9400204 	addi	r5,sp,8
  809bac:	d8c00115 	stw	r3,4(sp)
  809bb0:	d8800015 	stw	r2,0(sp)
  809bb4:	dfc00715 	stw	ra,28(sp)
  809bb8:	0809fd00 	call	809fd0 <__unpack_d>
  809bbc:	d8c00217 	ldw	r3,8(sp)
  809bc0:	00800084 	movi	r2,2
  809bc4:	1880051e 	bne	r3,r2,809bdc <__fixdfsi+0x44>
  809bc8:	0007883a 	mov	r3,zero
  809bcc:	1805883a 	mov	r2,r3
  809bd0:	dfc00717 	ldw	ra,28(sp)
  809bd4:	dec00804 	addi	sp,sp,32
  809bd8:	f800283a 	ret
  809bdc:	00800044 	movi	r2,1
  809be0:	10fff92e 	bgeu	r2,r3,809bc8 <__fixdfsi+0x30>
  809be4:	00800104 	movi	r2,4
  809be8:	18800426 	beq	r3,r2,809bfc <__fixdfsi+0x64>
  809bec:	d8c00417 	ldw	r3,16(sp)
  809bf0:	183ff516 	blt	r3,zero,809bc8 <__fixdfsi+0x30>
  809bf4:	00800784 	movi	r2,30
  809bf8:	10c0080e 	bge	r2,r3,809c1c <__fixdfsi+0x84>
  809bfc:	d8800317 	ldw	r2,12(sp)
  809c00:	1000121e 	bne	r2,zero,809c4c <__fixdfsi+0xb4>
  809c04:	00e00034 	movhi	r3,32768
  809c08:	18ffffc4 	addi	r3,r3,-1
  809c0c:	1805883a 	mov	r2,r3
  809c10:	dfc00717 	ldw	ra,28(sp)
  809c14:	dec00804 	addi	sp,sp,32
  809c18:	f800283a 	ret
  809c1c:	00800f04 	movi	r2,60
  809c20:	10d1c83a 	sub	r8,r2,r3
  809c24:	40bff804 	addi	r2,r8,-32
  809c28:	d9800517 	ldw	r6,20(sp)
  809c2c:	d9c00617 	ldw	r7,24(sp)
  809c30:	10000816 	blt	r2,zero,809c54 <__fixdfsi+0xbc>
  809c34:	3888d83a 	srl	r4,r7,r2
  809c38:	d8800317 	ldw	r2,12(sp)
  809c3c:	2007883a 	mov	r3,r4
  809c40:	103fe226 	beq	r2,zero,809bcc <__fixdfsi+0x34>
  809c44:	0107c83a 	sub	r3,zero,r4
  809c48:	003fe006 	br	809bcc <__fixdfsi+0x34>
  809c4c:	00e00034 	movhi	r3,32768
  809c50:	003fde06 	br	809bcc <__fixdfsi+0x34>
  809c54:	39c7883a 	add	r3,r7,r7
  809c58:	008007c4 	movi	r2,31
  809c5c:	1205c83a 	sub	r2,r2,r8
  809c60:	1886983a 	sll	r3,r3,r2
  809c64:	3208d83a 	srl	r4,r6,r8
  809c68:	1908b03a 	or	r4,r3,r4
  809c6c:	003ff206 	br	809c38 <__fixdfsi+0xa0>

00809c70 <__floatunsidf>:
  809c70:	defff204 	addi	sp,sp,-56
  809c74:	dfc00d15 	stw	ra,52(sp)
  809c78:	ddc00c15 	stw	r23,48(sp)
  809c7c:	dd800b15 	stw	r22,44(sp)
  809c80:	dd400a15 	stw	r21,40(sp)
  809c84:	dd000915 	stw	r20,36(sp)
  809c88:	dcc00815 	stw	r19,32(sp)
  809c8c:	dc800715 	stw	r18,28(sp)
  809c90:	dc400615 	stw	r17,24(sp)
  809c94:	dc000515 	stw	r16,20(sp)
  809c98:	d8000115 	stw	zero,4(sp)
  809c9c:	20000f1e 	bne	r4,zero,809cdc <__floatunsidf+0x6c>
  809ca0:	00800084 	movi	r2,2
  809ca4:	d8800015 	stw	r2,0(sp)
  809ca8:	d809883a 	mov	r4,sp
  809cac:	08008880 	call	800888 <__pack_d>
  809cb0:	dfc00d17 	ldw	ra,52(sp)
  809cb4:	ddc00c17 	ldw	r23,48(sp)
  809cb8:	dd800b17 	ldw	r22,44(sp)
  809cbc:	dd400a17 	ldw	r21,40(sp)
  809cc0:	dd000917 	ldw	r20,36(sp)
  809cc4:	dcc00817 	ldw	r19,32(sp)
  809cc8:	dc800717 	ldw	r18,28(sp)
  809ccc:	dc400617 	ldw	r17,24(sp)
  809cd0:	dc000517 	ldw	r16,20(sp)
  809cd4:	dec00e04 	addi	sp,sp,56
  809cd8:	f800283a 	ret
  809cdc:	008000c4 	movi	r2,3
  809ce0:	00c00f04 	movi	r3,60
  809ce4:	002f883a 	mov	r23,zero
  809ce8:	202d883a 	mov	r22,r4
  809cec:	d8800015 	stw	r2,0(sp)
  809cf0:	d8c00215 	stw	r3,8(sp)
  809cf4:	d9000315 	stw	r4,12(sp)
  809cf8:	ddc00415 	stw	r23,16(sp)
  809cfc:	0809f500 	call	809f50 <__clzsi2>
  809d00:	12400744 	addi	r9,r2,29
  809d04:	48000b16 	blt	r9,zero,809d34 <__floatunsidf+0xc4>
  809d08:	483fe726 	beq	r9,zero,809ca8 <__floatunsidf+0x38>
  809d0c:	10bfff44 	addi	r2,r2,-3
  809d10:	10002e16 	blt	r2,zero,809dcc <__floatunsidf+0x15c>
  809d14:	b0a2983a 	sll	r17,r22,r2
  809d18:	0021883a 	mov	r16,zero
  809d1c:	d8800217 	ldw	r2,8(sp)
  809d20:	dc400415 	stw	r17,16(sp)
  809d24:	dc000315 	stw	r16,12(sp)
  809d28:	1245c83a 	sub	r2,r2,r9
  809d2c:	d8800215 	stw	r2,8(sp)
  809d30:	003fdd06 	br	809ca8 <__floatunsidf+0x38>
  809d34:	0255c83a 	sub	r10,zero,r9
  809d38:	51bff804 	addi	r6,r10,-32
  809d3c:	30001b16 	blt	r6,zero,809dac <__floatunsidf+0x13c>
  809d40:	b9a8d83a 	srl	r20,r23,r6
  809d44:	002b883a 	mov	r21,zero
  809d48:	000f883a 	mov	r7,zero
  809d4c:	01000044 	movi	r4,1
  809d50:	0011883a 	mov	r8,zero
  809d54:	30002516 	blt	r6,zero,809dec <__floatunsidf+0x17c>
  809d58:	21a6983a 	sll	r19,r4,r6
  809d5c:	0025883a 	mov	r18,zero
  809d60:	00bfffc4 	movi	r2,-1
  809d64:	9089883a 	add	r4,r18,r2
  809d68:	988b883a 	add	r5,r19,r2
  809d6c:	248d803a 	cmpltu	r6,r4,r18
  809d70:	314b883a 	add	r5,r6,r5
  809d74:	b104703a 	and	r2,r22,r4
  809d78:	b946703a 	and	r3,r23,r5
  809d7c:	10c4b03a 	or	r2,r2,r3
  809d80:	10000226 	beq	r2,zero,809d8c <__floatunsidf+0x11c>
  809d84:	01c00044 	movi	r7,1
  809d88:	0011883a 	mov	r8,zero
  809d8c:	d9000217 	ldw	r4,8(sp)
  809d90:	a1c4b03a 	or	r2,r20,r7
  809d94:	aa06b03a 	or	r3,r21,r8
  809d98:	2249c83a 	sub	r4,r4,r9
  809d9c:	d8c00415 	stw	r3,16(sp)
  809da0:	d9000215 	stw	r4,8(sp)
  809da4:	d8800315 	stw	r2,12(sp)
  809da8:	003fbf06 	br	809ca8 <__floatunsidf+0x38>
  809dac:	bdc7883a 	add	r3,r23,r23
  809db0:	008007c4 	movi	r2,31
  809db4:	1285c83a 	sub	r2,r2,r10
  809db8:	1886983a 	sll	r3,r3,r2
  809dbc:	b2a8d83a 	srl	r20,r22,r10
  809dc0:	baaad83a 	srl	r21,r23,r10
  809dc4:	1d28b03a 	or	r20,r3,r20
  809dc8:	003fdf06 	br	809d48 <__floatunsidf+0xd8>
  809dcc:	b006d07a 	srli	r3,r22,1
  809dd0:	008007c4 	movi	r2,31
  809dd4:	1245c83a 	sub	r2,r2,r9
  809dd8:	1886d83a 	srl	r3,r3,r2
  809ddc:	ba62983a 	sll	r17,r23,r9
  809de0:	b260983a 	sll	r16,r22,r9
  809de4:	1c62b03a 	or	r17,r3,r17
  809de8:	003fcc06 	br	809d1c <__floatunsidf+0xac>
  809dec:	2006d07a 	srli	r3,r4,1
  809df0:	008007c4 	movi	r2,31
  809df4:	1285c83a 	sub	r2,r2,r10
  809df8:	18a6d83a 	srl	r19,r3,r2
  809dfc:	22a4983a 	sll	r18,r4,r10
  809e00:	003fd706 	br	809d60 <__floatunsidf+0xf0>

00809e04 <udivmodsi4>:
  809e04:	29001b2e 	bgeu	r5,r4,809e74 <udivmodsi4+0x70>
  809e08:	28001a16 	blt	r5,zero,809e74 <udivmodsi4+0x70>
  809e0c:	00800044 	movi	r2,1
  809e10:	0007883a 	mov	r3,zero
  809e14:	01c007c4 	movi	r7,31
  809e18:	00000306 	br	809e28 <udivmodsi4+0x24>
  809e1c:	19c01326 	beq	r3,r7,809e6c <udivmodsi4+0x68>
  809e20:	18c00044 	addi	r3,r3,1
  809e24:	28000416 	blt	r5,zero,809e38 <udivmodsi4+0x34>
  809e28:	294b883a 	add	r5,r5,r5
  809e2c:	1085883a 	add	r2,r2,r2
  809e30:	293ffa36 	bltu	r5,r4,809e1c <udivmodsi4+0x18>
  809e34:	10000d26 	beq	r2,zero,809e6c <udivmodsi4+0x68>
  809e38:	0007883a 	mov	r3,zero
  809e3c:	21400236 	bltu	r4,r5,809e48 <udivmodsi4+0x44>
  809e40:	2149c83a 	sub	r4,r4,r5
  809e44:	1886b03a 	or	r3,r3,r2
  809e48:	1004d07a 	srli	r2,r2,1
  809e4c:	280ad07a 	srli	r5,r5,1
  809e50:	103ffa1e 	bne	r2,zero,809e3c <udivmodsi4+0x38>
  809e54:	30000226 	beq	r6,zero,809e60 <udivmodsi4+0x5c>
  809e58:	2005883a 	mov	r2,r4
  809e5c:	f800283a 	ret
  809e60:	1809883a 	mov	r4,r3
  809e64:	2005883a 	mov	r2,r4
  809e68:	f800283a 	ret
  809e6c:	0007883a 	mov	r3,zero
  809e70:	003ff806 	br	809e54 <udivmodsi4+0x50>
  809e74:	00800044 	movi	r2,1
  809e78:	0007883a 	mov	r3,zero
  809e7c:	003fef06 	br	809e3c <udivmodsi4+0x38>

00809e80 <__divsi3>:
  809e80:	defffe04 	addi	sp,sp,-8
  809e84:	dc000015 	stw	r16,0(sp)
  809e88:	dfc00115 	stw	ra,4(sp)
  809e8c:	0021883a 	mov	r16,zero
  809e90:	20000c16 	blt	r4,zero,809ec4 <__divsi3+0x44>
  809e94:	000d883a 	mov	r6,zero
  809e98:	28000e16 	blt	r5,zero,809ed4 <__divsi3+0x54>
  809e9c:	0809e040 	call	809e04 <udivmodsi4>
  809ea0:	1007883a 	mov	r3,r2
  809ea4:	8005003a 	cmpeq	r2,r16,zero
  809ea8:	1000011e 	bne	r2,zero,809eb0 <__divsi3+0x30>
  809eac:	00c7c83a 	sub	r3,zero,r3
  809eb0:	1805883a 	mov	r2,r3
  809eb4:	dfc00117 	ldw	ra,4(sp)
  809eb8:	dc000017 	ldw	r16,0(sp)
  809ebc:	dec00204 	addi	sp,sp,8
  809ec0:	f800283a 	ret
  809ec4:	0109c83a 	sub	r4,zero,r4
  809ec8:	04000044 	movi	r16,1
  809ecc:	000d883a 	mov	r6,zero
  809ed0:	283ff20e 	bge	r5,zero,809e9c <__divsi3+0x1c>
  809ed4:	014bc83a 	sub	r5,zero,r5
  809ed8:	8021003a 	cmpeq	r16,r16,zero
  809edc:	003fef06 	br	809e9c <__divsi3+0x1c>

00809ee0 <__modsi3>:
  809ee0:	deffff04 	addi	sp,sp,-4
  809ee4:	dfc00015 	stw	ra,0(sp)
  809ee8:	01800044 	movi	r6,1
  809eec:	2807883a 	mov	r3,r5
  809ef0:	20000416 	blt	r4,zero,809f04 <__modsi3+0x24>
  809ef4:	28000c16 	blt	r5,zero,809f28 <__modsi3+0x48>
  809ef8:	dfc00017 	ldw	ra,0(sp)
  809efc:	dec00104 	addi	sp,sp,4
  809f00:	0809e041 	jmpi	809e04 <udivmodsi4>
  809f04:	0109c83a 	sub	r4,zero,r4
  809f08:	28000b16 	blt	r5,zero,809f38 <__modsi3+0x58>
  809f0c:	180b883a 	mov	r5,r3
  809f10:	01800044 	movi	r6,1
  809f14:	0809e040 	call	809e04 <udivmodsi4>
  809f18:	0085c83a 	sub	r2,zero,r2
  809f1c:	dfc00017 	ldw	ra,0(sp)
  809f20:	dec00104 	addi	sp,sp,4
  809f24:	f800283a 	ret
  809f28:	014bc83a 	sub	r5,zero,r5
  809f2c:	dfc00017 	ldw	ra,0(sp)
  809f30:	dec00104 	addi	sp,sp,4
  809f34:	0809e041 	jmpi	809e04 <udivmodsi4>
  809f38:	0147c83a 	sub	r3,zero,r5
  809f3c:	003ff306 	br	809f0c <__modsi3+0x2c>

00809f40 <__udivsi3>:
  809f40:	000d883a 	mov	r6,zero
  809f44:	0809e041 	jmpi	809e04 <udivmodsi4>

00809f48 <__umodsi3>:
  809f48:	01800044 	movi	r6,1
  809f4c:	0809e041 	jmpi	809e04 <udivmodsi4>

00809f50 <__clzsi2>:
  809f50:	00bfffd4 	movui	r2,65535
  809f54:	11000e36 	bltu	r2,r4,809f90 <__clzsi2+0x40>
  809f58:	00803fc4 	movi	r2,255
  809f5c:	01400204 	movi	r5,8
  809f60:	0007883a 	mov	r3,zero
  809f64:	11001036 	bltu	r2,r4,809fa8 <__clzsi2+0x58>
  809f68:	000b883a 	mov	r5,zero
  809f6c:	20c6d83a 	srl	r3,r4,r3
  809f70:	00802074 	movhi	r2,129
  809f74:	10b3c104 	addi	r2,r2,-12540
  809f78:	1887883a 	add	r3,r3,r2
  809f7c:	18800003 	ldbu	r2,0(r3)
  809f80:	00c00804 	movi	r3,32
  809f84:	2885883a 	add	r2,r5,r2
  809f88:	1885c83a 	sub	r2,r3,r2
  809f8c:	f800283a 	ret
  809f90:	01400404 	movi	r5,16
  809f94:	00804034 	movhi	r2,256
  809f98:	10bfffc4 	addi	r2,r2,-1
  809f9c:	2807883a 	mov	r3,r5
  809fa0:	113ff22e 	bgeu	r2,r4,809f6c <__clzsi2+0x1c>
  809fa4:	01400604 	movi	r5,24
  809fa8:	2807883a 	mov	r3,r5
  809fac:	20c6d83a 	srl	r3,r4,r3
  809fb0:	00802074 	movhi	r2,129
  809fb4:	10b3c104 	addi	r2,r2,-12540
  809fb8:	1887883a 	add	r3,r3,r2
  809fbc:	18800003 	ldbu	r2,0(r3)
  809fc0:	00c00804 	movi	r3,32
  809fc4:	2885883a 	add	r2,r5,r2
  809fc8:	1885c83a 	sub	r2,r3,r2
  809fcc:	f800283a 	ret

00809fd0 <__unpack_d>:
  809fd0:	20c00117 	ldw	r3,4(r4)
  809fd4:	22400017 	ldw	r9,0(r4)
  809fd8:	00800434 	movhi	r2,16
  809fdc:	10bfffc4 	addi	r2,r2,-1
  809fe0:	1808d53a 	srli	r4,r3,20
  809fe4:	180cd7fa 	srli	r6,r3,31
  809fe8:	1894703a 	and	r10,r3,r2
  809fec:	2201ffcc 	andi	r8,r4,2047
  809ff0:	281b883a 	mov	r13,r5
  809ff4:	4817883a 	mov	r11,r9
  809ff8:	29800115 	stw	r6,4(r5)
  809ffc:	5019883a 	mov	r12,r10
  80a000:	40001e1e 	bne	r8,zero,80a07c <__unpack_d+0xac>
  80a004:	4a84b03a 	or	r2,r9,r10
  80a008:	10001926 	beq	r2,zero,80a070 <__unpack_d+0xa0>
  80a00c:	4804d63a 	srli	r2,r9,24
  80a010:	500c923a 	slli	r6,r10,8
  80a014:	013f0084 	movi	r4,-1022
  80a018:	00c40034 	movhi	r3,4096
  80a01c:	18ffffc4 	addi	r3,r3,-1
  80a020:	118cb03a 	or	r6,r2,r6
  80a024:	008000c4 	movi	r2,3
  80a028:	480a923a 	slli	r5,r9,8
  80a02c:	68800015 	stw	r2,0(r13)
  80a030:	69000215 	stw	r4,8(r13)
  80a034:	19800b36 	bltu	r3,r6,80a064 <__unpack_d+0x94>
  80a038:	200f883a 	mov	r7,r4
  80a03c:	1811883a 	mov	r8,r3
  80a040:	2945883a 	add	r2,r5,r5
  80a044:	1149803a 	cmpltu	r4,r2,r5
  80a048:	3187883a 	add	r3,r6,r6
  80a04c:	20c9883a 	add	r4,r4,r3
  80a050:	100b883a 	mov	r5,r2
  80a054:	200d883a 	mov	r6,r4
  80a058:	39ffffc4 	addi	r7,r7,-1
  80a05c:	413ff82e 	bgeu	r8,r4,80a040 <__unpack_d+0x70>
  80a060:	69c00215 	stw	r7,8(r13)
  80a064:	69800415 	stw	r6,16(r13)
  80a068:	69400315 	stw	r5,12(r13)
  80a06c:	f800283a 	ret
  80a070:	00800084 	movi	r2,2
  80a074:	28800015 	stw	r2,0(r5)
  80a078:	f800283a 	ret
  80a07c:	0081ffc4 	movi	r2,2047
  80a080:	40800f26 	beq	r8,r2,80a0c0 <__unpack_d+0xf0>
  80a084:	480cd63a 	srli	r6,r9,24
  80a088:	5006923a 	slli	r3,r10,8
  80a08c:	4804923a 	slli	r2,r9,8
  80a090:	0009883a 	mov	r4,zero
  80a094:	30c6b03a 	or	r3,r6,r3
  80a098:	01440034 	movhi	r5,4096
  80a09c:	110cb03a 	or	r6,r2,r4
  80a0a0:	423f0044 	addi	r8,r8,-1023
  80a0a4:	194eb03a 	or	r7,r3,r5
  80a0a8:	008000c4 	movi	r2,3
  80a0ac:	69c00415 	stw	r7,16(r13)
  80a0b0:	6a000215 	stw	r8,8(r13)
  80a0b4:	68800015 	stw	r2,0(r13)
  80a0b8:	69800315 	stw	r6,12(r13)
  80a0bc:	f800283a 	ret
  80a0c0:	4a84b03a 	or	r2,r9,r10
  80a0c4:	1000031e 	bne	r2,zero,80a0d4 <__unpack_d+0x104>
  80a0c8:	00800104 	movi	r2,4
  80a0cc:	28800015 	stw	r2,0(r5)
  80a0d0:	f800283a 	ret
  80a0d4:	0009883a 	mov	r4,zero
  80a0d8:	01400234 	movhi	r5,8
  80a0dc:	4904703a 	and	r2,r9,r4
  80a0e0:	5146703a 	and	r3,r10,r5
  80a0e4:	10c4b03a 	or	r2,r2,r3
  80a0e8:	10000526 	beq	r2,zero,80a100 <__unpack_d+0x130>
  80a0ec:	00800044 	movi	r2,1
  80a0f0:	68800015 	stw	r2,0(r13)
  80a0f4:	6b000415 	stw	r12,16(r13)
  80a0f8:	6ac00315 	stw	r11,12(r13)
  80a0fc:	f800283a 	ret
  80a100:	68000015 	stw	zero,0(r13)
  80a104:	003ffb06 	br	80a0f4 <__unpack_d+0x124>

0080a108 <__fpcmp_parts_d>:
  80a108:	21800017 	ldw	r6,0(r4)
  80a10c:	00c00044 	movi	r3,1
  80a110:	19800a2e 	bgeu	r3,r6,80a13c <__fpcmp_parts_d+0x34>
  80a114:	28800017 	ldw	r2,0(r5)
  80a118:	1880082e 	bgeu	r3,r2,80a13c <__fpcmp_parts_d+0x34>
  80a11c:	00c00104 	movi	r3,4
  80a120:	30c02626 	beq	r6,r3,80a1bc <__fpcmp_parts_d+0xb4>
  80a124:	10c02226 	beq	r2,r3,80a1b0 <__fpcmp_parts_d+0xa8>
  80a128:	00c00084 	movi	r3,2
  80a12c:	30c00526 	beq	r6,r3,80a144 <__fpcmp_parts_d+0x3c>
  80a130:	10c0071e 	bne	r2,r3,80a150 <__fpcmp_parts_d+0x48>
  80a134:	20800117 	ldw	r2,4(r4)
  80a138:	1000091e 	bne	r2,zero,80a160 <__fpcmp_parts_d+0x58>
  80a13c:	00800044 	movi	r2,1
  80a140:	f800283a 	ret
  80a144:	10c01a1e 	bne	r2,r3,80a1b0 <__fpcmp_parts_d+0xa8>
  80a148:	0005883a 	mov	r2,zero
  80a14c:	f800283a 	ret
  80a150:	22000117 	ldw	r8,4(r4)
  80a154:	28800117 	ldw	r2,4(r5)
  80a158:	40800326 	beq	r8,r2,80a168 <__fpcmp_parts_d+0x60>
  80a15c:	403ff726 	beq	r8,zero,80a13c <__fpcmp_parts_d+0x34>
  80a160:	00bfffc4 	movi	r2,-1
  80a164:	f800283a 	ret
  80a168:	20c00217 	ldw	r3,8(r4)
  80a16c:	28800217 	ldw	r2,8(r5)
  80a170:	10fffa16 	blt	r2,r3,80a15c <__fpcmp_parts_d+0x54>
  80a174:	18800916 	blt	r3,r2,80a19c <__fpcmp_parts_d+0x94>
  80a178:	21c00417 	ldw	r7,16(r4)
  80a17c:	28c00417 	ldw	r3,16(r5)
  80a180:	21800317 	ldw	r6,12(r4)
  80a184:	28800317 	ldw	r2,12(r5)
  80a188:	19fff436 	bltu	r3,r7,80a15c <__fpcmp_parts_d+0x54>
  80a18c:	38c00526 	beq	r7,r3,80a1a4 <__fpcmp_parts_d+0x9c>
  80a190:	38c00236 	bltu	r7,r3,80a19c <__fpcmp_parts_d+0x94>
  80a194:	19ffec1e 	bne	r3,r7,80a148 <__fpcmp_parts_d+0x40>
  80a198:	30bfeb2e 	bgeu	r6,r2,80a148 <__fpcmp_parts_d+0x40>
  80a19c:	403fe71e 	bne	r8,zero,80a13c <__fpcmp_parts_d+0x34>
  80a1a0:	003fef06 	br	80a160 <__fpcmp_parts_d+0x58>
  80a1a4:	11bffa2e 	bgeu	r2,r6,80a190 <__fpcmp_parts_d+0x88>
  80a1a8:	403fe426 	beq	r8,zero,80a13c <__fpcmp_parts_d+0x34>
  80a1ac:	003fec06 	br	80a160 <__fpcmp_parts_d+0x58>
  80a1b0:	28800117 	ldw	r2,4(r5)
  80a1b4:	103fe11e 	bne	r2,zero,80a13c <__fpcmp_parts_d+0x34>
  80a1b8:	003fe906 	br	80a160 <__fpcmp_parts_d+0x58>
  80a1bc:	11bfdd1e 	bne	r2,r6,80a134 <__fpcmp_parts_d+0x2c>
  80a1c0:	28c00117 	ldw	r3,4(r5)
  80a1c4:	20800117 	ldw	r2,4(r4)
  80a1c8:	1885c83a 	sub	r2,r3,r2
  80a1cc:	f800283a 	ret

0080a1d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a1d0:	defff804 	addi	sp,sp,-32
  80a1d4:	dfc00715 	stw	ra,28(sp)
  80a1d8:	df000615 	stw	fp,24(sp)
  80a1dc:	df000604 	addi	fp,sp,24
  80a1e0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a1e4:	e0bffc17 	ldw	r2,-16(fp)
  80a1e8:	1004803a 	cmplt	r2,r2,zero
  80a1ec:	1000091e 	bne	r2,zero,80a214 <close+0x44>
  80a1f0:	e13ffc17 	ldw	r4,-16(fp)
  80a1f4:	01400304 	movi	r5,12
  80a1f8:	0800b9c0 	call	800b9c <__mulsi3>
  80a1fc:	1007883a 	mov	r3,r2
  80a200:	00802074 	movhi	r2,129
  80a204:	10b61b04 	addi	r2,r2,-10132
  80a208:	1887883a 	add	r3,r3,r2
  80a20c:	e0ffff15 	stw	r3,-4(fp)
  80a210:	00000106 	br	80a218 <close+0x48>
  80a214:	e03fff15 	stw	zero,-4(fp)
  80a218:	e0bfff17 	ldw	r2,-4(fp)
  80a21c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a220:	e0bffb17 	ldw	r2,-20(fp)
  80a224:	1005003a 	cmpeq	r2,r2,zero
  80a228:	10001d1e 	bne	r2,zero,80a2a0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a22c:	e0bffb17 	ldw	r2,-20(fp)
  80a230:	10800017 	ldw	r2,0(r2)
  80a234:	10800417 	ldw	r2,16(r2)
  80a238:	1005003a 	cmpeq	r2,r2,zero
  80a23c:	1000071e 	bne	r2,zero,80a25c <close+0x8c>
  80a240:	e0bffb17 	ldw	r2,-20(fp)
  80a244:	10800017 	ldw	r2,0(r2)
  80a248:	10800417 	ldw	r2,16(r2)
  80a24c:	e13ffb17 	ldw	r4,-20(fp)
  80a250:	103ee83a 	callr	r2
  80a254:	e0bffe15 	stw	r2,-8(fp)
  80a258:	00000106 	br	80a260 <close+0x90>
  80a25c:	e03ffe15 	stw	zero,-8(fp)
  80a260:	e0bffe17 	ldw	r2,-8(fp)
  80a264:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a268:	e13ffc17 	ldw	r4,-16(fp)
  80a26c:	080aa280 	call	80aa28 <alt_release_fd>
    if (rval < 0)
  80a270:	e0bffa17 	ldw	r2,-24(fp)
  80a274:	1004403a 	cmpge	r2,r2,zero
  80a278:	1000071e 	bne	r2,zero,80a298 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80a27c:	080a2d00 	call	80a2d0 <alt_get_errno>
  80a280:	e0fffa17 	ldw	r3,-24(fp)
  80a284:	00c7c83a 	sub	r3,zero,r3
  80a288:	10c00015 	stw	r3,0(r2)
      return -1;
  80a28c:	00bfffc4 	movi	r2,-1
  80a290:	e0bffd15 	stw	r2,-12(fp)
  80a294:	00000806 	br	80a2b8 <close+0xe8>
    }
    return 0;
  80a298:	e03ffd15 	stw	zero,-12(fp)
  80a29c:	00000606 	br	80a2b8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a2a0:	080a2d00 	call	80a2d0 <alt_get_errno>
  80a2a4:	1007883a 	mov	r3,r2
  80a2a8:	00801444 	movi	r2,81
  80a2ac:	18800015 	stw	r2,0(r3)
    return -1;
  80a2b0:	00bfffc4 	movi	r2,-1
  80a2b4:	e0bffd15 	stw	r2,-12(fp)
  80a2b8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80a2bc:	e037883a 	mov	sp,fp
  80a2c0:	dfc00117 	ldw	ra,4(sp)
  80a2c4:	df000017 	ldw	fp,0(sp)
  80a2c8:	dec00204 	addi	sp,sp,8
  80a2cc:	f800283a 	ret

0080a2d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a2d0:	defffd04 	addi	sp,sp,-12
  80a2d4:	dfc00215 	stw	ra,8(sp)
  80a2d8:	df000115 	stw	fp,4(sp)
  80a2dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a2e0:	00802074 	movhi	r2,129
  80a2e4:	10ba9e04 	addi	r2,r2,-5512
  80a2e8:	10800017 	ldw	r2,0(r2)
  80a2ec:	1005003a 	cmpeq	r2,r2,zero
  80a2f0:	1000061e 	bne	r2,zero,80a30c <alt_get_errno+0x3c>
  80a2f4:	00802074 	movhi	r2,129
  80a2f8:	10ba9e04 	addi	r2,r2,-5512
  80a2fc:	10800017 	ldw	r2,0(r2)
  80a300:	103ee83a 	callr	r2
  80a304:	e0bfff15 	stw	r2,-4(fp)
  80a308:	00000306 	br	80a318 <alt_get_errno+0x48>
  80a30c:	00802074 	movhi	r2,129
  80a310:	10814004 	addi	r2,r2,1280
  80a314:	e0bfff15 	stw	r2,-4(fp)
  80a318:	e0bfff17 	ldw	r2,-4(fp)
}
  80a31c:	e037883a 	mov	sp,fp
  80a320:	dfc00117 	ldw	ra,4(sp)
  80a324:	df000017 	ldw	fp,0(sp)
  80a328:	dec00204 	addi	sp,sp,8
  80a32c:	f800283a 	ret

0080a330 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80a330:	defffc04 	addi	sp,sp,-16
  80a334:	df000315 	stw	fp,12(sp)
  80a338:	df000304 	addi	fp,sp,12
  80a33c:	e13ffd15 	stw	r4,-12(fp)
  80a340:	e17ffe15 	stw	r5,-8(fp)
  80a344:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80a348:	e0bfff17 	ldw	r2,-4(fp)
}
  80a34c:	e037883a 	mov	sp,fp
  80a350:	df000017 	ldw	fp,0(sp)
  80a354:	dec00104 	addi	sp,sp,4
  80a358:	f800283a 	ret

0080a35c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80a35c:	defff904 	addi	sp,sp,-28
  80a360:	dfc00615 	stw	ra,24(sp)
  80a364:	df000515 	stw	fp,20(sp)
  80a368:	df000504 	addi	fp,sp,20
  80a36c:	e13ffc15 	stw	r4,-16(fp)
  80a370:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a374:	e0bffc17 	ldw	r2,-16(fp)
  80a378:	1004803a 	cmplt	r2,r2,zero
  80a37c:	1000091e 	bne	r2,zero,80a3a4 <fstat+0x48>
  80a380:	e13ffc17 	ldw	r4,-16(fp)
  80a384:	01400304 	movi	r5,12
  80a388:	0800b9c0 	call	800b9c <__mulsi3>
  80a38c:	1007883a 	mov	r3,r2
  80a390:	00802074 	movhi	r2,129
  80a394:	10b61b04 	addi	r2,r2,-10132
  80a398:	1887883a 	add	r3,r3,r2
  80a39c:	e0ffff15 	stw	r3,-4(fp)
  80a3a0:	00000106 	br	80a3a8 <fstat+0x4c>
  80a3a4:	e03fff15 	stw	zero,-4(fp)
  80a3a8:	e0bfff17 	ldw	r2,-4(fp)
  80a3ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a3b0:	e0bffb17 	ldw	r2,-20(fp)
  80a3b4:	1005003a 	cmpeq	r2,r2,zero
  80a3b8:	1000121e 	bne	r2,zero,80a404 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a3bc:	e0bffb17 	ldw	r2,-20(fp)
  80a3c0:	10800017 	ldw	r2,0(r2)
  80a3c4:	10800817 	ldw	r2,32(r2)
  80a3c8:	1005003a 	cmpeq	r2,r2,zero
  80a3cc:	1000081e 	bne	r2,zero,80a3f0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80a3d0:	e0bffb17 	ldw	r2,-20(fp)
  80a3d4:	10800017 	ldw	r2,0(r2)
  80a3d8:	10800817 	ldw	r2,32(r2)
  80a3dc:	e13ffb17 	ldw	r4,-20(fp)
  80a3e0:	e17ffd17 	ldw	r5,-12(fp)
  80a3e4:	103ee83a 	callr	r2
  80a3e8:	e0bffe15 	stw	r2,-8(fp)
  80a3ec:	00000b06 	br	80a41c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80a3f0:	e0fffd17 	ldw	r3,-12(fp)
  80a3f4:	00880004 	movi	r2,8192
  80a3f8:	18800115 	stw	r2,4(r3)
      return 0;
  80a3fc:	e03ffe15 	stw	zero,-8(fp)
  80a400:	00000606 	br	80a41c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a404:	080a4340 	call	80a434 <alt_get_errno>
  80a408:	1007883a 	mov	r3,r2
  80a40c:	00801444 	movi	r2,81
  80a410:	18800015 	stw	r2,0(r3)
    return -1;
  80a414:	00bfffc4 	movi	r2,-1
  80a418:	e0bffe15 	stw	r2,-8(fp)
  80a41c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a420:	e037883a 	mov	sp,fp
  80a424:	dfc00117 	ldw	ra,4(sp)
  80a428:	df000017 	ldw	fp,0(sp)
  80a42c:	dec00204 	addi	sp,sp,8
  80a430:	f800283a 	ret

0080a434 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a434:	defffd04 	addi	sp,sp,-12
  80a438:	dfc00215 	stw	ra,8(sp)
  80a43c:	df000115 	stw	fp,4(sp)
  80a440:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a444:	00802074 	movhi	r2,129
  80a448:	10ba9e04 	addi	r2,r2,-5512
  80a44c:	10800017 	ldw	r2,0(r2)
  80a450:	1005003a 	cmpeq	r2,r2,zero
  80a454:	1000061e 	bne	r2,zero,80a470 <alt_get_errno+0x3c>
  80a458:	00802074 	movhi	r2,129
  80a45c:	10ba9e04 	addi	r2,r2,-5512
  80a460:	10800017 	ldw	r2,0(r2)
  80a464:	103ee83a 	callr	r2
  80a468:	e0bfff15 	stw	r2,-4(fp)
  80a46c:	00000306 	br	80a47c <alt_get_errno+0x48>
  80a470:	00802074 	movhi	r2,129
  80a474:	10814004 	addi	r2,r2,1280
  80a478:	e0bfff15 	stw	r2,-4(fp)
  80a47c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a480:	e037883a 	mov	sp,fp
  80a484:	dfc00117 	ldw	ra,4(sp)
  80a488:	df000017 	ldw	fp,0(sp)
  80a48c:	dec00204 	addi	sp,sp,8
  80a490:	f800283a 	ret

0080a494 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a494:	deffeb04 	addi	sp,sp,-84
  80a498:	dfc01415 	stw	ra,80(sp)
  80a49c:	df001315 	stw	fp,76(sp)
  80a4a0:	df001304 	addi	fp,sp,76
  80a4a4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a4a8:	e0bffd17 	ldw	r2,-12(fp)
  80a4ac:	1004803a 	cmplt	r2,r2,zero
  80a4b0:	1000091e 	bne	r2,zero,80a4d8 <isatty+0x44>
  80a4b4:	e13ffd17 	ldw	r4,-12(fp)
  80a4b8:	01400304 	movi	r5,12
  80a4bc:	0800b9c0 	call	800b9c <__mulsi3>
  80a4c0:	1007883a 	mov	r3,r2
  80a4c4:	00802074 	movhi	r2,129
  80a4c8:	10b61b04 	addi	r2,r2,-10132
  80a4cc:	1887883a 	add	r3,r3,r2
  80a4d0:	e0ffff15 	stw	r3,-4(fp)
  80a4d4:	00000106 	br	80a4dc <isatty+0x48>
  80a4d8:	e03fff15 	stw	zero,-4(fp)
  80a4dc:	e0bfff17 	ldw	r2,-4(fp)
  80a4e0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80a4e4:	e0bfed17 	ldw	r2,-76(fp)
  80a4e8:	1005003a 	cmpeq	r2,r2,zero
  80a4ec:	10000f1e 	bne	r2,zero,80a52c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a4f0:	e0bfed17 	ldw	r2,-76(fp)
  80a4f4:	10800017 	ldw	r2,0(r2)
  80a4f8:	10800817 	ldw	r2,32(r2)
  80a4fc:	1004c03a 	cmpne	r2,r2,zero
  80a500:	1000031e 	bne	r2,zero,80a510 <isatty+0x7c>
    {
      return 1;
  80a504:	00800044 	movi	r2,1
  80a508:	e0bffe15 	stw	r2,-8(fp)
  80a50c:	00000c06 	br	80a540 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a510:	e17fee04 	addi	r5,fp,-72
  80a514:	e13ffd17 	ldw	r4,-12(fp)
  80a518:	080a35c0 	call	80a35c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a51c:	e0bfef17 	ldw	r2,-68(fp)
  80a520:	10880020 	cmpeqi	r2,r2,8192
  80a524:	e0bffe15 	stw	r2,-8(fp)
  80a528:	00000506 	br	80a540 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a52c:	080a5580 	call	80a558 <alt_get_errno>
  80a530:	1007883a 	mov	r3,r2
  80a534:	00801444 	movi	r2,81
  80a538:	18800015 	stw	r2,0(r3)
    return 0;
  80a53c:	e03ffe15 	stw	zero,-8(fp)
  80a540:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a544:	e037883a 	mov	sp,fp
  80a548:	dfc00117 	ldw	ra,4(sp)
  80a54c:	df000017 	ldw	fp,0(sp)
  80a550:	dec00204 	addi	sp,sp,8
  80a554:	f800283a 	ret

0080a558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a558:	defffd04 	addi	sp,sp,-12
  80a55c:	dfc00215 	stw	ra,8(sp)
  80a560:	df000115 	stw	fp,4(sp)
  80a564:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a568:	00802074 	movhi	r2,129
  80a56c:	10ba9e04 	addi	r2,r2,-5512
  80a570:	10800017 	ldw	r2,0(r2)
  80a574:	1005003a 	cmpeq	r2,r2,zero
  80a578:	1000061e 	bne	r2,zero,80a594 <alt_get_errno+0x3c>
  80a57c:	00802074 	movhi	r2,129
  80a580:	10ba9e04 	addi	r2,r2,-5512
  80a584:	10800017 	ldw	r2,0(r2)
  80a588:	103ee83a 	callr	r2
  80a58c:	e0bfff15 	stw	r2,-4(fp)
  80a590:	00000306 	br	80a5a0 <alt_get_errno+0x48>
  80a594:	00802074 	movhi	r2,129
  80a598:	10814004 	addi	r2,r2,1280
  80a59c:	e0bfff15 	stw	r2,-4(fp)
  80a5a0:	e0bfff17 	ldw	r2,-4(fp)
}
  80a5a4:	e037883a 	mov	sp,fp
  80a5a8:	dfc00117 	ldw	ra,4(sp)
  80a5ac:	df000017 	ldw	fp,0(sp)
  80a5b0:	dec00204 	addi	sp,sp,8
  80a5b4:	f800283a 	ret

0080a5b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80a5b8:	defffe04 	addi	sp,sp,-8
  80a5bc:	dfc00115 	stw	ra,4(sp)
  80a5c0:	df000015 	stw	fp,0(sp)
  80a5c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80a5c8:	01002074 	movhi	r4,129
  80a5cc:	213aa304 	addi	r4,r4,-5492
  80a5d0:	01402074 	movhi	r5,129
  80a5d4:	29740c04 	addi	r5,r5,-12240
  80a5d8:	01802074 	movhi	r6,129
  80a5dc:	31baa304 	addi	r6,r6,-5492
  80a5e0:	080a6380 	call	80a638 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80a5e4:	01002034 	movhi	r4,128
  80a5e8:	21000804 	addi	r4,r4,32
  80a5ec:	01402034 	movhi	r5,128
  80a5f0:	29400804 	addi	r5,r5,32
  80a5f4:	01802034 	movhi	r6,128
  80a5f8:	31806d04 	addi	r6,r6,436
  80a5fc:	080a6380 	call	80a638 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a600:	01002074 	movhi	r4,129
  80a604:	21332d04 	addi	r4,r4,-13132
  80a608:	01402074 	movhi	r5,129
  80a60c:	29732d04 	addi	r5,r5,-13132
  80a610:	01802074 	movhi	r6,129
  80a614:	31b40c04 	addi	r6,r6,-12240
  80a618:	080a6380 	call	80a638 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a61c:	080baa80 	call	80baa8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a620:	080bca00 	call	80bca0 <alt_icache_flush_all>
}
  80a624:	e037883a 	mov	sp,fp
  80a628:	dfc00117 	ldw	ra,4(sp)
  80a62c:	df000017 	ldw	fp,0(sp)
  80a630:	dec00204 	addi	sp,sp,8
  80a634:	f800283a 	ret

0080a638 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a638:	defffc04 	addi	sp,sp,-16
  80a63c:	df000315 	stw	fp,12(sp)
  80a640:	df000304 	addi	fp,sp,12
  80a644:	e13ffd15 	stw	r4,-12(fp)
  80a648:	e17ffe15 	stw	r5,-8(fp)
  80a64c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a650:	e0fffe17 	ldw	r3,-8(fp)
  80a654:	e0bffd17 	ldw	r2,-12(fp)
  80a658:	18800e26 	beq	r3,r2,80a694 <alt_load_section+0x5c>
  {
    while( to != end )
  80a65c:	00000a06 	br	80a688 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80a660:	e0bffd17 	ldw	r2,-12(fp)
  80a664:	10c00017 	ldw	r3,0(r2)
  80a668:	e0bffe17 	ldw	r2,-8(fp)
  80a66c:	10c00015 	stw	r3,0(r2)
  80a670:	e0bffe17 	ldw	r2,-8(fp)
  80a674:	10800104 	addi	r2,r2,4
  80a678:	e0bffe15 	stw	r2,-8(fp)
  80a67c:	e0bffd17 	ldw	r2,-12(fp)
  80a680:	10800104 	addi	r2,r2,4
  80a684:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80a688:	e0fffe17 	ldw	r3,-8(fp)
  80a68c:	e0bfff17 	ldw	r2,-4(fp)
  80a690:	18bff31e 	bne	r3,r2,80a660 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80a694:	e037883a 	mov	sp,fp
  80a698:	df000017 	ldw	fp,0(sp)
  80a69c:	dec00104 	addi	sp,sp,4
  80a6a0:	f800283a 	ret

0080a6a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80a6a4:	defff804 	addi	sp,sp,-32
  80a6a8:	dfc00715 	stw	ra,28(sp)
  80a6ac:	df000615 	stw	fp,24(sp)
  80a6b0:	df000604 	addi	fp,sp,24
  80a6b4:	e13ffc15 	stw	r4,-16(fp)
  80a6b8:	e17ffd15 	stw	r5,-12(fp)
  80a6bc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80a6c0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a6c4:	e0bffc17 	ldw	r2,-16(fp)
  80a6c8:	1004803a 	cmplt	r2,r2,zero
  80a6cc:	1000091e 	bne	r2,zero,80a6f4 <lseek+0x50>
  80a6d0:	e13ffc17 	ldw	r4,-16(fp)
  80a6d4:	01400304 	movi	r5,12
  80a6d8:	0800b9c0 	call	800b9c <__mulsi3>
  80a6dc:	1007883a 	mov	r3,r2
  80a6e0:	00802074 	movhi	r2,129
  80a6e4:	10b61b04 	addi	r2,r2,-10132
  80a6e8:	1887883a 	add	r3,r3,r2
  80a6ec:	e0ffff15 	stw	r3,-4(fp)
  80a6f0:	00000106 	br	80a6f8 <lseek+0x54>
  80a6f4:	e03fff15 	stw	zero,-4(fp)
  80a6f8:	e0bfff17 	ldw	r2,-4(fp)
  80a6fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80a700:	e0bffb17 	ldw	r2,-20(fp)
  80a704:	1005003a 	cmpeq	r2,r2,zero
  80a708:	1000111e 	bne	r2,zero,80a750 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a70c:	e0bffb17 	ldw	r2,-20(fp)
  80a710:	10800017 	ldw	r2,0(r2)
  80a714:	10800717 	ldw	r2,28(r2)
  80a718:	1005003a 	cmpeq	r2,r2,zero
  80a71c:	1000091e 	bne	r2,zero,80a744 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a720:	e0bffb17 	ldw	r2,-20(fp)
  80a724:	10800017 	ldw	r2,0(r2)
  80a728:	10800717 	ldw	r2,28(r2)
  80a72c:	e13ffb17 	ldw	r4,-20(fp)
  80a730:	e17ffd17 	ldw	r5,-12(fp)
  80a734:	e1bffe17 	ldw	r6,-8(fp)
  80a738:	103ee83a 	callr	r2
  80a73c:	e0bffa15 	stw	r2,-24(fp)
  80a740:	00000506 	br	80a758 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a744:	00bfde84 	movi	r2,-134
  80a748:	e0bffa15 	stw	r2,-24(fp)
  80a74c:	00000206 	br	80a758 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a750:	00bfebc4 	movi	r2,-81
  80a754:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80a758:	e0bffa17 	ldw	r2,-24(fp)
  80a75c:	1004403a 	cmpge	r2,r2,zero
  80a760:	1000071e 	bne	r2,zero,80a780 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80a764:	080a7980 	call	80a798 <alt_get_errno>
  80a768:	1007883a 	mov	r3,r2
  80a76c:	e0bffa17 	ldw	r2,-24(fp)
  80a770:	0085c83a 	sub	r2,zero,r2
  80a774:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a778:	00bfffc4 	movi	r2,-1
  80a77c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80a780:	e0bffa17 	ldw	r2,-24(fp)
}
  80a784:	e037883a 	mov	sp,fp
  80a788:	dfc00117 	ldw	ra,4(sp)
  80a78c:	df000017 	ldw	fp,0(sp)
  80a790:	dec00204 	addi	sp,sp,8
  80a794:	f800283a 	ret

0080a798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a798:	defffd04 	addi	sp,sp,-12
  80a79c:	dfc00215 	stw	ra,8(sp)
  80a7a0:	df000115 	stw	fp,4(sp)
  80a7a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a7a8:	00802074 	movhi	r2,129
  80a7ac:	10ba9e04 	addi	r2,r2,-5512
  80a7b0:	10800017 	ldw	r2,0(r2)
  80a7b4:	1005003a 	cmpeq	r2,r2,zero
  80a7b8:	1000061e 	bne	r2,zero,80a7d4 <alt_get_errno+0x3c>
  80a7bc:	00802074 	movhi	r2,129
  80a7c0:	10ba9e04 	addi	r2,r2,-5512
  80a7c4:	10800017 	ldw	r2,0(r2)
  80a7c8:	103ee83a 	callr	r2
  80a7cc:	e0bfff15 	stw	r2,-4(fp)
  80a7d0:	00000306 	br	80a7e0 <alt_get_errno+0x48>
  80a7d4:	00802074 	movhi	r2,129
  80a7d8:	10814004 	addi	r2,r2,1280
  80a7dc:	e0bfff15 	stw	r2,-4(fp)
  80a7e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80a7e4:	e037883a 	mov	sp,fp
  80a7e8:	dfc00117 	ldw	ra,4(sp)
  80a7ec:	df000017 	ldw	fp,0(sp)
  80a7f0:	dec00204 	addi	sp,sp,8
  80a7f4:	f800283a 	ret

0080a7f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a7f8:	defffd04 	addi	sp,sp,-12
  80a7fc:	dfc00215 	stw	ra,8(sp)
  80a800:	df000115 	stw	fp,4(sp)
  80a804:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a808:	0009883a 	mov	r4,zero
  80a80c:	080ace00 	call	80ace0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a810:	080ad140 	call	80ad14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a814:	01002074 	movhi	r4,129
  80a818:	21340404 	addi	r4,r4,-12272
  80a81c:	01402074 	movhi	r5,129
  80a820:	29740404 	addi	r5,r5,-12272
  80a824:	01802074 	movhi	r6,129
  80a828:	31b40404 	addi	r6,r6,-12272
  80a82c:	080c0740 	call	80c074 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a830:	080bbd80 	call	80bbd8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a834:	01002074 	movhi	r4,129
  80a838:	212f0f04 	addi	r4,r4,-17348
  80a83c:	080c8a80 	call	80c8a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a840:	d126ae17 	ldw	r4,-25928(gp)
  80a844:	d166af17 	ldw	r5,-25924(gp)
  80a848:	d1a6b017 	ldw	r6,-25920(gp)
  80a84c:	08001f00 	call	8001f0 <main>
  80a850:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a854:	01000044 	movi	r4,1
  80a858:	080a1d00 	call	80a1d0 <close>
  exit (result);
  80a85c:	e13fff17 	ldw	r4,-4(fp)
  80a860:	080c8bc0 	call	80c8bc <exit>

0080a864 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80a864:	defffe04 	addi	sp,sp,-8
  80a868:	df000115 	stw	fp,4(sp)
  80a86c:	df000104 	addi	fp,sp,4
  80a870:	e13fff15 	stw	r4,-4(fp)
}
  80a874:	e037883a 	mov	sp,fp
  80a878:	df000017 	ldw	fp,0(sp)
  80a87c:	dec00104 	addi	sp,sp,4
  80a880:	f800283a 	ret

0080a884 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80a884:	defffe04 	addi	sp,sp,-8
  80a888:	df000115 	stw	fp,4(sp)
  80a88c:	df000104 	addi	fp,sp,4
  80a890:	e13fff15 	stw	r4,-4(fp)
}
  80a894:	e037883a 	mov	sp,fp
  80a898:	df000017 	ldw	fp,0(sp)
  80a89c:	dec00104 	addi	sp,sp,4
  80a8a0:	f800283a 	ret

0080a8a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80a8a4:	defff704 	addi	sp,sp,-36
  80a8a8:	dfc00815 	stw	ra,32(sp)
  80a8ac:	df000715 	stw	fp,28(sp)
  80a8b0:	df000704 	addi	fp,sp,28
  80a8b4:	e13ffb15 	stw	r4,-20(fp)
  80a8b8:	e17ffc15 	stw	r5,-16(fp)
  80a8bc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a8c0:	e0bffb17 	ldw	r2,-20(fp)
  80a8c4:	1004803a 	cmplt	r2,r2,zero
  80a8c8:	1000091e 	bne	r2,zero,80a8f0 <read+0x4c>
  80a8cc:	e13ffb17 	ldw	r4,-20(fp)
  80a8d0:	01400304 	movi	r5,12
  80a8d4:	0800b9c0 	call	800b9c <__mulsi3>
  80a8d8:	1007883a 	mov	r3,r2
  80a8dc:	00802074 	movhi	r2,129
  80a8e0:	10b61b04 	addi	r2,r2,-10132
  80a8e4:	1887883a 	add	r3,r3,r2
  80a8e8:	e0ffff15 	stw	r3,-4(fp)
  80a8ec:	00000106 	br	80a8f4 <read+0x50>
  80a8f0:	e03fff15 	stw	zero,-4(fp)
  80a8f4:	e0bfff17 	ldw	r2,-4(fp)
  80a8f8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a8fc:	e0bffa17 	ldw	r2,-24(fp)
  80a900:	1005003a 	cmpeq	r2,r2,zero
  80a904:	1000241e 	bne	r2,zero,80a998 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a908:	e0bffa17 	ldw	r2,-24(fp)
  80a90c:	10800217 	ldw	r2,8(r2)
  80a910:	108000cc 	andi	r2,r2,3
  80a914:	10800060 	cmpeqi	r2,r2,1
  80a918:	10001a1e 	bne	r2,zero,80a984 <read+0xe0>
  80a91c:	e0bffa17 	ldw	r2,-24(fp)
  80a920:	10800017 	ldw	r2,0(r2)
  80a924:	10800517 	ldw	r2,20(r2)
  80a928:	1005003a 	cmpeq	r2,r2,zero
  80a92c:	1000151e 	bne	r2,zero,80a984 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80a930:	e0bffa17 	ldw	r2,-24(fp)
  80a934:	10800017 	ldw	r2,0(r2)
  80a938:	10800517 	ldw	r2,20(r2)
  80a93c:	e17ffc17 	ldw	r5,-16(fp)
  80a940:	e1bffd17 	ldw	r6,-12(fp)
  80a944:	e13ffa17 	ldw	r4,-24(fp)
  80a948:	103ee83a 	callr	r2
  80a94c:	e0bff915 	stw	r2,-28(fp)
  80a950:	e0bff917 	ldw	r2,-28(fp)
  80a954:	1004403a 	cmpge	r2,r2,zero
  80a958:	1000071e 	bne	r2,zero,80a978 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80a95c:	080a9c80 	call	80a9c8 <alt_get_errno>
  80a960:	e0fff917 	ldw	r3,-28(fp)
  80a964:	00c7c83a 	sub	r3,zero,r3
  80a968:	10c00015 	stw	r3,0(r2)
          return -1;
  80a96c:	00bfffc4 	movi	r2,-1
  80a970:	e0bffe15 	stw	r2,-8(fp)
  80a974:	00000e06 	br	80a9b0 <read+0x10c>
        }
        return rval;
  80a978:	e0bff917 	ldw	r2,-28(fp)
  80a97c:	e0bffe15 	stw	r2,-8(fp)
  80a980:	00000b06 	br	80a9b0 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80a984:	080a9c80 	call	80a9c8 <alt_get_errno>
  80a988:	1007883a 	mov	r3,r2
  80a98c:	00800344 	movi	r2,13
  80a990:	18800015 	stw	r2,0(r3)
  80a994:	00000406 	br	80a9a8 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80a998:	080a9c80 	call	80a9c8 <alt_get_errno>
  80a99c:	1007883a 	mov	r3,r2
  80a9a0:	00801444 	movi	r2,81
  80a9a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a9a8:	00bfffc4 	movi	r2,-1
  80a9ac:	e0bffe15 	stw	r2,-8(fp)
  80a9b0:	e0bffe17 	ldw	r2,-8(fp)
}
  80a9b4:	e037883a 	mov	sp,fp
  80a9b8:	dfc00117 	ldw	ra,4(sp)
  80a9bc:	df000017 	ldw	fp,0(sp)
  80a9c0:	dec00204 	addi	sp,sp,8
  80a9c4:	f800283a 	ret

0080a9c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a9c8:	defffd04 	addi	sp,sp,-12
  80a9cc:	dfc00215 	stw	ra,8(sp)
  80a9d0:	df000115 	stw	fp,4(sp)
  80a9d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a9d8:	00802074 	movhi	r2,129
  80a9dc:	10ba9e04 	addi	r2,r2,-5512
  80a9e0:	10800017 	ldw	r2,0(r2)
  80a9e4:	1005003a 	cmpeq	r2,r2,zero
  80a9e8:	1000061e 	bne	r2,zero,80aa04 <alt_get_errno+0x3c>
  80a9ec:	00802074 	movhi	r2,129
  80a9f0:	10ba9e04 	addi	r2,r2,-5512
  80a9f4:	10800017 	ldw	r2,0(r2)
  80a9f8:	103ee83a 	callr	r2
  80a9fc:	e0bfff15 	stw	r2,-4(fp)
  80aa00:	00000306 	br	80aa10 <alt_get_errno+0x48>
  80aa04:	00802074 	movhi	r2,129
  80aa08:	10814004 	addi	r2,r2,1280
  80aa0c:	e0bfff15 	stw	r2,-4(fp)
  80aa10:	e0bfff17 	ldw	r2,-4(fp)
}
  80aa14:	e037883a 	mov	sp,fp
  80aa18:	dfc00117 	ldw	ra,4(sp)
  80aa1c:	df000017 	ldw	fp,0(sp)
  80aa20:	dec00204 	addi	sp,sp,8
  80aa24:	f800283a 	ret

0080aa28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80aa28:	defffc04 	addi	sp,sp,-16
  80aa2c:	dfc00315 	stw	ra,12(sp)
  80aa30:	df000215 	stw	fp,8(sp)
  80aa34:	dc000115 	stw	r16,4(sp)
  80aa38:	df000104 	addi	fp,sp,4
  80aa3c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80aa40:	e0bfff17 	ldw	r2,-4(fp)
  80aa44:	108000d0 	cmplti	r2,r2,3
  80aa48:	10000f1e 	bne	r2,zero,80aa88 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80aa4c:	e13fff17 	ldw	r4,-4(fp)
  80aa50:	04002074 	movhi	r16,129
  80aa54:	84361b04 	addi	r16,r16,-10132
  80aa58:	01400304 	movi	r5,12
  80aa5c:	0800b9c0 	call	800b9c <__mulsi3>
  80aa60:	1405883a 	add	r2,r2,r16
  80aa64:	10800204 	addi	r2,r2,8
  80aa68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80aa6c:	e13fff17 	ldw	r4,-4(fp)
  80aa70:	04002074 	movhi	r16,129
  80aa74:	84361b04 	addi	r16,r16,-10132
  80aa78:	01400304 	movi	r5,12
  80aa7c:	0800b9c0 	call	800b9c <__mulsi3>
  80aa80:	1405883a 	add	r2,r2,r16
  80aa84:	10000015 	stw	zero,0(r2)
  }
}
  80aa88:	e037883a 	mov	sp,fp
  80aa8c:	dfc00217 	ldw	ra,8(sp)
  80aa90:	df000117 	ldw	fp,4(sp)
  80aa94:	dc000017 	ldw	r16,0(sp)
  80aa98:	dec00304 	addi	sp,sp,12
  80aa9c:	f800283a 	ret

0080aaa0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80aaa0:	defff804 	addi	sp,sp,-32
  80aaa4:	df000715 	stw	fp,28(sp)
  80aaa8:	df000704 	addi	fp,sp,28
  80aaac:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aab0:	0005303a 	rdctl	r2,status
  80aab4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aab8:	e0fffb17 	ldw	r3,-20(fp)
  80aabc:	00bfff84 	movi	r2,-2
  80aac0:	1884703a 	and	r2,r3,r2
  80aac4:	1001703a 	wrctl	status,r2
  
  return context;
  80aac8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80aacc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80aad0:	d0a00c17 	ldw	r2,-32720(gp)
  80aad4:	10c000c4 	addi	r3,r2,3
  80aad8:	00bfff04 	movi	r2,-4
  80aadc:	1884703a 	and	r2,r3,r2
  80aae0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80aae4:	d0e00c17 	ldw	r3,-32720(gp)
  80aae8:	e0bffe17 	ldw	r2,-8(fp)
  80aaec:	1887883a 	add	r3,r3,r2
  80aaf0:	00804034 	movhi	r2,256
  80aaf4:	10800004 	addi	r2,r2,0
  80aaf8:	10c0072e 	bgeu	r2,r3,80ab18 <sbrk+0x78>
  80aafc:	e0bffd17 	ldw	r2,-12(fp)
  80ab00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ab04:	e0bffa17 	ldw	r2,-24(fp)
  80ab08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80ab0c:	00bfffc4 	movi	r2,-1
  80ab10:	e0bfff15 	stw	r2,-4(fp)
  80ab14:	00000c06 	br	80ab48 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80ab18:	d0a00c17 	ldw	r2,-32720(gp)
  80ab1c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80ab20:	d0e00c17 	ldw	r3,-32720(gp)
  80ab24:	e0bffe17 	ldw	r2,-8(fp)
  80ab28:	1885883a 	add	r2,r3,r2
  80ab2c:	d0a00c15 	stw	r2,-32720(gp)
  80ab30:	e0bffd17 	ldw	r2,-12(fp)
  80ab34:	e0bff915 	stw	r2,-28(fp)
  80ab38:	e0bff917 	ldw	r2,-28(fp)
  80ab3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80ab40:	e0bffc17 	ldw	r2,-16(fp)
  80ab44:	e0bfff15 	stw	r2,-4(fp)
  80ab48:	e0bfff17 	ldw	r2,-4(fp)
} 
  80ab4c:	e037883a 	mov	sp,fp
  80ab50:	df000017 	ldw	fp,0(sp)
  80ab54:	dec00104 	addi	sp,sp,4
  80ab58:	f800283a 	ret

0080ab5c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80ab5c:	defff704 	addi	sp,sp,-36
  80ab60:	dfc00815 	stw	ra,32(sp)
  80ab64:	df000715 	stw	fp,28(sp)
  80ab68:	df000704 	addi	fp,sp,28
  80ab6c:	e13ffb15 	stw	r4,-20(fp)
  80ab70:	e17ffc15 	stw	r5,-16(fp)
  80ab74:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ab78:	e0bffb17 	ldw	r2,-20(fp)
  80ab7c:	1004803a 	cmplt	r2,r2,zero
  80ab80:	1000091e 	bne	r2,zero,80aba8 <write+0x4c>
  80ab84:	e13ffb17 	ldw	r4,-20(fp)
  80ab88:	01400304 	movi	r5,12
  80ab8c:	0800b9c0 	call	800b9c <__mulsi3>
  80ab90:	1007883a 	mov	r3,r2
  80ab94:	00802074 	movhi	r2,129
  80ab98:	10b61b04 	addi	r2,r2,-10132
  80ab9c:	1887883a 	add	r3,r3,r2
  80aba0:	e0ffff15 	stw	r3,-4(fp)
  80aba4:	00000106 	br	80abac <write+0x50>
  80aba8:	e03fff15 	stw	zero,-4(fp)
  80abac:	e0bfff17 	ldw	r2,-4(fp)
  80abb0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80abb4:	e0bffa17 	ldw	r2,-24(fp)
  80abb8:	1005003a 	cmpeq	r2,r2,zero
  80abbc:	1000241e 	bne	r2,zero,80ac50 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80abc0:	e0bffa17 	ldw	r2,-24(fp)
  80abc4:	10800217 	ldw	r2,8(r2)
  80abc8:	108000cc 	andi	r2,r2,3
  80abcc:	1005003a 	cmpeq	r2,r2,zero
  80abd0:	10001a1e 	bne	r2,zero,80ac3c <write+0xe0>
  80abd4:	e0bffa17 	ldw	r2,-24(fp)
  80abd8:	10800017 	ldw	r2,0(r2)
  80abdc:	10800617 	ldw	r2,24(r2)
  80abe0:	1005003a 	cmpeq	r2,r2,zero
  80abe4:	1000151e 	bne	r2,zero,80ac3c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80abe8:	e0bffa17 	ldw	r2,-24(fp)
  80abec:	10800017 	ldw	r2,0(r2)
  80abf0:	10800617 	ldw	r2,24(r2)
  80abf4:	e17ffc17 	ldw	r5,-16(fp)
  80abf8:	e1bffd17 	ldw	r6,-12(fp)
  80abfc:	e13ffa17 	ldw	r4,-24(fp)
  80ac00:	103ee83a 	callr	r2
  80ac04:	e0bff915 	stw	r2,-28(fp)
  80ac08:	e0bff917 	ldw	r2,-28(fp)
  80ac0c:	1004403a 	cmpge	r2,r2,zero
  80ac10:	1000071e 	bne	r2,zero,80ac30 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80ac14:	080ac800 	call	80ac80 <alt_get_errno>
  80ac18:	e0fff917 	ldw	r3,-28(fp)
  80ac1c:	00c7c83a 	sub	r3,zero,r3
  80ac20:	10c00015 	stw	r3,0(r2)
        return -1;
  80ac24:	00bfffc4 	movi	r2,-1
  80ac28:	e0bffe15 	stw	r2,-8(fp)
  80ac2c:	00000e06 	br	80ac68 <write+0x10c>
      }
      return rval;
  80ac30:	e0bff917 	ldw	r2,-28(fp)
  80ac34:	e0bffe15 	stw	r2,-8(fp)
  80ac38:	00000b06 	br	80ac68 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80ac3c:	080ac800 	call	80ac80 <alt_get_errno>
  80ac40:	1007883a 	mov	r3,r2
  80ac44:	00800344 	movi	r2,13
  80ac48:	18800015 	stw	r2,0(r3)
  80ac4c:	00000406 	br	80ac60 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80ac50:	080ac800 	call	80ac80 <alt_get_errno>
  80ac54:	1007883a 	mov	r3,r2
  80ac58:	00801444 	movi	r2,81
  80ac5c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ac60:	00bfffc4 	movi	r2,-1
  80ac64:	e0bffe15 	stw	r2,-8(fp)
  80ac68:	e0bffe17 	ldw	r2,-8(fp)
}
  80ac6c:	e037883a 	mov	sp,fp
  80ac70:	dfc00117 	ldw	ra,4(sp)
  80ac74:	df000017 	ldw	fp,0(sp)
  80ac78:	dec00204 	addi	sp,sp,8
  80ac7c:	f800283a 	ret

0080ac80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ac80:	defffd04 	addi	sp,sp,-12
  80ac84:	dfc00215 	stw	ra,8(sp)
  80ac88:	df000115 	stw	fp,4(sp)
  80ac8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ac90:	00802074 	movhi	r2,129
  80ac94:	10ba9e04 	addi	r2,r2,-5512
  80ac98:	10800017 	ldw	r2,0(r2)
  80ac9c:	1005003a 	cmpeq	r2,r2,zero
  80aca0:	1000061e 	bne	r2,zero,80acbc <alt_get_errno+0x3c>
  80aca4:	00802074 	movhi	r2,129
  80aca8:	10ba9e04 	addi	r2,r2,-5512
  80acac:	10800017 	ldw	r2,0(r2)
  80acb0:	103ee83a 	callr	r2
  80acb4:	e0bfff15 	stw	r2,-4(fp)
  80acb8:	00000306 	br	80acc8 <alt_get_errno+0x48>
  80acbc:	00802074 	movhi	r2,129
  80acc0:	10814004 	addi	r2,r2,1280
  80acc4:	e0bfff15 	stw	r2,-4(fp)
  80acc8:	e0bfff17 	ldw	r2,-4(fp)
}
  80accc:	e037883a 	mov	sp,fp
  80acd0:	dfc00117 	ldw	ra,4(sp)
  80acd4:	df000017 	ldw	fp,0(sp)
  80acd8:	dec00204 	addi	sp,sp,8
  80acdc:	f800283a 	ret

0080ace0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80ace0:	defffd04 	addi	sp,sp,-12
  80ace4:	dfc00215 	stw	ra,8(sp)
  80ace8:	df000115 	stw	fp,4(sp)
  80acec:	df000104 	addi	fp,sp,4
  80acf0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  80acf4:	080c5740 	call	80c574 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80acf8:	00800044 	movi	r2,1
  80acfc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80ad00:	e037883a 	mov	sp,fp
  80ad04:	dfc00117 	ldw	ra,4(sp)
  80ad08:	df000017 	ldw	fp,0(sp)
  80ad0c:	dec00204 	addi	sp,sp,8
  80ad10:	f800283a 	ret

0080ad14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80ad14:	defffe04 	addi	sp,sp,-8
  80ad18:	dfc00115 	stw	ra,4(sp)
  80ad1c:	df000015 	stw	fp,0(sp)
  80ad20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80ad24:	01004034 	movhi	r4,256
  80ad28:	21040004 	addi	r4,r4,4096
  80ad2c:	000b883a 	mov	r5,zero
  80ad30:	01800044 	movi	r6,1
  80ad34:	01c0fa04 	movi	r7,1000
  80ad38:	080b8c40 	call	80b8c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80ad3c:	01002074 	movhi	r4,129
  80ad40:	21368504 	addi	r4,r4,-9708
  80ad44:	000b883a 	mov	r5,zero
  80ad48:	01800404 	movi	r6,16
  80ad4c:	080aef00 	call	80aef0 <altera_avalon_jtag_uart_init>
  80ad50:	01002074 	movhi	r4,129
  80ad54:	21367b04 	addi	r4,r4,-9748
  80ad58:	080ad700 	call	80ad70 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
  80ad5c:	e037883a 	mov	sp,fp
  80ad60:	dfc00117 	ldw	ra,4(sp)
  80ad64:	df000017 	ldw	fp,0(sp)
  80ad68:	dec00204 	addi	sp,sp,8
  80ad6c:	f800283a 	ret

0080ad70 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80ad70:	defffd04 	addi	sp,sp,-12
  80ad74:	dfc00215 	stw	ra,8(sp)
  80ad78:	df000115 	stw	fp,4(sp)
  80ad7c:	df000104 	addi	fp,sp,4
  80ad80:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80ad84:	e13fff17 	ldw	r4,-4(fp)
  80ad88:	01402074 	movhi	r5,129
  80ad8c:	297a9b04 	addi	r5,r5,-5524
  80ad90:	080bac40 	call	80bac4 <alt_dev_llist_insert>
}
  80ad94:	e037883a 	mov	sp,fp
  80ad98:	dfc00117 	ldw	ra,4(sp)
  80ad9c:	df000017 	ldw	fp,0(sp)
  80ada0:	dec00204 	addi	sp,sp,8
  80ada4:	f800283a 	ret

0080ada8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ada8:	defffa04 	addi	sp,sp,-24
  80adac:	dfc00515 	stw	ra,20(sp)
  80adb0:	df000415 	stw	fp,16(sp)
  80adb4:	df000404 	addi	fp,sp,16
  80adb8:	e13ffd15 	stw	r4,-12(fp)
  80adbc:	e17ffe15 	stw	r5,-8(fp)
  80adc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80adc4:	e0bffd17 	ldw	r2,-12(fp)
  80adc8:	10800017 	ldw	r2,0(r2)
  80adcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80add0:	e0bffc17 	ldw	r2,-16(fp)
  80add4:	11000a04 	addi	r4,r2,40
  80add8:	e0bffd17 	ldw	r2,-12(fp)
  80addc:	11c00217 	ldw	r7,8(r2)
  80ade0:	e17ffe17 	ldw	r5,-8(fp)
  80ade4:	e1bfff17 	ldw	r6,-4(fp)
  80ade8:	080b3f00 	call	80b3f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80adec:	e037883a 	mov	sp,fp
  80adf0:	dfc00117 	ldw	ra,4(sp)
  80adf4:	df000017 	ldw	fp,0(sp)
  80adf8:	dec00204 	addi	sp,sp,8
  80adfc:	f800283a 	ret

0080ae00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ae00:	defffa04 	addi	sp,sp,-24
  80ae04:	dfc00515 	stw	ra,20(sp)
  80ae08:	df000415 	stw	fp,16(sp)
  80ae0c:	df000404 	addi	fp,sp,16
  80ae10:	e13ffd15 	stw	r4,-12(fp)
  80ae14:	e17ffe15 	stw	r5,-8(fp)
  80ae18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ae1c:	e0bffd17 	ldw	r2,-12(fp)
  80ae20:	10800017 	ldw	r2,0(r2)
  80ae24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ae28:	e0bffc17 	ldw	r2,-16(fp)
  80ae2c:	11000a04 	addi	r4,r2,40
  80ae30:	e0bffd17 	ldw	r2,-12(fp)
  80ae34:	11c00217 	ldw	r7,8(r2)
  80ae38:	e17ffe17 	ldw	r5,-8(fp)
  80ae3c:	e1bfff17 	ldw	r6,-4(fp)
  80ae40:	080b6140 	call	80b614 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80ae44:	e037883a 	mov	sp,fp
  80ae48:	dfc00117 	ldw	ra,4(sp)
  80ae4c:	df000017 	ldw	fp,0(sp)
  80ae50:	dec00204 	addi	sp,sp,8
  80ae54:	f800283a 	ret

0080ae58 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80ae58:	defffc04 	addi	sp,sp,-16
  80ae5c:	dfc00315 	stw	ra,12(sp)
  80ae60:	df000215 	stw	fp,8(sp)
  80ae64:	df000204 	addi	fp,sp,8
  80ae68:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ae6c:	e0bfff17 	ldw	r2,-4(fp)
  80ae70:	10800017 	ldw	r2,0(r2)
  80ae74:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80ae78:	e0bffe17 	ldw	r2,-8(fp)
  80ae7c:	11000a04 	addi	r4,r2,40
  80ae80:	e0bfff17 	ldw	r2,-4(fp)
  80ae84:	11400217 	ldw	r5,8(r2)
  80ae88:	080b2880 	call	80b288 <altera_avalon_jtag_uart_close>
}
  80ae8c:	e037883a 	mov	sp,fp
  80ae90:	dfc00117 	ldw	ra,4(sp)
  80ae94:	df000017 	ldw	fp,0(sp)
  80ae98:	dec00204 	addi	sp,sp,8
  80ae9c:	f800283a 	ret

0080aea0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80aea0:	defffa04 	addi	sp,sp,-24
  80aea4:	dfc00515 	stw	ra,20(sp)
  80aea8:	df000415 	stw	fp,16(sp)
  80aeac:	df000404 	addi	fp,sp,16
  80aeb0:	e13ffd15 	stw	r4,-12(fp)
  80aeb4:	e17ffe15 	stw	r5,-8(fp)
  80aeb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80aebc:	e0bffd17 	ldw	r2,-12(fp)
  80aec0:	10800017 	ldw	r2,0(r2)
  80aec4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80aec8:	e0bffc17 	ldw	r2,-16(fp)
  80aecc:	11000a04 	addi	r4,r2,40
  80aed0:	e17ffe17 	ldw	r5,-8(fp)
  80aed4:	e1bfff17 	ldw	r6,-4(fp)
  80aed8:	080b2fc0 	call	80b2fc <altera_avalon_jtag_uart_ioctl>
}
  80aedc:	e037883a 	mov	sp,fp
  80aee0:	dfc00117 	ldw	ra,4(sp)
  80aee4:	df000017 	ldw	fp,0(sp)
  80aee8:	dec00204 	addi	sp,sp,8
  80aeec:	f800283a 	ret

0080aef0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80aef0:	defffa04 	addi	sp,sp,-24
  80aef4:	dfc00515 	stw	ra,20(sp)
  80aef8:	df000415 	stw	fp,16(sp)
  80aefc:	df000404 	addi	fp,sp,16
  80af00:	e13ffd15 	stw	r4,-12(fp)
  80af04:	e17ffe15 	stw	r5,-8(fp)
  80af08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80af0c:	e0fffd17 	ldw	r3,-12(fp)
  80af10:	00800044 	movi	r2,1
  80af14:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80af18:	e0bffd17 	ldw	r2,-12(fp)
  80af1c:	10800017 	ldw	r2,0(r2)
  80af20:	11000104 	addi	r4,r2,4
  80af24:	e0bffd17 	ldw	r2,-12(fp)
  80af28:	10800817 	ldw	r2,32(r2)
  80af2c:	1007883a 	mov	r3,r2
  80af30:	2005883a 	mov	r2,r4
  80af34:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80af38:	e13ffe17 	ldw	r4,-8(fp)
  80af3c:	e17fff17 	ldw	r5,-4(fp)
  80af40:	d8000015 	stw	zero,0(sp)
  80af44:	01802074 	movhi	r6,129
  80af48:	31abec04 	addi	r6,r6,-20560
  80af4c:	e1fffd17 	ldw	r7,-12(fp)
  80af50:	080bcd00 	call	80bcd0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80af54:	e0bffd17 	ldw	r2,-12(fp)
  80af58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80af5c:	e0bffd17 	ldw	r2,-12(fp)
  80af60:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80af64:	00802074 	movhi	r2,129
  80af68:	10814504 	addi	r2,r2,1300
  80af6c:	10800017 	ldw	r2,0(r2)
  80af70:	100b883a 	mov	r5,r2
  80af74:	01802074 	movhi	r6,129
  80af78:	31ac7604 	addi	r6,r6,-20008
  80af7c:	e1fffd17 	ldw	r7,-12(fp)
  80af80:	080b9540 	call	80b954 <alt_alarm_start>
  80af84:	1004403a 	cmpge	r2,r2,zero
  80af88:	1000041e 	bne	r2,zero,80af9c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80af8c:	e0fffd17 	ldw	r3,-12(fp)
  80af90:	00a00034 	movhi	r2,32768
  80af94:	10bfffc4 	addi	r2,r2,-1
  80af98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80af9c:	e037883a 	mov	sp,fp
  80afa0:	dfc00117 	ldw	ra,4(sp)
  80afa4:	df000017 	ldw	fp,0(sp)
  80afa8:	dec00204 	addi	sp,sp,8
  80afac:	f800283a 	ret

0080afb0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80afb0:	defff804 	addi	sp,sp,-32
  80afb4:	df000715 	stw	fp,28(sp)
  80afb8:	df000704 	addi	fp,sp,28
  80afbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80afc0:	e0bfff17 	ldw	r2,-4(fp)
  80afc4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80afc8:	e0bffe17 	ldw	r2,-8(fp)
  80afcc:	10800017 	ldw	r2,0(r2)
  80afd0:	e0bffd15 	stw	r2,-12(fp)
  80afd4:	00000006 	br	80afd8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80afd8:	e0bffd17 	ldw	r2,-12(fp)
  80afdc:	10800104 	addi	r2,r2,4
  80afe0:	10800037 	ldwio	r2,0(r2)
  80afe4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80afe8:	e0bffc17 	ldw	r2,-16(fp)
  80afec:	1080c00c 	andi	r2,r2,768
  80aff0:	1005003a 	cmpeq	r2,r2,zero
  80aff4:	1000741e 	bne	r2,zero,80b1c8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80aff8:	e0bffc17 	ldw	r2,-16(fp)
  80affc:	1080400c 	andi	r2,r2,256
  80b000:	1005003a 	cmpeq	r2,r2,zero
  80b004:	1000351e 	bne	r2,zero,80b0dc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80b008:	00800074 	movhi	r2,1
  80b00c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b010:	e0bffe17 	ldw	r2,-8(fp)
  80b014:	10800a17 	ldw	r2,40(r2)
  80b018:	10800044 	addi	r2,r2,1
  80b01c:	1081ffcc 	andi	r2,r2,2047
  80b020:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80b024:	e0bffe17 	ldw	r2,-8(fp)
  80b028:	10c00b17 	ldw	r3,44(r2)
  80b02c:	e0bffa17 	ldw	r2,-24(fp)
  80b030:	18801626 	beq	r3,r2,80b08c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80b034:	e0bffd17 	ldw	r2,-12(fp)
  80b038:	10800037 	ldwio	r2,0(r2)
  80b03c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80b040:	e0bffb17 	ldw	r2,-20(fp)
  80b044:	10a0000c 	andi	r2,r2,32768
  80b048:	1005003a 	cmpeq	r2,r2,zero
  80b04c:	10000f1e 	bne	r2,zero,80b08c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b050:	e0bffe17 	ldw	r2,-8(fp)
  80b054:	10c00a17 	ldw	r3,40(r2)
  80b058:	e0bffb17 	ldw	r2,-20(fp)
  80b05c:	1009883a 	mov	r4,r2
  80b060:	e0bffe17 	ldw	r2,-8(fp)
  80b064:	1885883a 	add	r2,r3,r2
  80b068:	10800e04 	addi	r2,r2,56
  80b06c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b070:	e0bffe17 	ldw	r2,-8(fp)
  80b074:	10800a17 	ldw	r2,40(r2)
  80b078:	10800044 	addi	r2,r2,1
  80b07c:	10c1ffcc 	andi	r3,r2,2047
  80b080:	e0bffe17 	ldw	r2,-8(fp)
  80b084:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80b088:	003fe106 	br	80b010 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80b08c:	e0bffb17 	ldw	r2,-20(fp)
  80b090:	10bfffec 	andhi	r2,r2,65535
  80b094:	1005003a 	cmpeq	r2,r2,zero
  80b098:	1000101e 	bne	r2,zero,80b0dc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b09c:	e0bffe17 	ldw	r2,-8(fp)
  80b0a0:	10c00817 	ldw	r3,32(r2)
  80b0a4:	00bfff84 	movi	r2,-2
  80b0a8:	1886703a 	and	r3,r3,r2
  80b0ac:	e0bffe17 	ldw	r2,-8(fp)
  80b0b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80b0b4:	e0bffd17 	ldw	r2,-12(fp)
  80b0b8:	11000104 	addi	r4,r2,4
  80b0bc:	e0bffe17 	ldw	r2,-8(fp)
  80b0c0:	10800817 	ldw	r2,32(r2)
  80b0c4:	1007883a 	mov	r3,r2
  80b0c8:	2005883a 	mov	r2,r4
  80b0cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b0d0:	e0bffd17 	ldw	r2,-12(fp)
  80b0d4:	10800104 	addi	r2,r2,4
  80b0d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80b0dc:	e0bffc17 	ldw	r2,-16(fp)
  80b0e0:	1080800c 	andi	r2,r2,512
  80b0e4:	1005003a 	cmpeq	r2,r2,zero
  80b0e8:	103fbb1e 	bne	r2,zero,80afd8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80b0ec:	e0bffc17 	ldw	r2,-16(fp)
  80b0f0:	10bfffec 	andhi	r2,r2,65535
  80b0f4:	1004d43a 	srli	r2,r2,16
  80b0f8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b0fc:	00001506 	br	80b154 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80b100:	e13ffd17 	ldw	r4,-12(fp)
  80b104:	e0bffe17 	ldw	r2,-8(fp)
  80b108:	10c00d17 	ldw	r3,52(r2)
  80b10c:	e0bffe17 	ldw	r2,-8(fp)
  80b110:	1885883a 	add	r2,r3,r2
  80b114:	10820e04 	addi	r2,r2,2104
  80b118:	10800003 	ldbu	r2,0(r2)
  80b11c:	10c03fcc 	andi	r3,r2,255
  80b120:	18c0201c 	xori	r3,r3,128
  80b124:	18ffe004 	addi	r3,r3,-128
  80b128:	2005883a 	mov	r2,r4
  80b12c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b130:	e0bffe17 	ldw	r2,-8(fp)
  80b134:	10800d17 	ldw	r2,52(r2)
  80b138:	10800044 	addi	r2,r2,1
  80b13c:	10c1ffcc 	andi	r3,r2,2047
  80b140:	e0bffe17 	ldw	r2,-8(fp)
  80b144:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80b148:	e0bff917 	ldw	r2,-28(fp)
  80b14c:	10bfffc4 	addi	r2,r2,-1
  80b150:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b154:	e0bff917 	ldw	r2,-28(fp)
  80b158:	1005003a 	cmpeq	r2,r2,zero
  80b15c:	1000051e 	bne	r2,zero,80b174 <altera_avalon_jtag_uart_irq+0x1c4>
  80b160:	e0bffe17 	ldw	r2,-8(fp)
  80b164:	10c00d17 	ldw	r3,52(r2)
  80b168:	e0bffe17 	ldw	r2,-8(fp)
  80b16c:	10800c17 	ldw	r2,48(r2)
  80b170:	18bfe31e 	bne	r3,r2,80b100 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80b174:	e0bff917 	ldw	r2,-28(fp)
  80b178:	1005003a 	cmpeq	r2,r2,zero
  80b17c:	103f961e 	bne	r2,zero,80afd8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b180:	e0bffe17 	ldw	r2,-8(fp)
  80b184:	10c00817 	ldw	r3,32(r2)
  80b188:	00bfff44 	movi	r2,-3
  80b18c:	1886703a 	and	r3,r3,r2
  80b190:	e0bffe17 	ldw	r2,-8(fp)
  80b194:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b198:	e0bffe17 	ldw	r2,-8(fp)
  80b19c:	10800017 	ldw	r2,0(r2)
  80b1a0:	11000104 	addi	r4,r2,4
  80b1a4:	e0bffe17 	ldw	r2,-8(fp)
  80b1a8:	10800817 	ldw	r2,32(r2)
  80b1ac:	1007883a 	mov	r3,r2
  80b1b0:	2005883a 	mov	r2,r4
  80b1b4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b1b8:	e0bffd17 	ldw	r2,-12(fp)
  80b1bc:	10800104 	addi	r2,r2,4
  80b1c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80b1c4:	003f8406 	br	80afd8 <altera_avalon_jtag_uart_irq+0x28>
}
  80b1c8:	e037883a 	mov	sp,fp
  80b1cc:	df000017 	ldw	fp,0(sp)
  80b1d0:	dec00104 	addi	sp,sp,4
  80b1d4:	f800283a 	ret

0080b1d8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80b1d8:	defffc04 	addi	sp,sp,-16
  80b1dc:	df000315 	stw	fp,12(sp)
  80b1e0:	df000304 	addi	fp,sp,12
  80b1e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80b1e8:	e0bfff17 	ldw	r2,-4(fp)
  80b1ec:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80b1f0:	e0bffe17 	ldw	r2,-8(fp)
  80b1f4:	10800017 	ldw	r2,0(r2)
  80b1f8:	10800104 	addi	r2,r2,4
  80b1fc:	10800037 	ldwio	r2,0(r2)
  80b200:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80b204:	e0bffd17 	ldw	r2,-12(fp)
  80b208:	1081000c 	andi	r2,r2,1024
  80b20c:	1005003a 	cmpeq	r2,r2,zero
  80b210:	10000c1e 	bne	r2,zero,80b244 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80b214:	e0bffe17 	ldw	r2,-8(fp)
  80b218:	10800017 	ldw	r2,0(r2)
  80b21c:	11000104 	addi	r4,r2,4
  80b220:	e0bffe17 	ldw	r2,-8(fp)
  80b224:	10800817 	ldw	r2,32(r2)
  80b228:	10810014 	ori	r2,r2,1024
  80b22c:	1007883a 	mov	r3,r2
  80b230:	2005883a 	mov	r2,r4
  80b234:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80b238:	e0bffe17 	ldw	r2,-8(fp)
  80b23c:	10000915 	stw	zero,36(r2)
  80b240:	00000a06 	br	80b26c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b244:	e0bffe17 	ldw	r2,-8(fp)
  80b248:	10c00917 	ldw	r3,36(r2)
  80b24c:	00a00034 	movhi	r2,32768
  80b250:	10bfff04 	addi	r2,r2,-4
  80b254:	10c00536 	bltu	r2,r3,80b26c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80b258:	e0bffe17 	ldw	r2,-8(fp)
  80b25c:	10800917 	ldw	r2,36(r2)
  80b260:	10c00044 	addi	r3,r2,1
  80b264:	e0bffe17 	ldw	r2,-8(fp)
  80b268:	10c00915 	stw	r3,36(r2)
  80b26c:	00802074 	movhi	r2,129
  80b270:	10814504 	addi	r2,r2,1300
  80b274:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b278:	e037883a 	mov	sp,fp
  80b27c:	df000017 	ldw	fp,0(sp)
  80b280:	dec00104 	addi	sp,sp,4
  80b284:	f800283a 	ret

0080b288 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80b288:	defffc04 	addi	sp,sp,-16
  80b28c:	df000315 	stw	fp,12(sp)
  80b290:	df000304 	addi	fp,sp,12
  80b294:	e13ffd15 	stw	r4,-12(fp)
  80b298:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b29c:	00000706 	br	80b2bc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80b2a0:	e0bffe17 	ldw	r2,-8(fp)
  80b2a4:	1090000c 	andi	r2,r2,16384
  80b2a8:	1005003a 	cmpeq	r2,r2,zero
  80b2ac:	1000031e 	bne	r2,zero,80b2bc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80b2b0:	00bffd44 	movi	r2,-11
  80b2b4:	e0bfff15 	stw	r2,-4(fp)
  80b2b8:	00000b06 	br	80b2e8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b2bc:	e0bffd17 	ldw	r2,-12(fp)
  80b2c0:	10c00d17 	ldw	r3,52(r2)
  80b2c4:	e0bffd17 	ldw	r2,-12(fp)
  80b2c8:	10800c17 	ldw	r2,48(r2)
  80b2cc:	18800526 	beq	r3,r2,80b2e4 <altera_avalon_jtag_uart_close+0x5c>
  80b2d0:	e0bffd17 	ldw	r2,-12(fp)
  80b2d4:	10c00917 	ldw	r3,36(r2)
  80b2d8:	e0bffd17 	ldw	r2,-12(fp)
  80b2dc:	10800117 	ldw	r2,4(r2)
  80b2e0:	18bfef36 	bltu	r3,r2,80b2a0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80b2e4:	e03fff15 	stw	zero,-4(fp)
  80b2e8:	e0bfff17 	ldw	r2,-4(fp)
}
  80b2ec:	e037883a 	mov	sp,fp
  80b2f0:	df000017 	ldw	fp,0(sp)
  80b2f4:	dec00104 	addi	sp,sp,4
  80b2f8:	f800283a 	ret

0080b2fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80b2fc:	defff804 	addi	sp,sp,-32
  80b300:	df000715 	stw	fp,28(sp)
  80b304:	df000704 	addi	fp,sp,28
  80b308:	e13ffb15 	stw	r4,-20(fp)
  80b30c:	e17ffc15 	stw	r5,-16(fp)
  80b310:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80b314:	00bff9c4 	movi	r2,-25
  80b318:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80b31c:	e0bffc17 	ldw	r2,-16(fp)
  80b320:	e0bfff15 	stw	r2,-4(fp)
  80b324:	e0ffff17 	ldw	r3,-4(fp)
  80b328:	189a8060 	cmpeqi	r2,r3,27137
  80b32c:	1000041e 	bne	r2,zero,80b340 <altera_avalon_jtag_uart_ioctl+0x44>
  80b330:	e0ffff17 	ldw	r3,-4(fp)
  80b334:	189a80a0 	cmpeqi	r2,r3,27138
  80b338:	10001b1e 	bne	r2,zero,80b3a8 <altera_avalon_jtag_uart_ioctl+0xac>
  80b33c:	00002706 	br	80b3dc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80b340:	e0bffb17 	ldw	r2,-20(fp)
  80b344:	10c00117 	ldw	r3,4(r2)
  80b348:	00a00034 	movhi	r2,32768
  80b34c:	10bfffc4 	addi	r2,r2,-1
  80b350:	18802226 	beq	r3,r2,80b3dc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80b354:	e0bffd17 	ldw	r2,-12(fp)
  80b358:	10800017 	ldw	r2,0(r2)
  80b35c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80b360:	e0bff917 	ldw	r2,-28(fp)
  80b364:	10800090 	cmplti	r2,r2,2
  80b368:	1000071e 	bne	r2,zero,80b388 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b36c:	e0fff917 	ldw	r3,-28(fp)
  80b370:	00a00034 	movhi	r2,32768
  80b374:	10bfffc4 	addi	r2,r2,-1
  80b378:	18800326 	beq	r3,r2,80b388 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b37c:	e0bff917 	ldw	r2,-28(fp)
  80b380:	e0bffe15 	stw	r2,-8(fp)
  80b384:	00000306 	br	80b394 <altera_avalon_jtag_uart_ioctl+0x98>
  80b388:	00e00034 	movhi	r3,32768
  80b38c:	18ffff84 	addi	r3,r3,-2
  80b390:	e0fffe15 	stw	r3,-8(fp)
  80b394:	e0bffb17 	ldw	r2,-20(fp)
  80b398:	e0fffe17 	ldw	r3,-8(fp)
  80b39c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80b3a0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80b3a4:	00000d06 	br	80b3dc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80b3a8:	e0bffb17 	ldw	r2,-20(fp)
  80b3ac:	10c00117 	ldw	r3,4(r2)
  80b3b0:	00a00034 	movhi	r2,32768
  80b3b4:	10bfffc4 	addi	r2,r2,-1
  80b3b8:	18800826 	beq	r3,r2,80b3dc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80b3bc:	e13ffd17 	ldw	r4,-12(fp)
  80b3c0:	e0bffb17 	ldw	r2,-20(fp)
  80b3c4:	10c00917 	ldw	r3,36(r2)
  80b3c8:	e0bffb17 	ldw	r2,-20(fp)
  80b3cc:	10800117 	ldw	r2,4(r2)
  80b3d0:	1885803a 	cmpltu	r2,r3,r2
  80b3d4:	20800015 	stw	r2,0(r4)
      rc = 0;
  80b3d8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80b3dc:	e0bffa17 	ldw	r2,-24(fp)
}
  80b3e0:	e037883a 	mov	sp,fp
  80b3e4:	df000017 	ldw	fp,0(sp)
  80b3e8:	dec00104 	addi	sp,sp,4
  80b3ec:	f800283a 	ret

0080b3f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b3f0:	defff204 	addi	sp,sp,-56
  80b3f4:	dfc00d15 	stw	ra,52(sp)
  80b3f8:	df000c15 	stw	fp,48(sp)
  80b3fc:	df000c04 	addi	fp,sp,48
  80b400:	e13ffb15 	stw	r4,-20(fp)
  80b404:	e17ffc15 	stw	r5,-16(fp)
  80b408:	e1bffd15 	stw	r6,-12(fp)
  80b40c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80b410:	e0bffc17 	ldw	r2,-16(fp)
  80b414:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b418:	00004806 	br	80b53c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b41c:	e0bffb17 	ldw	r2,-20(fp)
  80b420:	10800a17 	ldw	r2,40(r2)
  80b424:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80b428:	e0bffb17 	ldw	r2,-20(fp)
  80b42c:	10800b17 	ldw	r2,44(r2)
  80b430:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80b434:	e0fff717 	ldw	r3,-36(fp)
  80b438:	e0bff617 	ldw	r2,-40(fp)
  80b43c:	18800536 	bltu	r3,r2,80b454 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80b440:	e0bff717 	ldw	r2,-36(fp)
  80b444:	e0fff617 	ldw	r3,-40(fp)
  80b448:	10c5c83a 	sub	r2,r2,r3
  80b44c:	e0bff815 	stw	r2,-32(fp)
  80b450:	00000406 	br	80b464 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80b454:	00820004 	movi	r2,2048
  80b458:	e0fff617 	ldw	r3,-40(fp)
  80b45c:	10c5c83a 	sub	r2,r2,r3
  80b460:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80b464:	e0bff817 	ldw	r2,-32(fp)
  80b468:	1005003a 	cmpeq	r2,r2,zero
  80b46c:	10001f1e 	bne	r2,zero,80b4ec <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80b470:	e0fffd17 	ldw	r3,-12(fp)
  80b474:	e0bff817 	ldw	r2,-32(fp)
  80b478:	1880022e 	bgeu	r3,r2,80b484 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80b47c:	e0bffd17 	ldw	r2,-12(fp)
  80b480:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80b484:	e0bffb17 	ldw	r2,-20(fp)
  80b488:	10c00e04 	addi	r3,r2,56
  80b48c:	e0bff617 	ldw	r2,-40(fp)
  80b490:	1887883a 	add	r3,r3,r2
  80b494:	e0bffa17 	ldw	r2,-24(fp)
  80b498:	1009883a 	mov	r4,r2
  80b49c:	180b883a 	mov	r5,r3
  80b4a0:	e1bff817 	ldw	r6,-32(fp)
  80b4a4:	0805fe40 	call	805fe4 <memcpy>
      ptr   += n;
  80b4a8:	e0fff817 	ldw	r3,-32(fp)
  80b4ac:	e0bffa17 	ldw	r2,-24(fp)
  80b4b0:	10c5883a 	add	r2,r2,r3
  80b4b4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80b4b8:	e0fffd17 	ldw	r3,-12(fp)
  80b4bc:	e0bff817 	ldw	r2,-32(fp)
  80b4c0:	1885c83a 	sub	r2,r3,r2
  80b4c4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b4c8:	e0fff617 	ldw	r3,-40(fp)
  80b4cc:	e0bff817 	ldw	r2,-32(fp)
  80b4d0:	1885883a 	add	r2,r3,r2
  80b4d4:	10c1ffcc 	andi	r3,r2,2047
  80b4d8:	e0bffb17 	ldw	r2,-20(fp)
  80b4dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80b4e0:	e0bffd17 	ldw	r2,-12(fp)
  80b4e4:	10800048 	cmpgei	r2,r2,1
  80b4e8:	103fcc1e 	bne	r2,zero,80b41c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80b4ec:	e0fffa17 	ldw	r3,-24(fp)
  80b4f0:	e0bffc17 	ldw	r2,-16(fp)
  80b4f4:	1880141e 	bne	r3,r2,80b548 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b4f8:	e0bffe17 	ldw	r2,-8(fp)
  80b4fc:	1090000c 	andi	r2,r2,16384
  80b500:	1004c03a 	cmpne	r2,r2,zero
  80b504:	1000101e 	bne	r2,zero,80b548 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80b508:	e0bffb17 	ldw	r2,-20(fp)
  80b50c:	10c00a17 	ldw	r3,40(r2)
  80b510:	e0bff717 	ldw	r2,-36(fp)
  80b514:	1880051e 	bne	r3,r2,80b52c <altera_avalon_jtag_uart_read+0x13c>
  80b518:	e0bffb17 	ldw	r2,-20(fp)
  80b51c:	10c00917 	ldw	r3,36(r2)
  80b520:	e0bffb17 	ldw	r2,-20(fp)
  80b524:	10800117 	ldw	r2,4(r2)
  80b528:	18bff736 	bltu	r3,r2,80b508 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80b52c:	e0bffb17 	ldw	r2,-20(fp)
  80b530:	10c00a17 	ldw	r3,40(r2)
  80b534:	e0bff717 	ldw	r2,-36(fp)
  80b538:	18800326 	beq	r3,r2,80b548 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b53c:	e0bffd17 	ldw	r2,-12(fp)
  80b540:	10800048 	cmpgei	r2,r2,1
  80b544:	103fb51e 	bne	r2,zero,80b41c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80b548:	e0fffa17 	ldw	r3,-24(fp)
  80b54c:	e0bffc17 	ldw	r2,-16(fp)
  80b550:	18801926 	beq	r3,r2,80b5b8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b554:	0005303a 	rdctl	r2,status
  80b558:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b55c:	e0fff517 	ldw	r3,-44(fp)
  80b560:	00bfff84 	movi	r2,-2
  80b564:	1884703a 	and	r2,r3,r2
  80b568:	1001703a 	wrctl	status,r2
  
  return context;
  80b56c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80b570:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b574:	e0bffb17 	ldw	r2,-20(fp)
  80b578:	10800817 	ldw	r2,32(r2)
  80b57c:	10c00054 	ori	r3,r2,1
  80b580:	e0bffb17 	ldw	r2,-20(fp)
  80b584:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b588:	e0bffb17 	ldw	r2,-20(fp)
  80b58c:	10800017 	ldw	r2,0(r2)
  80b590:	11000104 	addi	r4,r2,4
  80b594:	e0bffb17 	ldw	r2,-20(fp)
  80b598:	10800817 	ldw	r2,32(r2)
  80b59c:	1007883a 	mov	r3,r2
  80b5a0:	2005883a 	mov	r2,r4
  80b5a4:	10c00035 	stwio	r3,0(r2)
  80b5a8:	e0bff917 	ldw	r2,-28(fp)
  80b5ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b5b0:	e0bff417 	ldw	r2,-48(fp)
  80b5b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80b5b8:	e0fffa17 	ldw	r3,-24(fp)
  80b5bc:	e0bffc17 	ldw	r2,-16(fp)
  80b5c0:	18800526 	beq	r3,r2,80b5d8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80b5c4:	e0fffa17 	ldw	r3,-24(fp)
  80b5c8:	e0bffc17 	ldw	r2,-16(fp)
  80b5cc:	1887c83a 	sub	r3,r3,r2
  80b5d0:	e0ffff15 	stw	r3,-4(fp)
  80b5d4:	00000906 	br	80b5fc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80b5d8:	e0bffe17 	ldw	r2,-8(fp)
  80b5dc:	1090000c 	andi	r2,r2,16384
  80b5e0:	1005003a 	cmpeq	r2,r2,zero
  80b5e4:	1000031e 	bne	r2,zero,80b5f4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80b5e8:	00bffd44 	movi	r2,-11
  80b5ec:	e0bfff15 	stw	r2,-4(fp)
  80b5f0:	00000206 	br	80b5fc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80b5f4:	00bffec4 	movi	r2,-5
  80b5f8:	e0bfff15 	stw	r2,-4(fp)
  80b5fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80b600:	e037883a 	mov	sp,fp
  80b604:	dfc00117 	ldw	ra,4(sp)
  80b608:	df000017 	ldw	fp,0(sp)
  80b60c:	dec00204 	addi	sp,sp,8
  80b610:	f800283a 	ret

0080b614 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80b614:	defff204 	addi	sp,sp,-56
  80b618:	dfc00d15 	stw	ra,52(sp)
  80b61c:	df000c15 	stw	fp,48(sp)
  80b620:	df000c04 	addi	fp,sp,48
  80b624:	e13ffb15 	stw	r4,-20(fp)
  80b628:	e17ffc15 	stw	r5,-16(fp)
  80b62c:	e1bffd15 	stw	r6,-12(fp)
  80b630:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80b634:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80b638:	e0bffc17 	ldw	r2,-16(fp)
  80b63c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b640:	00003a06 	br	80b72c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80b644:	e0bffb17 	ldw	r2,-20(fp)
  80b648:	10800c17 	ldw	r2,48(r2)
  80b64c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80b650:	e0bffb17 	ldw	r2,-20(fp)
  80b654:	10800d17 	ldw	r2,52(r2)
  80b658:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80b65c:	e0fffa17 	ldw	r3,-24(fp)
  80b660:	e0bff917 	ldw	r2,-28(fp)
  80b664:	1880062e 	bgeu	r3,r2,80b680 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80b668:	e0fff917 	ldw	r3,-28(fp)
  80b66c:	e0bffa17 	ldw	r2,-24(fp)
  80b670:	1885c83a 	sub	r2,r3,r2
  80b674:	10bfffc4 	addi	r2,r2,-1
  80b678:	e0bff815 	stw	r2,-32(fp)
  80b67c:	00000c06 	br	80b6b0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80b680:	e0bff917 	ldw	r2,-28(fp)
  80b684:	1005003a 	cmpeq	r2,r2,zero
  80b688:	1000051e 	bne	r2,zero,80b6a0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80b68c:	00820004 	movi	r2,2048
  80b690:	e0fffa17 	ldw	r3,-24(fp)
  80b694:	10c5c83a 	sub	r2,r2,r3
  80b698:	e0bff815 	stw	r2,-32(fp)
  80b69c:	00000406 	br	80b6b0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80b6a0:	0081ffc4 	movi	r2,2047
  80b6a4:	e0fffa17 	ldw	r3,-24(fp)
  80b6a8:	10c5c83a 	sub	r2,r2,r3
  80b6ac:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80b6b0:	e0bff817 	ldw	r2,-32(fp)
  80b6b4:	1005003a 	cmpeq	r2,r2,zero
  80b6b8:	10001f1e 	bne	r2,zero,80b738 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80b6bc:	e0fffd17 	ldw	r3,-12(fp)
  80b6c0:	e0bff817 	ldw	r2,-32(fp)
  80b6c4:	1880022e 	bgeu	r3,r2,80b6d0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80b6c8:	e0bffd17 	ldw	r2,-12(fp)
  80b6cc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80b6d0:	e0bffb17 	ldw	r2,-20(fp)
  80b6d4:	10c20e04 	addi	r3,r2,2104
  80b6d8:	e0bffa17 	ldw	r2,-24(fp)
  80b6dc:	1885883a 	add	r2,r3,r2
  80b6e0:	e0fffc17 	ldw	r3,-16(fp)
  80b6e4:	1009883a 	mov	r4,r2
  80b6e8:	180b883a 	mov	r5,r3
  80b6ec:	e1bff817 	ldw	r6,-32(fp)
  80b6f0:	0805fe40 	call	805fe4 <memcpy>
      ptr   += n;
  80b6f4:	e0fff817 	ldw	r3,-32(fp)
  80b6f8:	e0bffc17 	ldw	r2,-16(fp)
  80b6fc:	10c5883a 	add	r2,r2,r3
  80b700:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80b704:	e0fffd17 	ldw	r3,-12(fp)
  80b708:	e0bff817 	ldw	r2,-32(fp)
  80b70c:	1885c83a 	sub	r2,r3,r2
  80b710:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b714:	e0fffa17 	ldw	r3,-24(fp)
  80b718:	e0bff817 	ldw	r2,-32(fp)
  80b71c:	1885883a 	add	r2,r3,r2
  80b720:	10c1ffcc 	andi	r3,r2,2047
  80b724:	e0bffb17 	ldw	r2,-20(fp)
  80b728:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b72c:	e0bffd17 	ldw	r2,-12(fp)
  80b730:	10800048 	cmpgei	r2,r2,1
  80b734:	103fc31e 	bne	r2,zero,80b644 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b738:	0005303a 	rdctl	r2,status
  80b73c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b740:	e0fff517 	ldw	r3,-44(fp)
  80b744:	00bfff84 	movi	r2,-2
  80b748:	1884703a 	and	r2,r3,r2
  80b74c:	1001703a 	wrctl	status,r2
  
  return context;
  80b750:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80b754:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b758:	e0bffb17 	ldw	r2,-20(fp)
  80b75c:	10800817 	ldw	r2,32(r2)
  80b760:	10c00094 	ori	r3,r2,2
  80b764:	e0bffb17 	ldw	r2,-20(fp)
  80b768:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b76c:	e0bffb17 	ldw	r2,-20(fp)
  80b770:	10800017 	ldw	r2,0(r2)
  80b774:	11000104 	addi	r4,r2,4
  80b778:	e0bffb17 	ldw	r2,-20(fp)
  80b77c:	10800817 	ldw	r2,32(r2)
  80b780:	1007883a 	mov	r3,r2
  80b784:	2005883a 	mov	r2,r4
  80b788:	10c00035 	stwio	r3,0(r2)
  80b78c:	e0bff717 	ldw	r2,-36(fp)
  80b790:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b794:	e0bff417 	ldw	r2,-48(fp)
  80b798:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80b79c:	e0bffd17 	ldw	r2,-12(fp)
  80b7a0:	10800050 	cmplti	r2,r2,1
  80b7a4:	1000111e 	bne	r2,zero,80b7ec <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80b7a8:	e0bffe17 	ldw	r2,-8(fp)
  80b7ac:	1090000c 	andi	r2,r2,16384
  80b7b0:	1004c03a 	cmpne	r2,r2,zero
  80b7b4:	1000101e 	bne	r2,zero,80b7f8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80b7b8:	e0bffb17 	ldw	r2,-20(fp)
  80b7bc:	10c00d17 	ldw	r3,52(r2)
  80b7c0:	e0bff917 	ldw	r2,-28(fp)
  80b7c4:	1880051e 	bne	r3,r2,80b7dc <altera_avalon_jtag_uart_write+0x1c8>
  80b7c8:	e0bffb17 	ldw	r2,-20(fp)
  80b7cc:	10c00917 	ldw	r3,36(r2)
  80b7d0:	e0bffb17 	ldw	r2,-20(fp)
  80b7d4:	10800117 	ldw	r2,4(r2)
  80b7d8:	18bff736 	bltu	r3,r2,80b7b8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80b7dc:	e0bffb17 	ldw	r2,-20(fp)
  80b7e0:	10c00d17 	ldw	r3,52(r2)
  80b7e4:	e0bff917 	ldw	r2,-28(fp)
  80b7e8:	18800326 	beq	r3,r2,80b7f8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80b7ec:	e0bffd17 	ldw	r2,-12(fp)
  80b7f0:	10800048 	cmpgei	r2,r2,1
  80b7f4:	103fcd1e 	bne	r2,zero,80b72c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80b7f8:	e0fffc17 	ldw	r3,-16(fp)
  80b7fc:	e0bff617 	ldw	r2,-40(fp)
  80b800:	18800526 	beq	r3,r2,80b818 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80b804:	e0fffc17 	ldw	r3,-16(fp)
  80b808:	e0bff617 	ldw	r2,-40(fp)
  80b80c:	1887c83a 	sub	r3,r3,r2
  80b810:	e0ffff15 	stw	r3,-4(fp)
  80b814:	00000906 	br	80b83c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80b818:	e0bffe17 	ldw	r2,-8(fp)
  80b81c:	1090000c 	andi	r2,r2,16384
  80b820:	1005003a 	cmpeq	r2,r2,zero
  80b824:	1000031e 	bne	r2,zero,80b834 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80b828:	00bffd44 	movi	r2,-11
  80b82c:	e0bfff15 	stw	r2,-4(fp)
  80b830:	00000206 	br	80b83c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80b834:	00bffec4 	movi	r2,-5
  80b838:	e0bfff15 	stw	r2,-4(fp)
  80b83c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b840:	e037883a 	mov	sp,fp
  80b844:	dfc00117 	ldw	ra,4(sp)
  80b848:	df000017 	ldw	fp,0(sp)
  80b84c:	dec00204 	addi	sp,sp,8
  80b850:	f800283a 	ret

0080b854 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80b854:	defffa04 	addi	sp,sp,-24
  80b858:	dfc00515 	stw	ra,20(sp)
  80b85c:	df000415 	stw	fp,16(sp)
  80b860:	df000404 	addi	fp,sp,16
  80b864:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80b868:	e0bfff17 	ldw	r2,-4(fp)
  80b86c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80b870:	e0bfff17 	ldw	r2,-4(fp)
  80b874:	10800104 	addi	r2,r2,4
  80b878:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b87c:	0005303a 	rdctl	r2,status
  80b880:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b884:	e0fffd17 	ldw	r3,-12(fp)
  80b888:	00bfff84 	movi	r2,-2
  80b88c:	1884703a 	and	r2,r3,r2
  80b890:	1001703a 	wrctl	status,r2
  
  return context;
  80b894:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80b898:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80b89c:	080c4680 	call	80c468 <alt_tick>
  80b8a0:	e0bffe17 	ldw	r2,-8(fp)
  80b8a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b8a8:	e0bffc17 	ldw	r2,-16(fp)
  80b8ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80b8b0:	e037883a 	mov	sp,fp
  80b8b4:	dfc00117 	ldw	ra,4(sp)
  80b8b8:	df000017 	ldw	fp,0(sp)
  80b8bc:	dec00204 	addi	sp,sp,8
  80b8c0:	f800283a 	ret

0080b8c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80b8c4:	defff804 	addi	sp,sp,-32
  80b8c8:	dfc00715 	stw	ra,28(sp)
  80b8cc:	df000615 	stw	fp,24(sp)
  80b8d0:	df000604 	addi	fp,sp,24
  80b8d4:	e13ffc15 	stw	r4,-16(fp)
  80b8d8:	e17ffd15 	stw	r5,-12(fp)
  80b8dc:	e1bffe15 	stw	r6,-8(fp)
  80b8e0:	e1ffff15 	stw	r7,-4(fp)
  80b8e4:	e0bfff17 	ldw	r2,-4(fp)
  80b8e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80b8ec:	00802074 	movhi	r2,129
  80b8f0:	10814504 	addi	r2,r2,1300
  80b8f4:	10800017 	ldw	r2,0(r2)
  80b8f8:	1004c03a 	cmpne	r2,r2,zero
  80b8fc:	1000041e 	bne	r2,zero,80b910 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80b900:	00c02074 	movhi	r3,129
  80b904:	18c14504 	addi	r3,r3,1300
  80b908:	e0bffb17 	ldw	r2,-20(fp)
  80b90c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80b910:	e0bffc17 	ldw	r2,-16(fp)
  80b914:	10800104 	addi	r2,r2,4
  80b918:	1007883a 	mov	r3,r2
  80b91c:	008001c4 	movi	r2,7
  80b920:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80b924:	d8000015 	stw	zero,0(sp)
  80b928:	e13ffd17 	ldw	r4,-12(fp)
  80b92c:	e17ffe17 	ldw	r5,-8(fp)
  80b930:	01802074 	movhi	r6,129
  80b934:	31ae1504 	addi	r6,r6,-18348
  80b938:	e1fffc17 	ldw	r7,-16(fp)
  80b93c:	080bcd00 	call	80bcd0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80b940:	e037883a 	mov	sp,fp
  80b944:	dfc00117 	ldw	ra,4(sp)
  80b948:	df000017 	ldw	fp,0(sp)
  80b94c:	dec00204 	addi	sp,sp,8
  80b950:	f800283a 	ret

0080b954 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80b954:	defff404 	addi	sp,sp,-48
  80b958:	df000b15 	stw	fp,44(sp)
  80b95c:	df000b04 	addi	fp,sp,44
  80b960:	e13ffb15 	stw	r4,-20(fp)
  80b964:	e17ffc15 	stw	r5,-16(fp)
  80b968:	e1bffd15 	stw	r6,-12(fp)
  80b96c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80b970:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80b974:	00802074 	movhi	r2,129
  80b978:	10814504 	addi	r2,r2,1300
  80b97c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80b980:	1005003a 	cmpeq	r2,r2,zero
  80b984:	1000411e 	bne	r2,zero,80ba8c <alt_alarm_start+0x138>
  {
    if (alarm)
  80b988:	e0bffb17 	ldw	r2,-20(fp)
  80b98c:	1005003a 	cmpeq	r2,r2,zero
  80b990:	10003b1e 	bne	r2,zero,80ba80 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80b994:	e0fffb17 	ldw	r3,-20(fp)
  80b998:	e0bffd17 	ldw	r2,-12(fp)
  80b99c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80b9a0:	e0fffb17 	ldw	r3,-20(fp)
  80b9a4:	e0bffe17 	ldw	r2,-8(fp)
  80b9a8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b9ac:	0005303a 	rdctl	r2,status
  80b9b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b9b4:	e0fff817 	ldw	r3,-32(fp)
  80b9b8:	00bfff84 	movi	r2,-2
  80b9bc:	1884703a 	and	r2,r3,r2
  80b9c0:	1001703a 	wrctl	status,r2
  
  return context;
  80b9c4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80b9c8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80b9cc:	00802074 	movhi	r2,129
  80b9d0:	10814604 	addi	r2,r2,1304
  80b9d4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80b9d8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80b9dc:	e0fffc17 	ldw	r3,-16(fp)
  80b9e0:	e0bff917 	ldw	r2,-28(fp)
  80b9e4:	1885883a 	add	r2,r3,r2
  80b9e8:	10c00044 	addi	r3,r2,1
  80b9ec:	e0bffb17 	ldw	r2,-20(fp)
  80b9f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80b9f4:	e0bffb17 	ldw	r2,-20(fp)
  80b9f8:	10c00217 	ldw	r3,8(r2)
  80b9fc:	e0bff917 	ldw	r2,-28(fp)
  80ba00:	1880042e 	bgeu	r3,r2,80ba14 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80ba04:	e0fffb17 	ldw	r3,-20(fp)
  80ba08:	00800044 	movi	r2,1
  80ba0c:	18800405 	stb	r2,16(r3)
  80ba10:	00000206 	br	80ba1c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80ba14:	e0bffb17 	ldw	r2,-20(fp)
  80ba18:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80ba1c:	e0fffb17 	ldw	r3,-20(fp)
  80ba20:	00802074 	movhi	r2,129
  80ba24:	10baa104 	addi	r2,r2,-5500
  80ba28:	e0bff615 	stw	r2,-40(fp)
  80ba2c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ba30:	e0fff717 	ldw	r3,-36(fp)
  80ba34:	e0bff617 	ldw	r2,-40(fp)
  80ba38:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80ba3c:	e0bff617 	ldw	r2,-40(fp)
  80ba40:	10c00017 	ldw	r3,0(r2)
  80ba44:	e0bff717 	ldw	r2,-36(fp)
  80ba48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ba4c:	e0bff617 	ldw	r2,-40(fp)
  80ba50:	10c00017 	ldw	r3,0(r2)
  80ba54:	e0bff717 	ldw	r2,-36(fp)
  80ba58:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80ba5c:	e0fff617 	ldw	r3,-40(fp)
  80ba60:	e0bff717 	ldw	r2,-36(fp)
  80ba64:	18800015 	stw	r2,0(r3)
  80ba68:	e0bffa17 	ldw	r2,-24(fp)
  80ba6c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ba70:	e0bff517 	ldw	r2,-44(fp)
  80ba74:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80ba78:	e03fff15 	stw	zero,-4(fp)
  80ba7c:	00000506 	br	80ba94 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80ba80:	00bffa84 	movi	r2,-22
  80ba84:	e0bfff15 	stw	r2,-4(fp)
  80ba88:	00000206 	br	80ba94 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80ba8c:	00bfde84 	movi	r2,-134
  80ba90:	e0bfff15 	stw	r2,-4(fp)
  80ba94:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80ba98:	e037883a 	mov	sp,fp
  80ba9c:	df000017 	ldw	fp,0(sp)
  80baa0:	dec00104 	addi	sp,sp,4
  80baa4:	f800283a 	ret

0080baa8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80baa8:	deffff04 	addi	sp,sp,-4
  80baac:	df000015 	stw	fp,0(sp)
  80bab0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80bab4:	e037883a 	mov	sp,fp
  80bab8:	df000017 	ldw	fp,0(sp)
  80babc:	dec00104 	addi	sp,sp,4
  80bac0:	f800283a 	ret

0080bac4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80bac4:	defff904 	addi	sp,sp,-28
  80bac8:	dfc00615 	stw	ra,24(sp)
  80bacc:	df000515 	stw	fp,20(sp)
  80bad0:	df000504 	addi	fp,sp,20
  80bad4:	e13ffd15 	stw	r4,-12(fp)
  80bad8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80badc:	e0bffd17 	ldw	r2,-12(fp)
  80bae0:	1005003a 	cmpeq	r2,r2,zero
  80bae4:	1000041e 	bne	r2,zero,80baf8 <alt_dev_llist_insert+0x34>
  80bae8:	e0bffd17 	ldw	r2,-12(fp)
  80baec:	10800217 	ldw	r2,8(r2)
  80baf0:	1004c03a 	cmpne	r2,r2,zero
  80baf4:	1000071e 	bne	r2,zero,80bb14 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80baf8:	080bb780 	call	80bb78 <alt_get_errno>
  80bafc:	1007883a 	mov	r3,r2
  80bb00:	00800584 	movi	r2,22
  80bb04:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80bb08:	00bffa84 	movi	r2,-22
  80bb0c:	e0bfff15 	stw	r2,-4(fp)
  80bb10:	00001306 	br	80bb60 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80bb14:	e0fffd17 	ldw	r3,-12(fp)
  80bb18:	e0bffe17 	ldw	r2,-8(fp)
  80bb1c:	e0bffb15 	stw	r2,-20(fp)
  80bb20:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80bb24:	e0fffc17 	ldw	r3,-16(fp)
  80bb28:	e0bffb17 	ldw	r2,-20(fp)
  80bb2c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80bb30:	e0bffb17 	ldw	r2,-20(fp)
  80bb34:	10c00017 	ldw	r3,0(r2)
  80bb38:	e0bffc17 	ldw	r2,-16(fp)
  80bb3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80bb40:	e0bffb17 	ldw	r2,-20(fp)
  80bb44:	10c00017 	ldw	r3,0(r2)
  80bb48:	e0bffc17 	ldw	r2,-16(fp)
  80bb4c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80bb50:	e0fffb17 	ldw	r3,-20(fp)
  80bb54:	e0bffc17 	ldw	r2,-16(fp)
  80bb58:	18800015 	stw	r2,0(r3)

  return 0;  
  80bb5c:	e03fff15 	stw	zero,-4(fp)
  80bb60:	e0bfff17 	ldw	r2,-4(fp)
}
  80bb64:	e037883a 	mov	sp,fp
  80bb68:	dfc00117 	ldw	ra,4(sp)
  80bb6c:	df000017 	ldw	fp,0(sp)
  80bb70:	dec00204 	addi	sp,sp,8
  80bb74:	f800283a 	ret

0080bb78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bb78:	defffd04 	addi	sp,sp,-12
  80bb7c:	dfc00215 	stw	ra,8(sp)
  80bb80:	df000115 	stw	fp,4(sp)
  80bb84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80bb88:	00802074 	movhi	r2,129
  80bb8c:	10ba9e04 	addi	r2,r2,-5512
  80bb90:	10800017 	ldw	r2,0(r2)
  80bb94:	1005003a 	cmpeq	r2,r2,zero
  80bb98:	1000061e 	bne	r2,zero,80bbb4 <alt_get_errno+0x3c>
  80bb9c:	00802074 	movhi	r2,129
  80bba0:	10ba9e04 	addi	r2,r2,-5512
  80bba4:	10800017 	ldw	r2,0(r2)
  80bba8:	103ee83a 	callr	r2
  80bbac:	e0bfff15 	stw	r2,-4(fp)
  80bbb0:	00000306 	br	80bbc0 <alt_get_errno+0x48>
  80bbb4:	00802074 	movhi	r2,129
  80bbb8:	10814004 	addi	r2,r2,1280
  80bbbc:	e0bfff15 	stw	r2,-4(fp)
  80bbc0:	e0bfff17 	ldw	r2,-4(fp)
}
  80bbc4:	e037883a 	mov	sp,fp
  80bbc8:	dfc00117 	ldw	ra,4(sp)
  80bbcc:	df000017 	ldw	fp,0(sp)
  80bbd0:	dec00204 	addi	sp,sp,8
  80bbd4:	f800283a 	ret

0080bbd8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80bbd8:	defffd04 	addi	sp,sp,-12
  80bbdc:	dfc00215 	stw	ra,8(sp)
  80bbe0:	df000115 	stw	fp,4(sp)
  80bbe4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80bbe8:	00bfff04 	movi	r2,-4
  80bbec:	00c02074 	movhi	r3,129
  80bbf0:	18f32d04 	addi	r3,r3,-13132
  80bbf4:	1885883a 	add	r2,r3,r2
  80bbf8:	e0bfff15 	stw	r2,-4(fp)
  80bbfc:	00000606 	br	80bc18 <_do_ctors+0x40>
        (*ctor) (); 
  80bc00:	e0bfff17 	ldw	r2,-4(fp)
  80bc04:	10800017 	ldw	r2,0(r2)
  80bc08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80bc0c:	e0bfff17 	ldw	r2,-4(fp)
  80bc10:	10bfff04 	addi	r2,r2,-4
  80bc14:	e0bfff15 	stw	r2,-4(fp)
  80bc18:	e0ffff17 	ldw	r3,-4(fp)
  80bc1c:	00802074 	movhi	r2,129
  80bc20:	10b32c04 	addi	r2,r2,-13136
  80bc24:	18bff62e 	bgeu	r3,r2,80bc00 <_do_ctors+0x28>
        (*ctor) (); 
}
  80bc28:	e037883a 	mov	sp,fp
  80bc2c:	dfc00117 	ldw	ra,4(sp)
  80bc30:	df000017 	ldw	fp,0(sp)
  80bc34:	dec00204 	addi	sp,sp,8
  80bc38:	f800283a 	ret

0080bc3c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80bc3c:	defffd04 	addi	sp,sp,-12
  80bc40:	dfc00215 	stw	ra,8(sp)
  80bc44:	df000115 	stw	fp,4(sp)
  80bc48:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80bc4c:	00bfff04 	movi	r2,-4
  80bc50:	00c02074 	movhi	r3,129
  80bc54:	18f32d04 	addi	r3,r3,-13132
  80bc58:	1885883a 	add	r2,r3,r2
  80bc5c:	e0bfff15 	stw	r2,-4(fp)
  80bc60:	00000606 	br	80bc7c <_do_dtors+0x40>
        (*dtor) (); 
  80bc64:	e0bfff17 	ldw	r2,-4(fp)
  80bc68:	10800017 	ldw	r2,0(r2)
  80bc6c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80bc70:	e0bfff17 	ldw	r2,-4(fp)
  80bc74:	10bfff04 	addi	r2,r2,-4
  80bc78:	e0bfff15 	stw	r2,-4(fp)
  80bc7c:	e0ffff17 	ldw	r3,-4(fp)
  80bc80:	00802074 	movhi	r2,129
  80bc84:	10b32d04 	addi	r2,r2,-13132
  80bc88:	18bff62e 	bgeu	r3,r2,80bc64 <_do_dtors+0x28>
        (*dtor) (); 
}
  80bc8c:	e037883a 	mov	sp,fp
  80bc90:	dfc00117 	ldw	ra,4(sp)
  80bc94:	df000017 	ldw	fp,0(sp)
  80bc98:	dec00204 	addi	sp,sp,8
  80bc9c:	f800283a 	ret

0080bca0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80bca0:	defffe04 	addi	sp,sp,-8
  80bca4:	dfc00115 	stw	ra,4(sp)
  80bca8:	df000015 	stw	fp,0(sp)
  80bcac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80bcb0:	0009883a 	mov	r4,zero
  80bcb4:	01600014 	movui	r5,32768
  80bcb8:	080c8180 	call	80c818 <alt_icache_flush>
#endif
}
  80bcbc:	e037883a 	mov	sp,fp
  80bcc0:	dfc00117 	ldw	ra,4(sp)
  80bcc4:	df000017 	ldw	fp,0(sp)
  80bcc8:	dec00204 	addi	sp,sp,8
  80bccc:	f800283a 	ret

0080bcd0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80bcd0:	defff904 	addi	sp,sp,-28
  80bcd4:	dfc00615 	stw	ra,24(sp)
  80bcd8:	df000515 	stw	fp,20(sp)
  80bcdc:	df000504 	addi	fp,sp,20
  80bce0:	e13ffc15 	stw	r4,-16(fp)
  80bce4:	e17ffd15 	stw	r5,-12(fp)
  80bce8:	e1bffe15 	stw	r6,-8(fp)
  80bcec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80bcf0:	e0800217 	ldw	r2,8(fp)
  80bcf4:	d8800015 	stw	r2,0(sp)
  80bcf8:	e13ffc17 	ldw	r4,-16(fp)
  80bcfc:	e17ffd17 	ldw	r5,-12(fp)
  80bd00:	e1bffe17 	ldw	r6,-8(fp)
  80bd04:	e1ffff17 	ldw	r7,-4(fp)
  80bd08:	080bea40 	call	80bea4 <alt_iic_isr_register>
}  
  80bd0c:	e037883a 	mov	sp,fp
  80bd10:	dfc00117 	ldw	ra,4(sp)
  80bd14:	df000017 	ldw	fp,0(sp)
  80bd18:	dec00204 	addi	sp,sp,8
  80bd1c:	f800283a 	ret

0080bd20 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80bd20:	defff904 	addi	sp,sp,-28
  80bd24:	df000615 	stw	fp,24(sp)
  80bd28:	df000604 	addi	fp,sp,24
  80bd2c:	e13ffe15 	stw	r4,-8(fp)
  80bd30:	e17fff15 	stw	r5,-4(fp)
  80bd34:	e0bfff17 	ldw	r2,-4(fp)
  80bd38:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bd3c:	0005303a 	rdctl	r2,status
  80bd40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bd44:	e0fffb17 	ldw	r3,-20(fp)
  80bd48:	00bfff84 	movi	r2,-2
  80bd4c:	1884703a 	and	r2,r3,r2
  80bd50:	1001703a 	wrctl	status,r2
  
  return context;
  80bd54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80bd58:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80bd5c:	e0fffc17 	ldw	r3,-16(fp)
  80bd60:	00800044 	movi	r2,1
  80bd64:	10c4983a 	sll	r2,r2,r3
  80bd68:	1007883a 	mov	r3,r2
  80bd6c:	00802074 	movhi	r2,129
  80bd70:	10814404 	addi	r2,r2,1296
  80bd74:	10800017 	ldw	r2,0(r2)
  80bd78:	1886b03a 	or	r3,r3,r2
  80bd7c:	00802074 	movhi	r2,129
  80bd80:	10814404 	addi	r2,r2,1296
  80bd84:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80bd88:	00802074 	movhi	r2,129
  80bd8c:	10814404 	addi	r2,r2,1296
  80bd90:	10800017 	ldw	r2,0(r2)
  80bd94:	100170fa 	wrctl	ienable,r2
  80bd98:	e0bffd17 	ldw	r2,-12(fp)
  80bd9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bda0:	e0bffa17 	ldw	r2,-24(fp)
  80bda4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80bda8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80bdac:	e037883a 	mov	sp,fp
  80bdb0:	df000017 	ldw	fp,0(sp)
  80bdb4:	dec00104 	addi	sp,sp,4
  80bdb8:	f800283a 	ret

0080bdbc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80bdbc:	defff904 	addi	sp,sp,-28
  80bdc0:	df000615 	stw	fp,24(sp)
  80bdc4:	df000604 	addi	fp,sp,24
  80bdc8:	e13ffe15 	stw	r4,-8(fp)
  80bdcc:	e17fff15 	stw	r5,-4(fp)
  80bdd0:	e0bfff17 	ldw	r2,-4(fp)
  80bdd4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bdd8:	0005303a 	rdctl	r2,status
  80bddc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bde0:	e0fffb17 	ldw	r3,-20(fp)
  80bde4:	00bfff84 	movi	r2,-2
  80bde8:	1884703a 	and	r2,r3,r2
  80bdec:	1001703a 	wrctl	status,r2
  
  return context;
  80bdf0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80bdf4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80bdf8:	e0fffc17 	ldw	r3,-16(fp)
  80bdfc:	00800044 	movi	r2,1
  80be00:	10c4983a 	sll	r2,r2,r3
  80be04:	0084303a 	nor	r2,zero,r2
  80be08:	1007883a 	mov	r3,r2
  80be0c:	00802074 	movhi	r2,129
  80be10:	10814404 	addi	r2,r2,1296
  80be14:	10800017 	ldw	r2,0(r2)
  80be18:	1886703a 	and	r3,r3,r2
  80be1c:	00802074 	movhi	r2,129
  80be20:	10814404 	addi	r2,r2,1296
  80be24:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80be28:	00802074 	movhi	r2,129
  80be2c:	10814404 	addi	r2,r2,1296
  80be30:	10800017 	ldw	r2,0(r2)
  80be34:	100170fa 	wrctl	ienable,r2
  80be38:	e0bffd17 	ldw	r2,-12(fp)
  80be3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80be40:	e0bffa17 	ldw	r2,-24(fp)
  80be44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80be48:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80be4c:	e037883a 	mov	sp,fp
  80be50:	df000017 	ldw	fp,0(sp)
  80be54:	dec00104 	addi	sp,sp,4
  80be58:	f800283a 	ret

0080be5c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80be5c:	defffc04 	addi	sp,sp,-16
  80be60:	df000315 	stw	fp,12(sp)
  80be64:	df000304 	addi	fp,sp,12
  80be68:	e13ffe15 	stw	r4,-8(fp)
  80be6c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80be70:	000530fa 	rdctl	r2,ienable
  80be74:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80be78:	e0ffff17 	ldw	r3,-4(fp)
  80be7c:	00800044 	movi	r2,1
  80be80:	10c4983a 	sll	r2,r2,r3
  80be84:	1007883a 	mov	r3,r2
  80be88:	e0bffd17 	ldw	r2,-12(fp)
  80be8c:	1884703a 	and	r2,r3,r2
  80be90:	1004c03a 	cmpne	r2,r2,zero
}
  80be94:	e037883a 	mov	sp,fp
  80be98:	df000017 	ldw	fp,0(sp)
  80be9c:	dec00104 	addi	sp,sp,4
  80bea0:	f800283a 	ret

0080bea4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80bea4:	defff404 	addi	sp,sp,-48
  80bea8:	dfc00b15 	stw	ra,44(sp)
  80beac:	df000a15 	stw	fp,40(sp)
  80beb0:	df000a04 	addi	fp,sp,40
  80beb4:	e13ffb15 	stw	r4,-20(fp)
  80beb8:	e17ffc15 	stw	r5,-16(fp)
  80bebc:	e1bffd15 	stw	r6,-12(fp)
  80bec0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80bec4:	00bffa84 	movi	r2,-22
  80bec8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80becc:	e0bffc17 	ldw	r2,-16(fp)
  80bed0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80bed4:	e0bff917 	ldw	r2,-28(fp)
  80bed8:	10800808 	cmpgei	r2,r2,32
  80bedc:	1000291e 	bne	r2,zero,80bf84 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bee0:	0005303a 	rdctl	r2,status
  80bee4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bee8:	e0fff717 	ldw	r3,-36(fp)
  80beec:	00bfff84 	movi	r2,-2
  80bef0:	1884703a 	and	r2,r3,r2
  80bef4:	1001703a 	wrctl	status,r2
  
  return context;
  80bef8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80befc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80bf00:	e0bff917 	ldw	r2,-28(fp)
  80bf04:	00c02074 	movhi	r3,129
  80bf08:	18c15104 	addi	r3,r3,1348
  80bf0c:	100490fa 	slli	r2,r2,3
  80bf10:	10c7883a 	add	r3,r2,r3
  80bf14:	e0bffd17 	ldw	r2,-12(fp)
  80bf18:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80bf1c:	e0bff917 	ldw	r2,-28(fp)
  80bf20:	00c02074 	movhi	r3,129
  80bf24:	18c15104 	addi	r3,r3,1348
  80bf28:	100490fa 	slli	r2,r2,3
  80bf2c:	10c5883a 	add	r2,r2,r3
  80bf30:	10c00104 	addi	r3,r2,4
  80bf34:	e0bffe17 	ldw	r2,-8(fp)
  80bf38:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80bf3c:	e0bffd17 	ldw	r2,-12(fp)
  80bf40:	1005003a 	cmpeq	r2,r2,zero
  80bf44:	1000051e 	bne	r2,zero,80bf5c <alt_iic_isr_register+0xb8>
  80bf48:	e17ff917 	ldw	r5,-28(fp)
  80bf4c:	e13ffb17 	ldw	r4,-20(fp)
  80bf50:	080bd200 	call	80bd20 <alt_ic_irq_enable>
  80bf54:	e0bfff15 	stw	r2,-4(fp)
  80bf58:	00000406 	br	80bf6c <alt_iic_isr_register+0xc8>
  80bf5c:	e17ff917 	ldw	r5,-28(fp)
  80bf60:	e13ffb17 	ldw	r4,-20(fp)
  80bf64:	080bdbc0 	call	80bdbc <alt_ic_irq_disable>
  80bf68:	e0bfff15 	stw	r2,-4(fp)
  80bf6c:	e0bfff17 	ldw	r2,-4(fp)
  80bf70:	e0bffa15 	stw	r2,-24(fp)
  80bf74:	e0bff817 	ldw	r2,-32(fp)
  80bf78:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bf7c:	e0bff617 	ldw	r2,-40(fp)
  80bf80:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80bf84:	e0bffa17 	ldw	r2,-24(fp)
}
  80bf88:	e037883a 	mov	sp,fp
  80bf8c:	dfc00117 	ldw	ra,4(sp)
  80bf90:	df000017 	ldw	fp,0(sp)
  80bf94:	dec00204 	addi	sp,sp,8
  80bf98:	f800283a 	ret

0080bf9c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80bf9c:	defff804 	addi	sp,sp,-32
  80bfa0:	dfc00715 	stw	ra,28(sp)
  80bfa4:	df000615 	stw	fp,24(sp)
  80bfa8:	dc000515 	stw	r16,20(sp)
  80bfac:	df000504 	addi	fp,sp,20
  80bfb0:	e13ffc15 	stw	r4,-16(fp)
  80bfb4:	e17ffd15 	stw	r5,-12(fp)
  80bfb8:	e1bffe15 	stw	r6,-8(fp)
  80bfbc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80bfc0:	e13ffd17 	ldw	r4,-12(fp)
  80bfc4:	e17ffe17 	ldw	r5,-8(fp)
  80bfc8:	e1bfff17 	ldw	r6,-4(fp)
  80bfcc:	080c1e40 	call	80c1e4 <open>
  80bfd0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80bfd4:	e0bffb17 	ldw	r2,-20(fp)
  80bfd8:	1004803a 	cmplt	r2,r2,zero
  80bfdc:	10001f1e 	bne	r2,zero,80c05c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80bfe0:	e13ffb17 	ldw	r4,-20(fp)
  80bfe4:	04002074 	movhi	r16,129
  80bfe8:	84361b04 	addi	r16,r16,-10132
  80bfec:	01400304 	movi	r5,12
  80bff0:	0800b9c0 	call	800b9c <__mulsi3>
  80bff4:	1405883a 	add	r2,r2,r16
  80bff8:	10c00017 	ldw	r3,0(r2)
  80bffc:	e0bffc17 	ldw	r2,-16(fp)
  80c000:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80c004:	e13ffb17 	ldw	r4,-20(fp)
  80c008:	04002074 	movhi	r16,129
  80c00c:	84361b04 	addi	r16,r16,-10132
  80c010:	01400304 	movi	r5,12
  80c014:	0800b9c0 	call	800b9c <__mulsi3>
  80c018:	1405883a 	add	r2,r2,r16
  80c01c:	10800104 	addi	r2,r2,4
  80c020:	10c00017 	ldw	r3,0(r2)
  80c024:	e0bffc17 	ldw	r2,-16(fp)
  80c028:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80c02c:	e13ffb17 	ldw	r4,-20(fp)
  80c030:	04002074 	movhi	r16,129
  80c034:	84361b04 	addi	r16,r16,-10132
  80c038:	01400304 	movi	r5,12
  80c03c:	0800b9c0 	call	800b9c <__mulsi3>
  80c040:	1405883a 	add	r2,r2,r16
  80c044:	10800204 	addi	r2,r2,8
  80c048:	10c00017 	ldw	r3,0(r2)
  80c04c:	e0bffc17 	ldw	r2,-16(fp)
  80c050:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80c054:	e13ffb17 	ldw	r4,-20(fp)
  80c058:	080aa280 	call	80aa28 <alt_release_fd>
  }
} 
  80c05c:	e037883a 	mov	sp,fp
  80c060:	dfc00217 	ldw	ra,8(sp)
  80c064:	df000117 	ldw	fp,4(sp)
  80c068:	dc000017 	ldw	r16,0(sp)
  80c06c:	dec00304 	addi	sp,sp,12
  80c070:	f800283a 	ret

0080c074 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80c074:	defffb04 	addi	sp,sp,-20
  80c078:	dfc00415 	stw	ra,16(sp)
  80c07c:	df000315 	stw	fp,12(sp)
  80c080:	df000304 	addi	fp,sp,12
  80c084:	e13ffd15 	stw	r4,-12(fp)
  80c088:	e17ffe15 	stw	r5,-8(fp)
  80c08c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80c090:	01002074 	movhi	r4,129
  80c094:	21361e04 	addi	r4,r4,-10120
  80c098:	e17ffd17 	ldw	r5,-12(fp)
  80c09c:	01800044 	movi	r6,1
  80c0a0:	01c07fc4 	movi	r7,511
  80c0a4:	080bf9c0 	call	80bf9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80c0a8:	01002074 	movhi	r4,129
  80c0ac:	21361b04 	addi	r4,r4,-10132
  80c0b0:	e17ffe17 	ldw	r5,-8(fp)
  80c0b4:	000d883a 	mov	r6,zero
  80c0b8:	01c07fc4 	movi	r7,511
  80c0bc:	080bf9c0 	call	80bf9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80c0c0:	01002074 	movhi	r4,129
  80c0c4:	21362104 	addi	r4,r4,-10108
  80c0c8:	e17fff17 	ldw	r5,-4(fp)
  80c0cc:	01800044 	movi	r6,1
  80c0d0:	01c07fc4 	movi	r7,511
  80c0d4:	080bf9c0 	call	80bf9c <alt_open_fd>
}  
  80c0d8:	e037883a 	mov	sp,fp
  80c0dc:	dfc00117 	ldw	ra,4(sp)
  80c0e0:	df000017 	ldw	fp,0(sp)
  80c0e4:	dec00204 	addi	sp,sp,8
  80c0e8:	f800283a 	ret

0080c0ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80c0ec:	defffa04 	addi	sp,sp,-24
  80c0f0:	dfc00515 	stw	ra,20(sp)
  80c0f4:	df000415 	stw	fp,16(sp)
  80c0f8:	dc000315 	stw	r16,12(sp)
  80c0fc:	df000304 	addi	fp,sp,12
  80c100:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80c104:	e0bffe17 	ldw	r2,-8(fp)
  80c108:	10800217 	ldw	r2,8(r2)
  80c10c:	10d00034 	orhi	r3,r2,16384
  80c110:	e0bffe17 	ldw	r2,-8(fp)
  80c114:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c118:	e03ffd15 	stw	zero,-12(fp)
  80c11c:	00002306 	br	80c1ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80c120:	e13ffd17 	ldw	r4,-12(fp)
  80c124:	04002074 	movhi	r16,129
  80c128:	84361b04 	addi	r16,r16,-10132
  80c12c:	01400304 	movi	r5,12
  80c130:	0800b9c0 	call	800b9c <__mulsi3>
  80c134:	1405883a 	add	r2,r2,r16
  80c138:	10c00017 	ldw	r3,0(r2)
  80c13c:	e0bffe17 	ldw	r2,-8(fp)
  80c140:	10800017 	ldw	r2,0(r2)
  80c144:	1880161e 	bne	r3,r2,80c1a0 <alt_file_locked+0xb4>
  80c148:	e13ffd17 	ldw	r4,-12(fp)
  80c14c:	04002074 	movhi	r16,129
  80c150:	84361b04 	addi	r16,r16,-10132
  80c154:	01400304 	movi	r5,12
  80c158:	0800b9c0 	call	800b9c <__mulsi3>
  80c15c:	1405883a 	add	r2,r2,r16
  80c160:	10800204 	addi	r2,r2,8
  80c164:	10800017 	ldw	r2,0(r2)
  80c168:	1004403a 	cmpge	r2,r2,zero
  80c16c:	10000c1e 	bne	r2,zero,80c1a0 <alt_file_locked+0xb4>
  80c170:	e13ffd17 	ldw	r4,-12(fp)
  80c174:	01400304 	movi	r5,12
  80c178:	0800b9c0 	call	800b9c <__mulsi3>
  80c17c:	1007883a 	mov	r3,r2
  80c180:	00802074 	movhi	r2,129
  80c184:	10b61b04 	addi	r2,r2,-10132
  80c188:	1887883a 	add	r3,r3,r2
  80c18c:	e0bffe17 	ldw	r2,-8(fp)
  80c190:	18800326 	beq	r3,r2,80c1a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80c194:	00bffcc4 	movi	r2,-13
  80c198:	e0bfff15 	stw	r2,-4(fp)
  80c19c:	00000a06 	br	80c1c8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c1a0:	e0bffd17 	ldw	r2,-12(fp)
  80c1a4:	10800044 	addi	r2,r2,1
  80c1a8:	e0bffd15 	stw	r2,-12(fp)
  80c1ac:	00802074 	movhi	r2,129
  80c1b0:	10ba9d04 	addi	r2,r2,-5516
  80c1b4:	10800017 	ldw	r2,0(r2)
  80c1b8:	1007883a 	mov	r3,r2
  80c1bc:	e0bffd17 	ldw	r2,-12(fp)
  80c1c0:	18bfd72e 	bgeu	r3,r2,80c120 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80c1c4:	e03fff15 	stw	zero,-4(fp)
  80c1c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80c1cc:	e037883a 	mov	sp,fp
  80c1d0:	dfc00217 	ldw	ra,8(sp)
  80c1d4:	df000117 	ldw	fp,4(sp)
  80c1d8:	dc000017 	ldw	r16,0(sp)
  80c1dc:	dec00304 	addi	sp,sp,12
  80c1e0:	f800283a 	ret

0080c1e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80c1e4:	defff404 	addi	sp,sp,-48
  80c1e8:	dfc00b15 	stw	ra,44(sp)
  80c1ec:	df000a15 	stw	fp,40(sp)
  80c1f0:	df000a04 	addi	fp,sp,40
  80c1f4:	e13ffb15 	stw	r4,-20(fp)
  80c1f8:	e17ffc15 	stw	r5,-16(fp)
  80c1fc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80c200:	00bfffc4 	movi	r2,-1
  80c204:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80c208:	00bffb44 	movi	r2,-19
  80c20c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80c210:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80c214:	e13ffb17 	ldw	r4,-20(fp)
  80c218:	01402074 	movhi	r5,129
  80c21c:	297a9b04 	addi	r5,r5,-5524
  80c220:	080c5940 	call	80c594 <alt_find_dev>
  80c224:	e0bffa15 	stw	r2,-24(fp)
  80c228:	e0bffa17 	ldw	r2,-24(fp)
  80c22c:	1004c03a 	cmpne	r2,r2,zero
  80c230:	1000051e 	bne	r2,zero,80c248 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80c234:	e13ffb17 	ldw	r4,-20(fp)
  80c238:	080c6280 	call	80c628 <alt_find_file>
  80c23c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80c240:	00800044 	movi	r2,1
  80c244:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80c248:	e0bffa17 	ldw	r2,-24(fp)
  80c24c:	1005003a 	cmpeq	r2,r2,zero
  80c250:	1000311e 	bne	r2,zero,80c318 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80c254:	e13ffa17 	ldw	r4,-24(fp)
  80c258:	080c7480 	call	80c748 <alt_get_fd>
  80c25c:	e0bff815 	stw	r2,-32(fp)
  80c260:	e0bff817 	ldw	r2,-32(fp)
  80c264:	1004403a 	cmpge	r2,r2,zero
  80c268:	1000031e 	bne	r2,zero,80c278 <open+0x94>
    {
      status = index;
  80c26c:	e0bff817 	ldw	r2,-32(fp)
  80c270:	e0bff715 	stw	r2,-36(fp)
  80c274:	00002a06 	br	80c320 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  80c278:	e13ff817 	ldw	r4,-32(fp)
  80c27c:	01400304 	movi	r5,12
  80c280:	0800b9c0 	call	800b9c <__mulsi3>
  80c284:	1007883a 	mov	r3,r2
  80c288:	00802074 	movhi	r2,129
  80c28c:	10b61b04 	addi	r2,r2,-10132
  80c290:	1885883a 	add	r2,r3,r2
  80c294:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80c298:	e0fffc17 	ldw	r3,-16(fp)
  80c29c:	00900034 	movhi	r2,16384
  80c2a0:	10bfffc4 	addi	r2,r2,-1
  80c2a4:	1886703a 	and	r3,r3,r2
  80c2a8:	e0bff917 	ldw	r2,-28(fp)
  80c2ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80c2b0:	e0bff617 	ldw	r2,-40(fp)
  80c2b4:	1004c03a 	cmpne	r2,r2,zero
  80c2b8:	1000061e 	bne	r2,zero,80c2d4 <open+0xf0>
  80c2bc:	e13ff917 	ldw	r4,-28(fp)
  80c2c0:	080c0ec0 	call	80c0ec <alt_file_locked>
  80c2c4:	e0bff715 	stw	r2,-36(fp)
  80c2c8:	e0bff717 	ldw	r2,-36(fp)
  80c2cc:	1004803a 	cmplt	r2,r2,zero
  80c2d0:	1000131e 	bne	r2,zero,80c320 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80c2d4:	e0bffa17 	ldw	r2,-24(fp)
  80c2d8:	10800317 	ldw	r2,12(r2)
  80c2dc:	1005003a 	cmpeq	r2,r2,zero
  80c2e0:	1000091e 	bne	r2,zero,80c308 <open+0x124>
  80c2e4:	e0bffa17 	ldw	r2,-24(fp)
  80c2e8:	10800317 	ldw	r2,12(r2)
  80c2ec:	e13ff917 	ldw	r4,-28(fp)
  80c2f0:	e17ffb17 	ldw	r5,-20(fp)
  80c2f4:	e1bffc17 	ldw	r6,-16(fp)
  80c2f8:	e1fffd17 	ldw	r7,-12(fp)
  80c2fc:	103ee83a 	callr	r2
  80c300:	e0bfff15 	stw	r2,-4(fp)
  80c304:	00000106 	br	80c30c <open+0x128>
  80c308:	e03fff15 	stw	zero,-4(fp)
  80c30c:	e0bfff17 	ldw	r2,-4(fp)
  80c310:	e0bff715 	stw	r2,-36(fp)
  80c314:	00000206 	br	80c320 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80c318:	00bffb44 	movi	r2,-19
  80c31c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80c320:	e0bff717 	ldw	r2,-36(fp)
  80c324:	1004403a 	cmpge	r2,r2,zero
  80c328:	1000091e 	bne	r2,zero,80c350 <open+0x16c>
  {
    alt_release_fd (index);  
  80c32c:	e13ff817 	ldw	r4,-32(fp)
  80c330:	080aa280 	call	80aa28 <alt_release_fd>
    ALT_ERRNO = -status;
  80c334:	080c3700 	call	80c370 <alt_get_errno>
  80c338:	e0fff717 	ldw	r3,-36(fp)
  80c33c:	00c7c83a 	sub	r3,zero,r3
  80c340:	10c00015 	stw	r3,0(r2)
    return -1;
  80c344:	00bfffc4 	movi	r2,-1
  80c348:	e0bffe15 	stw	r2,-8(fp)
  80c34c:	00000206 	br	80c358 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80c350:	e0bff817 	ldw	r2,-32(fp)
  80c354:	e0bffe15 	stw	r2,-8(fp)
  80c358:	e0bffe17 	ldw	r2,-8(fp)
}
  80c35c:	e037883a 	mov	sp,fp
  80c360:	dfc00117 	ldw	ra,4(sp)
  80c364:	df000017 	ldw	fp,0(sp)
  80c368:	dec00204 	addi	sp,sp,8
  80c36c:	f800283a 	ret

0080c370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c370:	defffd04 	addi	sp,sp,-12
  80c374:	dfc00215 	stw	ra,8(sp)
  80c378:	df000115 	stw	fp,4(sp)
  80c37c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c380:	00802074 	movhi	r2,129
  80c384:	10ba9e04 	addi	r2,r2,-5512
  80c388:	10800017 	ldw	r2,0(r2)
  80c38c:	1005003a 	cmpeq	r2,r2,zero
  80c390:	1000061e 	bne	r2,zero,80c3ac <alt_get_errno+0x3c>
  80c394:	00802074 	movhi	r2,129
  80c398:	10ba9e04 	addi	r2,r2,-5512
  80c39c:	10800017 	ldw	r2,0(r2)
  80c3a0:	103ee83a 	callr	r2
  80c3a4:	e0bfff15 	stw	r2,-4(fp)
  80c3a8:	00000306 	br	80c3b8 <alt_get_errno+0x48>
  80c3ac:	00802074 	movhi	r2,129
  80c3b0:	10814004 	addi	r2,r2,1280
  80c3b4:	e0bfff15 	stw	r2,-4(fp)
  80c3b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80c3bc:	e037883a 	mov	sp,fp
  80c3c0:	dfc00117 	ldw	ra,4(sp)
  80c3c4:	df000017 	ldw	fp,0(sp)
  80c3c8:	dec00204 	addi	sp,sp,8
  80c3cc:	f800283a 	ret

0080c3d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80c3d0:	defffa04 	addi	sp,sp,-24
  80c3d4:	df000515 	stw	fp,20(sp)
  80c3d8:	df000504 	addi	fp,sp,20
  80c3dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c3e0:	0005303a 	rdctl	r2,status
  80c3e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c3e8:	e0fffd17 	ldw	r3,-12(fp)
  80c3ec:	00bfff84 	movi	r2,-2
  80c3f0:	1884703a 	and	r2,r3,r2
  80c3f4:	1001703a 	wrctl	status,r2
  
  return context;
  80c3f8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80c3fc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80c400:	e0bfff17 	ldw	r2,-4(fp)
  80c404:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80c408:	e0bffc17 	ldw	r2,-16(fp)
  80c40c:	10c00017 	ldw	r3,0(r2)
  80c410:	e0bffc17 	ldw	r2,-16(fp)
  80c414:	10800117 	ldw	r2,4(r2)
  80c418:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80c41c:	e0bffc17 	ldw	r2,-16(fp)
  80c420:	10c00117 	ldw	r3,4(r2)
  80c424:	e0bffc17 	ldw	r2,-16(fp)
  80c428:	10800017 	ldw	r2,0(r2)
  80c42c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80c430:	e0fffc17 	ldw	r3,-16(fp)
  80c434:	e0bffc17 	ldw	r2,-16(fp)
  80c438:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80c43c:	e0fffc17 	ldw	r3,-16(fp)
  80c440:	e0bffc17 	ldw	r2,-16(fp)
  80c444:	18800015 	stw	r2,0(r3)
  80c448:	e0bffe17 	ldw	r2,-8(fp)
  80c44c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c450:	e0bffb17 	ldw	r2,-20(fp)
  80c454:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80c458:	e037883a 	mov	sp,fp
  80c45c:	df000017 	ldw	fp,0(sp)
  80c460:	dec00104 	addi	sp,sp,4
  80c464:	f800283a 	ret

0080c468 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c468:	defffb04 	addi	sp,sp,-20
  80c46c:	dfc00415 	stw	ra,16(sp)
  80c470:	df000315 	stw	fp,12(sp)
  80c474:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80c478:	d0a00e17 	ldw	r2,-32712(gp)
  80c47c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c480:	d0a6b317 	ldw	r2,-25908(gp)
  80c484:	10800044 	addi	r2,r2,1
  80c488:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c48c:	00003106 	br	80c554 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80c490:	e0bffe17 	ldw	r2,-8(fp)
  80c494:	10800017 	ldw	r2,0(r2)
  80c498:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80c49c:	e0bffe17 	ldw	r2,-8(fp)
  80c4a0:	10800403 	ldbu	r2,16(r2)
  80c4a4:	10803fcc 	andi	r2,r2,255
  80c4a8:	1005003a 	cmpeq	r2,r2,zero
  80c4ac:	1000051e 	bne	r2,zero,80c4c4 <alt_tick+0x5c>
  80c4b0:	d0a6b317 	ldw	r2,-25908(gp)
  80c4b4:	1004c03a 	cmpne	r2,r2,zero
  80c4b8:	1000021e 	bne	r2,zero,80c4c4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80c4bc:	e0bffe17 	ldw	r2,-8(fp)
  80c4c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80c4c4:	e0bffe17 	ldw	r2,-8(fp)
  80c4c8:	10c00217 	ldw	r3,8(r2)
  80c4cc:	d0a6b317 	ldw	r2,-25908(gp)
  80c4d0:	10c01e36 	bltu	r2,r3,80c54c <alt_tick+0xe4>
  80c4d4:	e0bffe17 	ldw	r2,-8(fp)
  80c4d8:	10800403 	ldbu	r2,16(r2)
  80c4dc:	10803fcc 	andi	r2,r2,255
  80c4e0:	1004c03a 	cmpne	r2,r2,zero
  80c4e4:	1000191e 	bne	r2,zero,80c54c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80c4e8:	e0bffe17 	ldw	r2,-8(fp)
  80c4ec:	10c00317 	ldw	r3,12(r2)
  80c4f0:	e0bffe17 	ldw	r2,-8(fp)
  80c4f4:	11000517 	ldw	r4,20(r2)
  80c4f8:	183ee83a 	callr	r3
  80c4fc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80c500:	e0bffd17 	ldw	r2,-12(fp)
  80c504:	1004c03a 	cmpne	r2,r2,zero
  80c508:	1000031e 	bne	r2,zero,80c518 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80c50c:	e13ffe17 	ldw	r4,-8(fp)
  80c510:	080c3d00 	call	80c3d0 <alt_alarm_stop>
  80c514:	00000d06 	br	80c54c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80c518:	e0bffe17 	ldw	r2,-8(fp)
  80c51c:	10c00217 	ldw	r3,8(r2)
  80c520:	e0bffd17 	ldw	r2,-12(fp)
  80c524:	1887883a 	add	r3,r3,r2
  80c528:	e0bffe17 	ldw	r2,-8(fp)
  80c52c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80c530:	e0bffe17 	ldw	r2,-8(fp)
  80c534:	10c00217 	ldw	r3,8(r2)
  80c538:	d0a6b317 	ldw	r2,-25908(gp)
  80c53c:	1880032e 	bgeu	r3,r2,80c54c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80c540:	e0fffe17 	ldw	r3,-8(fp)
  80c544:	00800044 	movi	r2,1
  80c548:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80c54c:	e0bfff17 	ldw	r2,-4(fp)
  80c550:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c554:	d0e00e04 	addi	r3,gp,-32712
  80c558:	e0bffe17 	ldw	r2,-8(fp)
  80c55c:	10ffcc1e 	bne	r2,r3,80c490 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80c560:	e037883a 	mov	sp,fp
  80c564:	dfc00117 	ldw	ra,4(sp)
  80c568:	df000017 	ldw	fp,0(sp)
  80c56c:	dec00204 	addi	sp,sp,8
  80c570:	f800283a 	ret

0080c574 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80c574:	deffff04 	addi	sp,sp,-4
  80c578:	df000015 	stw	fp,0(sp)
  80c57c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80c580:	000170fa 	wrctl	ienable,zero
}
  80c584:	e037883a 	mov	sp,fp
  80c588:	df000017 	ldw	fp,0(sp)
  80c58c:	dec00104 	addi	sp,sp,4
  80c590:	f800283a 	ret

0080c594 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80c594:	defff904 	addi	sp,sp,-28
  80c598:	dfc00615 	stw	ra,24(sp)
  80c59c:	df000515 	stw	fp,20(sp)
  80c5a0:	df000504 	addi	fp,sp,20
  80c5a4:	e13ffd15 	stw	r4,-12(fp)
  80c5a8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80c5ac:	e0bffe17 	ldw	r2,-8(fp)
  80c5b0:	10800017 	ldw	r2,0(r2)
  80c5b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80c5b8:	e13ffd17 	ldw	r4,-12(fp)
  80c5bc:	0800d000 	call	800d00 <strlen>
  80c5c0:	10800044 	addi	r2,r2,1
  80c5c4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c5c8:	00000d06 	br	80c600 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80c5cc:	e0bffc17 	ldw	r2,-16(fp)
  80c5d0:	11000217 	ldw	r4,8(r2)
  80c5d4:	e1bffb17 	ldw	r6,-20(fp)
  80c5d8:	e17ffd17 	ldw	r5,-12(fp)
  80c5dc:	080c8f40 	call	80c8f4 <memcmp>
  80c5e0:	1004c03a 	cmpne	r2,r2,zero
  80c5e4:	1000031e 	bne	r2,zero,80c5f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80c5e8:	e0bffc17 	ldw	r2,-16(fp)
  80c5ec:	e0bfff15 	stw	r2,-4(fp)
  80c5f0:	00000706 	br	80c610 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80c5f4:	e0bffc17 	ldw	r2,-16(fp)
  80c5f8:	10800017 	ldw	r2,0(r2)
  80c5fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c600:	e0fffe17 	ldw	r3,-8(fp)
  80c604:	e0bffc17 	ldw	r2,-16(fp)
  80c608:	10fff01e 	bne	r2,r3,80c5cc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80c60c:	e03fff15 	stw	zero,-4(fp)
  80c610:	e0bfff17 	ldw	r2,-4(fp)
}
  80c614:	e037883a 	mov	sp,fp
  80c618:	dfc00117 	ldw	ra,4(sp)
  80c61c:	df000017 	ldw	fp,0(sp)
  80c620:	dec00204 	addi	sp,sp,8
  80c624:	f800283a 	ret

0080c628 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80c628:	defffa04 	addi	sp,sp,-24
  80c62c:	dfc00515 	stw	ra,20(sp)
  80c630:	df000415 	stw	fp,16(sp)
  80c634:	df000404 	addi	fp,sp,16
  80c638:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80c63c:	00802074 	movhi	r2,129
  80c640:	10ba9904 	addi	r2,r2,-5532
  80c644:	10800017 	ldw	r2,0(r2)
  80c648:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c64c:	00003306 	br	80c71c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80c650:	e0bffd17 	ldw	r2,-12(fp)
  80c654:	11000217 	ldw	r4,8(r2)
  80c658:	0800d000 	call	800d00 <strlen>
  80c65c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80c660:	e0bffd17 	ldw	r2,-12(fp)
  80c664:	10c00217 	ldw	r3,8(r2)
  80c668:	e0bffc17 	ldw	r2,-16(fp)
  80c66c:	1885883a 	add	r2,r3,r2
  80c670:	10bfffc4 	addi	r2,r2,-1
  80c674:	10800003 	ldbu	r2,0(r2)
  80c678:	10803fcc 	andi	r2,r2,255
  80c67c:	1080201c 	xori	r2,r2,128
  80c680:	10bfe004 	addi	r2,r2,-128
  80c684:	10800bd8 	cmpnei	r2,r2,47
  80c688:	1000031e 	bne	r2,zero,80c698 <alt_find_file+0x70>
    {
      len -= 1;
  80c68c:	e0bffc17 	ldw	r2,-16(fp)
  80c690:	10bfffc4 	addi	r2,r2,-1
  80c694:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80c698:	e0bffc17 	ldw	r2,-16(fp)
  80c69c:	1007883a 	mov	r3,r2
  80c6a0:	e0bffe17 	ldw	r2,-8(fp)
  80c6a4:	1885883a 	add	r2,r3,r2
  80c6a8:	10800003 	ldbu	r2,0(r2)
  80c6ac:	10803fcc 	andi	r2,r2,255
  80c6b0:	1080201c 	xori	r2,r2,128
  80c6b4:	10bfe004 	addi	r2,r2,-128
  80c6b8:	10800be0 	cmpeqi	r2,r2,47
  80c6bc:	10000a1e 	bne	r2,zero,80c6e8 <alt_find_file+0xc0>
  80c6c0:	e0bffc17 	ldw	r2,-16(fp)
  80c6c4:	1007883a 	mov	r3,r2
  80c6c8:	e0bffe17 	ldw	r2,-8(fp)
  80c6cc:	1885883a 	add	r2,r3,r2
  80c6d0:	10800003 	ldbu	r2,0(r2)
  80c6d4:	10803fcc 	andi	r2,r2,255
  80c6d8:	1080201c 	xori	r2,r2,128
  80c6dc:	10bfe004 	addi	r2,r2,-128
  80c6e0:	1004c03a 	cmpne	r2,r2,zero
  80c6e4:	10000a1e 	bne	r2,zero,80c710 <alt_find_file+0xe8>
  80c6e8:	e0bffd17 	ldw	r2,-12(fp)
  80c6ec:	11000217 	ldw	r4,8(r2)
  80c6f0:	e1bffc17 	ldw	r6,-16(fp)
  80c6f4:	e17ffe17 	ldw	r5,-8(fp)
  80c6f8:	080c8f40 	call	80c8f4 <memcmp>
  80c6fc:	1004c03a 	cmpne	r2,r2,zero
  80c700:	1000031e 	bne	r2,zero,80c710 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80c704:	e0bffd17 	ldw	r2,-12(fp)
  80c708:	e0bfff15 	stw	r2,-4(fp)
  80c70c:	00000806 	br	80c730 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80c710:	e0bffd17 	ldw	r2,-12(fp)
  80c714:	10800017 	ldw	r2,0(r2)
  80c718:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c71c:	00c02074 	movhi	r3,129
  80c720:	18fa9904 	addi	r3,r3,-5532
  80c724:	e0bffd17 	ldw	r2,-12(fp)
  80c728:	10ffc91e 	bne	r2,r3,80c650 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80c72c:	e03fff15 	stw	zero,-4(fp)
  80c730:	e0bfff17 	ldw	r2,-4(fp)
}
  80c734:	e037883a 	mov	sp,fp
  80c738:	dfc00117 	ldw	ra,4(sp)
  80c73c:	df000017 	ldw	fp,0(sp)
  80c740:	dec00204 	addi	sp,sp,8
  80c744:	f800283a 	ret

0080c748 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80c748:	defffa04 	addi	sp,sp,-24
  80c74c:	dfc00515 	stw	ra,20(sp)
  80c750:	df000415 	stw	fp,16(sp)
  80c754:	dc000315 	stw	r16,12(sp)
  80c758:	df000304 	addi	fp,sp,12
  80c75c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80c760:	00bffa04 	movi	r2,-24
  80c764:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c768:	e03ffe15 	stw	zero,-8(fp)
  80c76c:	00002006 	br	80c7f0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  80c770:	e13ffe17 	ldw	r4,-8(fp)
  80c774:	04002074 	movhi	r16,129
  80c778:	84361b04 	addi	r16,r16,-10132
  80c77c:	01400304 	movi	r5,12
  80c780:	0800b9c0 	call	800b9c <__mulsi3>
  80c784:	1405883a 	add	r2,r2,r16
  80c788:	10800017 	ldw	r2,0(r2)
  80c78c:	1004c03a 	cmpne	r2,r2,zero
  80c790:	1000141e 	bne	r2,zero,80c7e4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  80c794:	e13ffe17 	ldw	r4,-8(fp)
  80c798:	04002074 	movhi	r16,129
  80c79c:	84361b04 	addi	r16,r16,-10132
  80c7a0:	01400304 	movi	r5,12
  80c7a4:	0800b9c0 	call	800b9c <__mulsi3>
  80c7a8:	1407883a 	add	r3,r2,r16
  80c7ac:	e0bfff17 	ldw	r2,-4(fp)
  80c7b0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80c7b4:	00802074 	movhi	r2,129
  80c7b8:	10ba9d04 	addi	r2,r2,-5516
  80c7bc:	10c00017 	ldw	r3,0(r2)
  80c7c0:	e0bffe17 	ldw	r2,-8(fp)
  80c7c4:	1880040e 	bge	r3,r2,80c7d8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  80c7c8:	00c02074 	movhi	r3,129
  80c7cc:	18fa9d04 	addi	r3,r3,-5516
  80c7d0:	e0bffe17 	ldw	r2,-8(fp)
  80c7d4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80c7d8:	e0bffe17 	ldw	r2,-8(fp)
  80c7dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80c7e0:	00000606 	br	80c7fc <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c7e4:	e0bffe17 	ldw	r2,-8(fp)
  80c7e8:	10800044 	addi	r2,r2,1
  80c7ec:	e0bffe15 	stw	r2,-8(fp)
  80c7f0:	e0bffe17 	ldw	r2,-8(fp)
  80c7f4:	10800810 	cmplti	r2,r2,32
  80c7f8:	103fdd1e 	bne	r2,zero,80c770 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80c7fc:	e0bffd17 	ldw	r2,-12(fp)
}
  80c800:	e037883a 	mov	sp,fp
  80c804:	dfc00217 	ldw	ra,8(sp)
  80c808:	df000117 	ldw	fp,4(sp)
  80c80c:	dc000017 	ldw	r16,0(sp)
  80c810:	dec00304 	addi	sp,sp,12
  80c814:	f800283a 	ret

0080c818 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80c818:	defffb04 	addi	sp,sp,-20
  80c81c:	df000415 	stw	fp,16(sp)
  80c820:	df000404 	addi	fp,sp,16
  80c824:	e13ffe15 	stw	r4,-8(fp)
  80c828:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80c82c:	e0ffff17 	ldw	r3,-4(fp)
  80c830:	00a00014 	movui	r2,32768
  80c834:	10c0022e 	bgeu	r2,r3,80c840 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80c838:	00a00014 	movui	r2,32768
  80c83c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80c840:	e0fffe17 	ldw	r3,-8(fp)
  80c844:	e0bfff17 	ldw	r2,-4(fp)
  80c848:	1885883a 	add	r2,r3,r2
  80c84c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80c850:	e0bffe17 	ldw	r2,-8(fp)
  80c854:	e0bffd15 	stw	r2,-12(fp)
  80c858:	00000506 	br	80c870 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80c85c:	e0bffd17 	ldw	r2,-12(fp)
  80c860:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80c864:	e0bffd17 	ldw	r2,-12(fp)
  80c868:	10800804 	addi	r2,r2,32
  80c86c:	e0bffd15 	stw	r2,-12(fp)
  80c870:	e0fffd17 	ldw	r3,-12(fp)
  80c874:	e0bffc17 	ldw	r2,-16(fp)
  80c878:	18bff836 	bltu	r3,r2,80c85c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80c87c:	e0bffe17 	ldw	r2,-8(fp)
  80c880:	108007cc 	andi	r2,r2,31
  80c884:	1005003a 	cmpeq	r2,r2,zero
  80c888:	1000021e 	bne	r2,zero,80c894 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80c88c:	e0bffd17 	ldw	r2,-12(fp)
  80c890:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80c894:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80c898:	e037883a 	mov	sp,fp
  80c89c:	df000017 	ldw	fp,0(sp)
  80c8a0:	dec00104 	addi	sp,sp,4
  80c8a4:	f800283a 	ret

0080c8a8 <atexit>:
  80c8a8:	200b883a 	mov	r5,r4
  80c8ac:	000d883a 	mov	r6,zero
  80c8b0:	0009883a 	mov	r4,zero
  80c8b4:	000f883a 	mov	r7,zero
  80c8b8:	080c9681 	jmpi	80c968 <__register_exitproc>

0080c8bc <exit>:
  80c8bc:	defffe04 	addi	sp,sp,-8
  80c8c0:	000b883a 	mov	r5,zero
  80c8c4:	dc000015 	stw	r16,0(sp)
  80c8c8:	dfc00115 	stw	ra,4(sp)
  80c8cc:	2021883a 	mov	r16,r4
  80c8d0:	080caa00 	call	80caa0 <__call_exitprocs>
  80c8d4:	00802074 	movhi	r2,129
  80c8d8:	10ba9404 	addi	r2,r2,-5552
  80c8dc:	11000017 	ldw	r4,0(r2)
  80c8e0:	20800f17 	ldw	r2,60(r4)
  80c8e4:	10000126 	beq	r2,zero,80c8ec <exit+0x30>
  80c8e8:	103ee83a 	callr	r2
  80c8ec:	8009883a 	mov	r4,r16
  80c8f0:	080cc900 	call	80cc90 <_exit>

0080c8f4 <memcmp>:
  80c8f4:	00c000c4 	movi	r3,3
  80c8f8:	1980032e 	bgeu	r3,r6,80c908 <memcmp+0x14>
  80c8fc:	2144b03a 	or	r2,r4,r5
  80c900:	10c4703a 	and	r2,r2,r3
  80c904:	10000f26 	beq	r2,zero,80c944 <memcmp+0x50>
  80c908:	31ffffc4 	addi	r7,r6,-1
  80c90c:	3000061e 	bne	r6,zero,80c928 <memcmp+0x34>
  80c910:	00000a06 	br	80c93c <memcmp+0x48>
  80c914:	39ffffc4 	addi	r7,r7,-1
  80c918:	00bfffc4 	movi	r2,-1
  80c91c:	21000044 	addi	r4,r4,1
  80c920:	29400044 	addi	r5,r5,1
  80c924:	38800526 	beq	r7,r2,80c93c <memcmp+0x48>
  80c928:	20c00003 	ldbu	r3,0(r4)
  80c92c:	28800003 	ldbu	r2,0(r5)
  80c930:	18bff826 	beq	r3,r2,80c914 <memcmp+0x20>
  80c934:	1885c83a 	sub	r2,r3,r2
  80c938:	f800283a 	ret
  80c93c:	0005883a 	mov	r2,zero
  80c940:	f800283a 	ret
  80c944:	180f883a 	mov	r7,r3
  80c948:	20c00017 	ldw	r3,0(r4)
  80c94c:	28800017 	ldw	r2,0(r5)
  80c950:	18bfed1e 	bne	r3,r2,80c908 <memcmp+0x14>
  80c954:	31bfff04 	addi	r6,r6,-4
  80c958:	21000104 	addi	r4,r4,4
  80c95c:	29400104 	addi	r5,r5,4
  80c960:	39bff936 	bltu	r7,r6,80c948 <memcmp+0x54>
  80c964:	003fe806 	br	80c908 <memcmp+0x14>

0080c968 <__register_exitproc>:
  80c968:	defffa04 	addi	sp,sp,-24
  80c96c:	00802074 	movhi	r2,129
  80c970:	10ba9404 	addi	r2,r2,-5552
  80c974:	dc000015 	stw	r16,0(sp)
  80c978:	14000017 	ldw	r16,0(r2)
  80c97c:	dd000415 	stw	r20,16(sp)
  80c980:	2829883a 	mov	r20,r5
  80c984:	81405217 	ldw	r5,328(r16)
  80c988:	dcc00315 	stw	r19,12(sp)
  80c98c:	dc800215 	stw	r18,8(sp)
  80c990:	dc400115 	stw	r17,4(sp)
  80c994:	dfc00515 	stw	ra,20(sp)
  80c998:	2023883a 	mov	r17,r4
  80c99c:	3027883a 	mov	r19,r6
  80c9a0:	3825883a 	mov	r18,r7
  80c9a4:	28002526 	beq	r5,zero,80ca3c <__register_exitproc+0xd4>
  80c9a8:	29000117 	ldw	r4,4(r5)
  80c9ac:	008007c4 	movi	r2,31
  80c9b0:	11002716 	blt	r2,r4,80ca50 <__register_exitproc+0xe8>
  80c9b4:	8800101e 	bne	r17,zero,80c9f8 <__register_exitproc+0x90>
  80c9b8:	2105883a 	add	r2,r4,r4
  80c9bc:	1085883a 	add	r2,r2,r2
  80c9c0:	20c00044 	addi	r3,r4,1
  80c9c4:	1145883a 	add	r2,r2,r5
  80c9c8:	0009883a 	mov	r4,zero
  80c9cc:	15000215 	stw	r20,8(r2)
  80c9d0:	28c00115 	stw	r3,4(r5)
  80c9d4:	2005883a 	mov	r2,r4
  80c9d8:	dfc00517 	ldw	ra,20(sp)
  80c9dc:	dd000417 	ldw	r20,16(sp)
  80c9e0:	dcc00317 	ldw	r19,12(sp)
  80c9e4:	dc800217 	ldw	r18,8(sp)
  80c9e8:	dc400117 	ldw	r17,4(sp)
  80c9ec:	dc000017 	ldw	r16,0(sp)
  80c9f0:	dec00604 	addi	sp,sp,24
  80c9f4:	f800283a 	ret
  80c9f8:	29802204 	addi	r6,r5,136
  80c9fc:	00800044 	movi	r2,1
  80ca00:	110e983a 	sll	r7,r2,r4
  80ca04:	30c04017 	ldw	r3,256(r6)
  80ca08:	2105883a 	add	r2,r4,r4
  80ca0c:	1085883a 	add	r2,r2,r2
  80ca10:	1185883a 	add	r2,r2,r6
  80ca14:	19c6b03a 	or	r3,r3,r7
  80ca18:	14802015 	stw	r18,128(r2)
  80ca1c:	14c00015 	stw	r19,0(r2)
  80ca20:	00800084 	movi	r2,2
  80ca24:	30c04015 	stw	r3,256(r6)
  80ca28:	88bfe31e 	bne	r17,r2,80c9b8 <__register_exitproc+0x50>
  80ca2c:	30804117 	ldw	r2,260(r6)
  80ca30:	11c4b03a 	or	r2,r2,r7
  80ca34:	30804115 	stw	r2,260(r6)
  80ca38:	003fdf06 	br	80c9b8 <__register_exitproc+0x50>
  80ca3c:	00802074 	movhi	r2,129
  80ca40:	10819104 	addi	r2,r2,1604
  80ca44:	100b883a 	mov	r5,r2
  80ca48:	80805215 	stw	r2,328(r16)
  80ca4c:	003fd606 	br	80c9a8 <__register_exitproc+0x40>
  80ca50:	00800034 	movhi	r2,0
  80ca54:	10800004 	addi	r2,r2,0
  80ca58:	1000021e 	bne	r2,zero,80ca64 <__register_exitproc+0xfc>
  80ca5c:	013fffc4 	movi	r4,-1
  80ca60:	003fdc06 	br	80c9d4 <__register_exitproc+0x6c>
  80ca64:	01006404 	movi	r4,400
  80ca68:	103ee83a 	callr	r2
  80ca6c:	1007883a 	mov	r3,r2
  80ca70:	103ffa26 	beq	r2,zero,80ca5c <__register_exitproc+0xf4>
  80ca74:	80805217 	ldw	r2,328(r16)
  80ca78:	180b883a 	mov	r5,r3
  80ca7c:	18000115 	stw	zero,4(r3)
  80ca80:	18800015 	stw	r2,0(r3)
  80ca84:	80c05215 	stw	r3,328(r16)
  80ca88:	18006215 	stw	zero,392(r3)
  80ca8c:	18006315 	stw	zero,396(r3)
  80ca90:	0009883a 	mov	r4,zero
  80ca94:	883fc826 	beq	r17,zero,80c9b8 <__register_exitproc+0x50>
  80ca98:	003fd706 	br	80c9f8 <__register_exitproc+0x90>

0080ca9c <register_fini>:
  80ca9c:	f800283a 	ret

0080caa0 <__call_exitprocs>:
  80caa0:	00802074 	movhi	r2,129
  80caa4:	10ba9404 	addi	r2,r2,-5552
  80caa8:	10800017 	ldw	r2,0(r2)
  80caac:	defff304 	addi	sp,sp,-52
  80cab0:	df000b15 	stw	fp,44(sp)
  80cab4:	d8800115 	stw	r2,4(sp)
  80cab8:	00800034 	movhi	r2,0
  80cabc:	10800004 	addi	r2,r2,0
  80cac0:	1005003a 	cmpeq	r2,r2,zero
  80cac4:	d8800215 	stw	r2,8(sp)
  80cac8:	d8800117 	ldw	r2,4(sp)
  80cacc:	dd400815 	stw	r21,32(sp)
  80cad0:	dd000715 	stw	r20,28(sp)
  80cad4:	10805204 	addi	r2,r2,328
  80cad8:	dfc00c15 	stw	ra,48(sp)
  80cadc:	ddc00a15 	stw	r23,40(sp)
  80cae0:	dd800915 	stw	r22,36(sp)
  80cae4:	dcc00615 	stw	r19,24(sp)
  80cae8:	dc800515 	stw	r18,20(sp)
  80caec:	dc400415 	stw	r17,16(sp)
  80caf0:	dc000315 	stw	r16,12(sp)
  80caf4:	282b883a 	mov	r21,r5
  80caf8:	2039883a 	mov	fp,r4
  80cafc:	d8800015 	stw	r2,0(sp)
  80cb00:	2829003a 	cmpeq	r20,r5,zero
  80cb04:	d8800117 	ldw	r2,4(sp)
  80cb08:	14405217 	ldw	r17,328(r2)
  80cb0c:	88001026 	beq	r17,zero,80cb50 <__call_exitprocs+0xb0>
  80cb10:	ddc00017 	ldw	r23,0(sp)
  80cb14:	88800117 	ldw	r2,4(r17)
  80cb18:	8c802204 	addi	r18,r17,136
  80cb1c:	143fffc4 	addi	r16,r2,-1
  80cb20:	80000916 	blt	r16,zero,80cb48 <__call_exitprocs+0xa8>
  80cb24:	05bfffc4 	movi	r22,-1
  80cb28:	a000151e 	bne	r20,zero,80cb80 <__call_exitprocs+0xe0>
  80cb2c:	8409883a 	add	r4,r16,r16
  80cb30:	2105883a 	add	r2,r4,r4
  80cb34:	1485883a 	add	r2,r2,r18
  80cb38:	10c02017 	ldw	r3,128(r2)
  80cb3c:	a8c01126 	beq	r21,r3,80cb84 <__call_exitprocs+0xe4>
  80cb40:	843fffc4 	addi	r16,r16,-1
  80cb44:	85bff81e 	bne	r16,r22,80cb28 <__call_exitprocs+0x88>
  80cb48:	d8800217 	ldw	r2,8(sp)
  80cb4c:	10003126 	beq	r2,zero,80cc14 <__call_exitprocs+0x174>
  80cb50:	dfc00c17 	ldw	ra,48(sp)
  80cb54:	df000b17 	ldw	fp,44(sp)
  80cb58:	ddc00a17 	ldw	r23,40(sp)
  80cb5c:	dd800917 	ldw	r22,36(sp)
  80cb60:	dd400817 	ldw	r21,32(sp)
  80cb64:	dd000717 	ldw	r20,28(sp)
  80cb68:	dcc00617 	ldw	r19,24(sp)
  80cb6c:	dc800517 	ldw	r18,20(sp)
  80cb70:	dc400417 	ldw	r17,16(sp)
  80cb74:	dc000317 	ldw	r16,12(sp)
  80cb78:	dec00d04 	addi	sp,sp,52
  80cb7c:	f800283a 	ret
  80cb80:	8409883a 	add	r4,r16,r16
  80cb84:	88c00117 	ldw	r3,4(r17)
  80cb88:	2105883a 	add	r2,r4,r4
  80cb8c:	1445883a 	add	r2,r2,r17
  80cb90:	18ffffc4 	addi	r3,r3,-1
  80cb94:	11800217 	ldw	r6,8(r2)
  80cb98:	1c001526 	beq	r3,r16,80cbf0 <__call_exitprocs+0x150>
  80cb9c:	10000215 	stw	zero,8(r2)
  80cba0:	303fe726 	beq	r6,zero,80cb40 <__call_exitprocs+0xa0>
  80cba4:	00c00044 	movi	r3,1
  80cba8:	1c06983a 	sll	r3,r3,r16
  80cbac:	90804017 	ldw	r2,256(r18)
  80cbb0:	8cc00117 	ldw	r19,4(r17)
  80cbb4:	1884703a 	and	r2,r3,r2
  80cbb8:	10001426 	beq	r2,zero,80cc0c <__call_exitprocs+0x16c>
  80cbbc:	90804117 	ldw	r2,260(r18)
  80cbc0:	1884703a 	and	r2,r3,r2
  80cbc4:	10000c1e 	bne	r2,zero,80cbf8 <__call_exitprocs+0x158>
  80cbc8:	2105883a 	add	r2,r4,r4
  80cbcc:	1485883a 	add	r2,r2,r18
  80cbd0:	11400017 	ldw	r5,0(r2)
  80cbd4:	e009883a 	mov	r4,fp
  80cbd8:	303ee83a 	callr	r6
  80cbdc:	88800117 	ldw	r2,4(r17)
  80cbe0:	98bfc81e 	bne	r19,r2,80cb04 <__call_exitprocs+0x64>
  80cbe4:	b8800017 	ldw	r2,0(r23)
  80cbe8:	147fd526 	beq	r2,r17,80cb40 <__call_exitprocs+0xa0>
  80cbec:	003fc506 	br	80cb04 <__call_exitprocs+0x64>
  80cbf0:	8c000115 	stw	r16,4(r17)
  80cbf4:	003fea06 	br	80cba0 <__call_exitprocs+0x100>
  80cbf8:	2105883a 	add	r2,r4,r4
  80cbfc:	1485883a 	add	r2,r2,r18
  80cc00:	11000017 	ldw	r4,0(r2)
  80cc04:	303ee83a 	callr	r6
  80cc08:	003ff406 	br	80cbdc <__call_exitprocs+0x13c>
  80cc0c:	303ee83a 	callr	r6
  80cc10:	003ff206 	br	80cbdc <__call_exitprocs+0x13c>
  80cc14:	88800117 	ldw	r2,4(r17)
  80cc18:	1000081e 	bne	r2,zero,80cc3c <__call_exitprocs+0x19c>
  80cc1c:	89000017 	ldw	r4,0(r17)
  80cc20:	20000726 	beq	r4,zero,80cc40 <__call_exitprocs+0x1a0>
  80cc24:	b9000015 	stw	r4,0(r23)
  80cc28:	8809883a 	mov	r4,r17
  80cc2c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80cc30:	bc400017 	ldw	r17,0(r23)
  80cc34:	883fb71e 	bne	r17,zero,80cb14 <__call_exitprocs+0x74>
  80cc38:	003fc506 	br	80cb50 <__call_exitprocs+0xb0>
  80cc3c:	89000017 	ldw	r4,0(r17)
  80cc40:	882f883a 	mov	r23,r17
  80cc44:	2023883a 	mov	r17,r4
  80cc48:	883fb21e 	bne	r17,zero,80cb14 <__call_exitprocs+0x74>
  80cc4c:	003fc006 	br	80cb50 <__call_exitprocs+0xb0>

0080cc50 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80cc50:	defffd04 	addi	sp,sp,-12
  80cc54:	df000215 	stw	fp,8(sp)
  80cc58:	df000204 	addi	fp,sp,8
  80cc5c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80cc60:	e0bfff17 	ldw	r2,-4(fp)
  80cc64:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80cc68:	e0bffe17 	ldw	r2,-8(fp)
  80cc6c:	1005003a 	cmpeq	r2,r2,zero
  80cc70:	1000021e 	bne	r2,zero,80cc7c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80cc74:	002af070 	cmpltui	zero,zero,43969
  80cc78:	00000106 	br	80cc80 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80cc7c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80cc80:	e037883a 	mov	sp,fp
  80cc84:	df000017 	ldw	fp,0(sp)
  80cc88:	dec00104 	addi	sp,sp,4
  80cc8c:	f800283a 	ret

0080cc90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80cc90:	defffd04 	addi	sp,sp,-12
  80cc94:	dfc00215 	stw	ra,8(sp)
  80cc98:	df000115 	stw	fp,4(sp)
  80cc9c:	df000104 	addi	fp,sp,4
  80cca0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80cca4:	e13fff17 	ldw	r4,-4(fp)
  80cca8:	080cc500 	call	80cc50 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80ccac:	003fff06 	br	80ccac <_exit+0x1c>
  80ccb0:	0080ca9c 	xori	r2,zero,810
